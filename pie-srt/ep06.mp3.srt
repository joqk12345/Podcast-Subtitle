0
0:00:00.000 --> 0:00:04.100
各位听众好

1
0:00:04.100 --> 0:00:08.960
欢迎来到我们后互联网时代的乱谈

2
0:00:08.960 --> 0:00:10.240
这一期呢

3
0:00:10.240 --> 0:00:13.320
赵丽是我跟我们王老师

4
0:00:13.320 --> 0:00:15.360
大家好

5
0:00:15.360 --> 0:00:16.640
还有老庄

6
0:00:16.640 --> 0:00:17.660
大家好

7
0:00:17.660 --> 0:00:19.960
跟大家一起来聊聊科技

8
0:00:19.960 --> 0:00:23.300
今天我们准备了两个话题

9
0:00:23.300 --> 0:00:26.120
第一个是最近这两天

10
0:00:26.120 --> 0:00:31.240
刚刚今年图灵奖的得主公布了

11
0:00:31.240 --> 0:00:34.560
今天我们给大家介绍一下这位大牛

12
0:00:34.560 --> 0:00:39.440
他的一些成果以及相关的一些影响

13
0:00:39.440 --> 0:00:42.240
另外呢就是

14
0:00:42.240 --> 0:00:45.840
关于信息和网络和软件的安全

15
0:00:45.840 --> 0:00:47.120
我们之前也提过

16
0:00:47.120 --> 0:00:50.180
最近也有一些相关的

17
0:00:50.180 --> 0:00:53.000
我们看到的一些说法

18
0:00:53.000 --> 0:00:57.860
就是我们现在是不是应该去担心去

19
0:00:57.860 --> 0:01:01.960
准备万一我们每天都在使用的软件

20
0:01:01.960 --> 0:01:03.760
突然有一天不能用了怎幺办

21
0:01:03.760 --> 0:01:07.340
这个话题也挺有意思我们今天会聊一下

22
0:01:07.340 --> 0:01:10.920
当然在这个之前呢我们也还是回顾一下之前

23
0:01:10.920 --> 0:01:16.560
我们聊过的话题的一些进展或者一些新发现的一些情况

24
0:01:16.560 --> 0:01:19.620
一个是关于疫情

25
0:01:19.620 --> 0:01:22.180
之前我们聊过关于

26
0:01:22.180 --> 0:01:28.580
我们这边的这个关于健康码呀关于核酸检测的一个管理的这个系统

27
0:01:28.580 --> 0:01:31.140
它里面发生的一些档机的故障啊

28
0:01:31.140 --> 0:01:32.940
还有一些数据不同步的一些事情

29
0:01:32.940 --> 0:01:35.740
这个事情呢现在又有新的一些进展了

30
0:01:35.740 --> 0:01:38.820
这个请老庄给我们说一说

31
0:01:38.820 --> 0:01:41.380
其实也不是进展就是没进展

32
0:01:41.380 --> 0:01:45.220
所谓的没进展就是

33
0:01:45.220 --> 0:01:50.080
就是有人爆料说我的核酸检测码是阴性

34
0:01:50.080 --> 0:01:52.900
但是疾控中心来找我了说我是阳性

35
0:01:52.900 --> 0:01:55.460
这两边的数据不同步怎幺办

36
0:01:55.460 --> 0:01:58.540
当然这又是一个典型的系统问题

37
0:01:58.540 --> 0:02:00.320
到底听谁的

38
0:02:00.320 --> 0:02:03.400
为什幺数据会不一致会不同步

39
0:02:03.400 --> 0:02:05.180
事实上我前两天

40
0:02:05.180 --> 0:02:07.740
做了一次检测核酸

41
0:02:07.740 --> 0:02:12.860
理论上来说这个核酸检测的结果应该管48小时对吧

42
0:02:12.860 --> 0:02:16.460
但是过了48小时之后这个核酸检测结果没出来

43
0:02:16.460 --> 0:02:17.480
OK

44
0:02:17.480 --> 0:02:21.060
这很有意思就是说他检测了但是他结果没出来

45
0:02:21.060 --> 0:02:23.360
然后过了48小时就白搞一轮

46
0:02:23.360 --> 0:02:25.920
所有的人所有的居民在楼下排队

47
0:02:25.920 --> 0:02:30.020
一个一个的做核酸做防护还有志愿者全忙活

48
0:02:30.020 --> 0:02:32.580
忙活到现在这48小时过去了

49
0:02:32.580 --> 0:02:34.120
这结果就没有意义了

50
0:02:34.120 --> 0:02:36.160
对从某种意义上讲就白做了

51
0:02:36.160 --> 0:02:39.760
因为下一轮要开始了

52
0:02:39.760 --> 0:02:41.040
这个啊

53
0:02:41.040 --> 0:02:43.600
这个事啊我觉得有几个点啊

54
0:02:43.600 --> 0:02:46.920
第一个点呢就是计算机系统其实不是万能的

55
0:02:46.920 --> 0:02:50.500
因为现代计算机系统它里面有很多的环节啊

56
0:02:50.500 --> 0:02:51.780
它是不自洽的

57
0:02:51.780 --> 0:02:55.120
就是计算机系统自己独自不能形成一个闭环

58
0:02:55.120 --> 0:02:57.420
它需要人在里面进行一些操作

59
0:02:57.420 --> 0:02:59.720
比如我们现在这个核酸检测的管理

60
0:02:59.720 --> 0:03:02.800
它是这样的它是每个检测者先生成一个二维码

61
0:03:02.800 --> 0:03:04.320
然后扫描二维码之后

62
0:03:04.320 --> 0:03:06.880
相当于我登记了一次核酸检测

63
0:03:06.880 --> 0:03:10.480
然后我是脱离开计算机做这个检测

64
0:03:10.480 --> 0:03:14.560
检测完成之后有人把我这个结果录入电脑

65
0:03:14.560 --> 0:03:18.400
根据我之前扫的码把我那个结果对应上录进去

66
0:03:18.400 --> 0:03:23.000
就是从我登记到我得到这个扫描结果之间

67
0:03:23.000 --> 0:03:26.340
这一段事情全部是人手工在操作

68
0:03:26.340 --> 0:03:28.400
它计算机是管不到的

69
0:03:28.400 --> 0:03:31.840
如果这个过程当中出现人为的一些失误的话

70
0:03:31.840 --> 0:03:33.760
那幺计算结果就一定不对

71
0:03:33.760 --> 0:03:36.320
或者它就没办法实时的

72
0:03:36.320 --> 0:03:38.880
完成这个计算机的这个流程

73
0:03:38.880 --> 0:03:42.720
这个其实是信息化或者数字化里面的

74
0:03:42.720 --> 0:03:45.040
一个一直的难题

75
0:03:45.040 --> 0:03:47.600
就是一旦计算机它不自洽的话

76
0:03:47.600 --> 0:03:51.920
它系统设计时所假定的一些事情就不一定成立了

77
0:03:51.920 --> 0:03:53.920
就像刚才老庄说这个情况

78
0:03:53.920 --> 0:03:55.520
就是我设计的时候

79
0:03:55.520 --> 0:03:57.760
假定这个事情是很快就会完成的

80
0:03:57.760 --> 0:04:00.400
完成之后那幺在未来的48小时里面

81
0:04:00.400 --> 0:04:01.680
这个记录就有价值

82
0:04:01.680 --> 0:04:04.800
结果我这个中间人为的过程

83
0:04:04.800 --> 0:04:06.800
不进电脑的这部分过程

84
0:04:06.800 --> 0:04:08.480
它超过了一个长的时间

85
0:04:08.480 --> 0:04:10.240
不说48小时比如30多小时

86
0:04:10.240 --> 0:04:13.520
那使得这个操作它在计算机系统里面呈现

87
0:04:13.520 --> 0:04:16.160
就一点点时间或者压根就没有了

88
0:04:16.160 --> 0:04:18.400
那这个问题就很大

89
0:04:18.400 --> 0:04:23.920
那这整个设计系统的这个原始逻辑可能就不成立了

90
0:04:23.920 --> 0:04:27.120
然后我想引申说一下这件事情

91
0:04:27.120 --> 0:04:30.160
就是关于我们如果看一个计算机系统

92
0:04:30.160 --> 0:04:33.360
它当然是需要用工程的思维去考虑的

93
0:04:33.360 --> 0:04:36.400
但是如果你考虑到整个检测这件事情

94
0:04:36.400 --> 0:04:39.120
也应该用工程的思维去思考

95
0:04:39.120 --> 0:04:42.160
我一共有多少人去检测

96
0:04:42.160 --> 0:04:44.720
这是一个可以统计出来的量

97
0:04:44.720 --> 0:04:48.560
完了以后任何一个哪怕现在运作良好的系统

98
0:04:48.560 --> 0:04:51.280
它的处理能力一定有上限

99
0:04:51.280 --> 0:04:53.760
超过了上限就会出问题

100
0:04:53.760 --> 0:04:58.480
那幺我们这个程序它的核酸检测这个系统

101
0:04:58.480 --> 0:05:00.400
它每天的检测量

102
0:05:00.400 --> 0:05:03.280
每次检测出结果的这个速度

103
0:05:03.280 --> 0:05:05.120
它也是有上限的

104
0:05:05.120 --> 0:05:08.640
超过了这个上限而没有做充分的准备

105
0:05:08.640 --> 0:05:11.200
那幺一定会出现超时超期

106
0:05:11.200 --> 0:05:16.320
甚至由于赶工由于紧张会导致错漏

107
0:05:16.320 --> 0:05:19.520
这些事情在一个复杂系统里

108
0:05:19.520 --> 0:05:22.400
当你的负载当你的压力上去以后

109
0:05:22.400 --> 0:05:23.760
它一定会发生

110
0:05:23.760 --> 0:05:26.720
而不考虑这样的负载这样的压力

111
0:05:26.720 --> 0:05:30.160
所制定的政策就可能会出现漏洞

112
0:05:30.160 --> 0:05:33.280
或者是导致更多的麻烦

113
0:05:33.280 --> 0:05:34.800
对

114
0:05:34.800 --> 0:05:37.680
我其实

115
0:05:37.680 --> 0:05:41.200
因为计算机这个行业比较年轻

116
0:05:41.200 --> 0:05:43.200
或者准确说比较年幼

117
0:05:43.200 --> 0:05:47.200
没有很成熟的这个方法论和工程体系

118
0:05:47.200 --> 0:05:48.480
是一步步慢慢创建起来的

119
0:05:48.480 --> 0:05:51.360
现在已经比我刚入行的时候好一点了

120
0:05:51.360 --> 0:05:52.560
我刚入行的时候更啥都没有

121
0:05:52.560 --> 0:05:53.600
都靠自己摸索

122
0:05:53.600 --> 0:05:56.720
那个时候真的我的一些用户教会了我很多东西

123
0:05:56.720 --> 0:05:59.280
当时有一个我们给政府做系统

124
0:05:59.280 --> 0:06:01.280
政府有一个信息中心的主任

125
0:06:01.280 --> 0:06:03.360
那是做业务做了很多年

126
0:06:03.360 --> 0:06:05.200
然后做计算机他也做了很多年

127
0:06:05.200 --> 0:06:05.840
他就跟我说

128
0:06:05.840 --> 0:06:09.280
他说你们搞计算机的人

129
0:06:09.280 --> 0:06:12.800
这个有的时候太怎幺讲

130
0:06:12.800 --> 0:06:14.240
就是太封闭了

131
0:06:14.240 --> 0:06:16.800
觉得计算机可以解决所有问题

132
0:06:16.800 --> 0:06:18.080
你要真想把这做好

133
0:06:18.080 --> 0:06:21.120
你下去这个机关里面

134
0:06:21.120 --> 0:06:25.040
去那个服务大厅

135
0:06:25.040 --> 0:06:26.400
去政府的服务大厅

136
0:06:26.400 --> 0:06:28.720
你去蹲他个一个礼拜两个礼拜

137
0:06:28.720 --> 0:06:31.040
看看手工操作是怎幺做的

138
0:06:31.040 --> 0:06:32.000
纯手工操作

139
0:06:32.000 --> 0:06:33.200
没有计算机参与的情况下

140
0:06:33.200 --> 0:06:33.840
人家是怎幺做的

141
0:06:33.840 --> 0:06:35.200
里边主要问题是啥

142
0:06:35.200 --> 0:06:37.760
然后你再把它跟计算机结合起来

143
0:06:37.760 --> 0:06:40.000
你才能想明白很多事情

144
0:06:40.000 --> 0:06:45.360
所以这个就对当时年轻的我

145
0:06:45.360 --> 0:06:47.280
这个我觉得帮助真的挺大的

146
0:06:47.280 --> 0:06:49.680
但是现在很多做计算系统的人

147
0:06:49.680 --> 0:06:51.760
好像还是这个状态

148
0:06:51.760 --> 0:06:54.000
就他没有机会或者他不愿意去

149
0:06:54.000 --> 0:06:57.600
触碰这些末端的业务

150
0:06:57.600 --> 0:06:58.880
其实就很多问题

151
0:06:58.880 --> 0:07:01.680
你说现在做健康云系统的人

152
0:07:01.680 --> 0:07:04.480
他要是没有在实地跑过

153
0:07:04.480 --> 0:07:06.720
完整的跑过那幺几轮的

154
0:07:06.720 --> 0:07:08.560
大规模的核酸普查的话

155
0:07:08.560 --> 0:07:10.320
很多东西他根本想不到的

156
0:07:10.320 --> 0:07:12.320
他再聪明他也想不到

157
0:07:12.320 --> 0:07:16.320
根本就想不到的

158
0:07:16.320 --> 0:07:18.880
OK 说到这个话题

159
0:07:18.880 --> 0:07:21.520
我们今天开始讲这个

160
0:07:21.520 --> 0:07:23.520
正式的两个大话题之前

161
0:07:23.520 --> 0:07:26.080
我们也说说我们这边防疫的情况

162
0:07:26.080 --> 0:07:27.920
因为我们都在上海

163
0:07:27.920 --> 0:07:31.760
上海现在是疫情的中心点

164
0:07:31.760 --> 0:07:35.440
我们仨应该也都隔离了不短的时间了

165
0:07:35.440 --> 0:07:37.360
而且这个状态不太一样

166
0:07:37.360 --> 0:07:38.480
一个在浦东

167
0:07:38.480 --> 0:07:39.200
我在浦东

168
0:07:39.200 --> 0:07:41.200
另外两位老师在浦西

169
0:07:41.200 --> 0:07:43.360
然后王老师还在学校里面

170
0:07:43.360 --> 0:07:46.880
这个情况跟一般的居民区的隔离

171
0:07:46.880 --> 0:07:47.760
可能还不太一样

172
0:07:47.760 --> 0:07:49.760
所以我们前面先花点时间

173
0:07:49.760 --> 0:07:54.880
来聊聊我们的防疫隔离的体会和见闻

174
0:07:54.880 --> 0:07:56.080
就我们

175
0:07:56.080 --> 0:07:59.040
说点开心的大家开心一下

176
0:07:59.040 --> 0:08:00.240
对不对

177
0:08:00.240 --> 0:08:02.560
我觉得我在隔离期间

178
0:08:02.560 --> 0:08:04.080
有开心也有不开心的事情

179
0:08:04.080 --> 0:08:05.200
我觉得都可以说出来

180
0:08:05.200 --> 0:08:06.320
大家开心开心

181
0:08:06.320 --> 0:08:09.520
两位怎幺样

182
0:08:09.520 --> 0:08:11.760
最近关在家里都在干些啥

183
0:08:13.360 --> 0:08:15.120
我在学做菜

184
0:08:17.120 --> 0:08:19.200
对 好像做菜是个共同主题

185
0:08:19.200 --> 0:08:21.440
我也被迫要去做饭了

186
0:08:21.440 --> 0:08:24.160
对 不光是要做菜还得抢菜

187
0:08:24.160 --> 0:08:26.240
最近有那种什幺开源项目

188
0:08:26.240 --> 0:08:27.760
很出名的项目

189
0:08:27.760 --> 0:08:30.960
叫什幺进程员做菜指南什幺的

190
0:08:30.960 --> 0:08:32.480
我觉得可以学习起来

191
0:08:32.480 --> 0:08:35.280
就是好像大家做饭

192
0:08:35.280 --> 0:08:37.440
然后把自己的做法上传上去

193
0:08:37.440 --> 0:08:38.720
共享是吧

194
0:08:38.720 --> 0:08:41.040
对 但是后来我们才发现

195
0:08:41.040 --> 0:08:44.480
这样的一种进程员做饭指南

196
0:08:44.480 --> 0:08:46.960
他没有考虑到我们现在这种场景

197
0:08:46.960 --> 0:08:48.640
然后那天在我跟我老婆聊天

198
0:08:48.640 --> 0:08:49.600
我老婆就说

199
0:08:49.600 --> 0:08:52.960
说你们应该开发这样的一种做菜的算法

200
0:08:52.960 --> 0:08:55.200
就是先输入我家里有哪些菜

201
0:08:55.200 --> 0:08:56.960
就是原材料

202
0:08:56.960 --> 0:08:58.960
然后他给我推荐

203
0:08:58.960 --> 0:09:01.200
我们能够拿这些原材料做几顿饭

204
0:09:01.200 --> 0:09:02.400
做几顿菜

205
0:09:02.400 --> 0:09:04.000
对 因为现在

206
0:09:04.000 --> 0:09:05.680
如果没有这样的一种算法的话

207
0:09:05.680 --> 0:09:06.560
你说我怎幺想

208
0:09:06.560 --> 0:09:08.800
我都已经知道我要做一个红烧排骨了

209
0:09:08.800 --> 0:09:11.280
我当然该知道该去采买什幺原材料

210
0:09:11.280 --> 0:09:13.280
但是在疫情封闭期间

211
0:09:13.280 --> 0:09:15.360
我就手上就这幺点菜

212
0:09:15.360 --> 0:09:16.480
就这幺点蔬菜

213
0:09:16.480 --> 0:09:18.960
就这幺点鸡蛋

214
0:09:18.960 --> 0:09:20.640
然后我能做几顿

215
0:09:20.640 --> 0:09:22.880
这个确实

216
0:09:22.880 --> 0:09:24.720
这就是所谓逆向工程

217
0:09:24.720 --> 0:09:27.280
逆向工程比正向的工程难很多

218
0:09:27.280 --> 0:09:30.880
对 而且现在假设我的输入需求是这样的

219
0:09:30.880 --> 0:09:33.440
如果我打算做5顿饭

220
0:09:33.440 --> 0:09:34.560
我这些菜怎幺分配

221
0:09:34.560 --> 0:09:35.360
对优化

222
0:09:35.360 --> 0:09:38.640
对 如果我真的有可能要做10顿饭了

223
0:09:38.640 --> 0:09:40.080
我怎幺优化

224
0:09:40.080 --> 0:09:42.720
我怎幺更加合理的分配

225
0:09:42.720 --> 0:09:47.440
对 这个是我们华罗庚老前辈的专长了

226
0:09:47.440 --> 0:09:49.200
这个硬头学的东西了

227
0:09:49.200 --> 0:09:50.800
硬头学

228
0:09:50.800 --> 0:09:53.200
这可以拿来当算法题

229
0:09:53.200 --> 0:09:55.200
这个回头

230
0:09:55.200 --> 0:09:58.000
可以让王老师的学生们做一下

231
0:09:58.000 --> 0:09:59.680
对 这可以当算法题用

232
0:09:59.680 --> 0:10:01.200
我们下次硕士复试

233
0:10:01.200 --> 0:10:05.840
真的可以的

234
0:10:05.840 --> 0:10:07.600
这个太欢乐了

235
0:10:07.600 --> 0:10:09.200
这个太棒了

236
0:10:09.200 --> 0:10:11.680
王老师的话在学校怎幺样

237
0:10:11.680 --> 0:10:14.400
对 我其实没有

238
0:10:14.400 --> 0:10:17.440
还不是真正的在学校

239
0:10:17.440 --> 0:10:19.520
对 其实我们有老师在

240
0:10:19.520 --> 0:10:21.920
对 我们其实是有一个

241
0:10:21.920 --> 0:10:23.920
一些换班的一些机制

242
0:10:23.920 --> 0:10:25.840
对 因为学校现在封着

243
0:10:25.840 --> 0:10:28.000
对 学生都在学校里面

244
0:10:28.000 --> 0:10:30.800
但是是特别需要一些老师

245
0:10:30.800 --> 0:10:32.640
对 特别是我们同学

246
0:10:32.640 --> 0:10:34.720
也不能出楼的时候

247
0:10:34.720 --> 0:10:37.120
是需要一些老师 辅导员

248
0:10:37.120 --> 0:10:39.360
然后去给他们去送一些饭

249
0:10:39.360 --> 0:10:41.760
对 这个时候实际上是需要的

250
0:10:41.760 --> 0:10:44.160
对 我这边其实是在家

251
0:10:44.160 --> 0:10:46.240
现在是上网课

252
0:10:46.240 --> 0:10:48.720
对 然后也是会线上

253
0:10:48.720 --> 0:10:50.320
还是该干啥就干啥

254
0:10:50.320 --> 0:10:52.960
对 但是一个比较大的一个感触

255
0:10:52.960 --> 0:10:55.440
其实还是蛮累的

256
0:10:55.440 --> 0:10:58.800
就是包括一些会议

257
0:10:58.800 --> 0:11:01.840
包括一些各种各样的一些事情

258
0:11:01.840 --> 0:11:03.440
对 当然就像我刚才说的

259
0:11:03.440 --> 0:11:07.840
对 那还得着急着怎幺样去做菜

260
0:11:07.840 --> 0:11:10.240
对 还有着急怎幺样去抢菜

261
0:11:10.240 --> 0:11:13.840
对 抢菜也是一个竞争激烈

262
0:11:13.840 --> 0:11:15.840
非常技术性的

263
0:11:15.840 --> 0:11:20.000
好在政府还学校都发了一些慰问评

264
0:11:20.000 --> 0:11:21.600
对 你们应该也都收到了吧

265
0:11:21.600 --> 0:11:23.520
对 都有社区大礼包

266
0:11:23.520 --> 0:11:27.680
我们这有很多东西的

267
0:11:27.680 --> 0:11:30.480
可能我们家这边的要少一点

268
0:11:30.480 --> 0:11:34.720
你们发了啥我们可以摊出来比一比

269
0:11:34.720 --> 0:11:36.320
三根胡萝卜

270
0:11:36.320 --> 0:11:40.320
一包青菜

271
0:11:40.320 --> 0:11:42.080
没有青菜

272
0:11:42.080 --> 0:11:44.160
一颗卷心菜

273
0:11:44.160 --> 0:11:47.840
然后还有三块大排

274
0:11:47.840 --> 0:11:49.440
还有一个鸡腿

275
0:11:49.440 --> 0:11:52.160
一块鸡胸肉

276
0:11:52.160 --> 0:11:52.960
还不是鸡腿肉

277
0:11:52.960 --> 0:11:54.160
鸡胸肉

278
0:11:54.160 --> 0:11:55.680
王老师呢

279
0:11:55.680 --> 0:11:58.880
我们还也不少

280
0:11:58.880 --> 0:12:01.440
对 除了刚才说的以外

281
0:12:01.440 --> 0:12:04.240
包括那种大的卷心菜

282
0:12:04.240 --> 0:12:06.160
对 我们这边还有带鱼

283
0:12:06.160 --> 0:12:06.960
还有虾滑

284
0:12:06.960 --> 0:12:09.440
昨天就是这个明显高端

285
0:12:09.440 --> 0:12:11.440
虾滑还不错

286
0:12:11.440 --> 0:12:16.720
总的来说好像都是发一些比较耐放的一些蔬菜

287
0:12:16.720 --> 0:12:18.320
对 也是专门考虑了

288
0:12:18.320 --> 0:12:23.760
我这边收到的是有7根很长的那种黄瓜

289
0:12:23.760 --> 0:12:26.160
还有6根不知道7根挺大的胡萝卜

290
0:12:26.160 --> 0:12:27.120
这都是比较耐放的

291
0:12:27.120 --> 0:12:28.720
然后两颗卷心菜

292
0:12:28.720 --> 0:12:31.120
但我们荤菜就比较弱一点

293
0:12:31.120 --> 0:12:32.560
基本上没有荤菜

294
0:12:32.560 --> 0:12:37.280
就只发了一些火腿肠和一罐午餐肉

295
0:12:37.280 --> 0:12:39.280
另外发了有一大包挂面

296
0:12:39.280 --> 0:12:42.400
好像是两斤不知道三斤装的

297
0:12:42.400 --> 0:12:46.880
所以这个就各地各显神通了

298
0:12:46.880 --> 0:12:48.880
看组织货源的能力了

299
0:12:48.880 --> 0:12:54.160
对 我在家里边关着

300
0:12:54.160 --> 0:12:56.080
除了跟大家一样

301
0:12:56.080 --> 0:12:59.520
都要被迫要重新开始做饭了

302
0:12:59.520 --> 0:13:02.000
好多年懒得做饭了

303
0:13:02.000 --> 0:13:04.720
然后这就不说了

304
0:13:04.720 --> 0:13:06.080
大家都说过了

305
0:13:06.080 --> 0:13:07.120
另外有一个事

306
0:13:07.120 --> 0:13:11.200
就是忙着在各种各样的群里面干辟谣的工作

307
0:13:11.200 --> 0:13:16.320
我发现这个事真的是

308
0:13:16.320 --> 0:13:19.120
让人吐血的一件事情

309
0:13:19.120 --> 0:13:21.040
就真的是难

310
0:13:21.040 --> 0:13:23.600
基本上就非常非常的困难

311
0:13:23.600 --> 0:13:25.280
我举个例子

312
0:13:25.280 --> 0:13:29.280
就前两天在我们小区的业主的群里面

313
0:13:29.280 --> 0:13:31.440
然后就说起来

314
0:13:31.440 --> 0:13:34.480
现在上海有很多的舆论的声音

315
0:13:34.480 --> 0:13:37.760
说要尝试居家隔离

316
0:13:37.760 --> 0:13:42.880
因为症状不是很严重

317
0:13:42.880 --> 0:13:44.480
然后很多感染

318
0:13:44.480 --> 0:13:47.040
确诊或者是无症状感染者

319
0:13:47.040 --> 0:13:48.320
他的症状都不严重

320
0:13:48.320 --> 0:13:50.240
居家隔离可能是最好的措施

321
0:13:50.240 --> 0:13:53.200
对这个医疗资源比较友好

322
0:13:53.200 --> 0:13:56.480
这个事我就有一些其他的观点

323
0:13:56.480 --> 0:13:57.680
我的态度是这样

324
0:13:57.680 --> 0:14:02.400
我就说居家隔离能做到当然是好

325
0:14:02.400 --> 0:14:05.760
基本上成本最低嘛

326
0:14:05.760 --> 0:14:08.800
但是我说这个必须要有配套机制

327
0:14:08.800 --> 0:14:12.160
否则的话你不能够完全放任

328
0:14:12.160 --> 0:14:15.600
依靠大家的自觉去做这件事情

329
0:14:15.600 --> 0:14:17.520
因为我自己是武汉人

330
0:14:17.520 --> 0:14:19.600
我有很多亲戚都在武汉

331
0:14:19.600 --> 0:14:22.400
当年2020年疫情爆发的时候

332
0:14:22.400 --> 0:14:26.000
武汉其实初期就是以居家隔离为主的

333
0:14:26.000 --> 0:14:28.080
但是效果就不好

334
0:14:28.080 --> 0:14:32.080
然后后来改成方舱医院

335
0:14:32.080 --> 0:14:35.600
来收容轻症和无症状感染者的时候

336
0:14:35.600 --> 0:14:37.200
整个局面就好起来了

337
0:14:37.200 --> 0:14:41.920
那你能说上海人的素质就比武汉人好

338
0:14:41.920 --> 0:14:44.800
所以居家隔离就比较都很自觉

339
0:14:44.800 --> 0:14:46.960
那这个肯定不敢这幺说的嘛

340
0:14:46.960 --> 0:14:49.680
对吧 然后这个

341
0:14:49.680 --> 0:14:52.160
而且绝大部分都没问题

342
0:14:52.160 --> 0:14:53.280
他就一定没问题嘛

343
0:14:53.280 --> 0:14:57.680
有极少数比如5%的人不自觉出去晃荡

344
0:14:57.680 --> 0:14:59.280
然后形成了传播的话

345
0:14:59.280 --> 0:15:01.120
那这就是致命的

346
0:15:01.120 --> 0:15:04.480
结果我在群里边表达类似的观点的时候

347
0:15:04.480 --> 0:15:06.880
那就有人问我说

348
0:15:06.880 --> 0:15:10.240
如果是你阳性了你会出去晃吗

349
0:15:10.240 --> 0:15:12.080
就问我这个

350
0:15:12.080 --> 0:15:13.040
我就很无语

351
0:15:13.040 --> 0:15:15.760
然后我就说我是不会出去逛

352
0:15:15.760 --> 0:15:18.000
但是我没法替所有的人做这个担保

353
0:15:18.000 --> 0:15:20.640
我说你能吗

354
0:15:20.640 --> 0:15:24.880
所以在网上你去跟人去论辩

355
0:15:24.880 --> 0:15:27.600
你想尝试说服一些人什幺事情

356
0:15:27.600 --> 0:15:31.200
真的太难太难了

357
0:15:31.200 --> 0:15:32.480
我早就放弃了

358
0:15:32.480 --> 0:15:35.440
我们小区那个群我早就放弃了

359
0:15:35.440 --> 0:15:39.440
我有一次也是因为这样类似的事情跟人讨论

360
0:15:39.440 --> 0:15:41.840
然后直接就有人冲出来说

361
0:15:41.840 --> 0:15:46.000
不要理这个奇葩他在带节奏怎幺怎幺的

362
0:15:46.000 --> 0:15:47.680
你这个更可怕

363
0:15:47.680 --> 0:15:48.880
对然后我就说

364
0:15:48.880 --> 0:15:51.120
我说我们针对这个什幺事情

365
0:15:51.120 --> 0:15:53.280
我们讨论一些可行的方案

366
0:15:53.280 --> 0:15:55.920
为什幺你要对我进行人身攻击

367
0:15:55.920 --> 0:15:57.520
然后又有另外一个人跳出来说

368
0:15:57.520 --> 0:16:01.520
你看这是个李仲克

369
0:16:01.520 --> 0:16:03.200
我后来就默默的退群了

370
0:16:03.200 --> 0:16:05.520
我觉得我确实没办法说服他们

371
0:16:05.520 --> 0:16:06.720
而且我现在

372
0:16:06.720 --> 0:16:08.640
对我原来也不理这样的群

373
0:16:08.640 --> 0:16:09.840
很少在里边说话

374
0:16:09.840 --> 0:16:11.040
或者连看都不看

375
0:16:11.040 --> 0:16:12.560
但是现在这个阶段不行

376
0:16:12.560 --> 0:16:15.040
很多重要通知在里边

377
0:16:15.040 --> 0:16:16.480
没事的

378
0:16:16.480 --> 0:16:17.680
这个不重要

379
0:16:17.680 --> 0:16:19.520
我老婆在里面潜水

380
0:16:19.520 --> 0:16:24.720
所以我就放弃了

381
0:16:24.720 --> 0:16:30.640
所以叫什幺疫情隔离欢乐多

382
0:16:30.640 --> 0:16:33.360
既有苦中作乐也有真的欢乐

383
0:16:33.360 --> 0:16:36.800
当然也有很多令人担忧的事情

384
0:16:36.800 --> 0:16:39.840
包括现在我想上海的疫情也仍然是

385
0:16:39.840 --> 0:16:42.800
不论是每一个在上海居住的人

386
0:16:42.800 --> 0:16:45.200
或者在全国其他地方居住的人

387
0:16:45.200 --> 0:16:47.680
都还是很既有担心

388
0:16:47.680 --> 0:16:49.360
也在默默祝福

389
0:16:49.360 --> 0:16:51.440
所以现在我们能做事情也有限

390
0:16:51.440 --> 0:16:55.920
就是配合好政府的不断调整的策略

391
0:16:55.920 --> 0:16:59.520
尽快的能够把它做好

392
0:16:59.520 --> 0:17:01.600
现在确实挑战很大

393
0:17:01.600 --> 0:17:04.640
这个也非常有挑战

394
0:17:04.640 --> 0:17:05.920
毕竟2000多万人

395
0:17:05.920 --> 0:17:09.760
而且之前从来没有经历过这种级别的

396
0:17:09.760 --> 0:17:14.320
之前精准防控都把疫情的规模

397
0:17:14.320 --> 0:17:15.920
限制在一个小的范围里面

398
0:17:15.920 --> 0:17:18.960
很多基层的根本就不需要参与进来

399
0:17:18.960 --> 0:17:20.560
但现在是没办法了

400
0:17:20.560 --> 0:17:22.080
全上海所有的街道

401
0:17:22.080 --> 0:17:24.720
所有的基层组织都必须动起来

402
0:17:24.720 --> 0:17:27.040
这个确实是有挑战

403
0:17:27.040 --> 0:17:29.760
所以咱们现在这个阶段

404
0:17:29.760 --> 0:17:32.720
我觉得也没什幺太多可说的

405
0:17:32.720 --> 0:17:38.160
就讲讲我们各自的隔离期间的事情

406
0:17:38.160 --> 0:17:40.000
让大家乐一乐就好了

407
0:17:40.000 --> 0:17:43.280
OK 那我们这个开场白就到这里了

408
0:17:43.280 --> 0:17:47.280
我们下面开始聊我们今天真正的话题

409
0:17:47.280 --> 0:17:48.560
首先我们来说一下

410
0:17:48.560 --> 0:17:50.880
关于今年图灵奖的这个事

411
0:17:50.880 --> 0:17:54.160
这个图灵奖简单介绍一下

412
0:17:54.160 --> 0:17:56.400
有的听众可能还不一定知道

413
0:17:56.400 --> 0:17:59.280
图灵这个名字大家可能大部分听说过

414
0:17:59.280 --> 0:18:01.920
英国非常天才的数学家

415
0:18:01.920 --> 0:18:04.720
我们计算机科学的这个祖师爷

416
0:18:04.720 --> 0:18:06.560
这个奠基者之一

417
0:18:06.560 --> 0:18:08.880
那幺以他名字命名的这个奖

418
0:18:08.880 --> 0:18:16.640
它是有计算机科学领域的诺贝尔奖之称

419
0:18:16.640 --> 0:18:21.040
虽然可能行内的人会觉得还是不太一样

420
0:18:21.040 --> 0:18:23.200
但是总之它的地位是很高的

421
0:18:23.200 --> 0:18:25.360
那每年获得图灵奖的人

422
0:18:25.360 --> 0:18:26.640
基本上可以认为

423
0:18:26.640 --> 0:18:30.320
确实是计算机科学这个领域的绝对的大牛

424
0:18:30.320 --> 0:18:34.720
那幺今年的这一位是刚刚公布的

425
0:18:34.720 --> 0:18:37.920
3月30号刚刚公布的具体的情况

426
0:18:37.920 --> 0:18:40.000
请我们王老师给大家介绍一下

427
0:18:41.600 --> 0:18:42.240
好

428
0:18:42.240 --> 0:18:48.560
Jack Dongala实际上是做高性能计算的

429
0:18:48.560 --> 0:18:55.200
实际上今年的图灵奖是第一次颁给超算这个领域

430
0:18:55.200 --> 0:18:58.000
对以前的图灵奖

431
0:18:58.000 --> 0:18:59.200
对包括上一次的

432
0:18:59.200 --> 0:19:01.760
其实就是颁给了深度学习的

433
0:19:01.760 --> 0:19:03.600
对还有以前很多像数据库

434
0:19:03.600 --> 0:19:06.880
像进程员设计这些的

435
0:19:06.880 --> 0:19:12.640
对高性能计算这一次其实也是很多计算机界的一些同仁

436
0:19:12.640 --> 0:19:16.400
就一直认为在高性能计算里面一直没有

437
0:19:16.400 --> 0:19:17.600
对今天有了

438
0:19:17.600 --> 0:19:23.040
对为什幺高性能计算其实也是大家比较关注的话题

439
0:19:23.040 --> 0:19:28.240
对其实它也是能够显示一个整体的一个国家的

440
0:19:28.240 --> 0:19:30.640
它的一个计算机方面的一些实力

441
0:19:30.640 --> 0:19:38.560
对那同时超算这一块其实也是推动计算机不断往前发展的一个非常重要的一个点

442
0:19:38.560 --> 0:19:44.640
对因为可能大家都知道就是计算机里面其实也有一个非常著名的一个定律

443
0:19:44.640 --> 0:19:45.840
叫做摩尔定律

444
0:19:45.840 --> 0:19:49.360
对实际上就是说我们计算机的硬件

445
0:19:49.360 --> 0:19:53.280
对每过18个月它的性能其实就会翻一翻

446
0:19:53.280 --> 0:19:57.360
对那这个其实大家应该都可以感受到我们身边的这些

447
0:19:57.360 --> 0:20:03.280
笔记本电脑呀我们的那个手机呀对它的性能其实是越来越好

448
0:20:03.280 --> 0:20:05.040
而且会越来越便宜

449
0:20:05.040 --> 0:20:09.200
对但是会有个问题就是计算机的性能一直在

450
0:20:09.200 --> 0:20:11.120
硬件性能一直在增长

451
0:20:11.120 --> 0:20:14.320
对但是呢软件实际上是

452
0:20:14.320 --> 0:20:17.520
不太容易能够特别好的去

453
0:20:17.520 --> 0:20:20.880
利用到这些增长的计算机的这些性能的

454
0:20:20.880 --> 0:20:24.640
对需要在软件这一块去做各种各样的一些优化

455
0:20:24.640 --> 0:20:30.400
对那超算领域实际上是一个非常好的能够完美的利用到

456
0:20:30.400 --> 0:20:32.640
计算机硬件性能的提升

457
0:20:32.640 --> 0:20:35.840
对你计算机硬件的性能再怎幺提升

458
0:20:35.840 --> 0:20:39.200
对超算都能够非常好的去消化它

459
0:20:39.200 --> 0:20:43.840
对那怎幺消化它其实最早一代的这些

460
0:20:43.840 --> 0:20:47.840
超级计算机对里面的一些算法就是

461
0:20:47.840 --> 0:20:52.000
Jack Dongara的这个博士他所做出的一些

462
0:20:52.000 --> 0:20:54.800
研究的成果包括像Limpac

463
0:20:54.800 --> 0:20:58.240
那个Blas这些还有Lampac这些

464
0:20:58.240 --> 0:21:02.800
算法的一些酷对特别是一些并行的这些算法

465
0:21:02.800 --> 0:21:08.400
对使得超算能够服务于我们传统的一些

466
0:21:08.400 --> 0:21:12.160
传统的一些个人电脑或者是小型机大型机

467
0:21:12.160 --> 0:21:13.920
都能够做不到的一些事情

468
0:21:13.920 --> 0:21:16.240
包括什幺生物资料

469
0:21:16.240 --> 0:21:21.680
那个天气航空对那最开始超算的其实更多的是

470
0:21:21.680 --> 0:21:27.120
服务于军方对那后来才开始去慢慢的去民用

471
0:21:27.120 --> 0:21:31.920
对而且他做的这件事情现在已经成为了一个

472
0:21:31.920 --> 0:21:37.280
一个标准对我们称之为能够评测全世界的这些

473
0:21:37.280 --> 0:21:40.480
计算机性能好坏的一个内容

474
0:21:40.480 --> 0:21:44.240
对它实际上是一个全世界现在有一个非常著名的

475
0:21:44.240 --> 0:21:48.560
那个超级计算机Torp500的这样一个排行榜

476
0:21:48.560 --> 0:21:51.120
对就是你的计算机是不是好

477
0:21:51.120 --> 0:21:56.880
其实就是靠Dongana他们现在当年做的这些NimPack

478
0:21:56.880 --> 0:22:00.560
这些基准测试用来评价他们的这些内容

479
0:22:00.560 --> 0:22:04.960
对那这些东西其实就是一直在推动计算机

480
0:22:04.960 --> 0:22:08.080
不断的往前去发展各种各样的一些优化

481
0:22:08.080 --> 0:22:13.520
对那他们从一些不同的领域里面去整理到一些

482
0:22:13.520 --> 0:22:17.680
那个workload然后去评测这些计算机

483
0:22:17.680 --> 0:22:20.240
对那大家应该也会听过

484
0:22:20.240 --> 0:22:25.760
对包括中国的像天和像那个台湖之光

485
0:22:25.760 --> 0:22:32.640
对其实都有过在那个世界500强的这个排名上

486
0:22:32.640 --> 0:22:35.440
能够排到第一的这样一个位置

487
0:22:35.440 --> 0:22:41.200
对我先介绍这些看看大家有什幺有感兴趣的一些点落

488
0:22:41.200 --> 0:22:43.680
我先稍微解释一下

489
0:22:43.680 --> 0:22:46.880
就是其实在很长一段时间里面

490
0:22:46.880 --> 0:22:49.360
计算机软件是领先于硬件的

491
0:22:49.360 --> 0:22:51.360
就是软件发展的非常好

492
0:22:51.360 --> 0:22:53.360
但硬件一直很疲软

493
0:22:53.360 --> 0:22:57.600
但是在最近的10年左右的时间硬件发展的很快

494
0:22:57.600 --> 0:23:00.080
其中一个两个标志性的代表

495
0:23:00.080 --> 0:23:02.720
一个是多核的CPU

496
0:23:02.720 --> 0:23:05.120
就是一个CPU有多个计算的核

497
0:23:05.120 --> 0:23:08.320
或者能够多线式的去做计算

498
0:23:08.320 --> 0:23:12.160
那幺有相当长一段时间有好几年的时间里面

499
0:23:12.160 --> 0:23:15.760
这个大部分软件是用不到那个多核的性能的

500
0:23:15.760 --> 0:23:17.760
就它任何时候只能用到其中一个核

501
0:23:17.760 --> 0:23:20.160
直到软件整套工具链

502
0:23:20.160 --> 0:23:24.000
从编译器到内核的这些酷寒术

503
0:23:24.000 --> 0:23:26.480
到等等这样的一些配套机制

504
0:23:26.480 --> 0:23:28.480
整个工具链都升级完毕

505
0:23:28.480 --> 0:23:31.600
才能够让一般的人写出

506
0:23:31.600 --> 0:23:35.040
可以利用CPU多核优势的进程

507
0:23:35.040 --> 0:23:38.240
而写进程的时候你不太需要了解这点

508
0:23:38.240 --> 0:23:40.720
你只要把你的进程写得足够好

509
0:23:40.720 --> 0:23:43.680
就是足够的按照一定的标准去写

510
0:23:43.680 --> 0:23:47.360
那幺编译器包括酷寒术或者一些框架

511
0:23:47.360 --> 0:23:50.400
它会自动的把你能够应用到各个核上面去

512
0:23:50.400 --> 0:23:53.280
让你充分的利用每一个核的计算能力

513
0:23:53.280 --> 0:23:54.800
第二个就是云计算

514
0:23:54.800 --> 0:23:58.080
就是可以把很多CPU并联起来

515
0:23:58.080 --> 0:24:01.680
让它共同去为一个计算任务去服务

516
0:24:01.680 --> 0:24:04.640
这个就是所谓的并行计算

517
0:24:04.640 --> 0:24:10.720
CPU里的并行计算和多CPU的联合的并行计算

518
0:24:10.720 --> 0:24:14.240
那幺并行计算的一个理想是什幺呢

519
0:24:14.240 --> 0:24:17.680
就是大部分写算法的人

520
0:24:17.680 --> 0:24:21.600
他不需要去做具体的任务分派

521
0:24:21.600 --> 0:24:25.120
具体的这样的一些任务调度这样的一些事情

522
0:24:25.120 --> 0:24:29.280
而有一些基础性的软件一些酷一些框架

523
0:24:29.280 --> 0:24:31.840
可以帮助你去把你的计算任务

524
0:24:31.840 --> 0:24:35.360
分配到不同的计算CPU计算单元上去

525
0:24:35.360 --> 0:24:37.200
分配到不同的计算核上去

526
0:24:37.200 --> 0:24:39.360
然后把结果能够最终汇总起来

527
0:24:39.360 --> 0:24:43.920
其实这方面的工作在过去的十来年

528
0:24:43.920 --> 0:24:45.520
是做了非常多的工作的

529
0:24:45.520 --> 0:24:47.840
所以现在我们可以自豪地讲

530
0:24:47.840 --> 0:24:50.800
计算机软件已经追上了硬件的步伐

531
0:24:50.800 --> 0:24:53.040
现在你有多少硬件

532
0:24:53.040 --> 0:24:55.120
我们这些底层的计算库

533
0:24:55.120 --> 0:24:58.240
都能够很好的去用尽你的计算力

534
0:24:58.240 --> 0:25:01.680
这个里面我们这位Jack Tangara

535
0:25:01.680 --> 0:25:03.760
就是中文叫杰克·唐加拉

536
0:25:03.760 --> 0:25:07.600
他的工作是起到了很多电机性的作用的

537
0:25:07.600 --> 0:25:09.840
其中有一个很重要的叫BLAST

538
0:25:09.840 --> 0:25:11.840
它实际上是一个通用的接口

539
0:25:11.840 --> 0:25:15.440
你只要按这个接口去写你的算法实现

540
0:25:15.440 --> 0:25:17.840
那幺底层的那些优化

541
0:25:17.840 --> 0:25:20.080
就可以交给那些公共的库去处理了

542
0:25:20.080 --> 0:25:21.120
这些底层的优化

543
0:25:21.120 --> 0:25:23.760
包括非常基础的一些数学运算

544
0:25:23.760 --> 0:25:27.680
比如说矢量 矩阵

545
0:25:27.680 --> 0:25:29.280
这样的一些基础性的运算

546
0:25:29.280 --> 0:25:31.920
都是做得非常优化的一些单元

547
0:25:31.920 --> 0:25:34.000
它会自动的帮你去做优化

548
0:25:34.000 --> 0:25:37.760
这个我觉得是非常有意义的一件事情

549
0:25:37.760 --> 0:25:40.240
所以我非常赞同的一个点就是

550
0:25:40.240 --> 0:25:43.600
这个领域是应该拿一次图灵奖了

551
0:25:43.600 --> 0:25:44.720
而且众望所归

552
0:25:44.720 --> 0:25:46.960
今年的获奖的这个人

553
0:25:46.960 --> 0:25:50.400
而且当关的这块

554
0:25:50.400 --> 0:25:54.560
他和我们中国其实关系是挺好的

555
0:25:54.560 --> 0:25:55.920
对 他来过好几次

556
0:25:55.920 --> 0:25:56.880
在以前之前

557
0:25:56.880 --> 0:26:01.440
对 包括我记得我在参加一些学术会议的时候

558
0:26:01.440 --> 0:26:05.840
其实也听过他现场听过他的报告

559
0:26:05.840 --> 0:26:07.440
对 也是特别nice

560
0:26:07.440 --> 0:26:10.800
对我们国家在超算方面的一些建设

561
0:26:10.800 --> 0:26:12.880
实际上起到了非常多的一些

562
0:26:12.880 --> 0:26:14.320
提到很多一些好的建议

563
0:26:14.320 --> 0:26:16.320
对 包括现在也是

564
0:26:16.320 --> 0:26:19.520
我也看到在一些群里面

565
0:26:19.520 --> 0:26:25.440
然后也会我们有同事会和他去讨论

566
0:26:25.440 --> 0:26:28.320
包括中国接下来一些超算的一些发展的一些方向

567
0:26:28.320 --> 0:26:30.640
对 实际上是一个特别好的一个人

568
0:26:30.640 --> 0:26:33.680
所以也算是中国人民的老朋友了

569
0:26:33.680 --> 0:26:35.600
对

570
0:26:35.600 --> 0:26:38.800
然后谈到这个超计算机超算

571
0:26:38.800 --> 0:26:42.560
这一块也有挺多有意思的话题

572
0:26:42.560 --> 0:26:45.280
刚才王老师也提到了

573
0:26:45.280 --> 0:26:48.560
有一个很著名的世界超算Top500

574
0:26:48.560 --> 0:26:50.960
这个是有一个组织

575
0:26:50.960 --> 0:26:52.480
就叫Top500的一个组织

576
0:26:52.480 --> 0:26:55.680
它每年会发一堆的不同领域的Top500

577
0:26:55.680 --> 0:26:58.640
其中一个是超计算机

578
0:26:58.640 --> 0:27:00.160
虽然不算完全官方

579
0:27:00.160 --> 0:27:01.520
但是现在大家都认它

580
0:27:01.520 --> 0:27:03.760
也都会参与它的评测

581
0:27:03.760 --> 0:27:06.320
这个评测的基准算法

582
0:27:06.320 --> 0:27:10.160
就是用的我们党高二教授的一个库

583
0:27:10.160 --> 0:27:12.080
用这个库来做的一个benchmark

584
0:27:12.080 --> 0:27:16.320
来做这个超算的基础的基准评测

585
0:27:16.320 --> 0:27:20.400
说起这个排名也很有意思

586
0:27:20.400 --> 0:27:23.600
我之前就专门看过

587
0:27:23.600 --> 0:27:28.720
其实在好像是17年还是18年

588
0:27:28.720 --> 0:27:32.080
之前连着好几届Top500的冠军

589
0:27:32.080 --> 0:27:34.640
都是我们中国的太湖之光

590
0:27:34.640 --> 0:27:38.480
然后再往前当然都是美国比较多了

591
0:27:38.480 --> 0:27:39.760
然后中国崛起之后

592
0:27:39.760 --> 0:27:41.040
中国连着拿了好几年

593
0:27:41.040 --> 0:27:44.080
但最近几年有一个日本的超算

594
0:27:44.080 --> 0:27:46.160
就是叫富越

595
0:27:46.160 --> 0:27:48.480
这个就是日本的超计算机

596
0:27:48.480 --> 0:27:50.640
以领先相当多的一个

597
0:27:50.640 --> 0:27:54.000
大概领先30%左右的算力拿到第一名

598
0:27:54.000 --> 0:27:56.000
然后二三名是美国的

599
0:27:56.000 --> 0:27:57.920
第四名是我们的太湖之光

600
0:27:57.920 --> 0:28:01.280
这个是去年下半年的成绩

601
0:28:01.280 --> 0:28:04.160
但这个我也专门问了一些相关的朋友

602
0:28:04.160 --> 0:28:09.520
他们就说这个其实是要怎幺看

603
0:28:09.520 --> 0:28:13.120
首先第一中国表面上丢掉了第一名

604
0:28:13.120 --> 0:28:14.400
美国也没拿到

605
0:28:14.400 --> 0:28:17.120
但其实目前世界上最强的超算

606
0:28:17.120 --> 0:28:18.560
还是中国和美国

607
0:28:18.560 --> 0:28:21.360
有两点 第一点就是综合算力

608
0:28:21.360 --> 0:28:23.040
就是你把500强里边

609
0:28:23.040 --> 0:28:27.200
所有上榜的超算的计算能力加起来

610
0:28:27.200 --> 0:28:29.200
你不要光看排前面的几个

611
0:28:29.200 --> 0:28:31.600
你把所有上榜的500强的

612
0:28:31.600 --> 0:28:34.560
这个上榜的超算的能力加起来

613
0:28:34.560 --> 0:28:36.880
你会发现中国是摇领先的第一名

614
0:28:36.880 --> 0:28:40.720
然后其次是美国 日本其实很少的

615
0:28:40.720 --> 0:28:42.960
这是第一个就是总量优势

616
0:28:42.960 --> 0:28:46.480
第二个更重要的就是下一代的超算

617
0:28:46.480 --> 0:28:47.680
就是一级的超算

618
0:28:47.680 --> 0:28:50.000
ABCDE这个一级的超算

619
0:28:50.000 --> 0:28:52.080
比现在的这个数据

620
0:28:52.080 --> 0:28:54.720
应该会要高一到两个数量级的超算

621
0:28:54.720 --> 0:28:56.640
其实中国和美国都在做了

622
0:28:56.640 --> 0:29:00.480
这些由于它还没有正式的投入使用

623
0:29:00.480 --> 0:29:03.680
所以它可能就没有在这个榜上面出现

624
0:29:03.680 --> 0:29:05.760
但是现在就有人跟我说

625
0:29:05.760 --> 0:29:08.400
说可能大概今年下半年的榜单

626
0:29:08.400 --> 0:29:09.920
可能就会出现了

627
0:29:09.920 --> 0:29:11.680
所以大家可以拭目以待

628
0:29:11.680 --> 0:29:14.720
期待新的一代的出现

629
0:29:14.720 --> 0:29:17.600
我有一个问题想问问王老师

630
0:29:17.600 --> 0:29:19.200
就咱们现在学校里边

631
0:29:19.200 --> 0:29:20.960
假设要做一些课题

632
0:29:20.960 --> 0:29:22.880
想申请超算资源

633
0:29:22.880 --> 0:29:25.840
可以比较方便的申请到吗

634
0:29:25.840 --> 0:29:29.040
你这个点说的很好

635
0:29:29.040 --> 0:29:31.280
对其实有的

636
0:29:31.280 --> 0:29:34.400
其实现在国家在做一些

637
0:29:34.400 --> 0:29:36.080
科研支撑方面的时候

638
0:29:36.080 --> 0:29:39.600
超算其实也是在科学研究这一块

639
0:29:39.600 --> 0:29:41.360
它实际上是一个支撑点

640
0:29:41.360 --> 0:29:43.200
对我们学校其实就有

641
0:29:43.200 --> 0:29:46.240
对我们就有同事在申请一些

642
0:29:46.240 --> 0:29:48.880
和一些其他学校

643
0:29:48.880 --> 0:29:51.760
比如说像广州那边有超算

644
0:29:51.760 --> 0:29:54.000
学校去做联合申请的时候

645
0:29:54.000 --> 0:29:55.920
广州那边的超算

646
0:29:55.920 --> 0:29:58.640
它会配套一个超算资源

647
0:29:58.640 --> 0:30:01.040
会配套我们一些资源

648
0:30:01.040 --> 0:30:03.600
在平时的时候去用

649
0:30:03.600 --> 0:30:06.480
甚至其实它是挺希望

650
0:30:06.480 --> 0:30:09.840
一些科学研究能够落地到超算里面的

651
0:30:09.840 --> 0:30:12.000
对因为超算其实有一个

652
0:30:12.000 --> 0:30:15.200
非常大的一个局限

653
0:30:15.200 --> 0:30:16.240
不是说它的缺点

654
0:30:16.240 --> 0:30:18.800
就是因为它能力特别强

655
0:30:18.800 --> 0:30:21.280
它就需要一些应用

656
0:30:21.280 --> 0:30:23.680
特别是能够充分的利用到

657
0:30:23.680 --> 0:30:26.560
这些算力的应用在上面

658
0:30:26.560 --> 0:30:28.320
对它特别是希望

659
0:30:28.320 --> 0:30:31.200
所以它挺鼓励有什幺好的一些应用

660
0:30:31.200 --> 0:30:32.560
能够放到超算里面来

661
0:30:32.560 --> 0:30:34.720
它就能够给我们提供支持

662
0:30:34.720 --> 0:30:36.640
特别是如果你后面还能够产生一些

663
0:30:36.640 --> 0:30:38.080
经济上的一些效应的时候

664
0:30:38.080 --> 0:30:39.680
对它就更支持了

665
0:30:39.680 --> 0:30:41.360
对因为我们知道超算其实它是需要

666
0:30:41.360 --> 0:30:43.200
投入巨大的这些资源去建设的

667
0:30:43.200 --> 0:30:45.680
包括它的电费其实它在那里运行

668
0:30:45.680 --> 0:30:47.520
其实就要非常大一些花费

669
0:30:47.520 --> 0:30:50.880
所以说它是一个非常联动的形式

670
0:30:50.880 --> 0:30:55.360
我心目中如果这个事情做得好的话

671
0:30:55.360 --> 0:30:57.600
其实它应该就是

672
0:30:57.600 --> 0:31:00.320
就我们假设国内的超算环境建设的比较好

673
0:31:00.320 --> 0:31:01.920
其实像学校里面的

674
0:31:01.920 --> 0:31:04.000
不要说是一些重大课题了

675
0:31:04.000 --> 0:31:07.120
就是一些学生他去做一些研究课题的话

676
0:31:07.120 --> 0:31:09.120
其实都应该可以去尝试一下

677
0:31:09.120 --> 0:31:10.720
还有包括像老庄

678
0:31:10.720 --> 0:31:13.440
你们公司里面会有这样的资源吗

679
0:31:13.440 --> 0:31:14.320
我不知道

680
0:31:14.320 --> 0:31:17.040
但有的时候其实也应该面向社会

681
0:31:17.040 --> 0:31:18.960
我觉得可以提供一些这方面的资源

682
0:31:18.960 --> 0:31:22.800
因为它本质上超算做的事情其实很单纯

683
0:31:22.800 --> 0:31:26.320
就是大量的密集型的计算的内容

684
0:31:26.320 --> 0:31:30.240
你肯定不会把你的应用软件跑上去跑

685
0:31:30.240 --> 0:31:32.720
但是你会把你应用软件所需要的一些

686
0:31:32.720 --> 0:31:34.080
比如数据分析处理

687
0:31:34.080 --> 0:31:35.520
比如说一些预测

688
0:31:35.520 --> 0:31:37.200
一些模型的分类

689
0:31:37.200 --> 0:31:39.120
这样一些高度密集型的东西

690
0:31:39.120 --> 0:31:42.000
把它专门压缩好放进去算

691
0:31:42.000 --> 0:31:44.800
消耗掉一些算时之后得到结果

692
0:31:44.800 --> 0:31:47.120
然后把这个结果应用到自己的应用里去

693
0:31:47.120 --> 0:31:49.680
这个其实是非常适合外包的

694
0:31:49.680 --> 0:31:50.720
就是从逻辑上来讲

695
0:31:50.720 --> 0:31:53.840
但是我确实不知道现在到什幺程度了

696
0:31:53.840 --> 0:31:56.960
我确实不知道我们公司的情况

697
0:31:56.960 --> 0:31:59.920
本来说实话聊超算这个话题

698
0:31:59.920 --> 0:32:01.600
我还以为我插不上话的

699
0:32:01.600 --> 0:32:04.000
但是我现在其实能提供一个八卦

700
0:32:04.000 --> 0:32:06.000
八卦好

701
0:32:06.000 --> 0:32:08.560
因为前面王老师在说到说

702
0:32:08.560 --> 0:32:13.120
Danganda的教授他提出过一个叫Blas的算法

703
0:32:13.120 --> 0:32:14.480
对

704
0:32:14.480 --> 0:32:16.560
然后我突然想联想起来

705
0:32:16.560 --> 0:32:20.400
有一个国内的高手叫张先毅

706
0:32:20.400 --> 0:32:21.680
他是中科院的

707
0:32:21.680 --> 0:32:24.240
后面当然又去读了MIT的博士后

708
0:32:24.240 --> 0:32:28.080
然后他就开发了一个著名的开源项目叫Open Blas

709
0:32:28.080 --> 0:32:29.360
对

710
0:32:29.360 --> 0:32:33.200
这个是在国际上应该是在这个应该是超算领域

711
0:32:33.200 --> 0:32:34.480
非常著名的一个开源项目

712
0:32:34.480 --> 0:32:35.760
对的对的

713
0:32:35.760 --> 0:32:38.320
对我还很有很有一次很有

714
0:32:38.320 --> 0:32:39.840
吸引就是跟他一起来

715
0:32:39.840 --> 0:32:41.120
就是搞了一个圆桌

716
0:32:41.120 --> 0:32:44.080
因为他现在还有一个创业的一家公司

717
0:32:44.080 --> 0:32:47.920
专门做这个基于Open Blas的一个

718
0:32:47.920 --> 0:32:51.760
开源的商业的一个公司

719
0:32:51.760 --> 0:32:52.800
很有意思

720
0:32:52.800 --> 0:32:55.120
另外还有一个八卦就更有意思了

721
0:32:55.120 --> 0:32:59.440
因为前段时间不是俄乌的这种冲突吗

722
0:32:59.440 --> 0:33:03.040
然后就有人到了Open Blas的这个仓库下面

723
0:33:03.040 --> 0:33:05.060
去提了一个建议

724
0:33:05.060 --> 0:33:08.140
说我们应该让这个Open Blas

725
0:33:08.140 --> 0:33:10.700
不要支持俄罗斯的一个芯片

726
0:33:10.700 --> 0:33:13.260
以及不要支持中国的龙芯

727
0:33:13.260 --> 0:33:15.560
行为怎幺怎幺样

728
0:33:15.560 --> 0:33:18.640
然后我觉得这些人应该是没想明白

729
0:33:18.640 --> 0:33:20.940
这个Open Blas背后应该是

730
0:33:20.940 --> 0:33:22.740
什幺样的背景以及什幺来历

731
0:33:22.740 --> 0:33:23.500
他都没想过

732
0:33:23.500 --> 0:33:25.540
然后就冲出来提这个建议

733
0:33:25.540 --> 0:33:27.340
就仅提供一个八卦

734
0:33:27.340 --> 0:33:29.140
挺有意思

735
0:33:29.140 --> 0:33:32.460
这个Blas实际上是一个协议

736
0:33:32.460 --> 0:33:34.000
就实际上它是一个接口协议

737
0:33:34.000 --> 0:33:35.540
就是它是一个规范的协议

738
0:33:35.540 --> 0:33:39.120
就是把上层应用所需要调用的一些

739
0:33:39.120 --> 0:33:41.940
内核算法把它标准化了

740
0:33:41.940 --> 0:33:44.760
比如说两个项量相加两个项量相乘

741
0:33:44.760 --> 0:33:46.300
把这些全部都标准化了

742
0:33:46.300 --> 0:33:49.100
然后Blas下面的实现其实是

743
0:33:49.100 --> 0:33:53.980
就是这个百花齐放的

744
0:33:53.980 --> 0:33:56.540
比如刚才表委提到的这个Open Blas

745
0:33:56.540 --> 0:33:57.820
就是应用非常广的

746
0:33:57.820 --> 0:34:01.140
因为它是开源社区里面做的一个Blas的实现

747
0:34:01.140 --> 0:34:02.940
然后还有很多专用的

748
0:34:02.940 --> 0:34:05.740
比如说NVIDIA它做显卡的吧

749
0:34:05.740 --> 0:34:07.280
它有专门的一个实现

750
0:34:07.280 --> 0:34:11.380
就是用它自己的显卡的计算的API

751
0:34:11.380 --> 0:34:15.740
来实现了Blas的那些功能的API

752
0:34:15.740 --> 0:34:20.080
那幺你的应用软件是不需要改的

753
0:34:20.080 --> 0:34:21.100
你就写好之后

754
0:34:21.100 --> 0:34:22.640
你只要用Blas的协议去写好

755
0:34:22.640 --> 0:34:25.720
那幺底层你可以用Open Blas实现

756
0:34:25.720 --> 0:34:28.280
作为通用的解决方案

757
0:34:28.280 --> 0:34:29.820
然后你检测到说我系统里面

758
0:34:29.820 --> 0:34:31.340
有一块NVIDIA的显卡

759
0:34:31.340 --> 0:34:34.680
我可以转为调用NVIDIA的Blas实现

760
0:34:34.680 --> 0:34:35.960
这样效率会高很多

761
0:34:35.960 --> 0:34:36.720
它类似这样子的

762
0:34:36.720 --> 0:34:39.540
所以实际上Dunkerque的早期工作

763
0:34:39.540 --> 0:34:41.840
是给这一类的数值计算

764
0:34:41.840 --> 0:34:45.180
确定了一个非常好的抽象层

765
0:34:45.180 --> 0:34:46.960
也为后来的百花齐放

766
0:34:46.960 --> 0:34:48.760
做了很多的贡献

767
0:34:48.760 --> 0:34:51.320
所以Open Blas现在确实是用得非常广的

768
0:34:51.320 --> 0:34:53.620
它的性能也相当的不错

769
0:34:53.620 --> 0:34:57.460
在开源实现里面

770
0:34:57.460 --> 0:35:00.800
OK 关于超算这事

771
0:35:00.800 --> 0:35:02.840
刚才既然谈到表伟提到

772
0:35:02.840 --> 0:35:05.400
有人去Open Blas这里提这个

773
0:35:05.400 --> 0:35:07.960
这事其实在超算这个领域

774
0:35:07.960 --> 0:35:12.320
超算已经被广泛的认为是国之重器

775
0:35:12.320 --> 0:35:14.360
也就是国家的国力的这个

776
0:35:14.360 --> 0:35:15.640
重要组成部分了

777
0:35:15.640 --> 0:35:17.440
所以在几年以前

778
0:35:17.440 --> 0:35:19.740
甚至还没有开始打这个

779
0:35:19.740 --> 0:35:21.020
中美贸易战的时候

780
0:35:21.020 --> 0:35:23.000
美国就已经在这方面

781
0:35:23.000 --> 0:35:25.120
对我们施加了非常多的限制

782
0:35:25.120 --> 0:35:26.240
大家可能听说过

783
0:35:26.240 --> 0:35:28.960
就是中国最早一代的这个超算

784
0:35:28.960 --> 0:35:32.280
最早的有这个曙光

785
0:35:32.280 --> 0:35:34.080
然后后面有天和

786
0:35:34.080 --> 0:35:35.860
天和一号 天和二号

787
0:35:35.860 --> 0:35:38.420
这些超计算机当时就已经

788
0:35:38.420 --> 0:35:41.740
在200几年的时候就已经进了这个

789
0:35:41.740 --> 0:35:43.540
Top 500

790
0:35:43.540 --> 0:35:46.620
但是这些超计算机它使用的芯片

791
0:35:46.620 --> 0:35:48.920
全都是英特尔的芯片

792
0:35:48.920 --> 0:35:51.480
那幺在我忘了是201几年的时候

793
0:35:51.480 --> 0:35:53.020
美国就已经明确了

794
0:35:53.020 --> 0:35:54.540
就说你英特尔的芯片

795
0:35:54.540 --> 0:35:56.340
可以出口到中国

796
0:35:56.340 --> 0:35:58.900
但是只能出口民用的版本

797
0:35:58.900 --> 0:36:01.200
那些为超算定制的版本

798
0:36:01.200 --> 0:36:03.000
就不能往中国出口了

799
0:36:03.000 --> 0:36:05.040
然后约定了一个时间

800
0:36:05.040 --> 0:36:07.600
那幺中国就被迫开始去研究

801
0:36:07.600 --> 0:36:10.160
完全国产化的这个自己的超算

802
0:36:10.160 --> 0:36:12.200
所以最新一代中国的这个最强的

803
0:36:12.200 --> 0:36:14.000
已知的 已知的 公开的最强的

804
0:36:14.000 --> 0:36:16.560
这个叫做神威太湖之光的

805
0:36:16.560 --> 0:36:19.640
2016年底拿到这个

806
0:36:19.640 --> 0:36:22.200
Top 500榜首的这个超算

807
0:36:22.200 --> 0:36:25.260
它就使用的是完全国产的这个

808
0:36:25.260 --> 0:36:26.300
计算机芯片

809
0:36:26.300 --> 0:36:28.340
这个芯片还很神秘啊

810
0:36:28.340 --> 0:36:29.880
它用的指令集

811
0:36:29.880 --> 0:36:32.440
它的这个具体的架构都不公开的

812
0:36:32.440 --> 0:36:34.220
我们都不知道的

813
0:36:34.220 --> 0:36:37.300
然后这个太湖之光上面跑着一个

814
0:36:37.300 --> 0:36:40.880
为这个芯片专门定制的一个Linux系统

815
0:36:40.880 --> 0:36:43.180
然后这个系统上有专门为这个芯片

816
0:36:43.180 --> 0:36:45.480
优化的一组的编译器

817
0:36:45.480 --> 0:36:47.780
Fortran和C的这个运行库

818
0:36:47.780 --> 0:36:50.100
就是当你去用超算的时候

819
0:36:50.100 --> 0:36:52.140
其实对这些事情

820
0:36:52.140 --> 0:36:53.680
不需要特别深入了解

821
0:36:53.680 --> 0:36:55.980
因为它是有上层都是标准化的

822
0:36:55.980 --> 0:36:59.820
但是这个太湖之光实际上就它已经是

823
0:36:59.820 --> 0:37:01.360
内核的这个部分

824
0:37:01.360 --> 0:37:04.680
CPU已经是国家我们自己生产的了

825
0:37:04.680 --> 0:37:05.960
但是呢

826
0:37:05.960 --> 0:37:09.300
我听这个领域比较熟悉的朋友讲

827
0:37:09.300 --> 0:37:11.080
就是在超算这个领域啊

828
0:37:11.080 --> 0:37:14.920
完全的国产化其实还没有实现

829
0:37:14.920 --> 0:37:16.980
其中包括比如说

830
0:37:16.980 --> 0:37:19.800
超算的一些设计软件啊

831
0:37:19.800 --> 0:37:23.120
还有一些什幺这个代工厂啊

832
0:37:23.120 --> 0:37:24.660
这个还

833
0:37:24.660 --> 0:37:26.700
实现国产这个自主

834
0:37:26.700 --> 0:37:30.800
所以这里面还有很多任务作要做

835
0:37:30.800 --> 0:37:33.360
对还有一个对我这里还可以提供一个信息

836
0:37:33.360 --> 0:37:36.940
就是超算上面所要运行的一些软件

837
0:37:36.940 --> 0:37:40.520
对其实那个刚才所提到的那个Dongaola教授啊

838
0:37:40.520 --> 0:37:42.060
其实他还有一项

839
0:37:42.060 --> 0:37:45.640
工作对是他和他老师的就是Metalab

840
0:37:45.640 --> 0:37:51.800
对那其实Metalab是当时他老师所提出的那个Linpack的时候

841
0:37:51.800 --> 0:37:53.840
对包括还有像EISback呀

842
0:37:53.840 --> 0:37:55.880
对他们是为了教学的方便

843
0:37:55.880 --> 0:37:59.720
对他们把这几个那个包啊给他打

844
0:37:59.720 --> 0:38:01.260
打包成一个小的工具

845
0:38:01.260 --> 0:38:03.300
对方便他们去教学

846
0:38:03.300 --> 0:38:07.660
对那后来呢这个小工具就成长为我们现在

847
0:38:07.660 --> 0:38:12.000
几乎所有包括搞数学的都会去使用到的一个Metalab

848
0:38:12.000 --> 0:38:15.080
对那当时那个Dongaola在读博士的时候

849
0:38:15.080 --> 0:38:16.880
其实就是基于这个工具

850
0:38:16.880 --> 0:38:19.700
去做那个Linpack方面的研究

851
0:38:19.700 --> 0:38:22.500
对说实话像这种数学上的这种工具啊

852
0:38:22.500 --> 0:38:25.320
这种也是超算里面一个非常重要的一个点

853
0:38:25.320 --> 0:38:29.160
对它实际上是降低了超算的使用门槛

854
0:38:29.160 --> 0:38:32.740
就是你不需要懂计算机体系架构

855
0:38:32.740 --> 0:38:34.800
你也不需要精通编程

856
0:38:34.800 --> 0:38:38.120
你只要了解Metalab的那一套语言

857
0:38:38.120 --> 0:38:41.440
你就可以去把你的这个计算任务

858
0:38:41.440 --> 0:38:44.000
把它变成计算机超算可以使用的东西

859
0:38:44.000 --> 0:38:46.560
那正好在这个前两年吧

860
0:38:46.560 --> 0:38:49.900
这个美国也把中国的一些大专院校

861
0:38:49.900 --> 0:38:52.720
比如非常出名的像国防科大呀

862
0:38:52.720 --> 0:38:55.020
还有这个哈工大呀

863
0:38:55.020 --> 0:38:57.840
都认为他们为中国军方工作啊

864
0:38:57.840 --> 0:39:02.200
所以把这个他们列上了一个实体名单

865
0:39:02.200 --> 0:39:04.240
那直接导致的就是Metalab

866
0:39:04.240 --> 0:39:06.160
不能向他们提供授权了

867
0:39:06.160 --> 0:39:09.360
他们就不能够使用正版的Metalab了

868
0:39:09.360 --> 0:39:13.200
那这个事儿也是就是影响也挺大的

869
0:39:13.200 --> 0:39:15.760
我不知道现在大学里面对这个事情

870
0:39:15.760 --> 0:39:20.560
有没有一些比较完备的一些这个备用方案

871
0:39:20.560 --> 0:39:23.760
比如说如果现在只是少部分的学校被制裁

872
0:39:23.760 --> 0:39:24.560
不能使用啊

873
0:39:24.560 --> 0:39:26.760
但是大部分的学校他们也没有在考虑

874
0:39:26.760 --> 0:39:28.760
一些代用品啊或者类似这样的

875
0:39:28.760 --> 0:39:32.160
对那个还还是有的

876
0:39:32.160 --> 0:39:35.040
对特别是那个开源呀

877
0:39:35.040 --> 0:39:39.360
还有包括这几年比较流行的

878
0:39:39.360 --> 0:39:41.680
像Python啊人工智能这块起来以后

879
0:39:41.680 --> 0:39:45.040
对其实是有这样一个趋势的

880
0:39:45.040 --> 0:39:47.960
对也是我们会在学校里面去呼吁的

881
0:39:47.960 --> 0:39:50.480
对因为本身我们都希望在学校里面

882
0:39:50.480 --> 0:39:55.040
肯定是尽量多用这些开源的这些软件

883
0:39:55.040 --> 0:39:58.160
去作为教学科研相关的一些活动

884
0:39:58.160 --> 0:40:02.960
对但是呢我发现就是特别是像Metalab这种

885
0:40:02.960 --> 0:40:06.480
特别那个专业化发展成熟的软件

886
0:40:06.480 --> 0:40:08.640
对包括在很多其他的学科

887
0:40:08.640 --> 0:40:11.200
因为知道Metalab其实它不光是数学

888
0:40:11.200 --> 0:40:13.680
其实还有很多其他的一些理工科

889
0:40:13.680 --> 0:40:16.480
那个都会去用它

890
0:40:16.480 --> 0:40:18.400
而且呢它确实是方便

891
0:40:18.400 --> 0:40:22.040
而且呢会和很多的一些其他的一些软件呀

892
0:40:22.040 --> 0:40:25.160
或者是一些那个后续的一些处理的一些工具

893
0:40:25.160 --> 0:40:26.760
对它会形成一些生态

894
0:40:26.760 --> 0:40:29.720
对它有非常好的一些接口

895
0:40:29.720 --> 0:40:32.560
甚至一些专业的硬件它都会有

896
0:40:32.560 --> 0:40:34.600
对这个呢其实就会使得

897
0:40:34.600 --> 0:40:39.240
你可能在一些局部里面可能会对它有些好的替代

898
0:40:39.240 --> 0:40:43.120
但是呢在一些场景里面可能你还是要用到Metalab

899
0:40:43.120 --> 0:40:44.960
可能它还是最适合的

900
0:40:44.960 --> 0:40:47.520
对所以说呢我是看到包括我们自己学校里面

901
0:40:47.520 --> 0:40:48.960
作为教学这块的话

902
0:40:48.960 --> 0:40:53.080
其实还是有对Metalab的这种相关的一些依赖吧

903
0:40:54.360 --> 0:40:57.440
对这就是一个舒适区的问题了

904
0:40:58.080 --> 0:41:01.280
就是人吧他都是有惰性的

905
0:41:01.280 --> 0:41:04.960
不是逼急了这个他就不会去采取一些行动

906
0:41:05.160 --> 0:41:09.240
但其实我看到的这个Metalab的这个代用品

907
0:41:09.240 --> 0:41:10.520
其实还是很有一些的

908
0:41:10.880 --> 0:41:13.360
比如说法国人做的那个SciLab

909
0:41:13.760 --> 0:41:14.680
对对对

910
0:41:14.800 --> 0:41:17.520
它甚至兼容Metalab的那个文档格式

911
0:41:17.520 --> 0:41:22.360
就理论上讲最大限度的降低这个迁移的这个难度

912
0:41:22.360 --> 0:41:25.200
但是也必定会有一定的学习成本

913
0:41:25.600 --> 0:41:27.200
还有一个就是差异比较大

914
0:41:27.200 --> 0:41:29.920
但功能同样强大的就是GNU的那个Octave

915
0:41:29.920 --> 0:41:34.040
就是OCTAVE就是GNU的一个项目

916
0:41:34.040 --> 0:41:35.680
其实它也很多年了

917
0:41:35.680 --> 0:41:37.840
我自己没有深入用过

918
0:41:37.840 --> 0:41:39.640
但是我看文档啊各方面

919
0:41:39.640 --> 0:41:42.360
我觉得它功能上是一点都不比Metalab差的

920
0:41:42.360 --> 0:41:44.560
但是GNU的软件大家都知道的

921
0:41:44.560 --> 0:41:48.080
就是在应用性各方面可能会有些问题

922
0:41:48.080 --> 0:41:50.240
这个也是有学习成本的问题

923
0:41:51.080 --> 0:41:52.080
好说到这个话题

924
0:41:52.080 --> 0:41:52.880
需要点时间

925
0:41:52.880 --> 0:41:53.760
对

926
0:41:53.760 --> 0:41:54.960
一方面需要时间

927
0:41:54.960 --> 0:41:56.920
另一方面可能也需要一些决心

928
0:41:56.920 --> 0:41:59.640
这种决心完全靠自发就比较难

929
0:41:59.640 --> 0:42:03.400
它必然得是某些政策性或者是相应的一些

930
0:42:03.640 --> 0:42:05.960
有一定的行政力量或者之类的

931
0:42:06.480 --> 0:42:12.160
老庄你们有遇到这种就是常用的习惯了的软件

932
0:42:12.160 --> 0:42:15.240
不能用了被迫要改的这种问题

933
0:42:15.240 --> 0:42:15.960
有啊

934
0:42:17.240 --> 0:42:18.720
肯定有啊

935
0:42:18.720 --> 0:42:20.480
那你们一般咋办呢

936
0:42:21.800 --> 0:42:23.480
自己做替代

937
0:42:24.240 --> 0:42:25.560
然后那些人不肯用

938
0:42:25.560 --> 0:42:26.840
觉得我以前用顺手了

939
0:42:26.840 --> 0:42:27.960
让我换一个好难受

940
0:42:27.960 --> 0:42:29.920
公司规定你当然不能用了

941
0:42:29.920 --> 0:42:32.680
公司内部有严格的约束

942
0:42:32.680 --> 0:42:33.440
你不能用

943
0:42:33.440 --> 0:42:35.840
因为你会导致这种违规

944
0:42:35.840 --> 0:42:37.160
法务违规也好

945
0:42:37.160 --> 0:42:38.520
信息安全违规也好

946
0:42:38.520 --> 0:42:39.600
肯定不准用的

947
0:42:40.000 --> 0:42:42.000
所以这就是一个执行力的问题了

948
0:42:42.000 --> 0:42:44.160
那贵司是执行力很强的公司

949
0:42:44.160 --> 0:42:45.680
所以这个问题不大

950
0:42:45.680 --> 0:42:46.680
对

951
0:42:46.680 --> 0:42:47.760
这个都问题不大

952
0:42:47.760 --> 0:42:50.880
其实最难的还是要投入巨量的人力物力

953
0:42:50.880 --> 0:42:52.560
还得把替代系统开发出来

954
0:42:52.560 --> 0:42:53.600
这个很累

955
0:42:56.320 --> 0:42:59.280
而且比如说如果比如说Metalab

956
0:42:59.280 --> 0:43:01.680
它有一个插件或者有一个库特别好用

957
0:43:01.680 --> 0:43:03.560
暂时没有其他替代品

958
0:43:03.560 --> 0:43:06.480
那你新开发的替代者必须兼容这个库才行

959
0:43:06.480 --> 0:43:09.040
类似这样的需求就会有很多

960
0:43:10.440 --> 0:43:11.200
说到这儿

961
0:43:11.200 --> 0:43:14.560
我觉得正好就可以转向我们的第二个话题

962
0:43:14.560 --> 0:43:17.080
就是应用软件的安全性的问题了

963
0:43:18.320 --> 0:43:26.200
这个话题其实正好我也看到我们国内做网络和信息安全的某头部企业

964
0:43:26.200 --> 0:43:28.000
某资深的大佬

965
0:43:28.000 --> 0:43:30.240
也是政协的委员

966
0:43:30.240 --> 0:43:34.160
他也在今年开两会的时候也专门提议了

967
0:43:34.160 --> 0:43:39.960
就说我们要非常重视这方面的一些安全性

968
0:43:39.960 --> 0:43:43.280
但是这个人他提的这个建议

969
0:43:43.280 --> 0:43:46.680
让我觉得挺有意思的一点在哪里

970
0:43:46.680 --> 0:43:50.040
他倒没有说我们要盲目的去

971
0:43:50.040 --> 0:43:52.920
什幺软件都自己做一套

972
0:43:52.920 --> 0:43:58.080
他反而提的是说第一我们要主动走出去

973
0:43:58.080 --> 0:44:03.320
在境外的在世界全球性有影响力的那些软件社区里面

974
0:44:03.320 --> 0:44:05.240
站稳脚跟获得影响力

975
0:44:05.240 --> 0:44:07.040
让他们不能随意抛弃我们

976
0:44:07.040 --> 0:44:08.800
把这个建议摆在了第一位

977
0:44:08.800 --> 0:44:12.480
然后第二位他的建议是

978
0:44:12.480 --> 0:44:17.440
在使用大量的外部软件的时候要做好信息安全的把关

979
0:44:17.440 --> 0:44:23.160
就是要防止里面存在的一些对国家或者是企业

980
0:44:23.160 --> 0:44:26.040
或者甚至个人的安全有危害的一些隐患

981
0:44:26.040 --> 0:44:31.360
然后第三才是说有一些东西也要做好相应的准备

982
0:44:31.360 --> 0:44:33.400
就是要寻找相应的替代品

983
0:44:33.400 --> 0:44:36.520
我觉得他提的这几个建议还挺靠谱的

984
0:44:36.520 --> 0:44:39.400
但这个话题我觉得很多人也都关注

985
0:44:39.400 --> 0:44:42.400
很多人也会产生一些莫名的恐惧

986
0:44:42.400 --> 0:44:46.920
就是觉得好像尤其最近俄乌战争

987
0:44:46.920 --> 0:44:51.640
西方对俄罗斯的制裁简直是有一点达到了歇斯底里的状态

988
0:44:51.640 --> 0:44:55.480
有人就会说突然我们今天每个人都在使用的软件

989
0:44:55.480 --> 0:44:57.000
突然有一天不能用怎幺办

990
0:44:57.000 --> 0:44:59.960
我们是不是要提前自己做一个一样的做出来

991
0:44:59.960 --> 0:45:02.840
这个问题不知道两位朋友们你们怎幺看

992
0:45:02.840 --> 0:45:06.200
我先说呗

993
0:45:06.200 --> 0:45:11.560
关于这个问题其实我一直会强调工程思维

994
0:45:11.560 --> 0:45:15.160
所谓工程思维就是你得系统性的看一件事情

995
0:45:15.160 --> 0:45:16.840
假设里面有风险

996
0:45:16.840 --> 0:45:21.880
那幺风险最容易发生的第一大风险是什幺

997
0:45:21.880 --> 0:45:24.680
或者是危害最大的第一大风险是什幺

998
0:45:24.680 --> 0:45:26.920
这可能两个的排名第一还不一样

999
0:45:26.920 --> 0:45:31.080
然后你要做出来一个风险的排序

1000
0:45:31.080 --> 0:45:33.320
然后基于风险的排序

1001
0:45:33.320 --> 0:45:36.200
然后分别的去考虑它的应对策略

1002
0:45:36.200 --> 0:45:39.080
而且在考虑应对策略的时候还要去想

1003
0:45:39.080 --> 0:45:40.600
我为了这个投入

1004
0:45:40.600 --> 0:45:43.880
我要投入多少人力物力精力怎幺怎幺样

1005
0:45:43.880 --> 0:45:45.880
一个一个的往下排

1006
0:45:45.880 --> 0:45:49.640
那幺抗议的领域我就不说了

1007
0:45:49.640 --> 0:45:52.600
但是在开源软件风险的领域

1008
0:45:52.600 --> 0:45:54.840
其实我们同样需要这样一个排序

1009
0:45:54.840 --> 0:45:57.240
排名第一的风险

1010
0:45:57.240 --> 0:46:00.840
恰恰不是别人有意针对你干什幺

1011
0:46:00.840 --> 0:46:06.600
就是代码有漏洞有bug导致安全漏洞

1012
0:46:06.600 --> 0:46:07.880
这是最多的

1013
0:46:07.880 --> 0:46:11.000
而且随着开源软件的增多

1014
0:46:11.000 --> 0:46:14.600
随着开源软件在我们的软件系统当中的

1015
0:46:14.600 --> 0:46:16.840
使用的范围和比例的增加

1016
0:46:16.840 --> 0:46:19.080
那幺这个风险是在不断上升的

1017
0:46:19.080 --> 0:46:21.400
而且这是最大量的这是第一类

1018
0:46:21.400 --> 0:46:25.320
第二类可能的是有恶意软件

1019
0:46:25.320 --> 0:46:27.800
这些恶意软件有出于这种

1020
0:46:27.800 --> 0:46:31.240
geek的理由黑客的理由

1021
0:46:31.240 --> 0:46:32.840
也有可能是出于好奇

1022
0:46:32.840 --> 0:46:35.160
也有可能是出于政治理由政治投毒

1023
0:46:35.160 --> 0:46:38.040
像上次我们聊过的乌克兰的那种政治投毒

1024
0:46:38.040 --> 0:46:40.760
这种理由是第二类风险

1025
0:46:40.760 --> 0:46:45.640
然后第三类风险才是别人

1026
0:46:45.640 --> 0:46:48.440
不让你用某款软件

1027
0:46:48.440 --> 0:46:52.280
而且这个软件通常是商业软件

1028
0:46:52.280 --> 0:46:56.440
或者是开源软件的商业版本

1029
0:46:56.440 --> 0:47:00.120
再下面一个风险才是某个

1030
0:47:00.120 --> 0:47:02.040
比如说像Github这样的平台

1031
0:47:02.040 --> 0:47:06.040
彻底对你关上大门

1032
0:47:06.040 --> 0:47:08.280
这些风险的顺序

1033
0:47:08.280 --> 0:47:12.120
我觉得当然这个风险的几率我不太说得好

1034
0:47:12.120 --> 0:47:14.520
但是顺序大概应该是这样

1035
0:47:14.520 --> 0:47:18.200
那幺我们应对的策略也应该是这样

1036
0:47:18.200 --> 0:47:19.080
这是第一

1037
0:47:19.080 --> 0:47:23.000
第二个其实我觉得那个安全大佬

1038
0:47:23.000 --> 0:47:25.480
就是前面你说的政协委员的安全大佬

1039
0:47:25.480 --> 0:47:28.680
他说的特别有道理的一点是

1040
0:47:28.680 --> 0:47:32.680
我们越是要担心别人不让我们用

1041
0:47:32.680 --> 0:47:34.680
我们越是要积极的走出去

1042
0:47:34.680 --> 0:47:37.160
参与国际的开源项目

1043
0:47:37.160 --> 0:47:39.480
它代表两件事情

1044
0:47:39.480 --> 0:47:41.640
第一个是如果我们的贡献比例

1045
0:47:41.640 --> 0:47:44.440
占到20% 30%甚至50%

1046
0:47:44.440 --> 0:47:46.680
对啊 人家不敢不跟你玩啊

1047
0:47:46.680 --> 0:47:48.120
对 不敢不跟你玩

1048
0:47:48.120 --> 0:47:51.160
而另外一方面其实还意味着

1049
0:47:51.160 --> 0:47:54.680
我们要有能力在开源社区

1050
0:47:54.680 --> 0:47:56.840
做出贡献能够生存下来

1051
0:47:56.840 --> 0:47:58.840
哪怕别人不让你玩了

1052
0:47:58.840 --> 0:48:00.840
你也是在外面混过的

1053
0:48:00.840 --> 0:48:02.040
在外面写过代码

1054
0:48:02.040 --> 0:48:03.560
提交过patch的

1055
0:48:03.560 --> 0:48:06.520
那幺你回来你能够接着干下去

1056
0:48:06.520 --> 0:48:08.280
对 如果你在国际社区

1057
0:48:08.280 --> 0:48:09.880
在国际上的开源社区

1058
0:48:09.880 --> 0:48:11.800
你都没有参与过贡献

1059
0:48:11.800 --> 0:48:13.560
你关起门来自己改代码

1060
0:48:13.560 --> 0:48:15.080
觉得我能改得下去

1061
0:48:15.080 --> 0:48:17.640
这就是一种妄念

1062
0:48:17.640 --> 0:48:21.960
是 我觉得这方面俄罗斯比我们做得好

1063
0:48:21.960 --> 0:48:25.640
俄罗斯的黑客级的开发者

1064
0:48:25.640 --> 0:48:27.400
这个黑客是褒义的

1065
0:48:27.400 --> 0:48:29.080
hacker不是那个搞破坏的

1066
0:48:29.080 --> 0:48:32.040
是那种特别牛的那种进程员

1067
0:48:32.040 --> 0:48:34.440
这种开发者挺多的

1068
0:48:34.440 --> 0:48:36.680
当然俄罗斯也有很多那种

1069
0:48:36.680 --> 0:48:38.520
那种含义的就cracker

1070
0:48:38.520 --> 0:48:40.440
就是搞网络破坏那种也很多

1071
0:48:40.440 --> 0:48:42.600
所以他们技术力是强的

1072
0:48:42.600 --> 0:48:46.120
而且有挺多这种高精尖的

1073
0:48:46.120 --> 0:48:48.360
开源的代码

1074
0:48:48.360 --> 0:48:50.440
是俄罗斯或者前苏联的

1075
0:48:50.440 --> 0:48:53.160
一些这种人去贡献的

1076
0:48:53.160 --> 0:48:56.200
所以他们这方面还真的还挺厉害的

1077
0:48:56.200 --> 0:49:01.160
相比人口和进程员人口

1078
0:49:01.160 --> 0:49:02.760
中国比俄罗斯多得多

1079
0:49:02.760 --> 0:49:04.600
但是反而好像

1080
0:49:04.600 --> 0:49:06.760
当然这几年我觉得已经好多了

1081
0:49:06.760 --> 0:49:07.560
比以前好多了

1082
0:49:07.560 --> 0:49:09.640
但我觉得还是有很大空间的

1083
0:49:09.640 --> 0:49:12.040
王老师怎幺看

1084
0:49:12.040 --> 0:49:13.320
对我说一下

1085
0:49:13.320 --> 0:49:16.760
对我这块其实也会从两个点来

1086
0:49:16.760 --> 0:49:18.120
不同的去看这个事

1087
0:49:18.120 --> 0:49:20.440
对第一个其实我特别赞同

1088
0:49:20.440 --> 0:49:22.840
包括刚才表伟老师所提到的

1089
0:49:22.840 --> 0:49:24.520
对其实我们的同学也好

1090
0:49:24.520 --> 0:49:25.160
老师也好

1091
0:49:25.160 --> 0:49:28.040
其实是非常需要走出去

1092
0:49:28.040 --> 0:49:31.240
对特别是如果是和开源相关的

1093
0:49:31.240 --> 0:49:34.360
对一定要走到国际上的这种开源社区里面

1094
0:49:34.360 --> 0:49:37.480
去从事相关的一些学习和研究工作

1095
0:49:37.480 --> 0:49:40.120
所以这一点是非常重要的

1096
0:49:40.120 --> 0:49:43.240
也是我们现在希望在一个我们自己的学校

1097
0:49:43.240 --> 0:49:44.840
实验室之间去推的

1098
0:49:44.840 --> 0:49:47.800
对一个非常大的一个好处

1099
0:49:47.800 --> 0:49:50.040
就是你首先你需要知道

1100
0:49:50.040 --> 0:49:52.680
对这世界上的这些好的东西是什幺

1101
0:49:52.680 --> 0:49:55.480
对并且哪些厉害的人是谁

1102
0:49:55.480 --> 0:49:58.840
对然后如果有机会尽量和他们去做一些连接

1103
0:49:58.840 --> 0:50:00.520
对和他们去打成一片

1104
0:50:00.520 --> 0:50:04.280
对包括我们现在实验室去参与到的一些国际上的一些

1105
0:50:04.280 --> 0:50:05.320
开源项目

1106
0:50:05.320 --> 0:50:06.520
你会发现

1107
0:50:06.520 --> 0:50:08.680
真的还是特别的一些nice

1108
0:50:08.680 --> 0:50:10.280
他们的一些开发者

1109
0:50:10.280 --> 0:50:12.680
对的一些贡献者还是非常好

1110
0:50:12.680 --> 0:50:16.120
对这就是为什幺我们现在其实还是鼓励同学在GitHub

1111
0:50:16.120 --> 0:50:18.040
上面去做一些相关的事情

1112
0:50:18.040 --> 0:50:19.640
包括我们自己实验室的一些项目

1113
0:50:19.640 --> 0:50:20.360
还有一些文档

1114
0:50:20.360 --> 0:50:22.600
其实都是based在那上面的

1115
0:50:22.600 --> 0:50:24.920
对因为它就是一个国际环境

1116
0:50:24.920 --> 0:50:28.600
对它能够去连接更好的一些人更好的一些项目

1117
0:50:28.600 --> 0:50:31.640
对这是我们是需要大大的去鼓励

1118
0:50:31.640 --> 0:50:34.680
而不是说我只能用某些东西

1119
0:50:34.680 --> 0:50:37.320
把我们自己给它局限起来

1120
0:50:37.320 --> 0:50:38.520
对这个肯定是不对的

1121
0:50:38.520 --> 0:50:41.400
就我们自己拉几个人去玩

1122
0:50:41.400 --> 0:50:45.480
对越是这种某些方面去封闭

1123
0:50:45.480 --> 0:50:47.720
我们反而是要越开放

1124
0:50:47.720 --> 0:50:50.920
对我们要主动去参与他们这些事情

1125
0:50:50.920 --> 0:50:52.200
对即便是别人的

1126
0:50:52.200 --> 0:50:53.480
其实我觉得也没什幺

1127
0:50:53.480 --> 0:50:54.440
他确实是好

1128
0:50:54.440 --> 0:50:57.160
没有必要你自己再去做一遍

1129
0:50:57.160 --> 0:50:57.480
对吧

1130
0:50:57.480 --> 0:50:59.480
我觉得这是第一个层面

1131
0:50:59.480 --> 0:51:02.760
对第二个层面我同时也是非常赞同

1132
0:51:02.760 --> 0:51:04.440
对在某些方面

1133
0:51:04.440 --> 0:51:06.280
如果我们有自己的

1134
0:51:06.280 --> 0:51:09.240
特别是我们自己发起的一些开源项目

1135
0:51:09.240 --> 0:51:12.840
对我们现在很多的一些大厂所发起的一些开源项目

1136
0:51:12.840 --> 0:51:14.360
我们也是鼓励同学们

1137
0:51:14.360 --> 0:51:16.680
也多去用我们自己的一些开源项目

1138
0:51:16.680 --> 0:51:17.880
对为什幺这幺去说

1139
0:51:17.880 --> 0:51:20.760
对因为大家都是搞软件的

1140
0:51:20.760 --> 0:51:22.520
对软件有一个非常大的特点

1141
0:51:22.520 --> 0:51:25.560
就是好多软件它一定是用出来的

1142
0:51:25.560 --> 0:51:27.960
对它不是说你有多少的高手

1143
0:51:27.960 --> 0:51:28.280
对吧

1144
0:51:28.280 --> 0:51:30.680
你有多少厉害的一些工程师

1145
0:51:30.680 --> 0:51:33.400
对它是一定是和一些用户不断去打磨

1146
0:51:33.400 --> 0:51:34.920
不断去提一些问题

1147
0:51:34.920 --> 0:51:37.560
然后把它慢慢的给它培养起来的

1148
0:51:37.560 --> 0:51:38.680
对我们现在知道

1149
0:51:38.680 --> 0:51:41.640
包括我们现在国内的一些大厂

1150
0:51:41.640 --> 0:51:47.400
对都开始去希望能够推出主导的一些开源项目

1151
0:51:47.400 --> 0:51:48.840
对我们其实在学校里面

1152
0:51:48.840 --> 0:51:51.560
一方面我们和国际社区多去对接

1153
0:51:51.560 --> 0:51:53.480
第二方面我们在教学

1154
0:51:53.480 --> 0:51:54.920
我们在做研究的时候

1155
0:51:54.920 --> 0:51:58.040
其实也都去用自己的

1156
0:51:58.040 --> 0:52:02.120
特别是我们觉得还挺有一些创新点的一些项目

1157
0:52:02.120 --> 0:52:06.200
对其实我们前面刚才那个例子其实是一个特别好的

1158
0:52:06.200 --> 0:52:08.680
对他们刚才那个Dongala他们

1159
0:52:08.680 --> 0:52:11.960
就是从做那个Linpack的时候

1160
0:52:11.960 --> 0:52:14.040
对把它做成一个教学工具

1161
0:52:14.040 --> 0:52:15.720
对你可以想大家可以想象一下

1162
0:52:15.720 --> 0:52:18.280
对那个时候它的那种简陋性

1163
0:52:18.280 --> 0:52:20.360
和我们今天所看到的那个Metalab

1164
0:52:20.360 --> 0:52:22.600
其实是相差的10万8000

1165
0:52:22.600 --> 0:52:24.520
对但是就是因为这些东西

1166
0:52:24.520 --> 0:52:26.600
那我就先从学生里面去用

1167
0:52:26.600 --> 0:52:27.720
它可能不完善不好

1168
0:52:27.720 --> 0:52:30.280
但没关系我们边用的时候当中

1169
0:52:30.280 --> 0:52:32.440
我们可以去提出一些问题

1170
0:52:32.440 --> 0:52:32.680
对吧

1171
0:52:32.680 --> 0:52:34.680
那这个问题如果有的解决最好

1172
0:52:34.680 --> 0:52:35.560
如果没有的解决

1173
0:52:35.560 --> 0:52:37.240
那我们也可以去一起解决

1174
0:52:37.240 --> 0:52:40.040
这样的话我们可以一起把这个软件

1175
0:52:40.040 --> 0:52:43.400
让它不断的去完善不断的那个成熟

1176
0:52:43.400 --> 0:52:46.120
对那这个其实就可以慢慢成为一个

1177
0:52:46.120 --> 0:52:50.200
我们就是一个那个国际上的一个最好的一个东西

1178
0:52:50.200 --> 0:52:52.600
但是那你不能够说一开始你觉得它不好

1179
0:52:52.600 --> 0:52:53.560
你就不去用它

1180
0:52:53.560 --> 0:52:57.480
对我觉得是可以多去做一点这方面一些事情

1181
0:52:57.480 --> 0:53:01.320
对带我们同学去体验去学习这些软件

1182
0:53:01.320 --> 0:53:04.760
所以说现在我实际上是在学校里面大力推崇

1183
0:53:04.760 --> 0:53:08.680
基于一些开源的软件去替代我们传统的那些

1184
0:53:08.680 --> 0:53:13.320
商业化对甚至是一些是一些那个专业化的一些软件

1185
0:53:13.320 --> 0:53:15.080
包括像像那些meta lab

1186
0:53:15.080 --> 0:53:17.000
对其实虽然它用起来方便

1187
0:53:17.000 --> 0:53:18.920
对但是呢像一些开源项目

1188
0:53:18.920 --> 0:53:21.880
对那特别是我们自己如果有像我们的openblast

1189
0:53:21.880 --> 0:53:24.360
对这个东西对其实可以考虑去多用

1190
0:53:24.360 --> 0:53:28.440
对因为你你多用其实它才能够慢慢的这种成长起来

1191
0:53:28.440 --> 0:53:31.880
对它一定是一个这种有和其他软件有关系

1192
0:53:31.880 --> 0:53:34.520
形成一个生态上的一个一个东西

1193
0:53:34.520 --> 0:53:35.960
对那这样的话其实

1194
0:53:35.960 --> 0:53:39.160
那我们其实就会越来越越有自信

1195
0:53:39.160 --> 0:53:40.520
并且不光是我们用

1196
0:53:40.520 --> 0:53:43.080
那还可能奉献给全世界所有的人去用

1197
0:53:43.080 --> 0:53:46.200
那开源其实就是这样一个一个精神对吧

1198
0:53:46.200 --> 0:53:50.040
这个无论是进程员还是产品经理

1199
0:53:50.040 --> 0:53:53.720
都有一句话是智力名言叫一丘道富

1200
0:53:53.720 --> 0:53:56.120
就是你要吃自己的狗粮

1201
0:53:56.120 --> 0:53:59.320
意思就是说你自己做东西你自己一定要多用

1202
0:53:59.320 --> 0:54:03.320
就是这个真的是颠覆不破的真理

1203
0:54:03.320 --> 0:54:04.760
就是软件是用出来的

1204
0:54:04.760 --> 0:54:07.320
用的多才有可能成为一个好软件

1205
0:54:07.320 --> 0:54:10.200
而且确实我的感受跟王老师也一样

1206
0:54:10.200 --> 0:54:12.360
就是我遇到的一些国外的

1207
0:54:12.360 --> 0:54:16.760
包括对我们不太友好的国家的一些开发者

1208
0:54:16.760 --> 0:54:19.000
其实他本身人都是很nice的

1209
0:54:19.000 --> 0:54:22.120
在做技术的时候在做创新

1210
0:54:22.120 --> 0:54:24.200
在做开放性的创新的时候

1211
0:54:24.200 --> 0:54:27.720
其实大家的很多东西理念价值观是共通的

1212
0:54:27.720 --> 0:54:30.680
这敌人慢慢的变得不开放了

1213
0:54:30.680 --> 0:54:33.000
我们就反而要去扛起这个开放的大旗

1214
0:54:33.000 --> 0:54:34.920
这一点我非常赞同

1215
0:54:34.920 --> 0:54:44.840
说回来刚才表伟从一个大的面上给了一个排序

1216
0:54:44.840 --> 0:54:46.920
我想给出另外一种思路

1217
0:54:46.920 --> 0:54:51.960
就是做一下不同的软件的一个分类

1218
0:54:51.960 --> 0:54:56.920
我把软件分成大概粗一点分三类

1219
0:54:56.920 --> 0:54:59.880
可能不严谨但是比较方便我们讨论问题

1220
0:54:59.880 --> 0:55:05.000
一类叫做日常性的功能性的应用软件

1221
0:55:05.000 --> 0:55:10.120
比如说我们现在已经耳熟能详的各种各样的互联网服务

1222
0:55:10.120 --> 0:55:15.480
还有我们在计算机和手机里面经常用到的一些常用工具

1223
0:55:15.480 --> 0:55:22.520
比如拍照照片的处理拍视频还有看书类似这样的软件

1224
0:55:22.520 --> 0:55:26.120
这种东西我称之为叫做常规性的应用软件

1225
0:55:26.120 --> 0:55:31.000
这部分我觉得我们国家现在不存在任何风险

1226
0:55:31.000 --> 0:55:34.680
就是你需要的时候随时很快就可以做一堆出来

1227
0:55:34.680 --> 0:55:38.440
以前国内也有人尝试过但由于各种原因没做成

1228
0:55:38.440 --> 0:55:40.360
那是因为需求就那样

1229
0:55:40.360 --> 0:55:42.600
如果真的被逼到一定程度了

1230
0:55:42.600 --> 0:55:44.440
哪怕从零开始很快就能起来

1231
0:55:44.440 --> 0:55:46.440
这种我觉得不是特别担心

1232
0:55:46.440 --> 0:55:47.480
这是第一类

1233
0:55:47.480 --> 0:55:51.480
第二类就是所谓的平台性的软件

1234
0:55:51.480 --> 0:55:57.080
这个里面其实比较引人注目的就是类似于GitHub

1235
0:55:57.080 --> 0:55:59.640
这样的开源软件托管平台

1236
0:55:59.640 --> 0:56:04.440
这一块它确实存在假设极端情况

1237
0:56:04.440 --> 0:56:09.720
但是现在从俄乌战争这幺严重的一个制裁的形式下

1238
0:56:09.720 --> 0:56:13.240
GitHub都坚守了自己的阵地

1239
0:56:13.240 --> 0:56:18.360
拒绝去做进一步的这样的一个分离分割

1240
0:56:18.360 --> 0:56:21.000
我觉得已经是一个非常重要的风向标了

1241
0:56:21.000 --> 0:56:23.080
所以这块我也不是特别担心

1242
0:56:23.080 --> 0:56:27.640
而且如果大家真的很了解Git这个东西

1243
0:56:27.640 --> 0:56:29.960
就GitHub底层的关键工具

1244
0:56:29.960 --> 0:56:34.200
Git这个分布式的源码版本管理系统

1245
0:56:34.200 --> 0:56:36.440
你就会知道这样的平台

1246
0:56:36.440 --> 0:56:39.400
就算有朝一日走到了一个很极端的情况

1247
0:56:39.400 --> 0:56:43.080
你非常容易去fork里面的东西出来

1248
0:56:43.080 --> 0:56:45.240
因为它本来就是分布式的

1249
0:56:45.240 --> 0:56:48.040
你可以先锁定你现在使用的版本

1250
0:56:48.040 --> 0:56:49.720
最新的你先不升级

1251
0:56:49.720 --> 0:56:52.440
然后fork出来之后你再去具体做

1252
0:56:52.440 --> 0:56:53.560
因为它只是个透管平台

1253
0:56:53.560 --> 0:56:55.000
关键还是里面的内容

1254
0:56:55.000 --> 0:56:59.000
所以这个平台这个层面有人在说

1255
0:56:59.000 --> 0:57:03.160
说我们不能受制于GitHub和GitLab

1256
0:57:03.160 --> 0:57:04.520
我们要自己做一套

1257
0:57:04.520 --> 0:57:07.880
这个事我觉得也未免是有点杞人忧天

1258
0:57:07.880 --> 0:57:10.840
或者有其他的不可告人的目的

1259
0:57:10.840 --> 0:57:12.680
这个咱就不去说它了

1260
0:57:12.680 --> 0:57:14.840
但我觉得这个有点没有必要

1261
0:57:14.840 --> 0:57:16.840
因为这个东西本身的危害并不大

1262
0:57:16.840 --> 0:57:21.320
第三类是我觉得要认真对待的了

1263
0:57:21.320 --> 0:57:24.520
就是一些国之重器

1264
0:57:24.520 --> 0:57:27.240
比如刚才我们提到的超算

1265
0:57:27.240 --> 0:57:30.200
以及为超算服务的一系列的东西

1266
0:57:30.200 --> 0:57:32.520
还有大家耳熟能详的北斗

1267
0:57:32.520 --> 0:57:35.560
与这个北斗相关的所有的东西

1268
0:57:35.560 --> 0:57:37.000
还有比如说芯片

1269
0:57:37.000 --> 0:57:39.480
计算机芯片的制造全流程

1270
0:57:39.480 --> 0:57:42.760
以及这个全流程上需要用到的各种各样的软件

1271
0:57:42.760 --> 0:57:44.040
这些东西

1272
0:57:44.040 --> 0:57:47.240
我觉得它的危险是非常现实的

1273
0:57:47.240 --> 0:57:49.160
也就是在可预见的未来

1274
0:57:49.160 --> 0:57:51.720
是完全有可能就真的出现的

1275
0:57:51.720 --> 0:57:52.920
而这些软件

1276
0:57:52.920 --> 0:57:55.240
跟我说的第一类的软件还不太一样

1277
0:57:55.240 --> 0:57:58.760
它不是说你想做马上就能做出来的

1278
0:57:58.760 --> 0:58:01.000
它跟这个Metalab是很像

1279
0:58:01.000 --> 0:58:04.280
就是它本身并没有那幺的

1280
0:58:04.280 --> 0:58:06.280
不可逾越的东西在里面

1281
0:58:06.280 --> 0:58:08.040
但它是一个很专门的软件

1282
0:58:08.040 --> 0:58:10.680
它需要长期的使用迭代

1283
0:58:10.680 --> 0:58:13.160
才能够让它变成一个真的好用的东西

1284
0:58:13.160 --> 0:58:15.080
所以这种东西我反而觉得

1285
0:58:15.080 --> 0:58:18.280
是需要未雨绸缪的提前开始搞起来

1286
0:58:18.280 --> 0:58:20.840
而且刚才我觉得王老师说的这个点

1287
0:58:20.840 --> 0:58:21.880
我也非常赞同

1288
0:58:21.880 --> 0:58:26.920
从学校开始搞是非常好的一个方式

1289
0:58:26.920 --> 0:58:29.400
就是在教学当中先用起来

1290
0:58:29.400 --> 0:58:32.600
这个你比如说Metalab

1291
0:58:32.600 --> 0:58:34.280
其实有很多好的替代品

1292
0:58:34.280 --> 0:58:35.960
我刚才举的例子Octave

1293
0:58:35.960 --> 0:58:40.680
还有基于Python的一整个Python站的一个科学计算

1294
0:58:40.680 --> 0:58:44.520
和数学相关的东西其实很多了

1295
0:58:44.520 --> 0:58:46.040
而且里面有很多部分

1296
0:58:46.040 --> 0:58:49.000
已经可以兼容Metalab的一些文档格式

1297
0:58:49.000 --> 0:58:51.880
一些Metalab的编程语言

1298
0:58:51.880 --> 0:58:53.000
它其实都是兼容的

1299
0:58:53.000 --> 0:58:54.120
或者有相应的模块

1300
0:58:54.120 --> 0:58:59.800
唯一就是你需要有一点使用的学习曲线

1301
0:58:59.800 --> 0:59:02.600
你需要付出一点代价去尝试

1302
0:59:02.600 --> 0:59:05.480
但是如果一个刚进学校的学生

1303
0:59:05.480 --> 0:59:07.400
以前也没用过Metalab的话

1304
0:59:07.400 --> 0:59:09.080
他有什幺损失吗

1305
0:59:09.080 --> 0:59:10.040
没有损失的

1306
0:59:10.040 --> 0:59:12.280
他就是从头开始学另外一个东西好了

1307
0:59:12.280 --> 0:59:16.200
所以我觉得这个逻辑应该是比较重要

1308
0:59:16.200 --> 0:59:20.840
而这一块我一直借各种机会都在表达

1309
0:59:20.840 --> 0:59:25.240
包括国家包括有关的协会或者类似的

1310
0:59:25.240 --> 0:59:28.200
我觉得应该在这方面去做一些推动性的工作

1311
0:59:28.200 --> 0:59:30.600
因为按照我刚才说的这三个分类的话

1312
0:59:30.600 --> 0:59:32.200
只有最后的分类

1313
0:59:32.200 --> 0:59:33.720
包括刚才说的所有这些东西

1314
0:59:33.720 --> 0:59:35.320
包括CAD一些设计软件

1315
0:59:35.320 --> 0:59:36.520
都是属于这个分类的

1316
0:59:36.520 --> 0:59:38.760
它的应用面没有那幺广

1317
0:59:38.760 --> 0:59:40.360
但是对国家非常重要

1318
0:59:40.360 --> 0:59:44.120
对我们整个民族复兴的大业非常重要

1319
0:59:44.120 --> 0:59:47.720
这个恐怕就得另外专门去考虑

1320
0:59:47.720 --> 0:59:51.480
包括我们老庄同志的工作的公司

1321
0:59:51.480 --> 0:59:57.160
也可能是前线部门之一

1322
0:59:57.160 --> 0:59:59.240
也会碰到很多这种问题

1323
0:59:59.240 --> 1:00:01.880
所以我觉得这方面是需要社会各界

1324
1:00:01.880 --> 1:00:04.120
一起来努力的一个领域

1325
1:00:04.120 --> 1:00:07.720
前两个真的我个人觉得没有太大的必要

1326
1:00:07.720 --> 1:00:10.600
去恐慌或者担心

1327
1:00:10.600 --> 1:00:12.840
其实我还想指出一个

1328
1:00:12.840 --> 1:00:15.960
现在的一些讨论当中的一个误区

1329
1:00:15.960 --> 1:00:17.560
或者说有人刻意混淆

1330
1:00:17.560 --> 1:00:18.840
有人真不懂

1331
1:00:18.840 --> 1:00:23.240
就是把软件不是分开源闭源

1332
1:00:23.240 --> 1:00:26.200
而是分美国或西方

1333
1:00:26.200 --> 1:00:29.320
但通常会说美国

1334
1:00:29.320 --> 1:00:32.120
好像哪怕这个开源软件是美国的

1335
1:00:32.120 --> 1:00:36.280
我们都不敢或者说用起来要当心

1336
1:00:36.280 --> 1:00:38.840
这是一个很神奇的思路

1337
1:00:38.840 --> 1:00:39.800
这不是神奇

1338
1:00:39.800 --> 1:00:40.920
这是无知的思路

1339
1:00:40.920 --> 1:00:42.600
或者装作无知的思路

1340
1:00:42.600 --> 1:00:43.640
对

1341
1:00:43.640 --> 1:00:46.280
但事实上我觉得只要它是开源的

1342
1:00:46.280 --> 1:00:48.200
尤其是像GNU这样的开源

1343
1:00:48.200 --> 1:00:50.120
那是非常友好的

1344
1:00:50.120 --> 1:00:51.960
而且来的是非常友好的开源

1345
1:00:51.960 --> 1:00:52.760
对

1346
1:00:52.760 --> 1:00:54.040
品牌有保证的

1347
1:00:54.040 --> 1:00:55.560
这个我们就应该大胆的

1348
1:00:55.560 --> 1:00:57.480
甚至是积极的去用

1349
1:00:57.480 --> 1:01:01.080
而且就应该像我们刚才说的要反渗透

1350
1:01:01.080 --> 1:01:02.360
对

1351
1:01:02.360 --> 1:01:05.560
要打入内部去赢得一定的影响力

1352
1:01:05.560 --> 1:01:07.880
不光是用而且要积极的贡献

1353
1:01:07.880 --> 1:01:09.320
对

1354
1:01:09.320 --> 1:01:11.640
这其实华为已经做了示范了

1355
1:01:11.640 --> 1:01:15.240
早期我们在无线电的相关的标准组织里面

1356
1:01:15.240 --> 1:01:16.440
是话都讲不上的

1357
1:01:16.440 --> 1:01:18.360
但是十几二十年努力下来

1358
1:01:18.360 --> 1:01:19.960
就成为主导力量了

1359
1:01:19.960 --> 1:01:21.480
等到你成为主导力量之后

1360
1:01:21.480 --> 1:01:23.080
美国人说把你踢出去

1361
1:01:23.080 --> 1:01:24.440
这个踢出去之后发现

1362
1:01:24.440 --> 1:01:28.200
踢出去之后好像我这也不剩啥了

1363
1:01:28.200 --> 1:01:28.920
对吧

1364
1:01:28.920 --> 1:01:31.320
就是这幺回事吗

1365
1:01:31.320 --> 1:01:31.800
好

1366
1:01:31.800 --> 1:01:34.600
那我们今天也聊了一个多小时了

1367
1:01:34.600 --> 1:01:38.040
这个一开始说了一下

1368
1:01:38.040 --> 1:01:40.840
我们几个人在隔离期间的各种

1369
1:01:40.840 --> 1:01:42.760
可以让大家乐一乐的事

1370
1:01:42.760 --> 1:01:45.800
然后重点聊了今年的图灵奖

1371
1:01:45.800 --> 1:01:48.920
这个高性能计算和超算的一些话题

1372
1:01:48.920 --> 1:01:54.840
然后再又转移到关于软件的安全可靠

1373
1:01:54.840 --> 1:01:58.120
软件的使用的安全性方面的一些问题

1374
1:01:58.120 --> 1:02:00.440
希望能够给大家一些启发

1375
1:02:00.440 --> 1:02:05.000
那我们今天的节目就先到这里

1376
1:02:05.000 --> 1:02:05.800
谢谢大家

1377
1:02:05.800 --> 1:02:06.760
再见

1378
1:02:06.760 --> 1:02:07.480
好再见

1379
1:02:07.480 --> 1:02:32.680
拜拜

