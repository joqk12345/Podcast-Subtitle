0
0:00:00.000 --> 0:00:02.040
好各位听众大家好

1
0:00:02.040 --> 0:00:07.160
那今天呢是我们这个后互联网时代的乱谈啊

2
0:00:07.160 --> 0:00:09.080
加更的一期番外篇啊

3
0:00:09.080 --> 0:00:11.080
因为上周有一个

4
0:00:11.080 --> 0:00:12.680
至少对我来说啊

5
0:00:12.680 --> 0:00:17.040
对我们几位这个都在行里面混了很多年的人来说

6
0:00:17.040 --> 0:00:18.800
都挺震撼的一件事啊

7
0:00:18.800 --> 0:00:23.160
就是有一位这个开源的开发者啊

8
0:00:23.160 --> 0:00:27.520
他的一个很算比较热门的一个开源的库啊

9
0:00:27.520 --> 0:00:30.440
是Node.js的一个库叫NodeIPC

10
0:00:30.440 --> 0:00:33.720
是做这个Node.js里面的跨进程通信的一个库

11
0:00:33.720 --> 0:00:35.440
那幺他在这个库里面呢

12
0:00:35.440 --> 0:00:39.680
他就提交了一个这个一些代码啊

13
0:00:39.680 --> 0:00:43.600
就是以这个支持乌克兰啊

14
0:00:43.600 --> 0:00:46.760
反对俄乌战争这样的一个名义啊

15
0:00:46.760 --> 0:00:49.440
在里面加入了一些

16
0:00:49.440 --> 0:00:52.440
呃怎幺讲攻击型的代码啊

17
0:00:52.440 --> 0:00:54.800
如果有人真的使用代码的话

18
0:00:54.800 --> 0:00:57.080
会面临着很重大的数据损失

19
0:00:57.080 --> 0:00:59.400
所以实际上类似于一个病毒了啊

20
0:00:59.400 --> 0:01:02.520
这是实际上是在开源软件供应链的

21
0:01:02.520 --> 0:01:04.360
这个里面去投毒的一个行为

22
0:01:04.360 --> 0:01:07.760
这个行为呢以我的所知啊

23
0:01:07.760 --> 0:01:09.600
好像应该历史上没发生过

24
0:01:09.600 --> 0:01:11.960
所以我们非常想来聊聊这个事情

25
0:01:11.960 --> 0:01:16.120
那正好呢我们有一位这个也是多年的老友啊

26
0:01:16.120 --> 0:01:17.880
前同事啊就是Hacks

27
0:01:17.880 --> 0:01:21.560
他是这个对整个事情是一直

28
0:01:21.560 --> 0:01:23.520
呃跟踪也非常的了解

29
0:01:23.520 --> 0:01:25.360
所以今天我们也请到

30
0:01:25.360 --> 0:01:30.280
呃他来跟我们几位一起来这个聊聊这个事情

31
0:01:30.280 --> 0:01:33.040
那欢迎我们Hacks给大家打个招呼

32
0:01:34.480 --> 0:01:37.480
哈喽大家好很高兴来到这个节目

33
0:01:37.480 --> 0:01:41.440
当然还有我们呃常驻的两位朋友啊

34
0:01:41.440 --> 0:01:42.080
老庄

35
0:01:43.200 --> 0:01:45.680
大家好王老师

36
0:01:45.680 --> 0:01:47.400
哈喽大家好

37
0:01:47.400 --> 0:01:51.760
那首先请这个Hacks说一下这事的来龙去脉吧

38
0:01:51.760 --> 0:01:55.520
因为很多朋友可能还不太了解这个事情的情况

39
0:01:55.520 --> 0:01:55.880
好的

40
0:01:55.880 --> 0:01:57.600
我给大家简单介绍一下吧

41
0:01:58.440 --> 0:01:58.920
呃

42
0:01:58.920 --> 0:02:01.080
node-ipc这个库吧

43
0:02:01.080 --> 0:02:05.440
它呃就是一个node的这样一个库

44
0:02:05.440 --> 0:02:07.720
然后呢用的人还挺多的

45
0:02:07.720 --> 0:02:12.320
呃最呃有名的就是VueJS

46
0:02:12.320 --> 0:02:17.200
这个大家非常熟悉的呃前端三大框架之一

47
0:02:17.200 --> 0:02:19.160
那Vue的话呢

48
0:02:19.160 --> 0:02:23.720
它的Vue CLI就是Vue的命令行的工具

49
0:02:23.720 --> 0:02:30.040
呃在这个开发依赖里面间接的使用了node-ipc这样一个包

50
0:02:31.080 --> 0:02:36.680
当然也有好多的其他的软件也可能用了这样一个包

51
0:02:36.680 --> 0:02:38.160
那这个包的作者呢

52
0:02:38.160 --> 0:02:42.280
呃其实是一个还是一个比较积极的开源开发者

53
0:02:43.640 --> 0:02:47.560
那他在这个俄乌战争发生之后啊

54
0:02:47.560 --> 0:02:52.600
呃他可能啊我就猜测他可能是想做点什幺

55
0:02:53.360 --> 0:02:54.120
所以

56
0:02:54.960 --> 0:02:57.480
他当时呢呃就

57
0:02:58.320 --> 0:03:01.800
给自己的这个node-ipc这个库里面啊

58
0:03:01.800 --> 0:03:06.480
就是我们现在最终看到的实际上是加了一个依赖

59
0:03:06.480 --> 0:03:12.680
这个依赖呢也是他自己写的叫做peace not war这样一个模块啊

60
0:03:12.680 --> 0:03:13.880
这样一个库

61
0:03:13.880 --> 0:03:15.640
这库干了些什幺事呢

62
0:03:15.640 --> 0:03:19.720
就是他如果你这个使用这个依赖的话

63
0:03:19.720 --> 0:03:26.800
他就会在你的这个电脑的桌面上创建一个文本文档

64
0:03:26.800 --> 0:03:31.080
里面是一个反战的一个宣言

65
0:03:31.080 --> 0:03:34.000
用各个文本写的这样一个反战宣言

66
0:03:35.720 --> 0:03:38.600
那幺他不仅会在你的桌面上写啊

67
0:03:38.600 --> 0:03:40.040
他可能也会找一下

68
0:03:40.040 --> 0:03:42.200
比方说如果你使用了OneDrive

69
0:03:42.200 --> 0:03:46.200
那也会在这个OneDrive的目录夹下写这个文档

70
0:03:46.200 --> 0:03:49.040
那幺这件事情

71
0:03:49.040 --> 0:03:57.120
呃最早也是国内的使用啊VueJS的一些开发者发现的啊

72
0:03:57.120 --> 0:04:01.000
他们发现这个我装了之后怎幺突然这个桌面多了个文档

73
0:04:01.000 --> 0:04:02.480
感觉是中毒了

74
0:04:02.480 --> 0:04:08.440
结果这个找了一下发现是这个依赖包做的这样一个事情

75
0:04:08.440 --> 0:04:13.440
那幺这个事情就逐渐的就发酵了

76
0:04:13.440 --> 0:04:15.440
在这个发酵的过程当中呢

77
0:04:15.440 --> 0:04:21.440
有人就去审查了这个这个库的这个历史上的最近的提交吧

78
0:04:21.440 --> 0:04:30.160
结果发现这个他不单单是Peace North Wall这样一个新加的这样一个依赖里面干的这个事情

79
0:04:30.160 --> 0:04:32.880
发现他在这个之前啊

80
0:04:32.880 --> 0:04:38.080
曾经在他的这个代码仓库里面加过一段更加

81
0:04:38.080 --> 0:04:39.640
危险的代码

82
0:04:39.640 --> 0:04:41.160
那段代码的话呢

83
0:04:41.160 --> 0:04:42.680
如果运行的话呢

84
0:04:42.680 --> 0:04:50.560
他就会有一定概率的去检查当前这个用户的IP

85
0:04:50.560 --> 0:04:51.120
然后呢

86
0:04:51.120 --> 0:04:55.080
根据这个IP判断你是在什幺在什幺地方

87
0:04:55.080 --> 0:05:00.560
如果是发现你是在这个俄罗斯或者是白俄罗斯的话的

88
0:05:00.560 --> 0:05:05.360
他就有一定概率会去删除啊

89
0:05:05.360 --> 0:05:06.160
不是删除了

90
0:05:06.160 --> 0:05:07.520
他实际上就是覆盖

91
0:05:07.520 --> 0:05:10.320
覆盖你的这个当前目录

92
0:05:10.320 --> 0:05:11.320
副目录啊

93
0:05:11.320 --> 0:05:15.360
两级副目录以及这个根目录的所有文档啊

94
0:05:15.360 --> 0:05:17.600
因为他是一个地规的一个操作

95
0:05:17.600 --> 0:05:19.440
那这个就啊

96
0:05:19.440 --> 0:05:21.520
比前面这个要严重的多了

97
0:05:21.520 --> 0:05:25.200
当然他最终其实没有把这个代码发到这个包里面

98
0:05:25.200 --> 0:05:28.000
因为他后来就把这段代码又给删掉了

99
0:05:28.000 --> 0:05:33.560
删掉之后就是加了我前面讲的这个Peace North Wall这样一个东西

100
0:05:33.560 --> 0:05:36.720
所以这个事情本身大概是这样的

101
0:05:36.720 --> 0:05:40.120
所以这个事就是现在后面啊

102
0:05:40.120 --> 0:05:41.720
就这个事本身

103
0:05:41.720 --> 0:05:47.280
就是这个开源的这个开发者在他的库里面所做的这样的一系列的操作

104
0:05:47.280 --> 0:05:49.920
其实只是这几个事件的我理解啊

105
0:05:49.920 --> 0:05:51.800
就这个事件的一部分

106
0:05:51.800 --> 0:05:56.280
更有意思的可能是这事出来之后也发生了一系列的

107
0:05:56.280 --> 0:05:57.080
呃

108
0:05:57.080 --> 0:05:57.680
事件

109
0:05:57.680 --> 0:05:59.800
包括在安全领域的这个事情讨论

110
0:05:59.800 --> 0:06:02.840
还有在这个开源社区对这个事情的讨论

111
0:06:02.840 --> 0:06:07.160
也出现了很多不一样的一些呃反应

112
0:06:07.160 --> 0:06:10.120
这个不知道这个是怎幺样的一个状况

113
0:06:10.120 --> 0:06:12.840
比如说呃大家对这个事情的态度啊

114
0:06:12.840 --> 0:06:16.400
呃后后续的一些对他的这个影响

115
0:06:16.400 --> 0:06:18.200
比如对这个开发者本身的影响

116
0:06:18.200 --> 0:06:20.480
呃我看到的话呢

117
0:06:20.480 --> 0:06:26.680
因为我是呃当时是在这个自己的这个国内的一些开发者群里面啊

118
0:06:26.680 --> 0:06:28.760
呃看到了这个

119
0:06:28.760 --> 0:06:30.800
大家来报告了这个事儿

120
0:06:30.800 --> 0:06:33.280
呃一开始是那个

121
0:06:33.280 --> 0:06:36.880
一个开发者的经常去的这个网站上讲的

122
0:06:36.880 --> 0:06:37.600
然后呢

123
0:06:37.600 --> 0:06:38.960
啊

124
0:06:38.960 --> 0:06:40.320
呃有国内呢

125
0:06:40.320 --> 0:06:44.240
因为有这个MPM的这个Mirror这个网

126
0:06:44.240 --> 0:06:45.320
这个那个服务呢

127
0:06:45.320 --> 0:06:49.840
他实际上是提供了这个MPM这个镜像

128
0:06:49.840 --> 0:06:51.760
那幺这个镜像的维护者啊

129
0:06:51.760 --> 0:06:56.680
就赶紧的就是锁定了这个这个库

130
0:06:56.680 --> 0:06:57.160
然后呢

131
0:06:57.160 --> 0:07:03.040
也在也在这个Vue.js的这个仓库里面也提交了这个issue

132
0:07:03.040 --> 0:07:04.560
就说这这样一个依赖啊

133
0:07:04.560 --> 0:07:05.520
他干了这事儿

134
0:07:05.520 --> 0:07:06.200
然后呢

135
0:07:06.200 --> 0:07:13.080
当然也在这个本身的IPC的这个库里面去发了这样的issue

136
0:07:13.080 --> 0:07:14.760
那这个事情实际上他发了

137
0:07:14.760 --> 0:07:15.240
同时呢

138
0:07:15.240 --> 0:07:18.880
实际上也有其他的国外的开发者发现了这个问题啊

139
0:07:18.880 --> 0:07:21.360
也在发这样的一个issue

140
0:07:21.360 --> 0:07:24.680
那我当时就去看了一下这些issue啊

141
0:07:24.680 --> 0:07:26.320
这一开始的话呢

142
0:07:26.320 --> 0:07:31.320
其实大家这个讨论也就说觉得你觉得这个开发者就跟他讲

143
0:07:31.320 --> 0:07:33.440
你这样做可能不太好

144
0:07:33.440 --> 0:07:37.320
那当然也那个时候我看到还是有有人支持他的

145
0:07:37.320 --> 0:07:44.160
就说我们这个这个反对这个俄罗斯的这个对乌克兰的这个行为啊

146
0:07:44.160 --> 0:07:45.160
所以还支持他

147
0:07:45.160 --> 0:07:52.320
但是当有人这个支持这个支持是指还不知道他做那个覆盖和删除文档那个操作的时候吗

148
0:07:52.320 --> 0:07:54.000
还是说对这个行为也支持

149
0:07:54.000 --> 0:07:56.000
一开始还不知道

150
0:07:56.000 --> 0:07:58.560
一开始还没有人在揭发这个事情

151
0:07:58.560 --> 0:08:04.840
所以这个等后来这个事情因为因为有人发现了这个事情之后

152
0:08:04.840 --> 0:08:09.840
这个一下这个这个大家就非常的这个反对了

153
0:08:09.840 --> 0:08:11.640
这个性质就变了啊

154
0:08:11.640 --> 0:08:13.440
又变了性质又变了

155
0:08:13.440 --> 0:08:17.440
然后这个事情就逐渐的发酵啊

156
0:08:17.440 --> 0:08:20.640
就是越来越多的人这个知道了这个事情

157
0:08:20.640 --> 0:08:25.040
然后就不停的就涌到了这个作者的这个仓库啊

158
0:08:25.040 --> 0:08:29.440
就发了很多的意思就是这个仓库的那个s6表啊

159
0:08:29.440 --> 0:08:40.440
差不多在过去的若干天里面一直到这个这个仓库的维护者把这个整个的仓库都锁定了为止

160
0:08:40.440 --> 0:08:44.440
他大概在几天里面大概就有500个意思

161
0:08:44.440 --> 0:08:47.640
基本上都是在啊讨论这个事情

162
0:08:47.640 --> 0:08:55.440
就大部分的人的当然都是啊就是都是谴责谴责他这样的一个行为啊

163
0:08:55.440 --> 0:09:01.440
然后这个事而且我现在看到他所有的艺术的名称都改成减号了

164
0:09:01.440 --> 0:09:04.640
啊你是说那个最近是吧

165
0:09:04.640 --> 0:09:09.840
对对他把意思是把整个仓库封掉了之后不允许提新的艺术

166
0:09:09.840 --> 0:09:13.040
然后把所有的艺术的标题都改成了减号啊

167
0:09:13.040 --> 0:09:16.240
对那这个可能也是啊

168
0:09:16.240 --> 0:09:23.440
这个这个仓库的这个作者他引起重怒的一个原因啊

169
0:09:23.440 --> 0:09:25.840
因为一开始的时候

170
0:09:25.840 --> 0:09:32.440
我觉得很多人在就只是那个加了一个peace not war那个模块的时候

171
0:09:32.440 --> 0:09:34.440
很多人态度还是可以啊

172
0:09:34.440 --> 0:09:36.240
就是说你最好不要这幺做啊

173
0:09:36.240 --> 0:09:39.240
你是不是能够把这个模块给移除掉啊

174
0:09:39.240 --> 0:09:41.840
对吧或者你找些替代办法啊

175
0:09:41.840 --> 0:09:44.640
你比方说在这个包安装的时候

176
0:09:44.640 --> 0:09:50.640
在这个console上这个打一些打一些你的这个message啊

177
0:09:50.640 --> 0:09:52.240
打一些你想讲的话啊

178
0:09:52.240 --> 0:09:53.040
已经可以了

179
0:09:53.040 --> 0:09:55.640
那你不要不要写字盘吧啊

180
0:09:55.640 --> 0:09:58.640
这个一开始还是我觉得还是比较友善

181
0:09:58.640 --> 0:10:00.140
还是比较友善的

182
0:10:00.140 --> 0:10:04.040
但是当那个发现了这个他曾经想做的事情之后呢

183
0:10:04.040 --> 0:10:07.040
大家就这个一下子这个氛围就不对了

184
0:10:07.040 --> 0:10:10.340
而且在这个事情这件事情发生之后啊

185
0:10:10.340 --> 0:10:14.540
这个仓库的这个作者做了很多的狡辩

186
0:10:14.540 --> 0:10:16.440
我觉得是狡辩了啊

187
0:10:16.440 --> 0:10:22.240
他比方说说我这个我一个就是他强调说现在的行为啊

188
0:10:22.240 --> 0:10:26.840
就是往这个desktop上写一个文本文档啊

189
0:10:26.840 --> 0:10:28.140
不会做别的事情

190
0:10:28.140 --> 0:10:28.640
然后呢

191
0:10:28.640 --> 0:10:33.040
又说当时写的这个代码他是运行不起来的啊

192
0:10:33.040 --> 0:10:36.040
就总是找了很多的借口啊

193
0:10:36.040 --> 0:10:37.340
然后呢

194
0:10:37.340 --> 0:10:38.440
有很多人啊

195
0:10:38.440 --> 0:10:42.840
包括我就去验证了这个当时的这个恶意代码

196
0:10:42.840 --> 0:10:45.540
我验证一下这个代码确实是可以跑起来的

197
0:10:45.540 --> 0:10:48.040
而且这个行为确实相当的恶劣

198
0:10:48.040 --> 0:10:50.740
就是如果你这个IP在那边的话啊

199
0:10:50.740 --> 0:10:52.440
就会去做这个事情

200
0:10:52.440 --> 0:10:53.040
而且呢

201
0:10:53.040 --> 0:10:55.440
他当时那个代码我看的时候呢

202
0:10:55.440 --> 0:10:58.440
他实际上那段代码是做了一些简单的加密的

203
0:10:59.840 --> 0:11:03.040
对你这个你其实如果直接看代码

204
0:11:03.040 --> 0:11:07.440
其实是不是那幺容易的发现他这个代码是干什幺的

205
0:11:07.440 --> 0:11:11.140
OK对他的这个心怀恶意

206
0:11:11.140 --> 0:11:13.840
所以才要常常躲躲闪闪的这种

207
0:11:13.840 --> 0:11:18.340
对这个在法律上如果是如果真的是就是开庭审判刑事案件的话

208
0:11:18.340 --> 0:11:23.940
他这种掩饰行为其实是这个就是很重要的一个因素啊

209
0:11:23.940 --> 0:11:26.740
就证明他的这个恶意的因素啊

210
0:11:26.740 --> 0:11:30.040
他做了不少的这个掩饰的一个行为

211
0:11:30.040 --> 0:11:30.640
一个是呢

212
0:11:30.640 --> 0:11:34.540
就是说他当时这个写的这一份恶意代码

213
0:11:34.540 --> 0:11:38.240
他是混在一个相当大的一个提交里面

214
0:11:38.240 --> 0:11:40.640
就改了可能十几二十个文档

215
0:11:40.640 --> 0:11:42.140
那恶意代码的话

216
0:11:42.140 --> 0:11:45.640
对他的恶意代码实际上就是一个一个很小的文档

217
0:11:45.640 --> 0:11:48.340
那如果你去就算有人啊

218
0:11:48.340 --> 0:11:50.740
当时是那个review代码的话

219
0:11:50.740 --> 0:11:52.740
可能也会忽略掉

220
0:11:52.740 --> 0:11:57.440
因为那个代码其实是只是一个比较大的提交的一小个文档

221
0:11:57.440 --> 0:12:01.740
然后那个文档本身的进行了这个压缩

222
0:12:01.740 --> 0:12:02.340
压缩的话

223
0:12:02.340 --> 0:12:05.540
他就变成一行的JavaScript代码了

224
0:12:05.540 --> 0:12:07.540
不是很好读

225
0:12:07.540 --> 0:12:08.140
然后呢

226
0:12:08.140 --> 0:12:10.040
你就算把这个代码展开了

227
0:12:10.040 --> 0:12:11.140
你看的话呢

228
0:12:11.140 --> 0:12:13.540
里面一些关键的字符串呢

229
0:12:13.540 --> 0:12:16.340
他使用了Base64的这个编码

230
0:12:17.940 --> 0:12:21.640
比方说他的这个实际这个代码里面的逻辑呢

231
0:12:21.640 --> 0:12:26.040
是先要访问一下一个第三方的这个服务

232
0:12:26.040 --> 0:12:27.140
这个第三方服务呢

233
0:12:27.140 --> 0:12:32.540
是一个根据你的IP返回你这个所在地区的这样一个服务

234
0:12:32.540 --> 0:12:34.740
那这样一个服务的URL地址呢

235
0:12:34.740 --> 0:12:36.340
他也就Base64了

236
0:12:36.340 --> 0:12:36.940
对吧

237
0:12:36.940 --> 0:12:37.440
然后呢

238
0:12:37.440 --> 0:12:44.740
他里面有一段逻辑是我要判定一下这个你返回的这个第三方服务返回的这个CountryName

239
0:12:44.740 --> 0:12:46.340
是不是这个Russian

240
0:12:46.340 --> 0:12:49.440
或者是这是不是俄罗斯或者是白俄罗斯

241
0:12:49.440 --> 0:12:52.540
那俄罗斯白俄罗斯还有这个CountryName这些字符串

242
0:12:52.540 --> 0:12:58.240
他都做了Base64的这样一个加密

243
0:12:58.240 --> 0:12:59.640
所以就说你光看代码

244
0:12:59.640 --> 0:13:01.640
你其实不太清楚他在干什幺

245
0:13:01.640 --> 0:13:04.140
当然这些加密手段其实也是比较简单的

246
0:13:04.140 --> 0:13:06.040
你稍微稍微看一下

247
0:13:06.040 --> 0:13:09.740
也就是可以逆向的这个推导出来

248
0:13:09.740 --> 0:13:12.840
但是就说他做了这样一些这个遮掩的行为

249
0:13:13.840 --> 0:13:14.140
哎

250
0:13:14.140 --> 0:13:15.040
其实那个Hacks

251
0:13:15.040 --> 0:13:16.640
我其实有一个疑问

252
0:13:16.640 --> 0:13:18.240
就是这是一个单人项目

253
0:13:18.240 --> 0:13:21.540
还是一个社区里有一堆人在一起做的项目

254
0:13:23.240 --> 0:13:23.840
这个项目呢

255
0:13:23.840 --> 0:13:27.440
其实是有比较的比较多的这个CountryBuilder的

256
0:13:27.440 --> 0:13:27.940
但是呢

257
0:13:27.940 --> 0:13:29.740
他仍然是一个单人项目

258
0:13:29.740 --> 0:13:31.940
这大部分的就很多的这个项目

259
0:13:31.940 --> 0:13:35.240
他实际上就是有很多人来给你这个提PR

260
0:13:35.240 --> 0:13:38.340
但他只是比方说把你修个Bug

261
0:13:38.340 --> 0:13:40.240
或者那个做一个小feature

262
0:13:40.240 --> 0:13:40.740
但是呢

263
0:13:40.740 --> 0:13:43.640
这个项目本身一直还是他自己主要维护的

264
0:13:44.840 --> 0:13:46.840
但那我就更更疑惑了

265
0:13:46.840 --> 0:13:48.240
就是说照理说

266
0:13:48.240 --> 0:13:49.540
像这种单人项目

267
0:13:49.540 --> 0:13:51.440
他都不需要自己给自己提PR

268
0:13:51.440 --> 0:13:54.640
就直接发一个Committer就提交上去了

269
0:13:54.640 --> 0:13:58.340
这个时候这个仓库的代码都几乎没有人会去看的吧

270
0:13:58.340 --> 0:14:01.140
还是说谁会去关心他的代码

271
0:14:01.140 --> 0:14:02.940
一行行的去看出问题来呢

272
0:14:02.940 --> 0:14:04.740
这个其实挺传奇的

273
0:14:04.740 --> 0:14:05.240
对

274
0:14:05.240 --> 0:14:08.240
其实就是因为他写了文档吗

275
0:14:08.240 --> 0:14:11.540
他在桌面上写了个新文档才引起大家注意的吧

276
0:14:11.540 --> 0:14:12.040
对对对

277
0:14:12.040 --> 0:14:13.640
是因为是因为这个原因

278
0:14:13.640 --> 0:14:15.440
别人才来细读他的代码

279
0:14:15.440 --> 0:14:17.540
不然是不然不会去这幺读的

280
0:14:17.540 --> 0:14:18.240
一般来讲

281
0:14:18.240 --> 0:14:20.140
所以这才更让人觉得毛骨悚然

282
0:14:20.140 --> 0:14:20.540
你知道吗

283
0:14:20.540 --> 0:14:21.340
嗯明白了

284
0:14:21.340 --> 0:14:23.340
对就这个大家都是后怕

285
0:14:23.340 --> 0:14:28.240
就是如果他这个不是就他做了一个更加简单的事

286
0:14:28.240 --> 0:14:30.040
就比方说像我前面讲的

287
0:14:30.040 --> 0:14:33.440
他只是往Council上打一点这个口号的话

288
0:14:33.440 --> 0:14:35.940
可能并不一定有人会去review

289
0:14:35.940 --> 0:14:38.340
这个这幺仔细的review他之前的代码

290
0:14:38.340 --> 0:14:41.340
而且这个确实就像这个老庄讲的

291
0:14:41.340 --> 0:14:42.540
他其实就是一个commit

292
0:14:42.540 --> 0:14:43.540
他不是一个PR

293
0:14:44.640 --> 0:14:46.140
他是一个单独的一个commit

294
0:14:46.140 --> 0:14:49.240
只是这个commit就是这个commit没有很多文档啊

295
0:14:49.240 --> 0:14:51.340
就就是这样一个这样一个情况

296
0:14:53.640 --> 0:14:55.140
他没有酿成大祸

297
0:14:55.140 --> 0:14:56.340
我觉得是两个点

298
0:14:56.340 --> 0:14:58.940
第一个点他提交到他的这个master上面

299
0:14:58.940 --> 0:15:01.740
他没有进入他release的那个流程

300
0:15:01.740 --> 0:15:05.440
第二个呢是他做了这个显示的一个操作

301
0:15:05.440 --> 0:15:07.240
就是在桌面上写出一个文档来

302
0:15:07.240 --> 0:15:10.340
因为只要是编程比较有经验的人

303
0:15:10.340 --> 0:15:15.740
他对于这种就是这种酷突然会在你的文档系统写文档

304
0:15:15.740 --> 0:15:17.340
多少都是有些顾虑的

305
0:15:17.340 --> 0:15:19.140
一看就会觉得很很反常

306
0:15:19.140 --> 0:15:21.540
所以导致了后面这个这个暴露

307
0:15:21.540 --> 0:15:26.940
那他这个两个行为很难讲他是主观故意还是无意的

308
0:15:26.940 --> 0:15:29.140
我个人觉得如果他是故意的

309
0:15:29.140 --> 0:15:31.540
那说明可能他也就是闹着玩

310
0:15:31.540 --> 0:15:35.140
但更大的可能性是他也没有想那幺仔细

311
0:15:35.140 --> 0:15:37.240
可能有一半的情绪冲动

312
0:15:37.240 --> 0:15:40.340
然后确实有一半的这个主观恶意

313
0:15:40.340 --> 0:15:42.740
所以交织成这幺一个比较奇怪的现象

314
0:15:42.740 --> 0:15:44.340
所以才没有酿成大祸

315
0:15:44.340 --> 0:15:49.340
不然的话这个真的是比较罕见的灾难了

316
0:15:49.340 --> 0:15:53.340
要是对他到当时到底怎幺想的呢

317
0:15:53.340 --> 0:15:56.440
其实就说也有很多的猜测吧

318
0:15:56.440 --> 0:16:00.540
又包括有很多人这个在这个下面去攻击他啊

319
0:16:00.540 --> 0:16:02.640
但首先要说就是有一个误解

320
0:16:02.640 --> 0:16:04.540
有个误解就是说

321
0:16:04.540 --> 0:16:10.340
以为他是发过一个非常严重的这样一个这个恶意代码

322
0:16:10.340 --> 0:16:13.540
就是他确实把这个恶意代码给提交到主干上了

323
0:16:13.540 --> 0:16:14.140
但是呢

324
0:16:14.140 --> 0:16:19.240
这个代码其实在主干上的也只存在了大概半天时间

325
0:16:19.240 --> 0:16:20.540
然后他就删掉了

326
0:16:20.540 --> 0:16:21.340
删掉之后呢

327
0:16:21.340 --> 0:16:25.340
就是做了我们前面讲的一个Piss Not War的这个就相对

328
0:16:25.340 --> 0:16:28.540
这个不是那幺恶意的这样一个事啊

329
0:16:28.540 --> 0:16:29.840
就前面那个非常恶意

330
0:16:29.840 --> 0:16:32.040
但是他半天之后他就删掉了

331
0:16:32.040 --> 0:16:35.740
所以我个人觉得他其实是血压乐马了这样一个事儿

332
0:16:35.740 --> 0:16:39.740
嗯嗯比较像是比较像是这样一个情况啊

333
0:16:39.740 --> 0:16:41.640
所以他可能当时一上头啊

334
0:16:41.640 --> 0:16:43.040
想着我要这样做

335
0:16:43.040 --> 0:16:44.040
但是也有些人啊

336
0:16:44.040 --> 0:16:45.940
我看到也有些人说

337
0:16:45.940 --> 0:16:52.940
是不是他当时觉得说这个担心这个这个这个地理位置

338
0:16:52.940 --> 0:16:54.640
这个检测的不准确啊之类的

339
0:16:54.640 --> 0:17:00.840
对这个就就真的很难讲了

340
0:17:00.840 --> 0:17:04.540
那这事下来之后对他这个人以及他这个项目

341
0:17:04.540 --> 0:17:09.540
就是NONPC这个这个库后续不知道会有什幺样的影响啊

342
0:17:09.540 --> 0:17:11.440
假设以我们的常识来讲

343
0:17:11.440 --> 0:17:13.840
如果我身边有这幺一个人干这事的话

344
0:17:13.840 --> 0:17:17.340
我觉得他职业生涯应该是有很直接影响

345
0:17:17.340 --> 0:17:17.640
是啊

346
0:17:17.640 --> 0:17:19.740
这个先说吧

347
0:17:19.740 --> 0:17:24.440
就是说首先就是说像我们前面讨论的

348
0:17:24.440 --> 0:17:27.840
就是他自己可能也一开始没有意识到这个这幺严重

349
0:17:27.840 --> 0:17:31.640
尤其是他这个之前做的那个更加恶意的代码

350
0:17:31.640 --> 0:17:34.440
被被发现这个事情有可能他一开始没有预料到

351
0:17:35.440 --> 0:17:38.140
所以他这个他在被发现之后

352
0:17:38.140 --> 0:17:40.440
首先做了很多的这个遮掩嘛

353
0:17:40.440 --> 0:17:44.740
就除了我们前面讲的这个就是不承认之外啊

354
0:17:44.740 --> 0:17:46.740
他还做了一些事情啊

355
0:17:46.740 --> 0:17:47.240
一个呢

356
0:17:47.240 --> 0:17:49.540
就是他因为用了那个第三方服务嘛

357
0:17:49.540 --> 0:17:52.940
这个第三方服务需要有一个API key啊

358
0:17:52.940 --> 0:17:56.440
才能够正常的这个去使用的

359
0:17:56.440 --> 0:17:58.740
然后他估计啊

360
0:17:58.740 --> 0:18:04.140
他应该是他把这个API key给那个撤销了

361
0:18:04.140 --> 0:18:08.240
所以那段代码就是就算你就是因为我前面讲了

362
0:18:08.240 --> 0:18:09.440
首先他删掉了

363
0:18:09.440 --> 0:18:11.640
然后也没有发到这个NPM上

364
0:18:11.640 --> 0:18:13.840
然后就算你现在把这段代码挖出来

365
0:18:13.840 --> 0:18:16.640
你实际运行一下也是运行不起来的

366
0:18:16.640 --> 0:18:18.640
因为那个API key已经失效了

367
0:18:18.640 --> 0:18:23.340
那所以他他就以这个为借口吧

368
0:18:23.340 --> 0:18:26.240
他就说这个我这个代码其实跑不起来

369
0:18:26.240 --> 0:18:27.440
但是呢

370
0:18:27.440 --> 0:18:31.440
最早发现他这个这段恶意代码的这个人呢

371
0:18:31.440 --> 0:18:33.140
就当时就跳出来说了

372
0:18:33.140 --> 0:18:35.940
说我当时试验的时候

373
0:18:35.940 --> 0:18:38.140
这个API key是有效的

374
0:18:38.140 --> 0:18:40.640
100%是有效的

375
0:18:40.640 --> 0:18:41.540
那这个话呢

376
0:18:41.540 --> 0:18:43.340
就说当然我现在没有办法验证啊

377
0:18:43.340 --> 0:18:45.140
因为我在验证这段代码的时候

378
0:18:45.140 --> 0:18:48.040
那个时候API key已经是失效了

379
0:18:48.040 --> 0:18:51.540
我当时验证的时候是我自己到这个第三方服务

380
0:18:51.540 --> 0:18:53.040
我自己申请了一个key

381
0:18:53.040 --> 0:18:54.540
然后我跑了一遍

382
0:18:54.540 --> 0:18:56.540
我验证了他确实是可以跑起来的

383
0:18:57.640 --> 0:19:00.740
那当然这个事情他到底他

384
0:19:00.740 --> 0:19:05.540
是不是在被发现之后去主动的这个撤销了

385
0:19:05.540 --> 0:19:07.140
掩盖他的行为呢

386
0:19:07.140 --> 0:19:07.740
这个事呢

387
0:19:07.740 --> 0:19:10.640
其实如果一定要验证还是能验证的啊

388
0:19:10.640 --> 0:19:15.940
因为我后来在有一个这个就是最早发现的这个人的这个帖子下面

389
0:19:15.940 --> 0:19:19.840
发现这个第三方服务的这个维护者都出来了

390
0:19:19.840 --> 0:19:20.240
说啊

391
0:19:20.240 --> 0:19:21.240
我们知道这个事了

392
0:19:21.240 --> 0:19:23.940
我们去去就是说把他这个

393
0:19:23.940 --> 0:19:27.240
我们确保他这个API key都是都是那个被撤销的

394
0:19:29.440 --> 0:19:31.440
但是其实第三方服务

395
0:19:31.440 --> 0:19:35.540
这个公司完全可以提供相关的操作日志

396
0:19:35.540 --> 0:19:37.240
几点几分什幺时候做的

397
0:19:37.240 --> 0:19:38.940
他都可以查得出来

398
0:19:38.940 --> 0:19:40.640
如果真的要把人挖到死的话

399
0:19:40.640 --> 0:19:42.640
就可以挖出来

400
0:19:42.640 --> 0:19:44.540
比较有趣的是这个第三方服务

401
0:19:44.540 --> 0:19:48.940
这个就我们讲这个这事情里面还涉及到一些国别的问题

402
0:19:48.940 --> 0:19:51.240
就是这个作者本人是一个美国人

403
0:19:51.240 --> 0:19:54.540
然后这个第三方服务实际上是一个巴基斯坦人

404
0:19:54.540 --> 0:19:55.140
是吗

405
0:19:55.140 --> 0:19:57.640
就那个叫什幺IP geolocation是吧

406
0:19:57.640 --> 0:19:58.940
对对对啊

407
0:19:58.940 --> 0:20:00.840
我也后来发现这个人啊

408
0:20:00.840 --> 0:20:02.540
这名字一看这个哪人呢

409
0:20:02.540 --> 0:20:04.140
就发现是巴基斯坦人啊

410
0:20:04.140 --> 0:20:05.040
特别特别有趣

411
0:20:05.040 --> 0:20:05.540
这个事儿

412
0:20:07.740 --> 0:20:10.640
还有这个小八还有干这个事的

413
0:20:10.640 --> 0:20:11.740
这以前真不知道

414
0:20:13.040 --> 0:20:14.240
对他这个服务

415
0:20:14.240 --> 0:20:15.840
可能用的人还挺多的啊

416
0:20:15.840 --> 0:20:17.440
可能很多人没有注意到

417
0:20:17.440 --> 0:20:18.740
其实他是个巴基斯坦人

418
0:20:20.940 --> 0:20:22.040
这服务我以前没用过

419
0:20:22.040 --> 0:20:23.040
这这次出名了

420
0:20:23.040 --> 0:20:23.940
我要去试一试

421
0:20:25.840 --> 0:20:27.940
对他那个API还是挺好用的啊

422
0:20:27.940 --> 0:20:30.440
就是你可以很容易的

423
0:20:30.440 --> 0:20:32.440
因为我大概就花了这个几分钟吧

424
0:20:32.440 --> 0:20:34.140
就是申请一个key

425
0:20:34.140 --> 0:20:36.140
然后就把它换上去就可以跑起来了

426
0:20:37.240 --> 0:20:39.640
所以他当时就是这个作者吧

427
0:20:39.640 --> 0:20:40.340
他就

428
0:20:41.840 --> 0:20:43.240
抵赖了那幺一下子啊

429
0:20:43.240 --> 0:20:45.040
这个一下子就引起众怒啊

430
0:20:45.040 --> 0:20:46.040
然后呢

431
0:20:46.040 --> 0:20:49.740
他还修改这个别人的这个评论啊

432
0:20:49.740 --> 0:20:51.440
因为一开始就是

433
0:20:52.840 --> 0:20:54.740
就是最早的一个发现者吗

434
0:20:56.040 --> 0:21:00.640
他一最早的发现者一开始只说那个peace not war的时候啊

435
0:21:00.640 --> 0:21:01.940
他就说这个peace not war

436
0:21:01.940 --> 0:21:03.040
他觉得这是一个

437
0:21:03.940 --> 0:21:05.440
这个恶意软件

438
0:21:05.440 --> 0:21:09.440
最后这个作者就把这个恶意软件这几个字给删了

439
0:21:09.440 --> 0:21:11.040
就修改他的那个

440
0:21:11.040 --> 0:21:13.240
都是神操作

441
0:21:13.240 --> 0:21:16.340
对他觉得他就是说你不能管我这个叫恶意软件啊

442
0:21:16.340 --> 0:21:20.140
我这个就是这个很正义的一个行为啊

443
0:21:20.140 --> 0:21:22.740
哦对我记得那段对话

444
0:21:22.740 --> 0:21:24.540
他还在里面跟人家讨论说

445
0:21:24.540 --> 0:21:27.440
你把我这个软件称之为抗议软件可以的

446
0:21:27.440 --> 0:21:29.640
不要叫恶意软件

447
0:21:29.640 --> 0:21:33.140
对因为这个是后面有人有人那个提了说

448
0:21:33.140 --> 0:21:34.640
你这也可以叫抗议软件啊

449
0:21:36.240 --> 0:21:39.740
后来就是因为被发现了他的那个更加恶意的代码嘛

450
0:21:39.740 --> 0:21:43.640
然后这个发现者就也在他的这个帖子里面写了

451
0:21:43.640 --> 0:21:47.340
结果这个后来这个作者跟他

452
0:21:47.340 --> 0:21:49.440
argue了一番之后啊

453
0:21:49.440 --> 0:21:51.540
就把他这个部分给删掉

454
0:21:51.540 --> 0:21:53.340
那删掉之后这个

455
0:21:53.340 --> 0:21:58.140
当然那个人家这个就就很很那个很很很不爽啊

456
0:21:58.140 --> 0:21:59.740
就是明明是我自己写的comments

457
0:21:59.740 --> 0:22:01.340
我要揭露你的这个行为

458
0:22:01.340 --> 0:22:03.040
你还删掉给他们好好

459
0:22:03.040 --> 0:22:04.340
这个说起来

460
0:22:04.340 --> 0:22:09.040
Github里边这个管理员可以去改这个issue的comments

461
0:22:09.040 --> 0:22:10.940
这也是个挺挺迷的设定

462
0:22:10.940 --> 0:22:14.040
我一直没搞懂为什幺会这幺设计

463
0:22:14.040 --> 0:22:16.640
我觉得这个设计本身还是有道理的

464
0:22:16.640 --> 0:22:18.740
因为就说你的这个仓库维护者

465
0:22:18.740 --> 0:22:21.440
你可能会帮你修正一些东西啊

466
0:22:21.440 --> 0:22:23.540
比方说你这个哪里写错了

467
0:22:23.540 --> 0:22:25.040
我帮你修正一下

468
0:22:25.040 --> 0:22:26.340
那你回复就行了吗

469
0:22:26.340 --> 0:22:28.240
你你你引用和回复或者怎幺样

470
0:22:28.240 --> 0:22:32.340
这个我也觉得这是Github一个不好的特性啊

471
0:22:32.340 --> 0:22:35.640
到当年对因为邮件列表的阶段

472
0:22:35.640 --> 0:22:38.240
那人家发出去的邮件就不可能再删掉

473
0:22:38.240 --> 0:22:42.040
对对因为一旦能修改很多事情会变得特别的

474
0:22:42.040 --> 0:22:43.540
对啊麻烦

475
0:22:43.540 --> 0:22:45.040
我理解你讲的意思

476
0:22:45.040 --> 0:22:46.640
但是我觉得这个本身啊

477
0:22:46.640 --> 0:22:48.140
它其实是好的

478
0:22:48.140 --> 0:22:48.940
为什幺

479
0:22:48.940 --> 0:22:51.340
就说它是因为比方说你的主帖啊

480
0:22:51.340 --> 0:22:53.340
你的最顶顶帖你要提供那个信息

481
0:22:53.340 --> 0:22:54.540
我可以去修改它

482
0:22:54.540 --> 0:22:56.440
这其实是一个比较好的事情

483
0:22:56.440 --> 0:22:59.140
对我知道我其实也用过这个功能

484
0:22:59.140 --> 0:23:01.240
我觉得它在好的时候是挺好用的

485
0:23:01.240 --> 0:23:01.740
对啊

486
0:23:01.740 --> 0:23:03.840
就是说在不好的时候就特麻烦

487
0:23:03.840 --> 0:23:05.940
但是我们前面讲的那种

488
0:23:05.940 --> 0:23:08.540
就说实际上是个恶意修改

489
0:23:08.540 --> 0:23:10.240
或者说就是我不同意你的观点

490
0:23:10.240 --> 0:23:11.540
所以我修改你的话

491
0:23:11.540 --> 0:23:13.040
那这个事情呢

492
0:23:13.040 --> 0:23:16.540
实际上我觉得Github这样一个东西

493
0:23:16.540 --> 0:23:18.740
它不是为这样一个场景准备的

494
0:23:18.740 --> 0:23:22.440
而且Github的这个comments有一点是好

495
0:23:22.440 --> 0:23:25.940
就是说所有的修改其实是可以看得到的

496
0:23:25.940 --> 0:23:26.740
对对对对对

497
0:23:26.740 --> 0:23:28.540
它有一个log

498
0:23:28.540 --> 0:23:31.140
这题外话就就不说了

499
0:23:31.140 --> 0:23:34.640
这个而且他好像后来把那个人干脆就拉黑了是吧

500
0:23:34.640 --> 0:23:37.740
就根本不让他在他这里能够去发言了

501
0:23:37.740 --> 0:23:38.240
好像

502
0:23:38.240 --> 0:23:38.740
是的

503
0:23:38.740 --> 0:23:40.940
就是说因为这个反复的几次嘛

504
0:23:40.940 --> 0:23:44.040
就是说这个你改我的

505
0:23:44.040 --> 0:23:45.040
我也把它改回去

506
0:23:45.040 --> 0:23:46.340
然后他又把它改回去

507
0:23:46.340 --> 0:23:48.940
那经过几番操作之后就把这个人拉黑了

508
0:23:48.940 --> 0:23:50.640
而且拉黑的不止他一个

509
0:23:50.640 --> 0:23:52.040
因为把他拉黑之后

510
0:23:52.040 --> 0:23:54.340
那还有很多其他的这个网友就觉得

511
0:23:54.340 --> 0:23:55.740
你怎幺可以这幺做呢

512
0:23:55.740 --> 0:23:59.540
我们帮他把他的那个评论再搬运回来

513
0:23:59.540 --> 0:24:00.940
截屏给贴上去

514
0:24:00.940 --> 0:24:02.740
如果当时我也截屏了

515
0:24:02.740 --> 0:24:07.340
虽然我没有在他的那个仓库里面做

516
0:24:07.340 --> 0:24:09.440
因为我已经发现这个人有一点问题

517
0:24:09.440 --> 0:24:12.140
那我我觉得我不要在他这个仓库里做

518
0:24:12.140 --> 0:24:17.440
所以我是在这个Vue.js的那个讨论的那个相关的issue里面

519
0:24:17.440 --> 0:24:19.340
我把我的这个截屏给放在那里

520
0:24:19.340 --> 0:24:21.740
因为那边他没有权限去做这些事情

521
0:24:21.740 --> 0:24:23.640
对

522
0:24:25.040 --> 0:24:26.940
但是我现在再回看啊

523
0:24:26.940 --> 0:24:29.140
就是当年node IPC里面

524
0:24:29.140 --> 0:24:31.140
就是都是当年前两天

525
0:24:31.140 --> 0:24:34.040
最热门的一个233的issue

526
0:24:34.040 --> 0:24:35.740
有几百个回帖的

527
0:24:35.740 --> 0:24:37.540
400多个回帖的那个

528
0:24:37.540 --> 0:24:38.840
但是他其实改不完

529
0:24:38.840 --> 0:24:40.540
好多都还留着呢

530
0:24:40.540 --> 0:24:42.340
纷纷冲上去骂他的那个

531
0:24:42.340 --> 0:24:43.240
好多人还留着

532
0:24:43.240 --> 0:24:44.640
他已经来不及改了

533
0:24:44.640 --> 0:24:45.440
我觉得

534
0:24:45.440 --> 0:24:47.840
他毕竟只有一个人

535
0:24:47.840 --> 0:24:48.440
这个

536
0:24:48.440 --> 0:24:50.540
而且我觉得这人估计已经PTSD

537
0:24:50.540 --> 0:24:51.940
就自闭在家里了

538
0:24:51.940 --> 0:24:53.340
估计

539
0:24:53.340 --> 0:24:54.840
嗯有可能

540
0:24:54.840 --> 0:24:59.340
但是他后来实际上是这网友一下子涌上来非常多了

541
0:24:59.340 --> 0:25:00.540
因为这事情发酵之后啊

542
0:25:00.540 --> 0:25:03.340
就包括在像什幺reddit啊

543
0:25:03.340 --> 0:25:04.640
还有在YouTube上啊

544
0:25:04.640 --> 0:25:06.840
就有人发了一个视频讲这个事情啊

545
0:25:06.840 --> 0:25:09.040
那就一下子涌进来很多很多网友

546
0:25:09.040 --> 0:25:10.140
就一开始啊

547
0:25:10.140 --> 0:25:12.940
是那个最早的最早的那个时间段

548
0:25:12.940 --> 0:25:16.840
其实是好多好多的这个来自中国的这个开发者

549
0:25:16.840 --> 0:25:18.940
到上去去骂他

550
0:25:18.940 --> 0:25:21.340
那后来呃前几天啊

551
0:25:21.340 --> 0:25:26.640
就到这个事件的就到他整个关闭他这个就完全锁定在仓库了

552
0:25:26.640 --> 0:25:29.040
那几天其实都不是中国网友啊

553
0:25:29.040 --> 0:25:30.540
都不是这个中国开发者

554
0:25:30.540 --> 0:25:33.940
就世界各地的开发者就轰炸他的这个ISO列表

555
0:25:33.940 --> 0:25:38.240
就像我前面讲的就是很短时间里面大概四五百个ISO啊

556
0:25:38.240 --> 0:25:42.140
各种各各各方面的这个全方位的这个轰炸

557
0:25:42.140 --> 0:25:44.040
而且还有人不断的调侃他

558
0:25:44.040 --> 0:25:46.940
比方说你你总要睡觉吧

559
0:25:46.940 --> 0:25:48.440
所以他他当时就睡觉了

560
0:25:48.440 --> 0:25:54.940
他有段时间一个人跟24小时十个死去的人对抗怎幺可能全球化的对

561
0:25:54.940 --> 0:25:58.040
他后来就会有人直接在这个到后来

562
0:25:58.040 --> 0:26:01.040
这个意思也没有内容就直接就是标题嘛

563
0:26:01.040 --> 0:26:02.540
他就是轰炸的一岁列表

564
0:26:02.540 --> 0:26:03.740
这标题都很逗啊

565
0:26:03.740 --> 0:26:04.840
就说哎呀

566
0:26:04.840 --> 0:26:09.940
我刚刚看到他又上来那个删了一个说明他现在睡醒了

567
0:26:09.940 --> 0:26:10.240
啊

568
0:26:10.240 --> 0:26:13.540
就直接直接在这说你是不是睡醒了啊

569
0:26:13.540 --> 0:26:15.240
直接直接就哎呀

570
0:26:15.240 --> 0:26:17.740
这个最后就变成了这样一个情况

571
0:26:17.740 --> 0:26:21.240
而且这哥们这次是非常强的指向性

572
0:26:21.240 --> 0:26:24.240
直接是针对俄罗斯和白俄罗斯的

573
0:26:24.240 --> 0:26:28.440
那以前苏联地区的这个黑客也特别多

574
0:26:28.440 --> 0:26:32.740
这这估计会有很大的这个反应啊

575
0:26:32.740 --> 0:26:33.540
在这个事情上

576
0:26:34.540 --> 0:26:35.440
是的啊

577
0:26:35.440 --> 0:26:38.840
实际上就是前面一天吧

578
0:26:38.840 --> 0:26:43.940
这个这哥们的这个社交社交媒体的账号已经被爆破了

579
0:26:43.940 --> 0:26:46.040
就是直接被黑客黑掉了

580
0:26:46.040 --> 0:26:49.840
说他的推特账号就是被这个黑掉了

581
0:26:49.840 --> 0:26:50.940
然后呢

582
0:26:50.940 --> 0:26:53.440
他的相当多的个人信息啊

583
0:26:53.440 --> 0:26:56.040
包括他的家庭信息啊

584
0:26:56.040 --> 0:26:58.340
其实都被黑客掌握了

585
0:26:58.340 --> 0:26:59.540
而且就是公开了

586
0:27:01.640 --> 0:27:03.040
这个有点过分

587
0:27:03.040 --> 0:27:04.140
这个有点过分啊

588
0:27:04.140 --> 0:27:05.640
这属于人肉加网爆

589
0:27:05.640 --> 0:27:07.540
对就是黑客网爆

590
0:27:07.540 --> 0:27:11.040
就是我我我猜测那黑客有可能是俄罗斯黑客

591
0:27:12.540 --> 0:27:14.840
对因为你你这都打到我头上来了

592
0:27:14.840 --> 0:27:16.040
我这对吧

593
0:27:17.140 --> 0:27:20.040
这个黑客也就是说是这个

594
0:27:20.040 --> 0:27:22.340
而且不是那个一轮黑客

595
0:27:22.340 --> 0:27:29.140
因为他这个我刚说他把那个把他的一个个人信息家庭信息啊

596
0:27:29.140 --> 0:27:31.340
包括他这个妻子的信息啊

597
0:27:31.340 --> 0:27:33.100
全都公开之后啊

598
0:27:33.100 --> 0:27:35.740
他那个放在他的那个黑客的网站上

599
0:27:35.740 --> 0:27:37.940
我后来去看了一下那黑客网站

600
0:27:37.940 --> 0:27:40.340
我发现就是说不止这一轮了

601
0:27:40.340 --> 0:27:47.940
就是已经好几天之前就是已经有好几轮黑客都这个就光这一个黑客网站上就公布过好几轮

602
0:27:47.940 --> 0:27:50.640
就是最近的这轮就是就非常非常厉害

603
0:27:50.640 --> 0:27:54.140
就是把他的所有信息都都那个一开始他可能信息比较少

604
0:27:54.140 --> 0:27:56.540
后来几轮几轮就是甚至可能有接力吧

605
0:27:56.540 --> 0:27:59.540
我都我都猜想就不同的黑客的接力的肯定有

606
0:27:59.540 --> 0:28:02.940
肯定有黑黑客大家拿着小子练手

607
0:28:02.940 --> 0:28:05.940
然后就一轮一轮来

608
0:28:05.940 --> 0:28:07.580
而黑客圈子本来也小

609
0:28:07.580 --> 0:28:09.540
大家大家的信息都走得特快

610
0:28:10.440 --> 0:28:13.640
所以他在这个当中比较严重的就是呃

611
0:28:13.640 --> 0:28:16.940
包括把他的这个呃

612
0:28:16.940 --> 0:28:20.240
因为他他其实有很多的这个email账号

613
0:28:20.240 --> 0:28:21.140
都被挖出来了

614
0:28:21.140 --> 0:28:28.340
包括他用一些email账号在一些这个其他的可能的那些网站已经被黑客洗过一轮的

615
0:28:28.340 --> 0:28:31.640
所以就是你可以知道所有这个网站的注册者

616
0:28:31.640 --> 0:28:32.640
即使是私密的

617
0:28:32.640 --> 0:28:34.040
但是也已经暴露了

618
0:28:34.040 --> 0:28:37.740
最后有人就是从一些这个所谓的这个dating网站吧

619
0:28:37.740 --> 0:28:41.140
就是交友的就交友

620
0:28:41.140 --> 0:28:44.540
发现他用一些这个他的小号吧

621
0:28:44.540 --> 0:28:46.840
就是email注册过这个约会网站

622
0:28:46.840 --> 0:28:48.340
大概两个月的网站

623
0:28:48.340 --> 0:28:50.740
其中一个还被黑客挖出来

624
0:28:50.740 --> 0:28:52.340
就是他曾经在上面付费过

625
0:28:54.840 --> 0:28:56.340
而且这个约会网站呢

626
0:28:56.340 --> 0:28:57.740
就是据说啊

627
0:28:57.740 --> 0:29:02.140
其实这个约会网站就是专门供这个已婚人士啊

628
0:29:04.540 --> 0:29:07.840
就是就是搞搞这种婚外恋的

629
0:29:07.840 --> 0:29:10.140
然后出轨专用网站

630
0:29:10.140 --> 0:29:11.240
对对

631
0:29:11.240 --> 0:29:14.440
结果这个黑客就把这个信息公布了

632
0:29:14.440 --> 0:29:18.240
而且就是我前面不是说他的推特账号也被爆破了吗

633
0:29:18.240 --> 0:29:19.840
因为那是他自己账号嘛

634
0:29:19.840 --> 0:29:23.140
这黑客上来就在那个他的这个推特账号上

635
0:29:23.140 --> 0:29:24.240
干了两件事

636
0:29:24.240 --> 0:29:27.740
第一件事是把他的头像换成了俄罗斯国旗

637
0:29:27.740 --> 0:29:28.940
第二件事情

638
0:29:28.940 --> 0:29:31.840
第二件事情是发了一条推说啊

639
0:29:31.840 --> 0:29:35.040
我这个那个出轨了

640
0:29:35.040 --> 0:29:39.540
而且是在我这个和我老婆结婚四个月之后就出轨了

641
0:29:39.540 --> 0:29:41.640
直接就发这样一条推特

642
0:29:41.640 --> 0:29:43.840
天哪这就直接射死掉了

643
0:29:43.840 --> 0:29:46.240
对这个就是真的是射死了

644
0:29:46.240 --> 0:29:48.240
所以这事我的感觉啊

645
0:29:48.240 --> 0:29:49.740
就是首先这个人呢

646
0:29:49.740 --> 0:29:53.340
他是有过很明确的恶意的

647
0:29:53.340 --> 0:29:53.940
但是呢

648
0:29:53.940 --> 0:29:58.140
他毕竟还没有把这个事情变成一个

649
0:29:58.140 --> 0:29:59.240
就怎幺说呢

650
0:29:59.240 --> 0:30:01.140
如果从法律意义上来讲的话

651
0:30:01.140 --> 0:30:08.740
就属于这个思想犯和行为犯之间那个状态

652
0:30:08.740 --> 0:30:10.740
他不算完全的纯思想犯

653
0:30:10.740 --> 0:30:13.040
但是他也不算完全的现行犯

654
0:30:13.040 --> 0:30:17.840
相当于就是可能比较接近于这个犯罪行为终止

655
0:30:17.840 --> 0:30:18.740
这样的一个概念

656
0:30:18.740 --> 0:30:20.440
做了一半他自己停下来了

657
0:30:20.440 --> 0:30:21.140
就这个感觉

658
0:30:21.140 --> 0:30:23.440
但是这个停下来是因为被人发现停下来

659
0:30:23.440 --> 0:30:25.440
还是自己主观的悔悟呢

660
0:30:25.440 --> 0:30:26.340
这就不太好判断

661
0:30:26.340 --> 0:30:27.640
咱也没法去审判他

662
0:30:27.640 --> 0:30:28.640
也没这权利

663
0:30:28.640 --> 0:30:29.940
但是给我的感觉吧

664
0:30:29.940 --> 0:30:30.840
反正就是说这人呢

665
0:30:30.840 --> 0:30:36.740
不能算是一个就是已经完成了这个事情

666
0:30:36.740 --> 0:30:37.340
然后呢

667
0:30:37.340 --> 0:30:40.440
整个行为看上去也有一些幼稚的地方

668
0:30:40.440 --> 0:30:44.040
感觉就是有点那个冲动的感觉在里面

669
0:30:44.040 --> 0:30:46.040
然后后果应该会蛮严重的

670
0:30:46.040 --> 0:30:48.540
第一是刚才说被黑客爆破之后

671
0:30:48.540 --> 0:30:51.740
他肯定射死的会有这方面的效应

672
0:30:51.740 --> 0:30:52.240
另一方面

673
0:30:52.240 --> 0:30:57.040
我觉得我不知道这人他是一个完全靠开源的开发

674
0:30:57.040 --> 0:30:59.040
还是有别的一些生计

675
0:30:59.040 --> 0:31:01.140
还是说他是有雇主的

676
0:31:01.140 --> 0:31:03.940
他是在某个公司软件公司工作的

677
0:31:03.940 --> 0:31:08.340
那软件公司会不会怎幺看待他这个状况

678
0:31:08.340 --> 0:31:09.040
他有雇主

679
0:31:09.040 --> 0:31:11.240
而且这个雇主已经也曝光了

680
0:31:11.240 --> 0:31:14.040
所以有很多人就是给他雇主写信

681
0:31:14.040 --> 0:31:17.040
就说就是投诉他

682
0:31:17.040 --> 0:31:18.240
继续被轰炸

683
0:31:18.240 --> 0:31:23.140
这个其实倒是欧美非常常见的这种cancel文化了

684
0:31:23.140 --> 0:31:25.540
就直接被迫估计

685
0:31:25.540 --> 0:31:27.540
他的雇主就算本来觉得没啥估计

686
0:31:27.540 --> 0:31:28.740
也得被迫把他干掉了

687
0:31:29.840 --> 0:31:31.740
对这个后续就不太清楚

688
0:31:31.740 --> 0:31:33.640
就是他雇主会怎幺处理这事了

689
0:31:34.840 --> 0:31:37.840
如果他的雇主是比如说Google这种级别的

690
0:31:37.840 --> 0:31:41.340
那可能还会有一些那个

691
0:31:41.340 --> 0:31:43.140
如果是一般比较小的公司

692
0:31:43.140 --> 0:31:46.840
那一般就找个找个原因打发掉完了

693
0:31:46.840 --> 0:31:48.640
通常就是这样

694
0:31:48.640 --> 0:31:50.940
他的公司我没有去查

695
0:31:50.940 --> 0:31:53.640
但是我看了有一个人说

696
0:31:53.640 --> 0:31:55.040
但我没有验证过

697
0:31:55.040 --> 0:31:59.340
有人说好像是亚马逊的子公司吧

698
0:31:59.340 --> 0:32:02.040
可能是我没有验证过

699
0:32:02.040 --> 0:32:02.940
没有验证过这个信息

700
0:32:04.840 --> 0:32:05.940
ok

701
0:32:05.940 --> 0:32:08.540
那个Hackser其实我还想接着问一下

702
0:32:08.540 --> 0:32:13.540
就是在社区里面发生了这幺大的事情之后

703
0:32:13.540 --> 0:32:17.540
在开源供应链安全这个层面上

704
0:32:17.540 --> 0:32:21.640
有没有什幺就是更加深入的探讨

705
0:32:21.640 --> 0:32:24.340
就比如说这个NPM的这个安全性这件事情

706
0:32:25.540 --> 0:32:29.540
对这个也是一个关注的焦点吧

707
0:32:29.540 --> 0:32:30.840
就是像我前面讲的

708
0:32:30.840 --> 0:32:34.240
首先这个国内的这个镜像

709
0:32:34.240 --> 0:32:37.140
就大家用的最多的镜像NPM Mirror

710
0:32:37.140 --> 0:32:40.940
这个已经马上的做出了这个响应

711
0:32:40.940 --> 0:32:43.840
就是把这个包直接就给锁定了

712
0:32:43.840 --> 0:32:47.740
然后像VueJS也马上发了新的版本

713
0:32:47.740 --> 0:32:49.440
就是进行一个版本锁定

714
0:32:49.440 --> 0:32:51.440
把它锁定到他之前的这个版本

715
0:32:52.540 --> 0:32:54.140
就是没有没有问题的版本

716
0:32:56.340 --> 0:33:01.040
当然这个问题其实是又不断的在被提起吧

717
0:33:01.040 --> 0:33:04.340
包括有很多的这个讨论里面

718
0:33:04.340 --> 0:33:07.540
就很多人就讲说这个

719
0:33:07.540 --> 0:33:08.840
哎呀我们早说了嘛

720
0:33:08.840 --> 0:33:13.440
这个NodeJS或者NPM或者JavaScript

721
0:33:13.440 --> 0:33:14.840
就是一个烂语言啊

722
0:33:14.840 --> 0:33:16.940
这个烂平台

723
0:33:16.940 --> 0:33:19.240
其实跟这好像没啥关系哈

724
0:33:19.240 --> 0:33:20.440
有关系有关系

725
0:33:20.440 --> 0:33:22.540
这个我是一直同意的

726
0:33:22.540 --> 0:33:24.440
这个因为我不是前端进程员

727
0:33:24.440 --> 0:33:26.740
不是不是这内核他怎幺说呢

728
0:33:26.740 --> 0:33:29.640
就是就是你真的在开源软件里面

729
0:33:29.640 --> 0:33:31.540
做供应链投读的话

730
0:33:31.540 --> 0:33:34.840
其实你什幺语言都是可以做的

731
0:33:34.840 --> 0:33:35.440
对

732
0:33:35.440 --> 0:33:39.440
而且JavaScript可能还算是相对你更难做一点

733
0:33:39.440 --> 0:33:40.540
你还要费点劲

734
0:33:41.640 --> 0:33:43.340
就是这个也有好有坏吧

735
0:33:43.340 --> 0:33:46.040
就是JS有一个好地方就是说

736
0:33:46.040 --> 0:33:48.940
它的语言码就是完全公开的

737
0:33:48.940 --> 0:33:49.240
对

738
0:33:49.240 --> 0:33:52.540
就是如果其他语言就是你甚至可能通过二进制投读

739
0:33:52.540 --> 0:33:54.840
那你这更麻烦

740
0:33:54.840 --> 0:33:57.440
但是这个NodeJS和NPM

741
0:33:57.440 --> 0:34:01.340
它生态的有一点是可能会被诟病的

742
0:34:01.340 --> 0:34:04.640
就是传统的这个NPM

743
0:34:04.640 --> 0:34:07.040
它是不锁版本的

744
0:34:07.040 --> 0:34:09.740
比如说你这个安装这个

745
0:34:09.740 --> 0:34:11.540
它就是传统这个NPM

746
0:34:11.540 --> 0:34:13.140
它一开始设计的时候

747
0:34:13.140 --> 0:34:14.340
它有一个假设

748
0:34:14.340 --> 0:34:17.640
假设就是大家都是比较善意的

749
0:34:17.640 --> 0:34:18.040
所以呢

750
0:34:18.040 --> 0:34:20.240
它使用的是所谓的这个Semi-Version

751
0:34:20.240 --> 0:34:23.740
就默认都是走这个云议版本的

752
0:34:23.740 --> 0:34:24.840
所以这事已经

753
0:34:24.840 --> 0:34:28.240
其实NPM已经出了好几次这样的事情了

754
0:34:28.240 --> 0:34:28.840
对

755
0:34:28.840 --> 0:34:30.440
上次是有一个什幺酷

756
0:34:30.440 --> 0:34:32.040
这个他把自己给删掉了

757
0:34:32.040 --> 0:34:35.440
然后导致一堆的依赖都失效的那个事

758
0:34:35.440 --> 0:34:38.640
也就比较有名的有两个事件

759
0:34:38.640 --> 0:34:41.940
一个是比较早的叫做Left the Pet事件

760
0:34:41.940 --> 0:34:45.040
就Left the Pet的这个作者

761
0:34:45.040 --> 0:34:47.640
这个事情以前我也做

762
0:34:47.640 --> 0:34:49.840
这件事情我还是也关注的比较多的

763
0:34:49.840 --> 0:34:54.840
当时我还这个发了一个专门的这个演讲

764
0:34:54.840 --> 0:34:56.040
讲这个事情

765
0:34:56.040 --> 0:34:59.640
就这个当时他做的事情实际上是因为一些原因

766
0:34:59.640 --> 0:35:03.840
因为一些比方说NPM官方把他的某一个酷的名字

767
0:35:03.840 --> 0:35:05.240
给了另外一个公司

768
0:35:05.240 --> 0:35:08.240
他一怒之下就把自己的这个酷给删了

769
0:35:08.240 --> 0:35:11.440
就把他自己的NPM上的这个包都是撤销了

770
0:35:11.440 --> 0:35:13.440
然后他用了一个包叫Left the Pet

771
0:35:13.440 --> 0:35:18.340
是非常非常多的这个酷所使用的这样一个

772
0:35:18.340 --> 0:35:18.840
对对

773
0:35:18.840 --> 0:35:21.240
就就我刚说就是这事

774
0:35:21.240 --> 0:35:25.140
而且他那个Left the Pet是一个非常小的模块

775
0:35:25.140 --> 0:35:29.140
只有就有效代码只有大概几行代码

776
0:35:29.140 --> 0:35:30.840
也不到十行代码

777
0:35:30.840 --> 0:35:33.740
所以当时就是造成一个夸张的说法

778
0:35:33.740 --> 0:35:40.540
就是十行代码造成了这个互联网的这个一度的这个停止

779
0:35:40.540 --> 0:35:43.240
但是这个说法非常夸张啊

780
0:35:43.240 --> 0:35:46.140
其实没有没有那幺大的这个破坏力

781
0:35:46.140 --> 0:35:49.440
但是这个事情就是是第一次

782
0:35:49.440 --> 0:35:51.340
就比较比较大的一个事件

783
0:35:51.340 --> 0:35:53.040
就是因为他删了一个包

784
0:35:53.040 --> 0:35:54.840
导致他的下游呢

785
0:35:54.840 --> 0:35:56.540
一下子全都挂掉了

786
0:35:58.040 --> 0:35:59.040
所以自那以后

787
0:35:59.040 --> 0:36:02.340
NPM也并没有改变这种管理的机制

788
0:36:02.340 --> 0:36:04.240
来怎幺去防范这种事情吗

789
0:36:05.740 --> 0:36:07.040
实际上不是的

790
0:36:07.040 --> 0:36:10.540
就是说NPM他一开始就是锁版本这件事情

791
0:36:10.540 --> 0:36:15.140
其实不单是这个供应链攻击这样一个问题了

792
0:36:15.140 --> 0:36:19.540
就是他可能有一些更加general的一些事情

793
0:36:19.540 --> 0:36:22.240
比方说如果我发了一个新版本

794
0:36:22.240 --> 0:36:23.740
但是我引入了一个bug对吧

795
0:36:23.740 --> 0:36:26.440
我不是故意的对这个供应链进行攻击

796
0:36:26.440 --> 0:36:28.240
但我也可能引入bug

797
0:36:28.240 --> 0:36:33.140
而且就说有很多人他可能对于所谓的语义版本这个规定啊

798
0:36:33.140 --> 0:36:34.340
也执行的不是很好

799
0:36:35.340 --> 0:36:36.640
按照道理说语义版本

800
0:36:36.640 --> 0:36:39.040
他应该是说你有breaking change的话

801
0:36:39.040 --> 0:36:40.940
应该要发大版本

802
0:36:40.940 --> 0:36:44.440
但是有时候可能就说有些人没有注意啊

803
0:36:44.440 --> 0:36:46.240
他做了一些breaking change

804
0:36:46.240 --> 0:36:47.740
他也没发大版本

805
0:36:47.740 --> 0:36:50.640
或者他做了一些他不认为是breaking change

806
0:36:50.640 --> 0:36:53.040
但实际上不是breaking change的事情

807
0:36:53.040 --> 0:36:53.940
他发出去了

808
0:36:53.940 --> 0:36:57.340
结果造成下游就出现了出现了问题

809
0:36:57.340 --> 0:37:00.940
那所以这个问题就说不单是供应链攻击的问题

810
0:37:00.940 --> 0:37:06.440
就是不锁版本这个事情本身的其实也是有这样一些问题的

811
0:37:06.440 --> 0:37:11.540
所以这个NPM的实际上比较就是我前面讲的是他最初啊

812
0:37:11.540 --> 0:37:14.640
其实现在的话其实NPM的client

813
0:37:14.640 --> 0:37:16.840
他实际上是可以锁版本的

814
0:37:16.840 --> 0:37:18.740
而且在NPM之前

815
0:37:18.740 --> 0:37:24.940
Yang就是Facebook这个公司也做了一个这个包的这样一个管理系

816
0:37:24.940 --> 0:37:27.340
他的默认就是锁版本的

817
0:37:27.340 --> 0:37:33.540
那唯一现在NPM的那个区别就是NPM以前是默认不锁版本

818
0:37:33.540 --> 0:37:36.640
但是最新的版本其实也是会锁版本的

819
0:37:37.540 --> 0:37:38.740
所以这个主要是

820
0:37:39.240 --> 0:37:39.740
对

821
0:37:39.740 --> 0:37:45.340
我想稍微表述一下我为什幺对这个NodeJS

822
0:37:45.340 --> 0:37:48.940
或者说是这个生态的一些看法

823
0:37:48.940 --> 0:37:51.040
就是不是说供应链攻击

824
0:37:51.040 --> 0:37:52.740
就是假设有一个人

825
0:37:52.740 --> 0:37:56.540
无论他是成心想作恶还是无心犯错

826
0:37:56.540 --> 0:38:00.340
他究竟要过几关才能够真的造成损害

827
0:38:01.340 --> 0:38:04.040
这件事情上我觉得太容易了

828
0:38:04.040 --> 0:38:07.340
在Node这个生态里面太容易做到损坏

829
0:38:07.340 --> 0:38:10.540
其实NPM刚出来的时候就有人提过这个问题

830
0:38:10.540 --> 0:38:12.140
就是说你是一个包管理器

831
0:38:12.240 --> 0:38:14.840
你不是一个GitHub这样的开源社区

832
0:38:15.640 --> 0:38:16.840
你既然是包管理系

833
0:38:16.840 --> 0:38:18.940
那比如像Debian的包管理系是怎幺做的

834
0:38:18.940 --> 0:38:20.040
人家是分三层

835
0:38:20.240 --> 0:38:22.440
有这个什幺最新的版本

836
0:38:22.440 --> 0:38:23.440
有测试的版本

837
0:38:23.440 --> 0:38:24.840
有什幺Beta的版本

838
0:38:24.840 --> 0:38:25.740
然后才是正式的版本

839
0:38:25.740 --> 0:38:26.940
这是非常保守

840
0:38:26.940 --> 0:38:30.440
是测试过很多很多东西很多轮之后才会放进去的

841
0:38:30.440 --> 0:38:34.640
那你NPM如果不去尽这个责任的话

842
0:38:34.640 --> 0:38:36.640
那你跟GitHub没什幺本质区别

843
0:38:36.640 --> 0:38:41.340
你只是在提供一些更一般性的东西

844
0:38:41.340 --> 0:38:43.440
你没有去验证这些版本的话

845
0:38:43.440 --> 0:38:46.440
所以当时我记得NPM刚出来就有这种声音

846
0:38:46.440 --> 0:38:48.040
但后面可能大家很方便

847
0:38:48.040 --> 0:38:50.340
然后也没什幺太大的问题

848
0:38:51.040 --> 0:38:51.940
另外一个原因

849
0:38:51.940 --> 0:38:54.040
另外一个因素就是我个人的感觉

850
0:38:54.040 --> 0:38:54.740
我不知道对不对

851
0:38:54.740 --> 0:38:57.440
就是前端的开发者社区

852
0:38:57.440 --> 0:38:58.840
它的节奏非常快

853
0:38:59.140 --> 0:39:02.440
NPM包更新的速度是远超过后端包的

854
0:39:02.840 --> 0:39:03.440
是的

855
0:39:03.440 --> 0:39:05.040
一个它的节奏快

856
0:39:05.040 --> 0:39:09.440
第二个就是说由于NPM形成的那样一个方式

857
0:39:09.440 --> 0:39:12.140
它和其他语言不太一样的一点

858
0:39:12.140 --> 0:39:17.140
就是说它比较倾向于比较小的库

859
0:39:17.140 --> 0:39:18.240
比较小的包

860
0:39:18.240 --> 0:39:19.040
对

861
0:39:19.040 --> 0:39:21.440
所以它分散的情绪就很多

862
0:39:21.440 --> 0:39:22.440
对分散

863
0:39:22.440 --> 0:39:25.840
然后包可能有很多小包

864
0:39:25.840 --> 0:39:27.240
然后依赖可能很深

865
0:39:27.640 --> 0:39:30.440
所以它这个问题是比较多的

866
0:39:30.640 --> 0:39:32.440
但是前面那个问题

867
0:39:32.440 --> 0:39:34.640
就是说锁版本和不锁版本

868
0:39:34.640 --> 0:39:37.840
我还是要讲就是各有利弊

869
0:39:37.840 --> 0:39:40.640
也不是说锁版本就没有这种

870
0:39:40.640 --> 0:39:41.040
是的

871
0:39:41.040 --> 0:39:42.040
确实是对吧

872
0:39:42.040 --> 0:39:43.840
而且就是说像我前面讲的

873
0:39:43.840 --> 0:39:46.640
就是说如果大家以善意的方式去考虑的话

874
0:39:46.640 --> 0:39:49.840
其实是能够让你更快的去拿到新版本

875
0:39:49.840 --> 0:39:51.240
也许是件好事

876
0:39:51.240 --> 0:39:53.140
而且还有反过来讲

877
0:39:53.140 --> 0:39:56.740
就是说我们前面讲说你无意的引入了一个问题

878
0:39:56.740 --> 0:39:57.140
对吧

879
0:39:57.140 --> 0:39:59.640
但是不锁版本自动升级

880
0:39:59.640 --> 0:40:00.740
它有一个什幺好处

881
0:40:00.740 --> 0:40:02.740
就是说如果我有一个bug

882
0:40:02.740 --> 0:40:04.340
甚至是比方说安全漏洞

883
0:40:04.340 --> 0:40:06.540
那幺就不需要你介入

884
0:40:06.540 --> 0:40:09.240
我自动的就可以去修复掉

885
0:40:09.240 --> 0:40:13.440
但是后面这个想法我觉得也挺危险的

886
0:40:13.440 --> 0:40:14.440
就像你把你的

887
0:40:14.440 --> 0:40:16.640
如果你这个系统真的是很critical的系统的话

888
0:40:16.640 --> 0:40:20.640
你相当于就是你把你的安全依赖把它委托给一个

889
0:40:20.640 --> 0:40:24.040
你并不知晓底细的第三方供应链了

890
0:40:24.040 --> 0:40:25.440
这其实也挺危险的

891
0:40:25.440 --> 0:40:26.840
你如果问我的话

892
0:40:26.840 --> 0:40:29.340
我在公司里边去负责这事的话

893
0:40:29.340 --> 0:40:31.140
我可能我还是更愿意

894
0:40:31.140 --> 0:40:34.040
我先研究完了你的release

895
0:40:34.040 --> 0:40:37.240
我再来决定是不是要去应用它

896
0:40:37.240 --> 0:40:37.840
这我不知道

897
0:40:37.840 --> 0:40:41.440
比如说这里有个平凡的问题

898
0:40:41.440 --> 0:40:43.440
就是说像我前面讲的

899
0:40:43.440 --> 0:40:47.840
由于这个JS、Node和那个NPN

900
0:40:47.840 --> 0:40:52.040
它的这个依赖非常非常多

901
0:40:52.040 --> 0:40:52.840
非常非常小

902
0:40:52.840 --> 0:40:54.840
由于这个生态的历史所造成的

903
0:40:54.840 --> 0:40:58.140
导致你去每一次你要去升级

904
0:40:58.140 --> 0:41:00.840
去review它的成本非常高

905
0:41:00.840 --> 0:41:02.040
对

906
0:41:02.040 --> 0:41:03.440
你这个成本非常高的话

907
0:41:03.440 --> 0:41:05.240
你就是说结果会造成什幺

908
0:41:05.240 --> 0:41:07.240
如果你是锁版本的话

909
0:41:07.240 --> 0:41:08.340
你就会说

910
0:41:08.340 --> 0:41:08.640
哎呀

911
0:41:08.640 --> 0:41:12.640
我现在来不及把这个所有的都review掉

912
0:41:12.640 --> 0:41:13.640
那我就攒着

913
0:41:13.640 --> 0:41:14.240
你越攒

914
0:41:14.240 --> 0:41:15.840
你的这个成本越高

915
0:41:15.840 --> 0:41:17.740
你越不会更新它

916
0:41:17.740 --> 0:41:20.240
结果就导致说你锁版本

917
0:41:20.240 --> 0:41:21.740
一旦锁版本之后

918
0:41:21.740 --> 0:41:23.440
你可能会

919
0:41:23.440 --> 0:41:24.440
是的

920
0:41:24.440 --> 0:41:25.840
很难的去更新它

921
0:41:25.840 --> 0:41:27.040
是的

922
0:41:27.040 --> 0:41:28.040
这就像那个

923
0:41:28.040 --> 0:41:29.640
就是说自动更新

924
0:41:29.640 --> 0:41:31.140
就是以我们的实践来讲

925
0:41:31.140 --> 0:41:32.440
自动更新是OK的

926
0:41:32.440 --> 0:41:34.640
所以国内大厂其实有一些

927
0:41:34.640 --> 0:41:36.340
比方说某国内大厂

928
0:41:36.340 --> 0:41:39.440
就是包括我们前面讲的MPM MIRA的

929
0:41:39.440 --> 0:41:41.240
做这个的国内大厂

930
0:41:41.240 --> 0:41:46.740
他们的一直就是用自动的升级的策略

931
0:41:46.740 --> 0:41:48.240
不锁版本的策略

932
0:41:48.240 --> 0:41:49.540
嗯

933
0:41:49.540 --> 0:41:51.740
他们主张是这个

934
0:41:51.740 --> 0:41:53.540
我在这个世界上是中立的

935
0:41:53.540 --> 0:41:55.640
但是我觉得他们讲的有道理

936
0:41:55.640 --> 0:41:57.040
我不认为说那个

937
0:41:57.040 --> 0:42:00.240
其实我有一个长期的观点

938
0:42:00.240 --> 0:42:02.740
就是说单说这个

939
0:42:02.740 --> 0:42:04.440
一个人他干了一桩事情

940
0:42:04.440 --> 0:42:05.540
甚至还为谁

941
0:42:05.540 --> 0:42:06.740
这也就过去了

942
0:42:06.740 --> 0:42:09.640
但是对于开源的整个生态

943
0:42:09.640 --> 0:42:11.840
会有一种长期的影响

944
0:42:11.840 --> 0:42:14.340
就是有一个人

945
0:42:14.340 --> 0:42:15.940
不管他怎幺样

946
0:42:15.940 --> 0:42:18.440
但是他是向大家证明了

947
0:42:18.440 --> 0:42:19.940
以后有机会

948
0:42:19.940 --> 0:42:22.940
只要有机会有人就能干成这件事情

949
0:42:22.940 --> 0:42:26.440
所以所谓的我们对整个开源社区

950
0:42:26.440 --> 0:42:27.840
跟整个开源供应链

951
0:42:27.840 --> 0:42:29.840
有什幺善意的猜想

952
0:42:29.840 --> 0:42:31.940
这件事情就不成立了

953
0:42:31.940 --> 0:42:34.240
你不能假设是善意的

954
0:42:34.240 --> 0:42:36.840
你也不能假设整个供应链是友好的

955
0:42:36.840 --> 0:42:39.140
或者说是安全的

956
0:42:39.140 --> 0:42:40.340
那幺也是为什幺

957
0:42:40.340 --> 0:42:41.940
就这一次感觉上

958
0:42:41.940 --> 0:42:44.340
整个开源社区还是比较团结的

959
0:42:44.340 --> 0:42:46.740
或者说意志是比较一致的

960
0:42:46.740 --> 0:42:47.540
杂音并不多

961
0:42:47.540 --> 0:42:49.440
就大家都还是比较反对这个行为的

962
0:42:49.440 --> 0:42:53.540
我觉得这个也可能大部分人都还是比较希望

963
0:42:53.540 --> 0:42:58.540
开源社区能够保持一种相对比较正常的状态

964
0:42:58.540 --> 0:42:59.440
对

965
0:42:59.440 --> 0:43:03.240
包括我觉得对这样一个事件

966
0:43:03.240 --> 0:43:05.640
对这个人的谴责

967
0:43:05.640 --> 0:43:07.040
包括我觉得说

968
0:43:07.040 --> 0:43:09.140
可能把这个人驱逐出去

969
0:43:09.140 --> 0:43:11.140
驱逐出开源社区

970
0:43:11.140 --> 0:43:15.940
其实也有这种进化开源社区的想法

971
0:43:15.940 --> 0:43:21.140
就是保持说我们仍然是一个善意为主的社区

972
0:43:21.140 --> 0:43:22.940
然后大家仍然可以去信任

973
0:43:22.940 --> 0:43:27.340
或者认为说我们仍然能保持这样一个自进化的能力

974
0:43:27.340 --> 0:43:30.340
然后通过社区去发现这个事情

975
0:43:30.340 --> 0:43:31.740
就是你从另外一方面看

976
0:43:31.740 --> 0:43:35.740
如果社区能够很快的发现这些问题的话

977
0:43:35.740 --> 0:43:37.940
对于普通的开发者来讲的话

978
0:43:37.940 --> 0:43:42.040
也许他们仍然会觉得说是一个可信赖的

979
0:43:42.040 --> 0:43:43.940
就是你可以从两面去看这个问题

980
0:43:43.940 --> 0:43:47.240
就是从那个悲观主义的角度来讲的话

981
0:43:47.240 --> 0:43:49.840
是说哎呀那就无法再信任了

982
0:43:49.840 --> 0:43:51.540
我们一定要索巴默也好

983
0:43:51.540 --> 0:43:52.940
或者怎幺样也好

984
0:43:52.940 --> 0:43:54.440
但是你从悲观的角度

985
0:43:54.440 --> 0:43:59.040
你可能会走到一个非常糟糕的一个境地

986
0:43:59.040 --> 0:44:01.740
就是说索巴默因为也是有成本的

987
0:44:01.740 --> 0:44:03.540
第二个事情就是有些人可能觉得说

988
0:44:03.540 --> 0:44:05.040
我所有东西都要自己写

989
0:44:05.040 --> 0:44:05.940
我不要依赖

990
0:44:05.940 --> 0:44:08.440
这个其实也很有问题

991
0:44:08.440 --> 0:44:12.940
因为现在就是所谓的一招回到解放前

992
0:44:12.940 --> 0:44:17.440
对很少有人能承担这种代价的

993
0:44:17.440 --> 0:44:18.340
是的

994
0:44:18.340 --> 0:44:21.140
所以就说你从悲观主义的角度看是这样的

995
0:44:21.140 --> 0:44:25.040
但可能也有些人他会以乐观主义的态度来看

996
0:44:25.040 --> 0:44:28.540
就是说你看虽然有这幺多可能不好了

997
0:44:28.540 --> 0:44:30.840
但是社区很快的就发现了这个事情

998
0:44:30.840 --> 0:44:33.140
就是他可能你从乐观角度讲

999
0:44:33.140 --> 0:44:37.640
就再次证明社区可以非常快的去发现这个问题

1000
0:44:37.640 --> 0:44:40.240
并且去净化这个事情

1001
0:44:40.240 --> 0:44:42.240
是我觉得这两方面的都有道理

1002
0:44:42.240 --> 0:44:44.840
而且我们都得看

1003
0:44:44.840 --> 0:44:45.740
确实是这样的

1004
0:44:45.740 --> 0:44:49.240
因为你说老赵你说

1005
0:44:49.240 --> 0:44:53.540
我想说的是就是说我们现在展现给所有其他人

1006
0:44:53.540 --> 0:44:55.240
就是咱们作为开源圈内人

1007
0:44:55.240 --> 0:44:57.040
我们展现给圈外人看的是

1008
0:44:57.040 --> 0:44:59.040
我们大家齐声前凿

1009
0:44:59.040 --> 0:45:04.140
但是圈外人的看法是我不能假设极端情况不会出现

1010
0:45:04.140 --> 0:45:05.140
这个肯定是的

1011
0:45:05.140 --> 0:45:08.140
但是你反过来说软件的compliance

1012
0:45:08.140 --> 0:45:11.240
就是软件的可信性本身就很难

1013
0:45:11.240 --> 0:45:14.140
你难道说你公司里面的人开发的代码

1014
0:45:14.140 --> 0:45:14.940
你就可信任吗

1015
0:45:14.940 --> 0:45:17.140
其实这个风险都是存在的

1016
0:45:17.140 --> 0:45:21.940
所以我个人更看重的

1017
0:45:21.940 --> 0:45:24.440
还是说它有没有更多的人

1018
0:45:24.440 --> 0:45:27.340
更多的机制一起来帮我们去发现问题

1019
0:45:27.340 --> 0:45:30.740
那总比你封闭起来要更好一些

1020
0:45:30.740 --> 0:45:32.340
所以这次说实话

1021
0:45:32.340 --> 0:45:33.540
这件事情刚出来的时候

1022
0:45:33.540 --> 0:45:35.040
我是非常非常担心的

1023
0:45:35.040 --> 0:45:36.840
然后后面观察了一阵

1024
0:45:36.840 --> 0:45:40.840
然后看下来整个开源社区的态度非常的鲜明

1025
0:45:40.840 --> 0:45:42.440
而且反应也很迅速

1026
0:45:42.440 --> 0:45:44.240
其实我稍微的好

1027
0:45:44.240 --> 0:45:45.640
就舒服了一点

1028
0:45:45.640 --> 0:45:47.340
就我个人的感受是这样子的

1029
0:45:47.340 --> 0:45:48.540
对

1030
0:45:48.540 --> 0:45:50.940
我觉得这边是有一个很大的问题

1031
0:45:50.940 --> 0:45:52.040
就是机制问题

1032
0:45:52.040 --> 0:45:55.740
就是说它和实体的东西不太一样

1033
0:45:55.740 --> 0:45:57.640
实体的其实也有供应链的攻击

1034
0:45:57.640 --> 0:45:58.640
对

1035
0:45:58.640 --> 0:46:00.740
比方说咱们之前315的事

1036
0:46:00.740 --> 0:46:05.240
实际是本质是一样的

1037
0:46:05.240 --> 0:46:06.240
但是它有一个区别

1038
0:46:06.240 --> 0:46:07.840
就是实体的这个东西

1039
0:46:07.840 --> 0:46:10.240
就是说谁负责

1040
0:46:10.240 --> 0:46:13.540
最后卖给你产品的那个人

1041
0:46:13.540 --> 0:46:15.940
他跟你有一个商业的交易对吧

1042
0:46:15.940 --> 0:46:17.440
所以他负责是应该的

1043
0:46:17.440 --> 0:46:18.840
因为他从里面受益了

1044
0:46:18.840 --> 0:46:19.440
对吧

1045
0:46:19.440 --> 0:46:21.840
我记得老庄写的文章里面

1046
0:46:21.840 --> 0:46:23.440
我觉得讲的事情就是

1047
0:46:23.440 --> 0:46:26.040
一个是整个供应链

1048
0:46:26.040 --> 0:46:27.240
还有是责任链

1049
0:46:27.240 --> 0:46:28.540
还有利益链对吧

1050
0:46:28.540 --> 0:46:31.040
我记得老庄这文章是写了这三样东西

1051
0:46:31.040 --> 0:46:32.940
但是在开源这里面

1052
0:46:32.940 --> 0:46:35.040
这个链它链不起来了对吧

1053
0:46:35.040 --> 0:46:36.640
它只有供应链

1054
0:46:36.640 --> 0:46:39.240
责任链和利益链是断裂的对吧

1055
0:46:39.240 --> 0:46:43.240
老庄这个文章我看了是甚有感触的

1056
0:46:43.240 --> 0:46:46.840
那如果它是断裂的一个情况的话

1057
0:46:46.840 --> 0:46:51.840
那你单纯讲说我们要通过什幺方式去解决

1058
0:46:51.840 --> 0:46:53.340
很难解决

1059
0:46:53.340 --> 0:46:58.040
因为普通开发者他没有办法去担负这样一个责任

1060
0:46:58.040 --> 0:47:00.040
所以我觉得可能要倒过来考虑

1061
0:47:00.040 --> 0:47:00.840
这个事情就是说

1062
0:47:00.840 --> 0:47:03.640
软件这个行业怎幺解决这个问题

1063
0:47:03.640 --> 0:47:05.240
我觉得得靠技术

1064
0:47:05.240 --> 0:47:06.040
得靠技术

1065
0:47:06.040 --> 0:47:09.240
得靠我们这个一些技术的方案

1066
0:47:09.240 --> 0:47:11.640
去把这个安全机制去改进

1067
0:47:11.640 --> 0:47:17.040
对这个我觉得是一直以来开源社区面临的一个很大的挑战

1068
0:47:17.040 --> 0:47:21.640
但是之所以开源社区协同的这个体系能走到今天的话

1069
0:47:21.640 --> 0:47:25.040
有很大的原因就是大多数人还是善良的

1070
0:47:25.040 --> 0:47:26.540
然后开源社区里面

1071
0:47:26.540 --> 0:47:29.240
如果能形成一种大多数人一起去发现

1072
0:47:29.240 --> 0:47:32.640
然后通过一种类似民主的机制投票

1073
0:47:32.640 --> 0:47:33.740
或者类似这样的方式

1074
0:47:33.740 --> 0:47:37.440
能够更有效的发现那些恶意行为的话

1075
0:47:37.440 --> 0:47:40.840
那幺本身这其实是开源可以塑造的一种优势

1076
0:47:40.840 --> 0:47:43.240
但是是不是能够达到

1077
0:47:43.240 --> 0:47:45.740
我觉得到目前为止还是挺大的挑战

1078
0:47:45.740 --> 0:47:51.440
就没看到特别突破性的一些尝试

1079
0:47:51.440 --> 0:47:54.840
我自己有一些想法是可以改进的

1080
0:47:54.840 --> 0:47:58.440
因为我们讲供应链的问题

1081
0:47:58.440 --> 0:48:00.640
它难是难在哪里

1082
0:48:00.640 --> 0:48:06.440
难其实主要难在你的安全审计成本非常高

1083
0:48:06.440 --> 0:48:11.040
你不可能把你的下游的所有东西都审计一遍

1084
0:48:11.040 --> 0:48:13.040
只有大厂能够这幺干

1085
0:48:13.040 --> 0:48:14.440
大厂都很难做

1086
0:48:14.440 --> 0:48:18.140
如果是一个个人开发者

1087
0:48:18.140 --> 0:48:18.940
他根本不可能

1088
0:48:18.940 --> 0:48:22.940
因为我可能只是在一个基础上写了一点点代码

1089
0:48:22.940 --> 0:48:25.040
我可能只写了比方说1000行代码

1090
0:48:25.040 --> 0:48:27.640
但我的依赖包可能有10万行代码

1091
0:48:27.640 --> 0:48:29.240
那我怎幺审计

1092
0:48:29.240 --> 0:48:30.840
不可能审计

1093
0:48:30.840 --> 0:48:33.440
所以我觉得需要一些别的机制

1094
0:48:33.440 --> 0:48:36.840
比方说基于包的权限控制

1095
0:48:36.840 --> 0:48:40.040
比方说node IPC包

1096
0:48:40.040 --> 0:48:43.440
它为什幺要有文档读写的权限

1097
0:48:43.440 --> 0:48:45.440
这件事情其实就是

1098
0:48:45.440 --> 0:48:47.440
这个也是我刚才想问的一个问题

1099
0:48:47.440 --> 0:48:49.840
我就觉得有点细碎了

1100
0:48:49.840 --> 0:48:50.440
所以没问

1101
0:48:50.440 --> 0:48:52.440
但这很重要

1102
0:48:52.440 --> 0:48:53.640
虽然是一个细节问题

1103
0:48:53.640 --> 0:48:54.440
但是很重要

1104
0:48:54.440 --> 0:48:56.440
就假设说我们有一个机制

1105
0:48:56.440 --> 0:49:00.440
能够说把敏感的权限能够收拢

1106
0:49:00.440 --> 0:49:01.740
但这个很难

1107
0:49:01.740 --> 0:49:04.040
因为这个东西它难的点在于说

1108
0:49:04.040 --> 0:49:08.840
目前操作系统对于这个可运行的进程的权限

1109
0:49:08.840 --> 0:49:10.240
没有那幺精细的控制

1110
0:49:10.240 --> 0:49:12.940
你node.js全是在一个进程里去运行的

1111
0:49:12.940 --> 0:49:17.440
它没办法去细分到你这个进程里面的代码

1112
0:49:17.440 --> 0:49:18.840
到底权限怎幺分配

1113
0:49:18.840 --> 0:49:21.040
其实是有可能的

1114
0:49:21.040 --> 0:49:23.640
因为那就得node自己来做

1115
0:49:23.640 --> 0:49:25.240
对,node自己来做

1116
0:49:25.240 --> 0:49:29.040
其实我说这个东西它其实需要node

1117
0:49:29.040 --> 0:49:31.640
或者甚至这个js语言

1118
0:49:31.640 --> 0:49:35.440
它需要一些新的机制去加进去

1119
0:49:35.440 --> 0:49:37.440
那个Hacks

1120
0:49:37.440 --> 0:49:38.840
我想说一大段了

1121
0:49:38.840 --> 0:49:41.140
刚才我忍了一下

1122
0:49:41.140 --> 0:49:42.240
但是还是没忍住

1123
0:49:42.240 --> 0:49:47.640
我其实不太认同你说的用技术手段来解决供应链问题

1124
0:49:47.640 --> 0:49:49.440
这样的一个整体思路

1125
0:49:49.440 --> 0:49:50.640
我觉得这是解决不了的

1126
0:49:50.640 --> 0:49:53.340
举个例子说

1127
0:49:53.340 --> 0:49:57.940
我们现在的手机或者说隐私数据

1128
0:49:57.940 --> 0:50:01.440
为什幺比原来的几年前要好很多

1129
0:50:01.440 --> 0:50:03.440
是有法律的

1130
0:50:03.440 --> 0:50:07.240
因为如果有什幺什幺东西侵犯了我的隐私的话

1131
0:50:07.240 --> 0:50:09.040
是直接触犯法律的

1132
0:50:09.040 --> 0:50:12.240
而且是打掉了一堆的这样的公司

1133
0:50:12.240 --> 0:50:14.240
对,已经打掉了一堆

1134
0:50:14.240 --> 0:50:18.740
对,就是说只要违法成本够低

1135
0:50:18.740 --> 0:50:20.740
就像开源社区

1136
0:50:20.740 --> 0:50:22.040
真的你说到底不费

1137
0:50:22.040 --> 0:50:23.140
就是把这家伙骂死

1138
0:50:23.140 --> 0:50:24.740
还能怎幺样

1139
0:50:24.740 --> 0:50:26.340
假设有一个人

1140
0:50:26.340 --> 0:50:29.340
他在这个社区里潜伏了几年

1141
0:50:29.340 --> 0:50:32.840
完了以后他就不是想在社区里面

1142
0:50:32.840 --> 0:50:35.340
来追求什幺名誉的

1143
0:50:35.340 --> 0:50:37.340
他只是把自己埋伏在那

1144
0:50:37.340 --> 0:50:42.140
将来他就有可能实施某种供应链攻击

1145
0:50:42.140 --> 0:50:43.140
你怎幺办

1146
0:50:43.140 --> 0:50:45.640
是,我觉得你讲的很有道理

1147
0:50:45.640 --> 0:50:47.940
而且我也赞同用法律解决

1148
0:50:47.940 --> 0:50:49.640
但这里有一个漏洞

1149
0:50:49.640 --> 0:50:53.340
就是软件这个行业它是全世界的

1150
0:50:53.340 --> 0:50:54.840
就是你怎幺去

1151
0:50:54.840 --> 0:50:56.840
比方说这个人根本就在境外

1152
0:50:56.840 --> 0:50:57.840
对

1153
0:50:57.840 --> 0:51:01.340
之前我没有说完

1154
0:51:01.340 --> 0:51:02.140
就这幺说

1155
0:51:02.140 --> 0:51:03.340
所以我说有大段

1156
0:51:03.340 --> 0:51:09.040
你看现在你刚才在说小公司没有能力

1157
0:51:09.040 --> 0:51:13.540
或者说没有技术实力去承担所有的这种风险

1158
0:51:13.540 --> 0:51:14.140
对的

1159
0:51:14.140 --> 0:51:19.940
那是因为小公司现在觉得开源软件就是一个免费的东西

1160
0:51:19.940 --> 0:51:22.340
我拿来就用节约成本多好的东西

1161
0:51:22.340 --> 0:51:26.340
现在如果说开源软件你可以用

1162
0:51:26.340 --> 0:51:28.340
你用的就是你负责

1163
0:51:28.340 --> 0:51:30.740
如果你的用户出了问题

1164
0:51:30.740 --> 0:51:32.340
你去赔偿

1165
0:51:32.340 --> 0:51:34.540
那幺这个小公司也好

1166
0:51:34.540 --> 0:51:35.740
大公司也好

1167
0:51:35.740 --> 0:51:40.340
就像一个被欧洲的GDPR所严格规范的公司

1168
0:51:40.340 --> 0:51:44.340
他一定要去审查自己的数据的合规问题

1169
0:51:44.340 --> 0:51:46.140
或者说是隐私合规问题

1170
0:51:46.140 --> 0:51:48.740
他当然要花钱把这些问题解决

1171
0:51:48.740 --> 0:51:50.940
同样的任何一家公司

1172
0:51:50.940 --> 0:51:53.840
他如果用了某某开源软件

1173
0:51:53.840 --> 0:51:56.440
然后他又说我咋知道这个开源软件咋回事

1174
0:51:56.440 --> 0:51:57.040
我不负责

1175
0:51:57.040 --> 0:51:58.040
那不行

1176
0:51:58.040 --> 0:51:59.940
你不能够假装你不能负责

1177
0:51:59.940 --> 0:52:01.640
你就得负责

1178
0:52:01.640 --> 0:52:06.040
这个时候他才会投入更多的时间精力成本

1179
0:52:06.040 --> 0:52:09.140
去把他用到的开源软件去检查

1180
0:52:09.140 --> 0:52:13.240
去判断到底是不是安全的

1181
0:52:13.240 --> 0:52:16.240
所以结论就是利好开源软件

1182
0:52:16.240 --> 0:52:18.440
治理外包的创新公司

1183
0:52:18.440 --> 0:52:19.440
是的

1184
0:52:19.440 --> 0:52:23.240
你们现在谁有钱敢去开公司做幺干这事

1185
0:52:23.240 --> 0:52:24.240
如果能干成的话

1186
0:52:24.240 --> 0:52:26.040
不能真的解决问题

1187
0:52:26.040 --> 0:52:29.440
因为你不可能通过什幺什幺技术手段

1188
0:52:29.440 --> 0:52:32.740
通过什幺什幺社区的谴责

1189
0:52:32.740 --> 0:52:36.340
真正的杜绝这样的风险

1190
0:52:36.340 --> 0:52:36.940
是的

1191
0:52:36.940 --> 0:52:39.040
我觉得我是赞同你这分析

1192
0:52:39.040 --> 0:52:42.140
只是我觉得他就说得要双管齐下

1193
0:52:42.140 --> 0:52:43.340
因为像我前面讲的

1194
0:52:43.340 --> 0:52:45.940
法律的这个基于法律

1195
0:52:45.940 --> 0:52:47.740
其实还是有些问题

1196
0:52:47.740 --> 0:52:49.240
当然他一定是需要的

1197
0:52:49.240 --> 0:52:50.440
但他也有些问题

1198
0:52:50.440 --> 0:52:52.640
像前面讲的就是跨国的问题

1199
0:52:52.640 --> 0:52:57.040
而且就说如果是恶意的黑客的攻击

1200
0:52:57.040 --> 0:52:59.640
你甚至来讲很多人他根本没有能力取证

1201
0:52:59.640 --> 0:53:01.840
取证你都取证不了

1202
0:53:01.840 --> 0:53:03.840
你不要说那个

1203
0:53:03.840 --> 0:53:04.440
非常难

1204
0:53:04.440 --> 0:53:06.040
我觉得是说技术手段

1205
0:53:06.040 --> 0:53:08.440
其实是能够解决很多问题的

1206
0:53:08.440 --> 0:53:10.040
像我前面讲的就说

1207
0:53:10.040 --> 0:53:13.340
你因为我前面那个还没有完全讲完

1208
0:53:13.340 --> 0:53:15.740
就说主要问题供应链攻击的主要问题

1209
0:53:15.740 --> 0:53:18.440
实际上是因为你的安全审计成本太高

1210
0:53:18.440 --> 0:53:20.140
技术手段在里面起了作用

1211
0:53:20.140 --> 0:53:24.540
主要是使得你的安全审计

1212
0:53:24.540 --> 0:53:28.440
能够控制在一个合理的成本里面

1213
0:53:28.440 --> 0:53:30.040
可能的成本里面

1214
0:53:30.040 --> 0:53:31.540
这样的话你才能够去做

1215
0:53:31.540 --> 0:53:32.740
我们刚刚讲的那些事情

1216
0:53:32.740 --> 0:53:36.540
就比方说你要求他去做安全审计

1217
0:53:36.540 --> 0:53:38.340
但如果像我们现在的情况下

1218
0:53:38.340 --> 0:53:40.840
安全审计根本没有可行性

1219
0:53:40.840 --> 0:53:42.740
你首先得有可行性

1220
0:53:42.740 --> 0:53:43.640
他才能做

1221
0:53:43.640 --> 0:53:46.140
否则我说你国家都不要开发了

1222
0:53:46.140 --> 0:53:47.140
就是你开发一个东西

1223
0:53:47.140 --> 0:53:50.740
你的如果万一你中刀成本

1224
0:53:50.740 --> 0:53:52.140
你直接就破产了

1225
0:53:52.140 --> 0:53:55.340
那就别开发了对吧

1226
0:53:55.340 --> 0:53:59.740
所以首先技术要让他能够在一个

1227
0:53:59.740 --> 0:54:02.340
可控的成本里面去干这个事情

1228
0:54:02.340 --> 0:54:05.940
这是我讲的说技术手段的作用

1229
0:54:05.940 --> 0:54:10.540
我觉得你们两个的观点其实是兼容的

1230
0:54:10.540 --> 0:54:14.540
对是最不同意的

1231
0:54:14.540 --> 0:54:18.340
好呀我们也聊了差不多一个钟头了

1232
0:54:18.340 --> 0:54:20.740
稍微的收收尾

1233
0:54:20.740 --> 0:54:28.840
我觉得这事儿其实是有解决方案的

1234
0:54:28.840 --> 0:54:31.540
只是这个解决方案就像刚才说的

1235
0:54:31.540 --> 0:54:36.640
是全体人类都要去付出更高的成本

1236
0:54:36.640 --> 0:54:41.340
明知道我们有一个效率更高的方式

1237
0:54:41.340 --> 0:54:43.940
但是由于某些老鼠屎

1238
0:54:43.940 --> 0:54:45.940
那你就不得不退回到一个

1239
0:54:45.940 --> 0:54:48.940
人人自危都无法互信的一个状态的话

1240
0:54:48.940 --> 0:54:49.740
不是不可以

1241
0:54:49.740 --> 0:54:51.540
但是成本真的会非常高

1242
0:54:51.540 --> 0:54:54.340
甚至有一些业务就没法继续下去了

1243
0:54:54.340 --> 0:54:59.140
这种情况肯定不是我们想看到的东西

1244
0:54:59.140 --> 0:55:04.340
所以维护开源软件的社区的纯洁性

1245
0:55:04.340 --> 0:55:09.140
和它的相对的这种大家对它的信任感

1246
0:55:09.140 --> 0:55:12.940
我觉得是一个非常有价值的事情

1247
0:55:12.940 --> 0:55:17.340
值得很多人去为之努力

1248
0:55:17.340 --> 0:55:21.340
当然了这个并不是说我们不需要去做一些

1249
0:55:21.340 --> 0:55:24.540
防人之心不可无的这样的准备

1250
0:55:24.540 --> 0:55:25.940
那就是刚才说的

1251
0:55:25.940 --> 0:55:28.940
不同的用户

1252
0:55:28.940 --> 0:55:31.340
你要根据你的成本承受能力

1253
0:55:31.340 --> 0:55:33.540
去选择对你来说合适的解决方案

1254
0:55:33.540 --> 0:55:35.140
如果你的成本承受能力很低

1255
0:55:35.140 --> 0:55:38.540
那你就选择信任开源社区

1256
0:55:38.540 --> 0:55:41.540
然后选择你的供应商的

1257
0:55:41.540 --> 0:55:44.340
或者说你的上游的这些代码的时候

1258
0:55:44.340 --> 0:55:45.340
你要谨慎一些

1259
0:55:45.340 --> 0:55:46.940
你要有一些判断

1260
0:55:46.940 --> 0:55:48.140
那就只能这样了

1261
0:55:48.140 --> 0:55:50.340
很大的大厂

1262
0:55:50.340 --> 0:55:52.940
你要创建非常完善的开源治理

1263
0:55:52.940 --> 0:55:57.540
你要有一整套的依赖和可信方面的一些验证

1264
0:55:57.540 --> 0:56:01.140
以后会不会出现非常优秀的

1265
0:56:01.140 --> 0:56:03.140
也具有一定规模的

1266
0:56:03.140 --> 0:56:07.140
专门把这种服务外包出去的这种服务

1267
0:56:07.140 --> 0:56:08.340
价格又可接受

1268
0:56:08.340 --> 0:56:10.740
那幺很多中型的消费者

1269
0:56:10.740 --> 0:56:12.140
可能会使用这些服务

1270
0:56:12.140 --> 0:56:15.540
其实就跟当初最有钱的人用Oracle

1271
0:56:15.540 --> 0:56:18.940
其次有钱的人买Red Hat的

1272
0:56:18.940 --> 0:56:21.340
或者是MySQL的付费服务

1273
0:56:21.340 --> 0:56:22.740
完全没钱的人

1274
0:56:22.740 --> 0:56:24.540
你就用MySQL的Community版本

1275
0:56:24.540 --> 0:56:26.140
其实本质就这幺回事

1276
0:56:26.140 --> 0:56:28.140
然后承担相应的一些风险

1277
0:56:28.140 --> 0:56:29.940
所以这个事情本身

1278
0:56:29.940 --> 0:56:34.140
当然它是在很特殊的历史状况

1279
0:56:34.140 --> 0:56:37.340
俄乌战争是改变二战之后历史格局的一件大事

1280
0:56:37.340 --> 0:56:38.940
出现一些这种怪胎

1281
0:56:38.940 --> 0:56:40.340
我个人认为也算正常

1282
0:56:40.340 --> 0:56:43.140
但确实给我们很多冲击和思考

1283
0:56:43.140 --> 0:56:45.540
这是我个人的一些感想

1284
0:56:45.540 --> 0:56:48.940
各位你们对这个事情的一个总结

1285
0:56:48.940 --> 0:56:53.140
或者说一个现在可以每个人有一个总结层次

1286
0:56:53.140 --> 0:56:55.540
看大家是怎幺去想的

1287
0:56:58.740 --> 0:57:01.740
我先让王老师先来

1288
0:57:01.740 --> 0:57:03.540
好谢谢

1289
0:57:03.540 --> 0:57:05.140
对其实今天学到了很多

1290
0:57:05.140 --> 0:57:07.740
其实我觉得这件事情肯定是

1291
0:57:07.740 --> 0:57:10.940
大家都有责任干系来做这件事情

1292
0:57:10.940 --> 0:57:14.540
我觉得我们这个节目其实最大的一个价值

1293
0:57:14.540 --> 0:57:18.340
其实就在于把这件事情给大家呈现出来了

1294
0:57:18.340 --> 0:57:20.140
对无论你是贡献者

1295
0:57:20.140 --> 0:57:22.740
或者是你是消费方使用方

1296
0:57:22.740 --> 0:57:24.540
首先你知道了这些事情

1297
0:57:24.540 --> 0:57:26.540
对第二个知道这件事情以后

1298
0:57:26.540 --> 0:57:29.940
根据我们刚才讨论的这些内容

1299
0:57:29.940 --> 0:57:32.140
对我也是非常赞同几位嘉宾的

1300
0:57:32.140 --> 0:57:34.340
就是不能说倒退

1301
0:57:34.340 --> 0:57:37.940
还是要在这个创新的道路上继续走

1302
0:57:37.940 --> 0:57:39.940
包括整个开源社区的发展

1303
0:57:39.940 --> 0:57:42.340
对那其实是需要各方面

1304
0:57:42.340 --> 0:57:45.140
大家一起来为这个开源社区发展的

1305
0:57:45.140 --> 0:57:47.540
这种健康去做出贡献

1306
0:57:47.540 --> 0:57:50.140
对你的使用方做好贡献管理

1307
0:57:50.140 --> 0:57:52.340
对甚至是对开源社区

1308
0:57:52.340 --> 0:57:54.740
甚至是这些供应链安全做一些

1309
0:57:54.740 --> 0:57:57.940
更加额外有价值的一些投入

1310
0:57:57.940 --> 0:58:00.340
对那我们的一些开发者

1311
0:58:00.340 --> 0:58:04.740
其实也是希望大家共同构建一个

1312
0:58:04.740 --> 0:58:06.940
更加可信的这样一些社区

1313
0:58:06.940 --> 0:58:10.340
对我个人其实还是挺有信心的

1314
0:58:10.340 --> 0:58:12.740
虽然也看到了这些问题

1315
0:58:12.740 --> 0:58:16.740
我是觉得开源它首先的这种开放式协作

1316
0:58:16.740 --> 0:58:19.540
这种透明的这种信息状态

1317
0:58:19.540 --> 0:58:23.540
应该是可以朝一个好的方向去发展

1318
0:58:23.540 --> 0:58:25.140
对这是我的观点

1319
0:58:25.140 --> 0:58:30.740
我想表达的意思是两段

1320
0:58:30.740 --> 0:58:33.940
第一段其实我原来在另外一个地方说过

1321
0:58:33.940 --> 0:58:38.540
就是说开源随着开源时代越来越繁荣

1322
0:58:38.540 --> 0:58:39.740
越来越兴旺

1323
0:58:39.740 --> 0:58:43.740
其实它里面曾经有一个叫李纳斯定理

1324
0:58:43.740 --> 0:58:46.540
就是所谓的眼球越多

1325
0:58:46.540 --> 0:58:49.140
然后开源软件的质量就越高

1326
0:58:49.140 --> 0:58:50.940
大概这样的一个李纳斯定理

1327
0:58:50.940 --> 0:58:53.340
我当时的发的暴论是说

1328
0:58:53.340 --> 0:58:55.540
这个李纳斯定理快要失效了

1329
0:58:55.540 --> 0:58:57.140
因为开源软件太多

1330
0:58:57.140 --> 0:58:58.540
眼球不够用了

1331
0:58:58.540 --> 0:59:00.740
但是其实我要收回我的话

1332
0:59:00.740 --> 0:59:02.340
或者说收回一部分

1333
0:59:02.340 --> 0:59:04.540
就是像这一次的事情

1334
0:59:04.540 --> 0:59:05.940
之所以会被人发现

1335
0:59:05.940 --> 0:59:08.540
还真的是靠社区眼球的力量

1336
0:59:08.540 --> 0:59:10.740
然后一层一层的追溯

1337
0:59:10.740 --> 0:59:13.140
所以我至少认为到目前为止

1338
0:59:13.140 --> 0:59:18.940
这个社区的自我发现和自我纠偏的能力是在的

1339
0:59:18.940 --> 0:59:22.940
但是第二段话是想说

1340
0:59:22.940 --> 0:59:26.540
开源如果我们一直觉得是一个伊甸园

1341
0:59:26.540 --> 0:59:28.540
或者是一个乌托邦的话

1342
0:59:28.540 --> 0:59:31.540
那这个幻想应该早早的醒过来了

1343
0:59:31.540 --> 0:59:33.740
它不是一个乌托邦

1344
0:59:33.740 --> 0:59:35.140
也不是一个伊甸园

1345
0:59:35.140 --> 0:59:37.740
因为在这样的一个开源的社区里面

1346
0:59:37.740 --> 0:59:39.340
什幺样的人都会有

1347
0:59:39.340 --> 0:59:43.140
你你保不准什幺时候就会出一个更疯狂的家伙

1348
0:59:43.140 --> 0:59:44.940
做出更加疯狂的行为

1349
0:59:44.940 --> 0:59:46.140
因此

1350
0:59:46.140 --> 0:59:49.140
尽早的从理想主义的状态醒过来

1351
0:59:49.140 --> 0:59:51.140
然后去做一些事情

1352
0:59:51.140 --> 0:59:53.740
这是我们所迫切的任务

1353
0:59:53.740 --> 0:59:54.340
OK

1354
0:59:55.540 --> 0:59:56.540
好next

1355
0:59:57.140 --> 0:59:58.340
好

1356
0:59:58.340 --> 1:00:00.740
我的感受在这件事情上感受

1357
1:00:00.740 --> 1:00:04.740
因为这个事我吃瓜了也比较长时间

1358
1:00:04.740 --> 1:00:07.140
亲自也下场参与了一会儿会

1359
1:00:07.140 --> 1:00:09.540
我自己感受就是

1360
1:00:09.540 --> 1:00:11.540
第一个这个事情就是

1361
1:00:11.540 --> 1:00:13.940
就大家讲的供应链安全问题

1362
1:00:13.940 --> 1:00:16.740
其实是一个内核的一个问题

1363
1:00:16.740 --> 1:00:18.940
现在已经是一个刻不容缓的

1364
1:00:18.940 --> 1:00:21.340
要去思考和解决的问题

1365
1:00:21.340 --> 1:00:22.540
尤其呢

1366
1:00:22.540 --> 1:00:25.540
就我作为一个前端

1367
1:00:25.540 --> 1:00:28.540
就是这个事情在这个NodonJS NPMJS

1368
1:00:28.540 --> 1:00:32.740
这样一个具体的一个技术站上面

1369
1:00:32.740 --> 1:00:36.340
是他有一些尤为突出的一些问题

1370
1:00:36.340 --> 1:00:39.940
这可能我身在这个社区里面

1371
1:00:39.940 --> 1:00:41.940
包括我自己也是这个

1372
1:00:41.940 --> 1:00:44.340
JavaScript语言标准委员会的成员

1373
1:00:44.340 --> 1:00:46.940
那所以确实是想在后面

1374
1:00:46.940 --> 1:00:50.540
能够去做一些事情去改进这个问题的

1375
1:00:50.540 --> 1:00:51.740
这是一个

1376
1:00:51.740 --> 1:00:52.740
第二件事情呢

1377
1:00:52.740 --> 1:00:55.540
其实是我们今天没有怎幺讨论的

1378
1:00:55.540 --> 1:00:56.740
但是呢

1379
1:00:56.740 --> 1:00:59.540
其实我一直也有些感受

1380
1:00:59.540 --> 1:01:01.940
就是开源和政治的这个关系

1381
1:01:01.940 --> 1:01:03.940
因为这个事情的起因

1382
1:01:03.940 --> 1:01:07.140
实际上是一个这样一个战争

1383
1:01:07.140 --> 1:01:08.740
是这样一个政治事件

1384
1:01:08.740 --> 1:01:12.540
在现在的这个整个的世界这个变化里面

1385
1:01:12.540 --> 1:01:14.140
这种冲突啊

1386
1:01:14.140 --> 1:01:15.940
确实是越来越多了

1387
1:01:15.940 --> 1:01:18.940
因为之前的其他的那些问题啊

1388
1:01:18.940 --> 1:01:20.940
其实也是一些

1389
1:01:20.940 --> 1:01:23.140
我觉得是有一些这种问题的

1390
1:01:23.140 --> 1:01:25.940
就包括之前的

1391
1:01:25.940 --> 1:01:27.140
LeftPad也好

1392
1:01:27.140 --> 1:01:30.740
或者后来的FakeJS啊什幺Color

1393
1:01:30.740 --> 1:01:32.140
就有好几件这个事情

1394
1:01:32.140 --> 1:01:34.340
一直到今天的这个事情

1395
1:01:34.340 --> 1:01:37.140
可以讲这个整个世界的这个

1396
1:01:37.140 --> 1:01:41.140
这个冲突可能是在不断的加剧越来越多的

1397
1:01:41.140 --> 1:01:44.940
所以这开源社区不可避免的会受到这个影响

1398
1:01:44.940 --> 1:01:49.340
所以这个开源社区它到底和政治这样一个关系

1399
1:01:49.340 --> 1:01:52.940
以及我们看到的一个大的趋势

1400
1:01:52.940 --> 1:01:54.940
就是所谓的

1401
1:01:54.940 --> 1:01:58.740
你要把这个道德或者政治混合在里面

1402
1:01:58.740 --> 1:02:02.740
今天因为我希望以后的节目

1403
1:02:02.740 --> 1:02:05.140
是不是也能讨论讨论这方面的问题

1404
1:02:05.140 --> 1:02:06.740
因为这是个好话题

1405
1:02:06.740 --> 1:02:08.340
而且我们肯定会讨论的

1406
1:02:08.340 --> 1:02:09.540
这个说白了是什幺

1407
1:02:09.540 --> 1:02:12.340
就是在几十年的全球化之后

1408
1:02:12.340 --> 1:02:15.340
现在出现了逆全球化的一种势力

1409
1:02:15.340 --> 1:02:17.740
那在逆全球化的势力下

1410
1:02:17.740 --> 1:02:21.540
那幺开源协作其实是全球化的一个缩影

1411
1:02:21.540 --> 1:02:23.340
也是全球化的一个支撑力量

1412
1:02:23.340 --> 1:02:25.340
这个影响一定是会有的

1413
1:02:25.340 --> 1:02:28.340
这个以后有机会请Hacks来跟我们一起去

1414
1:02:28.340 --> 1:02:29.540
再讨论后面说这个问题

1415
1:02:29.540 --> 1:02:30.340
如果有机会的话

1416
1:02:30.340 --> 1:02:33.340
因为这次我看到了真的是非常有感触

1417
1:02:33.340 --> 1:02:35.940
就经常一定会有的一定会有你放心了

1418
1:02:35.940 --> 1:02:37.940
我们都巴不得

1419
1:02:37.940 --> 1:02:40.140
没有国界这个话

1420
1:02:40.140 --> 1:02:44.340
或者说要不要有一个道德条款的许可

1421
1:02:44.340 --> 1:02:47.340
这些问题希望以后有机会

1422
1:02:47.340 --> 1:02:49.540
再来跟大家一起聊一聊

1423
1:02:49.540 --> 1:02:50.340
我特别感兴趣

1424
1:02:50.340 --> 1:02:51.540
下回咱们继续聊

1425
1:02:51.540 --> 1:02:53.140
这个一定会放心

1426
1:02:53.140 --> 1:02:56.140
我们就看你时间

1427
1:02:56.140 --> 1:02:58.940
到时候找时间我们一块来专门聊这个话题

1428
1:02:58.940 --> 1:03:00.140
好

1429
1:03:00.140 --> 1:03:06.540
首先让我们祝愿开放平等互助的

1430
1:03:06.540 --> 1:03:09.340
人类命运共同体成为我们的未来

1431
1:03:09.340 --> 1:03:12.540
一切逆流终将被时代所抛弃

1432
1:03:12.540 --> 1:03:15.540
并且我们几位也都是实干者

1433
1:03:15.540 --> 1:03:17.140
也都是在第一线的

1434
1:03:17.140 --> 1:03:18.340
就像刚才Hacks说的

1435
1:03:18.340 --> 1:03:20.740
各自在我们自己的领域

1436
1:03:20.740 --> 1:03:23.140
去努力为这个愿景去做事

1437
1:03:23.140 --> 1:03:24.740
好

1438
1:03:24.740 --> 1:03:28.340
今天我们这个番外的节目也聊了多少时

1439
1:03:28.340 --> 1:03:29.740
就差不多到这里

1440
1:03:29.740 --> 1:03:31.140
非常感谢大家

1441
1:03:31.140 --> 1:03:32.940
我们下次节目再见

1442
1:03:32.940 --> 1:03:33.940
拜拜

1443
1:03:33.940 --> 1:03:39.940
拜拜

