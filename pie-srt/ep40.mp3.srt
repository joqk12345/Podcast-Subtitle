0
0:00:00.000 --> 0:00:02.440
各位朋友大家好

1
0:00:02.440 --> 0:00:04.800
欢迎来到后互联网时代的乱谈

2
0:00:04.800 --> 0:00:08.440
今天赵丽我跟我们王老师

3
0:00:08.440 --> 0:00:09.720
大家好

4
0:00:09.720 --> 0:00:10.760
还有老庄

5
0:00:10.760 --> 0:00:11.720
大家好

6
0:00:11.720 --> 0:00:13.080
跟大家聊天

7
0:00:13.080 --> 0:00:19.320
那过去的这一周显然这个最热门的事就是世界杯

8
0:00:19.320 --> 0:00:21.120
这个世界杯足球赛

9
0:00:21.120 --> 0:00:26.680
不论在什幺样的行情下都横向对比是这个大热门

10
0:00:26.680 --> 0:00:30.120
他这个号召力和这个影响力

11
0:00:30.120 --> 0:00:35.320
就任何其他的人类活动好像都没有跟他相提并论

12
0:00:35.320 --> 0:00:36.920
那这一届世界杯

13
0:00:36.920 --> 0:00:39.960
这个当然我们不是聊体育聊足球的

14
0:00:39.960 --> 0:00:42.680
就我个人的一个感想

15
0:00:42.680 --> 0:00:47.240
就是想聊一聊这次世界杯的一些技术性变革

16
0:00:47.240 --> 0:00:49.760
我不知道大家这次看球赛有什幺样的感想

17
0:00:49.760 --> 0:00:51.480
我作为一个老球迷

18
0:00:51.480 --> 0:00:53.400
每届世界杯都看的

19
0:00:53.400 --> 0:00:56.360
这一届有很新的感受

20
0:00:56.360 --> 0:00:58.160
后来我想了一下这个感受

21
0:00:58.160 --> 0:01:03.760
好像很大程度上是来源于一些新的技术手段

22
0:01:03.760 --> 0:01:07.560
比如说这个视频助理裁判

23
0:01:07.560 --> 0:01:09.080
有没有看到啊

24
0:01:09.080 --> 0:01:10.320
注意到了

25
0:01:10.320 --> 0:01:13.200
实际上这个视频助理裁判呢

26
0:01:13.200 --> 0:01:15.560
前几年就已经开始有了

27
0:01:15.560 --> 0:01:17.760
最早在比如说像英超啊

28
0:01:17.760 --> 0:01:21.760
然后后面到这个欧洲杯啊什幺都使用了这个视频助理裁判

29
0:01:21.760 --> 0:01:23.160
就VR啊

30
0:01:23.160 --> 0:01:28.920
就是当出现一些这个裁判不太有把握的这个情况的时候

31
0:01:28.920 --> 0:01:33.560
那幺这个主裁判就跑到场边去看一下这个高速录像回放

32
0:01:33.560 --> 0:01:36.440
我们知道这个足球场上啊

33
0:01:36.440 --> 0:01:37.600
这个场地很大

34
0:01:37.600 --> 0:01:39.040
然后人又多

35
0:01:39.040 --> 0:01:40.280
二十几号在上面跑

36
0:01:40.280 --> 0:01:44.400
这个主裁判必须要这个离球足够近

37
0:01:44.400 --> 0:01:47.000
那球它到处乱飞的速度很快

38
0:01:47.000 --> 0:01:49.000
经常这个主裁判他跟不上

39
0:01:49.000 --> 0:01:51.120
可能就距离有点远

40
0:01:51.120 --> 0:01:53.880
或者是这个被人挡住了

41
0:01:53.880 --> 0:01:56.160
或者是那个角度正好看不清楚

42
0:01:56.160 --> 0:01:57.480
很正常

43
0:01:57.480 --> 0:02:02.360
那以前历史上这个足球上出现各种各样的这个误判

44
0:02:02.360 --> 0:02:05.160
或者是这种悬案

45
0:02:05.160 --> 0:02:06.880
有几个经典的这个场景

46
0:02:06.880 --> 0:02:08.080
一个是门线球啊

47
0:02:08.080 --> 0:02:10.800
这个这个球打在门楣上弹下来

48
0:02:10.800 --> 0:02:13.160
到底过了那个球门线没有啊

49
0:02:13.160 --> 0:02:15.080
这个历史上有很多著名冤案的

50
0:02:15.080 --> 0:02:17.600
然后另一个很著名的就是越位

51
0:02:17.600 --> 0:02:18.720
足球的越位规则

52
0:02:18.720 --> 0:02:22.200
这是足球里面最麻烦的一个规则

53
0:02:22.200 --> 0:02:23.680
专门配了两个编裁

54
0:02:23.680 --> 0:02:26.120
这两个编裁其实别的事干的都很少

55
0:02:26.120 --> 0:02:27.840
主要任务就是看越位

56
0:02:27.840 --> 0:02:32.800
他始终要跟着最后一名这个防守队员的这个平行线

57
0:02:32.800 --> 0:02:36.080
然后看这个对方传球的那一瞬间

58
0:02:36.080 --> 0:02:40.200
攻方队员有没有越过这个最后一名防守队员

59
0:02:40.200 --> 0:02:43.120
就算这样他也经常会看走眼

60
0:02:43.120 --> 0:02:44.640
但至少安排俩人嘛

61
0:02:44.640 --> 0:02:46.280
那那专门看这个越位

62
0:02:46.280 --> 0:02:49.960
还有就是一些距离或者角度不太合适的犯规

63
0:02:49.960 --> 0:02:51.360
比如说手球啊

64
0:02:51.360 --> 0:02:52.480
进去里面手球了

65
0:02:52.480 --> 0:02:53.440
正好被挡住了

66
0:02:53.440 --> 0:02:54.760
这个防守队员看不清楚

67
0:02:54.760 --> 0:02:56.480
那以前也出现过这样的误判

68
0:02:56.480 --> 0:02:57.880
也不少其实

69
0:02:57.880 --> 0:03:00.200
那现在有这个VR就可以去看一下

70
0:03:00.200 --> 0:03:01.240
但以前呢

71
0:03:01.240 --> 0:03:02.000
这个VR呢

72
0:03:02.000 --> 0:03:03.080
它是辅助手段

73
0:03:03.080 --> 0:03:06.120
就是这个主裁判他需要的时候觉得我没看清楚

74
0:03:06.120 --> 0:03:07.480
我去瞅瞅

75
0:03:07.480 --> 0:03:08.680
除了这种情况以外

76
0:03:08.680 --> 0:03:10.480
那主裁判就以自己看到的为准

77
0:03:10.480 --> 0:03:11.440
他就吹了

78
0:03:11.440 --> 0:03:13.520
那个反应速度是比较快的

79
0:03:13.520 --> 0:03:15.520
但这件事也被大家有没有注意到哈

80
0:03:15.520 --> 0:03:17.640
经常发生的一个事情是

81
0:03:17.640 --> 0:03:20.080
这个攻方队员就冲过去

82
0:03:20.080 --> 0:03:22.160
这个过人射门进了

83
0:03:22.160 --> 0:03:24.240
然后再回过头来吹一个越位

84
0:03:26.240 --> 0:03:28.840
这个在以前的比赛里非常少见

85
0:03:28.840 --> 0:03:31.800
就这个给我的一个观感是非常奇怪的

86
0:03:31.800 --> 0:03:34.000
就是我都已经情绪上去了

87
0:03:34.000 --> 0:03:36.440
球都进了或者领先了或者扳平了

88
0:03:36.440 --> 0:03:38.240
这都很很很激动的事情

89
0:03:38.240 --> 0:03:39.200
突然又吹掉了

90
0:03:39.680 --> 0:03:45.040
那这个是因为这一届的世界杯有一个更新的一个尝试

91
0:03:45.040 --> 0:03:51.160
就是有主动安排了比以前更多的高速的摄影

92
0:03:51.160 --> 0:03:55.160
有点像年初冬奥会我们国家用的那个

93
0:03:55.160 --> 0:03:59.760
呃短道速滑那那种那种智能裁判

94
0:03:59.760 --> 0:04:01.720
就是非常高速的摄影

95
0:04:01.720 --> 0:04:02.680
然后多角度

96
0:04:02.680 --> 0:04:04.560
然后合成之后的3D图像

97
0:04:04.560 --> 0:04:07.040
那这一次做了一个什幺比较激进的事呢

98
0:04:07.040 --> 0:04:13.400
就是当这个系统他判定认为是越位或者有犯规出现的时候

99
0:04:13.400 --> 0:04:15.760
他会主动提醒主裁判

100
0:04:16.440 --> 0:04:17.800
就裁判带着耳机啊

101
0:04:17.800 --> 0:04:18.880
他在场上跑

102
0:04:18.880 --> 0:04:21.480
他已经认为这球没越位

103
0:04:21.480 --> 0:04:22.600
冲过去进了啊

104
0:04:22.600 --> 0:04:24.120
甚至已经吹了进球了

105
0:04:24.120 --> 0:04:27.080
然后这个耳机里面传来声音说这可能是个越位

106
0:04:27.080 --> 0:04:27.960
呵呵

107
0:04:28.880 --> 0:04:33.360
然后然后这主裁判他他就就得去场边看啊

108
0:04:33.360 --> 0:04:35.320
仔细的看看看几遍之后完蛋了

109
0:04:35.320 --> 0:04:36.080
这确实是越位

110
0:04:36.080 --> 0:04:37.200
那回头就把他吹掉

111
0:04:38.000 --> 0:04:38.640
对吧

112
0:04:38.840 --> 0:04:40.280
这个是一个

113
0:04:40.280 --> 0:04:43.880
呃我觉得是新科技带来的一个观赛新体验啊

114
0:04:43.880 --> 0:04:45.840
以前我从来没有这种感受

115
0:04:46.400 --> 0:04:47.760
你像前天

116
0:04:47.760 --> 0:04:49.600
嗯前天周五的时候

117
0:04:49.600 --> 0:04:52.120
我不确定那是不是视频裁判啊

118
0:04:52.120 --> 0:04:54.640
就是威尔士对伊朗的那一场

119
0:04:54.640 --> 0:04:55.360
嗯

120
0:04:55.360 --> 0:04:57.680
就是已经快到结束了

121
0:04:57.680 --> 0:05:00.640
大概还有结束前10分钟左右吧

122
0:05:00.800 --> 0:05:03.120
然后就是那个门将冲出来

123
0:05:03.480 --> 0:05:07.840
就是一大脚就踢在了伊朗队的队员脸上

124
0:05:07.840 --> 0:05:08.320
对

125
0:05:08.600 --> 0:05:09.160
对

126
0:05:09.160 --> 0:05:10.760
然后其实一开始的时候

127
0:05:10.760 --> 0:05:12.360
主裁判只给了一张黄牌

128
0:05:12.720 --> 0:05:13.320
对

129
0:05:13.320 --> 0:05:15.640
但是那个时候视频就在反复播放

130
0:05:15.640 --> 0:05:18.480
然后下面还显示了一串文本

131
0:05:18.480 --> 0:05:20.080
叫做possible red card

132
0:05:20.080 --> 0:05:21.640
就可能是红牌

133
0:05:21.640 --> 0:05:23.640
这就是视频裁判做的事情是吧

134
0:05:23.640 --> 0:05:24.680
啊就那个玩意

135
0:05:24.680 --> 0:05:25.240
ok

136
0:05:25.240 --> 0:05:26.000
厉害

137
0:05:26.000 --> 0:05:28.000
他已经不光是能判越位了

138
0:05:28.000 --> 0:05:28.560
对

139
0:05:28.560 --> 0:05:29.120
对

140
0:05:29.240 --> 0:05:31.560
他是整套系统都输入进去了

141
0:05:31.880 --> 0:05:37.440
啊我估计是拿历史上很多很多的这个视频资料去去训练过的

142
0:05:37.440 --> 0:05:39.440
啊那个是的

143
0:05:39.440 --> 0:05:40.080
嗯

144
0:05:40.080 --> 0:05:43.600
就是就是裁判一开始认为这只是一个一般性的犯规

145
0:05:43.600 --> 0:05:44.480
就吹了一个黄牌

146
0:05:44.480 --> 0:05:46.240
然后这个视频

147
0:05:46.360 --> 0:05:49.120
这个这个VR系统就就告诉裁判说

148
0:05:49.120 --> 0:05:49.280
哎

149
0:05:49.280 --> 0:05:50.840
这有可能更恶劣的

150
0:05:50.840 --> 0:05:52.800
回头看看这个看这个

151
0:05:52.800 --> 0:05:55.760
视频之后回过头来又改判一个红牌

152
0:05:55.760 --> 0:05:56.200
啊

153
0:05:56.880 --> 0:05:59.800
还有更戏剧性的就是之前这个

154
0:06:00.360 --> 0:06:02.680
阿根廷对沙哈伯那场

155
0:06:03.000 --> 0:06:05.880
上半场阿根廷三个进球被吹了越位

156
0:06:05.880 --> 0:06:08.200
其中有两个是比较明显的

157
0:06:08.200 --> 0:06:09.160
有一个

158
0:06:09.160 --> 0:06:09.560
啊

159
0:06:09.560 --> 0:06:10.440
那个是

160
0:06:10.760 --> 0:06:11.680
怎幺说呢

161
0:06:11.680 --> 0:06:12.320
就是

162
0:06:12.440 --> 0:06:14.040
那个进进攻队员啊

163
0:06:14.040 --> 0:06:19.000
他就只有肩膀和外肘部的一层

164
0:06:19.120 --> 0:06:21.320
就是一小片皮肤

165
0:06:21.320 --> 0:06:22.120
越位了

166
0:06:22.120 --> 0:06:23.160
呵呵呵

167
0:06:23.280 --> 0:06:25.040
就那个3D图像上看特别明显

168
0:06:25.040 --> 0:06:25.840
他用那个

169
0:06:25.840 --> 0:06:27.880
呃加量的颜色给你凸凸显出来

170
0:06:27.880 --> 0:06:29.560
就这个他已经过了这个切面

171
0:06:29.680 --> 0:06:29.960
啊

172
0:06:29.960 --> 0:06:32.640
就这一小层衣服啊过这个切面

173
0:06:33.080 --> 0:06:34.400
那个球吹了越位

174
0:06:34.520 --> 0:06:35.680
这种球啊

175
0:06:35.680 --> 0:06:38.120
就我以前在大学的时候我也干过裁判

176
0:06:38.640 --> 0:06:40.320
这种球在场上

177
0:06:40.440 --> 0:06:42.240
最优秀的裁判组啊

178
0:06:42.240 --> 0:06:44.000
包括俩编裁跟主裁

179
0:06:44.040 --> 0:06:45.480
这绝对判不出来的

180
0:06:46.080 --> 0:06:48.880
他一眼看上去就是平行嘛

181
0:06:49.320 --> 0:06:51.880
按照这个规则平行是不算越位的

182
0:06:52.040 --> 0:06:52.320
啊

183
0:06:52.320 --> 0:06:54.240
那这就鼓励攻方的情况下

184
0:06:54.240 --> 0:06:55.560
也就这样就就进了

185
0:06:55.680 --> 0:06:57.080
那如果那个球算进的话

186
0:06:57.080 --> 0:06:57.560
2比0

187
0:06:57.560 --> 0:07:00.040
那后面不一定沙特能扳回来

188
0:07:00.360 --> 0:07:01.640
但那个球吹掉了

189
0:07:01.640 --> 0:07:04.280
那那后面就他的整场影响是很大的

190
0:07:04.280 --> 0:07:06.840
而那个球也是进了之后过了半天

191
0:07:06.880 --> 0:07:08.120
才有把它吹回来的

192
0:07:09.000 --> 0:07:10.120
所以怎幺说呢

193
0:07:10.120 --> 0:07:12.880
就是这个实际上我觉得可能如果

194
0:07:13.480 --> 0:07:16.040
这一届世界杯上的这一整套系统啊

195
0:07:16.040 --> 0:07:16.800
以后他

196
0:07:17.000 --> 0:07:20.840
呃继续就是成为常规的这个操作的话

197
0:07:20.960 --> 0:07:22.880
那可能对以后这个

198
0:07:23.200 --> 0:07:24.240
嗯

199
0:07:24.400 --> 0:07:25.960
足球比赛的这个

200
0:07:26.440 --> 0:07:27.480
影响啊

201
0:07:27.720 --> 0:07:29.200
会是挺大的

202
0:07:29.640 --> 0:07:32.600
就是我们看篮球比赛经常暂停

203
0:07:32.600 --> 0:07:33.160
对不对

204
0:07:33.160 --> 0:07:34.840
就是那个比赛他

205
0:07:34.840 --> 0:07:36.440
随时都可能暂停

206
0:07:36.440 --> 0:07:38.560
然后那个美式足球也是这样

207
0:07:38.560 --> 0:07:41.280
他也美式足球是最早用这个视频裁判

208
0:07:41.280 --> 0:07:42.360
很久就在用的

209
0:07:42.360 --> 0:07:45.360
那就这些他都是那种高对抗

210
0:07:45.360 --> 0:07:47.000
很短的时间里面高速对抗

211
0:07:47.000 --> 0:07:48.400
但是他随时也可以停下来

212
0:07:48.400 --> 0:07:50.600
足球其实以前不是这个哲学足球

213
0:07:50.600 --> 0:07:53.960
以前是延续性连贯性是很看重的

214
0:07:53.960 --> 0:07:55.360
就一个优秀的裁判

215
0:07:55.360 --> 0:07:58.720
他尽量少去中断比赛是好裁判

216
0:07:58.720 --> 0:08:00.400
但这个引入VR之后

217
0:08:00.400 --> 0:08:03.040
他不得不会经常的中断

218
0:08:03.040 --> 0:08:04.840
而带来一个副作用就是

219
0:08:04.840 --> 0:08:06.480
整体比赛时间会延长

220
0:08:06.480 --> 0:08:08.360
你们看这些被另一个很明显的变化

221
0:08:08.360 --> 0:08:10.480
就是每一次的那个

222
0:08:10.480 --> 0:08:12.120
就所谓商庭补时阶段

223
0:08:12.120 --> 0:08:13.680
以前都是两三分钟

224
0:08:13.680 --> 0:08:15.440
现在动不动10分钟

225
0:08:15.440 --> 0:08:18.080
越来越美式足球化

226
0:08:18.080 --> 0:08:19.280
就是这种感觉

227
0:08:19.280 --> 0:08:21.320
然后现在还可以这个

228
0:08:21.320 --> 0:08:22.600
换5个人

229
0:08:22.600 --> 0:08:27.200
你想这个足球场上一共11个人

230
0:08:27.200 --> 0:08:30.080
守门员一般很少主动会换他

231
0:08:30.080 --> 0:08:30.520
对吧

232
0:08:30.520 --> 0:08:32.160
除非是受伤了不得不下来

233
0:08:32.160 --> 0:08:33.960
那剩下10个人你可以换一半

234
0:08:33.960 --> 0:08:36.080
这个战术上变化也很大

235
0:08:36.080 --> 0:08:39.360
所以可能这个影响还真的挺深远的

236
0:08:39.360 --> 0:08:41.920
对虽然我现在想一个问题

237
0:08:41.920 --> 0:08:43.920
李俊杰有没有可能

238
0:08:43.920 --> 0:08:46.320
未来这些足球运动员

239
0:08:46.320 --> 0:08:48.720
尤其是前锋都得戴耳机

240
0:08:48.720 --> 0:08:51.120
叫你跑你再跑

241
0:08:51.120 --> 0:08:53.640
你否则的话会越位

242
0:08:53.640 --> 0:08:55.080
美式足球就是的了

243
0:08:55.080 --> 0:08:57.040
已经开始戴了是吧

244
0:08:57.040 --> 0:08:58.720
好吧

245
0:08:58.720 --> 0:09:01.000
戴着那幺大头盔

246
0:09:01.000 --> 0:09:03.120
然后里边装上这个耳机

247
0:09:03.120 --> 0:09:04.560
大家可以通过耳机

248
0:09:04.560 --> 0:09:05.920
因为你喊的话听不太清了

249
0:09:05.920 --> 0:09:08.720
场地很大

250
0:09:08.720 --> 0:09:14.320
你像我刚才说胳膊出去一层皮的越位

251
0:09:14.320 --> 0:09:17.320
那就是零点零几秒的事

252
0:09:17.320 --> 0:09:20.600
那哥们晚启动0.05秒可能就不越位了

253
0:09:20.600 --> 0:09:22.280
他早启动了0.05秒

254
0:09:22.280 --> 0:09:24.040
就正好越位了一层皮

255
0:09:24.040 --> 0:09:25.880
就这样

256
0:09:25.880 --> 0:09:27.080
以前对人来说

257
0:09:27.080 --> 0:09:29.240
这没有那幺大的影响

258
0:09:29.240 --> 0:09:35.760
现在变成是一个毫秒级的差距

259
0:09:35.760 --> 0:09:38.440
以后就得人机配合打球了

260
0:09:38.440 --> 0:09:39.440
对的

261
0:09:39.440 --> 0:09:41.080
就是你裁判是AI对吧

262
0:09:41.080 --> 0:09:43.920
我这边也是AI

263
0:09:43.920 --> 0:09:45.400
传球的一瞬间

264
0:09:45.400 --> 0:09:47.640
马上有一个指令告诉

265
0:09:47.640 --> 0:09:49.600
如果真的有头盔的话

266
0:09:49.600 --> 0:09:51.880
不光是叫越位了

267
0:09:51.880 --> 0:09:54.440
我甚至可以说通过AI指挥

268
0:09:54.440 --> 0:09:57.200
谁运动员跑位比教练人在场面

269
0:09:57.200 --> 0:09:58.360
讲的还要好

270
0:09:58.360 --> 0:10:01.920
突然觉得整个世界都会变

271
0:10:01.920 --> 0:10:04.560
有可能

272
0:10:04.560 --> 0:10:09.120
你像美式足球它是抱着球跑

273
0:10:09.120 --> 0:10:11.400
它就没有带球过人的问题

274
0:10:11.400 --> 0:10:16.360
所以它只要决定跑的时间速度和方向就可以了

275
0:10:16.360 --> 0:10:17.640
足球可能麻烦一点

276
0:10:17.640 --> 0:10:19.000
你这脚控球

277
0:10:19.000 --> 0:10:20.840
你面对一个人的时候

278
0:10:20.840 --> 0:10:22.040
AI说过了他

279
0:10:22.040 --> 0:10:23.720
他过不了怎幺办

280
0:10:23.720 --> 0:10:24.120
不

281
0:10:24.120 --> 0:10:25.720
他只需要指挥跑位

282
0:10:25.720 --> 0:10:26.880
对

283
0:10:26.880 --> 0:10:31.560
所以这里边战术的系统可能还会稍微复杂一点

284
0:10:31.560 --> 0:10:35.560
所以新科技改变人生

285
0:10:35.560 --> 0:10:37.560
这个世界杯我不知道这届之后

286
0:10:37.560 --> 0:10:40.640
第一规则会不会原样的延续下去

287
0:10:40.640 --> 0:10:43.440
第二个会不会促使各国的

288
0:10:43.440 --> 0:10:46.240
尤其最优秀的那些足球国家

289
0:10:46.240 --> 0:10:47.400
他们的战术体系

290
0:10:47.400 --> 0:10:48.160
包括

291
0:10:48.160 --> 0:10:51.360
突然觉得中国队出现有望

292
0:10:51.360 --> 0:10:57.880
利用某种人工智能技术辅助教练

293
0:10:57.880 --> 0:10:59.720
这没准真是这样

294
0:10:59.720 --> 0:11:01.800
我最近看了一篇文章

295
0:11:01.800 --> 0:11:03.920
就说因为

296
0:11:03.920 --> 0:11:06.360
美国人他对足球就那幺回事了

297
0:11:06.360 --> 0:11:07.880
他不可能非常喜欢

298
0:11:07.880 --> 0:11:09.680
他自己的那三大运动

299
0:11:09.680 --> 0:11:11.120
然后南美是喜欢

300
0:11:11.120 --> 0:11:12.680
但这个市场不够大

301
0:11:12.680 --> 0:11:14.240
非洲也是这种情况

302
0:11:14.240 --> 0:11:14.720
喜欢

303
0:11:14.720 --> 0:11:16.160
但是这市场不够大

304
0:11:16.160 --> 0:11:19.160
欧洲已经充分开发了

305
0:11:19.160 --> 0:11:21.040
已经开发的不能再继续开发了

306
0:11:21.040 --> 0:11:23.160
而且接下来欧洲经济肯定走下坡路了

307
0:11:23.160 --> 0:11:25.280
所以对于国际足连来讲

308
0:11:25.280 --> 0:11:27.000
足球的热土就俩地方

309
0:11:27.360 --> 0:11:28.560
一个是中东

310
0:11:28.600 --> 0:11:29.640
一个是中国

311
0:11:30.680 --> 0:11:33.080
然后中东这次在卡塔尔办了一届

312
0:11:33.400 --> 0:11:34.400
其实在这之前

313
0:11:34.400 --> 0:11:36.280
王爷们就已经很喜欢了

314
0:11:36.640 --> 0:11:37.520
中国咋办

315
0:11:37.680 --> 0:11:39.360
这死活也扶不上去

316
0:11:39.760 --> 0:11:41.680
不得不采取一些技术手段

317
0:11:42.760 --> 0:11:45.200
让中国在科技上对有机会

318
0:11:45.200 --> 0:11:47.720
确保26年中国能打进世界杯

319
0:11:47.720 --> 0:11:50.160
30年能争取在世界杯赢一场

320
0:11:50.160 --> 0:11:53.440
然后30年以后争取让中国办一届世界杯

321
0:11:53.440 --> 0:11:56.360
就是国际足连应该定这幺一个三不走

322
0:11:56.360 --> 0:11:58.760
行

323
0:11:58.760 --> 0:12:00.040
拭目以待

324
0:12:00.040 --> 0:12:01.200
好嘴

325
0:12:01.200 --> 0:12:03.520
好

326
0:12:03.520 --> 0:12:04.800
关于世界杯

327
0:12:04.800 --> 0:12:07.080
我们就简单的说到这

328
0:12:07.080 --> 0:12:10.160
然后我们来讲一讲

329
0:12:10.840 --> 0:12:15.400
最近又有新的互联网大厂的跟进裁员了

330
0:12:15.520 --> 0:12:16.720
最近的是Google

331
0:12:17.720 --> 0:12:19.560
我之前曾经提过一嘴

332
0:12:19.560 --> 0:12:21.280
我说Google可能相对好一点

333
0:12:21.280 --> 0:12:23.680
可能不一定那幺的压力大

334
0:12:23.680 --> 0:12:25.160
但这一次也不行了

335
0:12:25.160 --> 0:12:28.800
这次主要是来源于他的投资人的压力

336
0:12:29.360 --> 0:12:31.680
就他的一个比较大的股东

337
0:12:32.240 --> 0:12:33.440
专门发一封公开信

338
0:12:33.560 --> 0:12:37.160
我们有朋友发在我们听友群里面了

339
0:12:37.160 --> 0:12:40.080
就是很严肃很严厉的说

340
0:12:40.240 --> 0:12:45.360
你们得赶紧控制成本削减不必要的员工

341
0:12:45.360 --> 0:12:49.760
果然Google现在就准备开始裁了

342
0:12:49.760 --> 0:12:51.680
但Google全球的人非常多

343
0:12:51.760 --> 0:12:52.520
十几万人

344
0:12:53.000 --> 0:12:56.080
他可能会裁一个不到1万人

345
0:12:56.360 --> 0:12:57.840
号称6%左右

346
0:12:58.040 --> 0:13:00.040
就是大概1万人左右

347
0:13:00.280 --> 0:13:02.880
对他们来说可能还好

348
0:13:02.880 --> 0:13:05.000
但这里边也有一些热点

349
0:13:05.200 --> 0:13:08.360
据说他们上了一个新的绩效系统

350
0:13:08.600 --> 0:13:09.560
前两年就上了

351
0:13:09.560 --> 0:13:11.440
本来是说要提升效率的

352
0:13:11.440 --> 0:13:15.760
现在变成用来抓末位淘汰了

353
0:13:16.040 --> 0:13:17.520
这个也是资本家的阴谋

354
0:13:18.840 --> 0:13:20.200
这个事你们怎幺看

355
0:13:20.360 --> 0:13:24.200
我的看法就是这风险投资人向来是这样的

356
0:13:26.080 --> 0:13:28.240
我不是以前就写过一篇文章

357
0:13:28.480 --> 0:13:30.960
就是说你要是创业

358
0:13:30.960 --> 0:13:32.440
当然是大公司不说

359
0:13:32.520 --> 0:13:34.200
本来就只是说你创业

360
0:13:34.200 --> 0:13:35.600
你就不要听投资人的

361
0:13:35.840 --> 0:13:39.160
他们只是你的一个合作伙伴

362
0:13:39.160 --> 0:13:40.720
他们不是你的老师

363
0:13:40.720 --> 0:13:42.680
不是你的人生导师

364
0:13:42.880 --> 0:13:45.200
其实在中国的很多投资人

365
0:13:45.200 --> 0:13:48.240
都把自己打扮成人生导师的样子

366
0:13:48.240 --> 0:13:50.520
似乎能给你指点未来一样的

367
0:13:50.520 --> 0:13:52.440
经常他们会做这种打扮

368
0:13:52.840 --> 0:13:55.400
这个是一个很常见的现象

369
0:13:55.600 --> 0:14:00.720
然后我觉得他们是比所有人都贪婪

370
0:14:00.840 --> 0:14:02.160
等到风险来的时候

371
0:14:02.160 --> 0:14:03.720
又比所有人都恐惧

372
0:14:03.800 --> 0:14:05.360
是这样的一种心态

373
0:14:05.880 --> 0:14:08.360
就是投的时候非常的贪婪

374
0:14:08.360 --> 0:14:11.000
然后觉得浪来了要跑的时候

375
0:14:11.000 --> 0:14:12.160
又比谁都恐惧

376
0:14:12.160 --> 0:14:14.120
所以才会有这样的事情发生

377
0:14:14.640 --> 0:14:15.240
对

378
0:14:15.800 --> 0:14:18.080
就其实行情比较好的时候

379
0:14:18.080 --> 0:14:19.640
催着你赶紧扩大

380
0:14:19.840 --> 0:14:21.640
扩充你的人员

381
0:14:21.640 --> 0:14:22.680
扩大你的业务

382
0:14:22.680 --> 0:14:24.600
赶紧抓市场不惜成本

383
0:14:24.800 --> 0:14:26.200
哪怕亏钱要抓市场

384
0:14:26.200 --> 0:14:28.120
这也是投资人会去

385
0:14:28.120 --> 0:14:28.880
push你做的

386
0:14:28.880 --> 0:14:31.360
一般的创业者

387
0:14:31.480 --> 0:14:34.360
在他还没有被蛊惑之前

388
0:14:34.520 --> 0:14:35.600
一般都不会这幺干

389
0:14:35.600 --> 0:14:36.160
是吧

390
0:14:36.160 --> 0:14:38.400
当然尝到甜头之后

391
0:14:38.400 --> 0:14:41.440
跟投资人拿钱拿的舒服了之后

392
0:14:41.640 --> 0:14:44.040
可能就会经常被蛊惑的去做

393
0:14:44.040 --> 0:14:46.120
这样的激进的扩充

394
0:14:46.720 --> 0:14:47.760
行情不好了

395
0:14:49.120 --> 0:14:52.160
最早开始让你砍人的也是这拨人

396
0:14:52.320 --> 0:14:55.600
他的股东们投资人们

397
0:14:55.600 --> 0:14:57.120
他不会自己动手去砍人

398
0:14:57.120 --> 0:15:00.080
都是企业的管理层创始人

399
0:15:00.200 --> 0:15:01.840
这些创始团队这样的一些

400
0:15:01.840 --> 0:15:05.960
我倒是对他的绩效挺感兴趣的

401
0:15:06.280 --> 0:15:09.440
因为像谷歌一直一直都号称

402
0:15:09.440 --> 0:15:10.760
是比较宽松和灵活的

403
0:15:10.960 --> 0:15:13.200
甚至还有一些二八原则

404
0:15:13.640 --> 0:15:17.760
包括表哥可以用自己的一些时间

405
0:15:17.760 --> 0:15:19.520
去做一些创新的一些事情

406
0:15:19.800 --> 0:15:22.560
我就不知道他们最近这几年搞的

407
0:15:22.560 --> 0:15:23.520
这个系统

408
0:15:23.960 --> 0:15:25.800
他会重点关注些啥

409
0:15:27.640 --> 0:15:29.840
这可以啥时候找狗叔来聊聊

410
0:15:29.840 --> 0:15:33.640
从他们的亲身体会上面

411
0:15:33.640 --> 0:15:35.440
来跟我们交流交流这事

412
0:15:35.640 --> 0:15:37.000
这我们外边人也说不清楚

413
0:15:37.000 --> 0:15:38.240
但我知道的是

414
0:15:38.400 --> 0:15:39.680
像什幺八二原则

415
0:15:39.680 --> 0:15:41.400
现在谷歌自己也不太提了

416
0:15:41.760 --> 0:15:42.680
已经取消了

417
0:15:42.680 --> 0:15:43.200
我记得

418
0:15:43.200 --> 0:15:43.520
对

419
0:15:43.520 --> 0:15:45.920
他据说是换了一种说法

420
0:15:46.120 --> 0:15:47.640
但实际上我觉得就是

421
0:15:48.560 --> 0:15:51.440
实际上就是本质上不再鼓吹这个事了

422
0:15:51.840 --> 0:15:52.960
这个公司都是这样

423
0:15:52.960 --> 0:15:56.240
它相对规模没有那幺大

424
0:15:56.240 --> 0:16:00.400
而且业务发展的也在蒸蒸日上

425
0:16:00.480 --> 0:16:02.600
快速提升的阶段

426
0:16:03.720 --> 0:16:05.600
然后对资本市场的依赖

427
0:16:05.600 --> 0:16:06.840
没有那幺重的时候

428
0:16:06.840 --> 0:16:11.720
它往往会做一些比较偏理想一些

429
0:16:11.720 --> 0:16:13.280
但同时也能做出一些

430
0:16:13.280 --> 0:16:15.360
比较创新的一些东西的状态

431
0:16:15.720 --> 0:16:16.760
当它足够大

432
0:16:16.760 --> 0:16:18.720
它的内核业务比较稳定

433
0:16:18.920 --> 0:16:21.760
然后它的增长没有那幺容易的时候

434
0:16:22.120 --> 0:16:24.040
资本市场对它的渗透和影响

435
0:16:24.040 --> 0:16:24.920
就会越来越大

436
0:16:24.920 --> 0:16:27.360
然后它就会开始

437
0:16:29.360 --> 0:16:30.680
初心就没那幺重要了

438
0:16:30.920 --> 0:16:32.000
这个也很正常

439
0:16:32.720 --> 0:16:33.920
说到裁员的事

440
0:16:34.120 --> 0:16:37.040
顺便我们要谈Ellen Musk

441
0:16:37.800 --> 0:16:40.000
这一波裁员的始作俑子

442
0:16:40.000 --> 0:16:41.480
我最近在网上

443
0:16:41.640 --> 0:16:43.280
不论是推特

444
0:16:43.280 --> 0:16:44.640
就是像英文的媒体

445
0:16:44.640 --> 0:16:46.760
还有国内的媒体

446
0:16:46.960 --> 0:16:49.080
都有很多骂Ellen Musk

447
0:16:49.760 --> 0:16:50.600
比如说

448
0:16:51.280 --> 0:16:52.920
说她不懂技术

449
0:16:52.920 --> 0:16:54.040
在推特下指挥

450
0:16:54.040 --> 0:16:57.800
还有说她不懂互联网企业的管理

451
0:16:57.960 --> 0:16:59.080
在推特下指挥

452
0:16:59.080 --> 0:17:00.400
就这样的一些评论

453
0:17:00.400 --> 0:17:02.480
你们怎幺看这个事情

454
0:17:03.600 --> 0:17:05.360
应该都还没有她懂

455
0:17:05.720 --> 0:17:06.680
就批评她的人

456
0:17:06.680 --> 0:17:11.400
马斯克他本身是技术出身吗

457
0:17:12.200 --> 0:17:13.680
对他写进程出身的

458
0:17:14.280 --> 0:17:16.960
而且当初是创立eBay是他

459
0:17:17.600 --> 0:17:18.600
不是PayPal

460
0:17:18.600 --> 0:17:19.600
PayPal

461
0:17:19.600 --> 0:17:21.360
PayPal对

462
0:17:22.000 --> 0:17:23.000
Ellen Musk是这样的

463
0:17:23.000 --> 0:17:25.600
她是我们上次不是聊过

464
0:17:25.960 --> 0:17:28.440
上一波的互联网泡沫

465
0:17:30.160 --> 0:17:32.120
她其实是那一波的参与者

466
0:17:32.680 --> 0:17:34.760
她是90年代开始创业的

467
0:17:34.760 --> 0:17:36.080
上个世纪90年代

468
0:17:36.280 --> 0:17:38.560
她创业的时候拿了一笔

469
0:17:38.960 --> 0:17:40.960
在当时算很多的一个风投

470
0:17:41.320 --> 0:17:45.120
我记得是上千万美金的天使投资

471
0:17:45.560 --> 0:17:46.040
做什幺

472
0:17:46.280 --> 0:17:47.920
做数字行业

473
0:17:48.360 --> 0:17:51.080
就是什幺线上的城市指南

474
0:17:51.080 --> 0:17:54.560
黄页电话本这样的东西

475
0:17:55.120 --> 0:17:57.080
在90年代的互联网创业里面

476
0:17:57.080 --> 0:17:58.280
算很高端的东西了

477
0:17:58.960 --> 0:18:01.240
然后她比较牛逼的点在哪里

478
0:18:01.400 --> 0:18:04.080
她在上一波泡沫爆炸之前

479
0:18:04.720 --> 0:18:06.120
就成功的把这玩意卖了

480
0:18:06.960 --> 0:18:08.040
卖了几千万美金

481
0:18:08.040 --> 0:18:10.600
非常的舒服就出来了

482
0:18:10.600 --> 0:18:12.840
出来之后拿这个钱来自己投资

483
0:18:12.840 --> 0:18:14.440
自己或者跟几个人合伙

484
0:18:14.840 --> 0:18:16.120
就开始做PayPal

485
0:18:16.760 --> 0:18:18.120
PayPal做了5年

486
0:18:18.120 --> 0:18:20.840
然后她也就从PayPal撤出来了

487
0:18:20.840 --> 0:18:22.680
然后就去做SpaceX了

488
0:18:22.680 --> 0:18:24.520
所以她的经历

489
0:18:25.160 --> 0:18:25.480
怎幺说

490
0:18:26.000 --> 0:18:28.640
首先她是第一代的互联网创业人

491
0:18:28.640 --> 0:18:31.800
自己干软件上来了

492
0:18:32.360 --> 0:18:34.480
所以她对于互联网的本质

493
0:18:34.480 --> 0:18:35.680
不论它的技术本质

494
0:18:35.680 --> 0:18:36.440
还是架构

495
0:18:36.440 --> 0:18:38.160
还是它的商业逻辑

496
0:18:38.160 --> 0:18:39.200
都是非常清楚的

497
0:18:39.720 --> 0:18:40.080
第二

498
0:18:40.440 --> 0:18:42.080
她因为是最早的一位创业者

499
0:18:42.080 --> 0:18:43.680
而且她是所谓的叫做

500
0:18:44.160 --> 0:18:47.160
既成功又是反复创业者

501
0:18:47.160 --> 0:18:49.280
其实美国的风投的行业

502
0:18:49.720 --> 0:18:51.280
非常喜欢反复创业者

503
0:18:51.880 --> 0:18:53.960
而且即使你是多次创业

504
0:18:53.960 --> 0:18:54.760
多次失败的

505
0:18:54.760 --> 0:18:56.120
也有人会喜欢

506
0:18:56.120 --> 0:18:57.560
因为你有经验有经历

507
0:18:58.840 --> 0:19:00.280
而她是属于那里面最好的一类

508
0:19:00.280 --> 0:19:01.320
就是她反复创业

509
0:19:01.320 --> 0:19:02.160
每个都很成功

510
0:19:02.840 --> 0:19:03.960
所以导致一个结果

511
0:19:03.960 --> 0:19:07.000
就是她在湾区是很有影响力的

512
0:19:07.000 --> 0:19:09.080
就是湾区的这些

513
0:19:09.080 --> 0:19:11.200
不论是投资的头头脑脑们

514
0:19:11.200 --> 0:19:13.760
还是那些各代的创业者们

515
0:19:13.760 --> 0:19:14.720
其实跟她都很熟

516
0:19:14.720 --> 0:19:16.720
所以她对整个领域是很熟悉的

517
0:19:16.720 --> 0:19:17.320
这是第一

518
0:19:18.520 --> 0:19:18.920
第二

519
0:19:20.280 --> 0:19:23.760
她其实是从最早初创企业

520
0:19:23.760 --> 0:19:24.520
做上来的

521
0:19:25.360 --> 0:19:26.840
所以你说她如果说

522
0:19:26.840 --> 0:19:28.760
我看到一个很可笑的评论

523
0:19:28.920 --> 0:19:30.280
就是有一些

524
0:19:30.880 --> 0:19:31.760
可能也比较年轻

525
0:19:31.880 --> 0:19:33.520
也没有经历过这些事情

526
0:19:33.520 --> 0:19:34.120
她就说

527
0:19:35.160 --> 0:19:38.000
在推特搞的这些

528
0:19:38.400 --> 0:19:40.720
看上去很粗暴的做法

529
0:19:40.720 --> 0:19:45.000
是不是她在特斯拉这管工厂

530
0:19:45.440 --> 0:19:46.440
所以比较粗暴

531
0:19:46.440 --> 0:19:48.360
和互联网公司相对应该柔性一些

532
0:19:49.040 --> 0:19:49.800
其实也不是

533
0:19:50.680 --> 0:19:54.960
她肯定是几种模式都经历过

534
0:19:55.480 --> 0:19:58.240
那种很湾区的创业文化

535
0:19:58.240 --> 0:19:59.040
她也经历过

536
0:19:59.320 --> 0:20:01.720
然后SpaceX也好

537
0:20:01.720 --> 0:20:02.440
特斯拉也好

538
0:20:02.440 --> 0:20:04.720
她也做智能制造的这一块

539
0:20:04.720 --> 0:20:05.640
她也经历过

540
0:20:05.960 --> 0:20:07.480
然后又跑到中国来

541
0:20:07.480 --> 0:20:10.400
看了中国的大的制造业的底盘

542
0:20:10.680 --> 0:20:12.080
所以她肯定是有些想法的

543
0:20:12.280 --> 0:20:14.560
她在考虑这些东西能不能融合起来

544
0:20:14.560 --> 0:20:17.280
所以简单的说不会管互联网公司

545
0:20:17.280 --> 0:20:18.640
肯定是有问题

546
0:20:19.200 --> 0:20:20.400
然后另一个很有趣的争议

547
0:20:21.160 --> 0:20:23.520
前段时间我看国外也有报道

548
0:20:23.520 --> 0:20:25.600
国内也很多人在炒的一个事

549
0:20:26.440 --> 0:20:27.720
Ellen Musk说了一个

550
0:20:29.040 --> 0:20:31.520
说推特的首页一塌糊涂

551
0:20:32.440 --> 0:20:33.200
慢得要死

552
0:20:33.520 --> 0:20:33.920
为什幺慢

553
0:20:34.400 --> 0:20:37.000
打开一个首页有上千次的RPC

554
0:20:37.840 --> 0:20:41.120
所谓RPC就是叫远过程调用

555
0:20:41.240 --> 0:20:42.480
Remote Process Call

556
0:20:42.480 --> 0:20:45.480
指的就是不同的进程之间的调用

557
0:20:45.760 --> 0:20:47.760
很多时候还是跨机器的调用

558
0:20:48.120 --> 0:20:50.120
而这个导致了性能的问题

559
0:20:50.120 --> 0:20:52.080
然后就有推特的

560
0:20:52.320 --> 0:20:55.440
据说是比较资深的技术人员就反驳

561
0:20:55.560 --> 0:20:56.200
也不叫反驳

562
0:20:56.240 --> 0:20:57.320
就是在嘲讽他

563
0:20:57.760 --> 0:21:01.000
说事实上推特主页上没有RPC

564
0:21:02.120 --> 0:21:04.160
推特使用的是GraphQL

565
0:21:04.800 --> 0:21:07.640
GraphQL实际上是一种接口协议了

566
0:21:07.640 --> 0:21:10.600
就类似于RESTful使用Jason的格式

567
0:21:10.600 --> 0:21:12.680
GraphQL是用的另外的一套

568
0:21:13.200 --> 0:21:14.480
像应用协议

569
0:21:14.480 --> 0:21:15.280
就有人讥笑他

570
0:21:15.280 --> 0:21:17.440
说他不懂新的技术

571
0:21:18.200 --> 0:21:18.880
你们怎幺看

572
0:21:19.160 --> 0:21:20.320
我相信你们也看到这个新闻了

573
0:21:21.760 --> 0:21:22.440
看到了

574
0:21:23.040 --> 0:21:25.960
但是我觉得这幺细节的东西

575
0:21:26.200 --> 0:21:28.320
你真的拿这个东西来说

576
0:21:28.320 --> 0:21:30.120
它很合理吗

577
0:21:31.200 --> 0:21:33.800
比如说我比较懂开源

578
0:21:33.800 --> 0:21:34.400
我跟他说

579
0:21:34.400 --> 0:21:38.400
我说GPL和LGPL和AGPL的三个

580
0:21:38.880 --> 0:21:40.280
区别你知不知道

581
0:21:40.280 --> 0:21:41.160
如果他说不知道

582
0:21:41.160 --> 0:21:42.400
我就可以嘲笑他吗

583
0:21:42.400 --> 0:21:43.840
有回字的4种写法

584
0:21:43.840 --> 0:21:44.240
对

585
0:21:44.240 --> 0:21:44.840
对

586
0:21:44.840 --> 0:21:46.480
假设回字有4种写法

587
0:21:46.480 --> 0:21:48.200
我就可以拿这个去嘲笑他吗

588
0:21:48.200 --> 0:21:50.320
或者说再细节一点

589
0:21:50.320 --> 0:21:51.360
比如说什幺

590
0:21:51.360 --> 0:21:52.760
什幺socket端口

591
0:21:52.760 --> 0:21:53.920
什幺调优

592
0:21:53.920 --> 0:21:54.560
这种东西

593
0:21:54.560 --> 0:21:57.880
你当然可能是那个领域的专家

594
0:21:57.880 --> 0:21:59.960
但是拿这个东西来说

595
0:21:59.960 --> 0:22:00.680
Elon Musk

596
0:22:00.680 --> 0:22:02.080
我总觉得有点

597
0:22:02.920 --> 0:22:03.840
不是一个层面的

598
0:22:03.840 --> 0:22:04.640
不到点上

599
0:22:04.640 --> 0:22:05.360
对

600
0:22:06.800 --> 0:22:09.760
这个实际上就是新一代的技术人员

601
0:22:09.760 --> 0:22:14.760
他其实对历史上已经被过时的一些技术或者提法

602
0:22:14.760 --> 0:22:16.240
他们不是很关注

603
0:22:16.760 --> 0:22:19.120
所以他们认为他们掌握的是新的

604
0:22:19.120 --> 0:22:21.920
并且正确的技术

605
0:22:21.920 --> 0:22:27.480
我记得以前有一次我们跟David有一期讲考古

606
0:22:27.480 --> 0:22:28.840
科研上的考古的

607
0:22:29.920 --> 0:22:31.560
那一期我不知道大家有没有印象

608
0:22:31.640 --> 0:22:32.280
其实那期里面

609
0:22:32.280 --> 0:22:33.800
我们反复在讲的一个概念

610
0:22:33.800 --> 0:22:36.600
就是很多东西它夭折了

611
0:22:36.600 --> 0:22:39.120
或者说它没有流传到现在

612
0:22:39.120 --> 0:22:40.600
并不是因为它不好

613
0:22:41.600 --> 0:22:44.120
而是因为它可能不合时宜

614
0:22:44.600 --> 0:22:47.800
或者有很偶然的因素

615
0:22:47.800 --> 0:22:49.680
另外一个技术就赢了

616
0:22:51.000 --> 0:22:54.680
这种在科技的历史里面屡见不鲜

617
0:22:54.680 --> 0:22:57.480
而且有的时候会螺旋式的

618
0:22:57.480 --> 0:23:00.000
就是当年被不看好的东西

619
0:23:00.000 --> 0:23:01.320
后面突然又火了

620
0:23:02.160 --> 0:23:04.160
你像最近大火的AI

621
0:23:04.160 --> 0:23:05.440
这个Machine Learning的技术

622
0:23:05.440 --> 0:23:09.240
以前就是人工神经网络

623
0:23:09.240 --> 0:23:10.440
对的 神经网络

624
0:23:10.440 --> 0:23:10.800
是吧

625
0:23:10.800 --> 0:23:14.400
这个所谓的机器学习

626
0:23:14.400 --> 0:23:15.880
其实就是人工神经网络

627
0:23:16.880 --> 0:23:17.760
换了一个词

628
0:23:17.760 --> 0:23:18.880
然后重新包装

629
0:23:18.880 --> 0:23:24.880
然后由于算力和基础数据模型的巨大的提升

630
0:23:24.880 --> 0:23:26.240
它一下子就起来了

631
0:23:26.240 --> 0:23:30.320
但是在50年代Datamon会议之后

632
0:23:30.320 --> 0:23:31.960
一直到八九十年代

633
0:23:31.960 --> 0:23:36.600
人工神经网络都是不被看好的 是吧

634
0:23:36.600 --> 0:23:40.160
还有像比如说像兰卜达算子

635
0:23:40.160 --> 0:23:42.320
到后面函数式编程

636
0:23:42.320 --> 0:23:45.720
有一段时间也是被面向对象干着打的

637
0:23:45.720 --> 0:23:47.920
根本没有出头之日

638
0:23:47.920 --> 0:23:50.040
但是在90年代之后

639
0:23:50.040 --> 0:23:54.000
一些新兴的语言开始逐步的把函数式编程的一些内核理念

640
0:23:54.000 --> 0:23:56.120
拿回来装到自己的语言里面

641
0:23:56.120 --> 0:23:57.360
然后大家发现非常好

642
0:23:57.360 --> 0:23:59.040
再比如说原编程

643
0:23:59.040 --> 0:24:00.360
再动态编程

644
0:24:00.360 --> 0:24:03.520
在很多这些方面它是体现了很强的优势的

645
0:24:03.520 --> 0:24:05.440
所以现在几乎所有的新语言

646
0:24:05.440 --> 0:24:07.600
里面都一定是多范型的了

647
0:24:07.600 --> 0:24:09.520
就是这面向对象的概念

648
0:24:09.520 --> 0:24:11.480
函数式的概念都有

649
0:24:11.480 --> 0:24:13.880
所以这种考古式的科研

650
0:24:13.880 --> 0:24:17.720
这种科研的在历史上的轮回循环是很正常的

651
0:24:17.720 --> 0:24:21.680
你像Elon Musk他说有一千多个RPC的时候

652
0:24:21.680 --> 0:24:25.200
他用的这个RPC的这个词显然是概念上的

653
0:24:25.200 --> 0:24:26.320
是广义的RPC

654
0:24:26.320 --> 0:24:28.480
就只要你是跨机器

655
0:24:28.480 --> 0:24:30.080
跨进程的通信

656
0:24:30.080 --> 0:24:32.080
他都把它称之为RPC对吧

657
0:24:32.080 --> 0:24:34.000
他可能不熟悉你是用RESTful的

658
0:24:34.000 --> 0:24:36.040
还是用什幺GraphQL

659
0:24:36.040 --> 0:24:37.160
还是用什幺其他东西

660
0:24:37.160 --> 0:24:38.440
他不care这个事情

661
0:24:38.440 --> 0:24:42.720
他关心的是你有大量的跨进程的通信

662
0:24:42.720 --> 0:24:44.760
这种通信是耗时的

663
0:24:44.760 --> 0:24:48.480
它比一个应用在本地的处理一定是更加耗时的

664
0:24:48.480 --> 0:24:52.280
你在一个主页里面有大量的这种耗时的操作

665
0:24:52.280 --> 0:24:53.880
那幺显然就是有优化空间的

666
0:24:53.880 --> 0:24:55.400
从他角度来讲就是这幺一个简单的

667
0:24:55.400 --> 0:24:56.640
这个逻辑一定成立

668
0:24:56.640 --> 0:25:00.880
那好了那现在的这个技术人员

669
0:25:00.880 --> 0:25:03.760
他就会觉得说你说的这个事情很老土

670
0:25:03.760 --> 0:25:11.000
不够时髦或者说不够的这个现代化

671
0:25:11.000 --> 0:25:14.120
他因此而去这个质疑

672
0:25:14.120 --> 0:25:16.160
我觉得这是一种专家病了

673
0:25:16.160 --> 0:25:19.640
就是这个专业人士经常会有的一种问题

674
0:25:19.640 --> 0:25:22.520
就是他没有办法跳开他的那个专业领域

675
0:25:22.520 --> 0:25:27.800
在更大的时间和空间维度上去看问题

676
0:25:27.800 --> 0:25:31.600
这个其实就是很多专业人员

677
0:25:31.600 --> 0:25:34.320
要再往上走一步的一个很大的障碍

678
0:25:34.320 --> 0:25:36.440
这是我个人的一个感受

679
0:25:36.440 --> 0:25:39.520
我倒觉得不完全是专家病

680
0:25:39.520 --> 0:25:42.240
我觉得是进程员的一种通病

681
0:25:42.240 --> 0:25:45.400
尤其是年轻进程员的一种通病

682
0:25:45.400 --> 0:25:48.960
就是他不学历史的

683
0:25:48.960 --> 0:25:51.800
他就为最新的东西

684
0:25:51.800 --> 0:25:53.680
对他不了解过去的

685
0:25:53.680 --> 0:25:55.240
他只管最近学的东西

686
0:25:55.240 --> 0:25:58.520
而且觉得最近的东西你看外面用的这幺多

687
0:25:58.520 --> 0:25:59.960
那一定比老的好

688
0:25:59.960 --> 0:26:06.000
对甚至就是凡是能够用什幺什幺ABC重写的

689
0:26:06.000 --> 0:26:07.680
就用那个东西重写一遍

690
0:26:07.680 --> 0:26:11.960
而且瞧不起过去的所有的已经有过的实践

691
0:26:11.960 --> 0:26:15.240
你们那东西老土搞的又不行

692
0:26:15.240 --> 0:26:16.840
我还不如重写一遍

693
0:26:16.840 --> 0:26:20.880
勇于重写但是疏于总结

694
0:26:20.880 --> 0:26:22.240
这是一个通病

695
0:26:22.240 --> 0:26:25.440
还不光是说你说的是科技人员的通病

696
0:26:25.440 --> 0:26:26.240
我觉得是

697
0:26:26.240 --> 0:26:28.880
确实

698
0:26:30.440 --> 0:26:32.560
而且在有些领域里面特别突出

699
0:26:32.560 --> 0:26:33.560
比如前端

700
0:26:33.560 --> 0:26:35.800
我本来不想说前端

701
0:26:35.800 --> 0:26:37.120
其实我说的就是他们

702
0:26:37.120 --> 0:26:43.160
前端是这个领域真的就特别喜欢干这种事

703
0:26:43.160 --> 0:26:44.360
对反复重写

704
0:26:44.360 --> 0:26:50.200
我最近我不是最近在玩一些我关心的一些东西

705
0:26:50.200 --> 0:26:52.000
然后我就自己搭一些环境

706
0:26:52.000 --> 0:26:55.400
然后写一些原型

707
0:26:55.400 --> 0:26:58.480
我写原型的时候有一个习惯

708
0:26:58.480 --> 0:27:00.000
就是我每一次做这种事情

709
0:27:00.000 --> 0:27:03.680
我就想用一个以前没用过的前端的框架

710
0:27:03.680 --> 0:27:07.840
来体会一下到底前端的框架在往哪个方向进展

711
0:27:07.840 --> 0:27:12.320
然后我最近一查发现前端框架

712
0:27:12.320 --> 0:27:16.640
最近这几年真的是我原来以为就是

713
0:27:16.640 --> 0:27:20.200
Red或者VueJS选一选好了

714
0:27:20.200 --> 0:27:21.920
或者你这两个都不用

715
0:27:21.920 --> 0:27:26.000
你就用比较原始的配合什幺更老一点

716
0:27:26.000 --> 0:27:26.760
什幺JQuery之类的

717
0:27:26.760 --> 0:27:27.680
你就可以用了

718
0:27:27.680 --> 0:27:29.320
这种无非就是这几种方案

719
0:27:29.320 --> 0:27:30.480
结果发现不是

720
0:27:30.480 --> 0:27:33.280
好多方案什幺NextJS

721
0:27:33.280 --> 0:27:34.560
什幺SolidJS

722
0:27:34.560 --> 0:27:37.720
还有什幺有一个我单词都不太会拼的

723
0:27:37.720 --> 0:27:39.280
什幺Vault什幺之类的

724
0:27:39.280 --> 0:27:42.240
然后我要看他们到底差异在哪

725
0:27:42.240 --> 0:27:46.640
发现差异就有

726
0:27:46.640 --> 0:27:48.840
但是就那幺点

727
0:27:48.840 --> 0:27:50.800
但是这些东西带来的一个影响

728
0:27:50.800 --> 0:27:54.400
就是它分散了大家的注意力

729
0:27:54.400 --> 0:27:56.680
比如说我看到有一个叫SolidJS

730
0:27:56.680 --> 0:27:59.080
我觉得它有一些设计上的一些理念

731
0:27:59.080 --> 0:28:00.800
它其实有点像React

732
0:28:00.800 --> 0:28:02.600
它跟React是比较类似的

733
0:28:02.600 --> 0:28:05.640
但是它有一些自己的比较独特的理念

734
0:28:05.640 --> 0:28:06.320
我觉得挺有意思的

735
0:28:06.320 --> 0:28:07.240
我就试一试

736
0:28:07.240 --> 0:28:09.520
但是因为它分散了之后就导致一个问题

737
0:28:09.520 --> 0:28:11.920
用它的人就没那幺多

738
0:28:11.920 --> 0:28:14.400
有一些问题你要再搜一些资源

739
0:28:14.400 --> 0:28:18.880
或者是一些为它开发的库

740
0:28:18.880 --> 0:28:20.680
就相对没有那幺丰富

741
0:28:20.680 --> 0:28:21.880
最后你可能觉得算了

742
0:28:21.880 --> 0:28:23.040
这点小小的创新

743
0:28:23.040 --> 0:28:24.040
我还是回去React

744
0:28:24.040 --> 0:28:25.040
那幺多人都在用

745
0:28:25.040 --> 0:28:25.520
对吧

746
0:28:25.520 --> 0:28:28.440
就变成这幺一种情况

747
0:28:28.440 --> 0:28:32.720
我可以补充一个证据

748
0:28:32.720 --> 0:28:35.600
也是最近我在做一个前端的编译

749
0:28:35.600 --> 0:28:40.240
我本来以为编译要幺就是NPM

750
0:28:40.240 --> 0:28:40.680
对吧

751
0:28:40.680 --> 0:28:42.880
要幺新出来一个东西叫YARN

752
0:28:42.880 --> 0:28:47.360
现在又出来一个新的叫PNPM

753
0:28:47.360 --> 0:28:48.480
对

754
0:28:48.480 --> 0:28:49.800
又是一个新的东西

755
0:28:49.800 --> 0:28:51.240
开始学点新的

756
0:28:51.240 --> 0:28:51.640
好吧

757
0:28:51.640 --> 0:28:52.000
对

758
0:28:52.000 --> 0:28:52.840
到底好在哪

759
0:28:52.840 --> 0:28:53.240
不知道

760
0:28:53.240 --> 0:28:55.560
反正还有什幺NPX

761
0:28:55.560 --> 0:28:55.920
对

762
0:28:55.920 --> 0:28:57.760
Stat又数又老多了

763
0:28:57.760 --> 0:28:58.240
真是

764
0:28:58.240 --> 0:29:00.880
他们Stat数总归是蛮多的

765
0:29:00.880 --> 0:29:05.040
所以现在选择困难症在前端领域特别明显

766
0:29:05.040 --> 0:29:06.360
后端的

767
0:29:06.360 --> 0:29:09.120
因为做后端的人一般都比较老油条一点

768
0:29:09.120 --> 0:29:12.240
而且后端东西忌讳经常改

769
0:29:12.240 --> 0:29:15.600
后端东西比较希望它更stable一点

770
0:29:15.600 --> 0:29:16.480
更稳定

771
0:29:16.480 --> 0:29:17.400
不要乱变

772
0:29:17.400 --> 0:29:20.160
所以大家一般来讲都是渐进式改造

773
0:29:20.160 --> 0:29:21.840
能不动不动

774
0:29:21.840 --> 0:29:25.960
前端真的是超活跃

775
0:29:25.960 --> 0:29:27.320
好

776
0:29:27.320 --> 0:29:28.360
说到这个话题

777
0:29:28.480 --> 0:29:32.160
我们最后就准备聊我们今天主要的话题了

778
0:29:32.160 --> 0:29:34.640
就是关于软件工程

779
0:29:34.640 --> 0:29:35.600
这个事从哪里来

780
0:29:35.720 --> 0:29:37.520
正好前段时间

781
0:29:37.520 --> 0:29:40.400
软件工程领域的

782
0:29:40.400 --> 0:29:42.000
怎幺讲

783
0:29:42.000 --> 0:29:43.040
经典名作

784
0:29:43.040 --> 0:29:44.160
人月神话

785
0:29:44.160 --> 0:29:45.120
他的作者

786
0:29:45.120 --> 0:29:46.800
Fred Brooks

787
0:29:46.800 --> 0:29:50.440
就是叫弗雷德里克布鲁克斯

788
0:29:50.760 --> 0:29:52.360
去世了

789
0:29:52.360 --> 0:29:53.840
90多岁老爷子

790
0:29:53.840 --> 0:29:56.480
这位老爷子

791
0:29:56.480 --> 0:30:01.160
他是也不能说他是软件工程的奠基者

792
0:30:01.160 --> 0:30:03.160
但他确实是一个集大成者

793
0:30:03.160 --> 0:30:04.480
他主要的成果

794
0:30:04.480 --> 0:30:06.680
其实就是70年代前后

795
0:30:06.680 --> 0:30:09.560
写了一系列的文章

796
0:30:09.560 --> 0:30:11.600
这些文章最后汇编成册

797
0:30:11.600 --> 0:30:12.920
就是这本人月神话

798
0:30:13.040 --> 0:30:15.080
如果没有看过人月神话的朋友

799
0:30:15.080 --> 0:30:17.360
如果你想在软件领域干点事的话

800
0:30:17.360 --> 0:30:18.320
强烈建议去看

801
0:30:18.320 --> 0:30:19.960
这本书非常容易读

802
0:30:19.960 --> 0:30:20.960
非常容易懂

803
0:30:20.960 --> 0:30:24.160
但是他很多概念至今也没有过时

804
0:30:26.640 --> 0:30:29.840
老爷子本来也是计算机科学出身的

805
0:30:29.840 --> 0:30:32.640
99年拿过图灵奖

806
0:30:32.800 --> 0:30:34.000
但他主要的贡献

807
0:30:34.120 --> 0:30:35.320
反而不是在计算机科学

808
0:30:35.320 --> 0:30:36.720
而是在软件工程领域

809
0:30:36.720 --> 0:30:38.680
软件工程其实比软件

810
0:30:38.680 --> 0:30:40.960
比计算机科学的诞生的要晚不少

811
0:30:41.400 --> 0:30:45.280
计算机科学从数学创建了理论计算机

812
0:30:45.280 --> 0:30:48.320
就是想象中的理论计算机的模型

813
0:30:48.320 --> 0:30:50.040
然后实际把它造出来

814
0:30:50.040 --> 0:30:51.760
然后大家开始开发软件

815
0:30:51.760 --> 0:30:53.120
最早拿来算炮弹

816
0:30:53.120 --> 0:30:54.560
然后后面算原子弹

817
0:30:55.280 --> 0:30:56.320
然后等等

818
0:30:56.800 --> 0:30:59.400
然后直到50年代

819
0:30:59.680 --> 0:31:02.080
历史上第一次软件危机之后

820
0:31:02.080 --> 0:31:03.800
软件工程才真正的

821
0:31:03.800 --> 0:31:05.760
进入人们的视野

822
0:31:06.200 --> 0:31:08.760
实际上在第一次软件危机的时候

823
0:31:09.200 --> 0:31:11.600
软件工程也没有被作为主要的解药

824
0:31:11.600 --> 0:31:12.720
那个时候仍然认为说

825
0:31:12.840 --> 0:31:14.320
软件危机可能主要的问题

826
0:31:14.320 --> 0:31:16.440
是进程的结构问题

827
0:31:16.720 --> 0:31:18.200
所以软件危机之后

828
0:31:18.200 --> 0:31:20.600
就诞生了结构化编程

829
0:31:22.000 --> 0:31:26.240
后面随着软件的规模逐步提升

830
0:31:26.240 --> 0:31:29.000
这个规模包括系统的复杂度

831
0:31:29.000 --> 0:31:31.040
就是你要集成的模块的数量

832
0:31:31.040 --> 0:31:34.360
然后模块里面的代码行数

833
0:31:34.480 --> 0:31:38.040
以及开发软件的团队人员的规模

834
0:31:38.080 --> 0:31:39.640
都上升到一定程度之后

835
0:31:39.640 --> 0:31:40.440
人们才发现

836
0:31:40.960 --> 0:31:42.960
软件工程非常重要

837
0:31:43.600 --> 0:31:45.640
甚至比编程语言本身还要重要

838
0:31:46.160 --> 0:31:47.160
那个时候软件工程

839
0:31:47.160 --> 0:31:49.040
其实也一穷二白啥都没有

840
0:31:49.320 --> 0:31:52.040
借鉴了很多传统的制造业

841
0:31:52.360 --> 0:31:54.120
建筑行业的一些概念

842
0:31:54.120 --> 0:31:56.360
所以当时有著名的比喻

843
0:31:56.520 --> 0:31:57.720
就是你做软件

844
0:31:58.200 --> 0:31:59.880
不同规模的软件差异很大

845
0:31:59.880 --> 0:32:00.400
就好比什幺

846
0:32:00.400 --> 0:32:02.600
你自己搭一个小狗窝

847
0:32:02.800 --> 0:32:04.800
跟你建一个摩天大楼

848
0:32:05.320 --> 0:32:07.960
所需要的工程方法是完全不一样的

849
0:32:08.160 --> 0:32:09.120
著名的一个比喻

850
0:32:09.600 --> 0:32:12.160
然后经过了八九十年代的

851
0:32:12.760 --> 0:32:14.400
大量的实践

852
0:32:14.400 --> 0:32:16.640
还有一些基金公司的推动

853
0:32:16.640 --> 0:32:17.600
软件工程的体系

854
0:32:17.600 --> 0:32:18.960
总算是创建起来了

855
0:32:20.320 --> 0:32:21.600
那幺所有的这些东西

856
0:32:21.600 --> 0:32:23.080
其实在Fedbrooks

857
0:32:23.080 --> 0:32:25.040
就是他这本人员神话里面

858
0:32:25.040 --> 0:32:26.040
其实都有涉及到

859
0:32:26.040 --> 0:32:29.040
因为他是当时作为IBM的自身顾问

860
0:32:29.040 --> 0:32:30.480
参与了非常多的

861
0:32:30.600 --> 0:32:31.960
重大的软件项目

862
0:32:32.120 --> 0:32:34.160
所以他有非常多深刻的体验

863
0:32:34.160 --> 0:32:35.040
这些体验

864
0:32:35.280 --> 0:32:37.040
帮助大家理解了软件工程

865
0:32:37.040 --> 0:32:37.920
跟传统的

866
0:32:37.920 --> 0:32:39.160
比如像建筑工程

867
0:32:39.680 --> 0:32:41.200
还有制造业里面的工程管理

868
0:32:41.360 --> 0:32:42.600
它是有一些差别的

869
0:32:43.120 --> 0:32:44.040
所以这个话题

870
0:32:44.200 --> 0:32:45.520
其实我们也老老实实想聊

871
0:32:45.640 --> 0:32:47.720
因为我们都挺关注的

872
0:32:47.840 --> 0:32:50.040
所以这次借纪念

873
0:32:50.200 --> 0:32:52.560
我们Brooks老爷子的趋势

874
0:32:52.680 --> 0:32:53.280
也来说说

875
0:32:53.280 --> 0:32:55.200
我们对于软件工程的一些理解

876
0:32:55.200 --> 0:32:58.640
那幺两位王老师先说说

877
0:33:00.080 --> 0:33:00.560
对

878
0:33:01.160 --> 0:33:02.600
我先从学校场景

879
0:33:02.600 --> 0:33:04.080
说一下我们的软件工程

880
0:33:04.280 --> 0:33:06.720
其实现在在软件工程这一块

881
0:33:06.880 --> 0:33:09.040
我们其实困惑越来越多

882
0:33:10.040 --> 0:33:12.080
其实我在读书那一回

883
0:33:12.480 --> 0:33:14.160
人员神话其实就是

884
0:33:14.400 --> 0:33:16.800
当时在我们学校里面

885
0:33:16.800 --> 0:33:19.800
其实也是非常的盛传

886
0:33:19.880 --> 0:33:21.520
对其实就是类似一本

887
0:33:21.760 --> 0:33:24.200
你学计算机学软件工程

888
0:33:24.200 --> 0:33:25.200
一定要去看

889
0:33:25.520 --> 0:33:26.720
对但是我们那个时候

890
0:33:26.720 --> 0:33:28.840
圣经对圣经对的

891
0:33:29.000 --> 0:33:32.120
对我们那时候看其实不太看懂

892
0:33:32.680 --> 0:33:33.280
对为什幺

893
0:33:33.640 --> 0:33:36.880
对因为我相信像李老师

894
0:33:36.880 --> 0:33:38.800
其实比我们读书还要早

895
0:33:38.800 --> 0:33:39.480
我们那个时候

896
0:33:39.480 --> 0:33:40.240
随着软件工程

897
0:33:40.240 --> 0:33:43.520
那就还是非常偏书面的

898
0:33:43.880 --> 0:33:44.640
对什幺意思

899
0:33:44.840 --> 0:33:46.320
就是我们的软件

900
0:33:46.320 --> 0:33:46.920
我不同意

901
0:33:47.680 --> 0:33:50.320
我90年代念书的时候

902
0:33:50.320 --> 0:33:51.600
我进交大的时候

903
0:33:51.600 --> 0:33:53.440
交大的计算机系

904
0:33:53.440 --> 0:33:54.560
才刚独立出来

905
0:33:54.560 --> 0:33:55.960
第2年不知道第3年

906
0:33:56.880 --> 0:33:58.320
然后可能系的这里面

907
0:33:58.320 --> 0:33:59.800
是没有软件工程这门课的

908
0:33:59.800 --> 0:34:01.960
OK好的理解了

909
0:34:01.960 --> 0:34:03.000
理解了

910
0:34:03.200 --> 0:34:04.400
我们有这一课了

911
0:34:04.400 --> 0:34:05.200
我们那个时候

912
0:34:05.200 --> 0:34:06.800
已经有软件工程这门课了

913
0:34:07.280 --> 0:34:09.080
大概是2000年左右

914
0:34:11.080 --> 0:34:12.400
我们那个课

915
0:34:12.520 --> 0:34:14.280
几乎就是一个理论

916
0:34:14.280 --> 0:34:16.440
加卷面考试的一个课程

917
0:34:16.960 --> 0:34:18.960
对就是讲很多的一些概念

918
0:34:19.000 --> 0:34:21.360
还有一些方法论

919
0:34:21.360 --> 0:34:24.080
包括一些什幺从瀑布模型

920
0:34:24.080 --> 0:34:27.320
到软件工程里面的那几个阶段

921
0:34:27.520 --> 0:34:29.560
你要去写一些需求

922
0:34:29.560 --> 0:34:30.680
写一些测试

923
0:34:30.680 --> 0:34:33.120
写集成

924
0:34:33.240 --> 0:34:37.040
还有最后的一些报告

925
0:34:37.320 --> 0:34:39.320
对考试也是典型的

926
0:34:39.320 --> 0:34:40.400
我记得最清楚的

927
0:34:40.400 --> 0:34:42.640
就是里面其实是有量化题的

928
0:34:42.640 --> 0:34:43.560
量化题算啥

929
0:34:44.080 --> 0:34:48.520
就算干特图里面的时间约束

930
0:34:48.640 --> 0:34:50.440
对这是我记得很清楚的

931
0:34:50.440 --> 0:34:51.360
否则的话

932
0:34:51.360 --> 0:34:54.120
它更像是一个文科的一个课程了

933
0:34:54.120 --> 0:34:57.360
对它很多都是一些选择问答

934
0:34:57.440 --> 0:34:57.960
这些东西

935
0:34:57.960 --> 0:35:00.080
而且我们当时上软件工程里面

936
0:35:00.080 --> 0:35:02.760
实际上是没有上机和编码

937
0:35:02.760 --> 0:35:04.320
这样的一些内容的

938
0:35:04.560 --> 0:35:08.720
对所以说真的是差别是非常大

939
0:35:08.920 --> 0:35:11.280
对但是即便是现在

940
0:35:11.320 --> 0:35:13.200
对我先说完

941
0:35:13.200 --> 0:35:14.960
就是后来以后

942
0:35:15.120 --> 0:35:16.360
就是读了研究生以后

943
0:35:16.360 --> 0:35:18.040
我们研究生里面也有软件工程

944
0:35:18.040 --> 0:35:19.160
那个时候名字换了

945
0:35:19.160 --> 0:35:21.800
那个时候叫高级软件工程

946
0:35:21.800 --> 0:35:23.880
但是高级软件工程

947
0:35:23.880 --> 0:35:28.080
高级到什幺呢

948
0:35:28.080 --> 0:35:29.080
就是我们那个时候

949
0:35:29.080 --> 0:35:32.320
实际上是有要参与实际的软件项目了

950
0:35:32.560 --> 0:35:34.800
对那个时候其实他的课

951
0:35:34.920 --> 0:35:37.960
反而不正儿八经去上了

952
0:35:38.080 --> 0:35:41.360
其实很多都是跟着项目里面去做

953
0:35:41.360 --> 0:35:43.880
对因为我那个时候读研究生

954
0:35:43.880 --> 0:35:46.800
其实是有非常多的一些

955
0:35:46.800 --> 0:35:49.560
老师所接的一些软件项目

956
0:35:49.560 --> 0:35:51.280
对那个时候正好借着

957
0:35:51.320 --> 0:35:52.560
这样一个软件工程课

958
0:35:52.560 --> 0:35:54.240
对其实老师也不太多讲

959
0:35:54.240 --> 0:35:57.440
对基本上就是实际去做软件开发

960
0:35:57.560 --> 0:35:59.040
对做的过程当中

961
0:35:59.040 --> 0:36:00.600
实际上你就开始对

962
0:36:00.600 --> 0:36:03.840
反而对我们在本科基金学的

963
0:36:03.840 --> 0:36:06.240
那些软件工程里面的一些概念

964
0:36:06.400 --> 0:36:08.440
已经开始有一些感觉了

965
0:36:08.440 --> 0:36:09.480
而且我们那个时候

966
0:36:09.480 --> 0:36:12.120
其实还开始流行有另外一个东西

967
0:36:12.120 --> 0:36:13.240
我相信大家都知道的

968
0:36:13.240 --> 0:36:15.840
就是UML建模

969
0:36:15.840 --> 0:36:19.000
对那个时候还有一些半自动化的工具了

970
0:36:19.040 --> 0:36:19.840
对那个时候

971
0:36:19.840 --> 0:36:21.520
因为我们那个时候觉得非常神奇

972
0:36:21.520 --> 0:36:24.120
对因为我们写代码的都是希望

973
0:36:24.160 --> 0:36:25.520
自动生成代码

974
0:36:25.880 --> 0:36:28.440
那个时候的像Rational Rose

975
0:36:28.440 --> 0:36:31.560
已经可以用UML的一些图

976
0:36:31.560 --> 0:36:34.080
给你生成一些代码框架了

977
0:36:34.280 --> 0:36:35.320
对即便是这样

978
0:36:35.320 --> 0:36:36.400
我们当时也是觉得

979
0:36:36.400 --> 0:36:38.080
哇这个太神奇了

980
0:36:38.160 --> 0:36:39.960
对然后就在幻想

981
0:36:40.240 --> 0:36:43.080
我们以后软件工程就是画画图了

982
0:36:43.080 --> 0:36:44.120
对你图画完了

983
0:36:44.120 --> 0:36:48.160
那什幺框架到你的测试

984
0:36:48.360 --> 0:36:49.600
甚至你的实现代码

985
0:36:49.800 --> 0:36:50.960
那都写好了

986
0:36:51.240 --> 0:36:53.800
对我们那个时候其实就是这幺去想的

987
0:36:53.800 --> 0:36:55.320
对但是你会发现

988
0:36:55.440 --> 0:36:57.920
实际参与软件工程里面

989
0:36:57.920 --> 0:37:00.360
对其实该写的还是写

990
0:37:00.360 --> 0:37:02.120
该熬夜的还是要熬夜

991
0:37:02.120 --> 0:37:03.920
对这个是没有办法

992
0:37:04.160 --> 0:37:07.680
对那等到我后面读完书对吧

993
0:37:07.680 --> 0:37:11.160
然后留在学校里面去教课的时候

994
0:37:11.320 --> 0:37:13.200
对你就会发现

995
0:37:13.200 --> 0:37:16.400
其实还是我感觉是挑战是非常大了

996
0:37:16.400 --> 0:37:16.960
为什幺

997
0:37:16.960 --> 0:37:18.640
因为即便是现在对

998
0:37:18.640 --> 0:37:21.480
其实今天这几天在上海这边

999
0:37:21.480 --> 0:37:24.600
其实也有ccf的软件大会

1000
0:37:24.600 --> 0:37:25.840
对当然是线上的

1001
0:37:26.000 --> 0:37:28.000
对里面其实也有大家分享

1002
0:37:28.000 --> 0:37:31.520
怎幺样去上软件工程课这样一件事情

1003
0:37:31.760 --> 0:37:33.720
然后我稍微去看了一下

1004
0:37:33.720 --> 0:37:37.760
对我感觉其实还是和我毕业那回的

1005
0:37:37.760 --> 0:37:40.840
整个状况其实是差不太多的

1006
0:37:41.040 --> 0:37:42.320
对是什幺意思呢

1007
0:37:42.320 --> 0:37:44.600
就是我感觉现在在学校里面

1008
0:37:44.760 --> 0:37:48.360
去教软件工程这件事情的挑战

1009
0:37:48.520 --> 0:37:49.440
越来越大

1010
0:37:49.640 --> 0:37:51.840
对即便是因为我们是数学学院

1011
0:37:52.040 --> 0:37:53.920
其实并没有软件工程这样一门课

1012
0:37:53.960 --> 0:37:55.320
但是是有这个需求

1013
0:37:55.320 --> 0:37:57.480
对其他的学院我也去看了一下

1014
0:37:57.520 --> 0:38:00.200
包括一些主流的教材

1015
0:38:00.200 --> 0:38:03.840
对教材里面其实是把一些新的方法论

1016
0:38:03.840 --> 0:38:04.560
加进来了

1017
0:38:04.640 --> 0:38:08.720
但是实践上的问题一直是解决不了

1018
0:38:08.880 --> 0:38:11.320
比如说他加了很多的一些敏捷

1019
0:38:11.320 --> 0:38:11.600
对吧

1020
0:38:11.600 --> 0:38:13.640
这也是我们前面流行的

1021
0:38:13.680 --> 0:38:15.680
对最新的可能就会加一些

1022
0:38:15.680 --> 0:38:17.680
像什幺devops这些东西

1023
0:38:17.720 --> 0:38:20.080
但是你会去看这些教材的时候

1024
0:38:20.120 --> 0:38:21.320
对我个人认为

1025
0:38:21.360 --> 0:38:23.640
即便是国外的一些好的教材

1026
0:38:23.720 --> 0:38:27.400
对它里面的一些项目的一些实践的部分

1027
0:38:27.440 --> 0:38:29.240
我觉得还是偏少

1028
0:38:29.400 --> 0:38:32.320
对当然我们也去关注国内外的一些

1029
0:38:32.320 --> 0:38:34.520
好的一些软件工程的课怎幺上

1030
0:38:34.640 --> 0:38:38.280
对好一点其实就会用一些项目

1031
0:38:38.280 --> 0:38:41.320
特别是一些稍微大型一点的一些

1032
0:38:41.320 --> 0:38:43.040
一些demo的一些软件

1033
0:38:43.080 --> 0:38:46.200
然后给同学去作为他的一些实践

1034
0:38:46.320 --> 0:38:49.640
对然后大作业我们可以去做这种软件

1035
0:38:49.640 --> 0:38:50.680
工程项目的分组

1036
0:38:50.680 --> 0:38:51.720
我们几个人一组

1037
0:38:51.720 --> 0:38:54.480
然后一起去做这样一个软件

1038
0:38:54.520 --> 0:38:56.840
然后去做期末的时候

1039
0:38:56.840 --> 0:38:59.560
去通过作品的形式去打分

1040
0:38:59.760 --> 0:39:04.360
对但是虽然我没有并没有比较多的

1041
0:39:04.400 --> 0:39:07.400
参与企业里面的一些软件开发的活动

1042
0:39:07.560 --> 0:39:10.400
对但是因为我们现在也是做一些开源

1043
0:39:10.400 --> 0:39:15.440
对包括在整个github上面的一些整个软件

1044
0:39:15.440 --> 0:39:16.080
开发过程

1045
0:39:16.080 --> 0:39:18.200
其实我们现在也是看到了越来越多

1046
0:39:18.200 --> 0:39:19.160
这样的一些内容

1047
0:39:19.320 --> 0:39:21.760
对其实我是感觉现在在学校里面的

1048
0:39:21.760 --> 0:39:25.640
这些软件工程的一些教学

1049
0:39:25.640 --> 0:39:29.200
不论是模式还是内容和工业界实际的

1050
0:39:29.280 --> 0:39:31.480
这些软件工程里面的一些内容过程

1051
0:39:31.480 --> 0:39:33.600
其实还是差距特别大的

1052
0:39:33.760 --> 0:39:35.960
而且特别是我有个感触

1053
0:39:36.040 --> 0:39:38.600
就是软件上了云以后

1054
0:39:38.600 --> 0:39:42.480
对它的复杂度和它的这种模式和开发

1055
0:39:42.480 --> 0:39:43.520
迭代过程

1056
0:39:43.640 --> 0:39:46.680
对又有一个新的变化

1057
0:39:46.960 --> 0:39:48.000
这些内容

1058
0:39:48.280 --> 0:39:51.360
我发现几乎现在就没有反映到

1059
0:39:51.360 --> 0:39:52.320
没有能够反映到

1060
0:39:52.320 --> 0:39:55.160
目前在学校里面的课程里面

1061
0:39:55.280 --> 0:39:59.320
还是我本科研究生里面的那些东西

1062
0:39:59.480 --> 0:40:01.480
对当然我不知道是不是我的一些

1063
0:40:01.480 --> 0:40:04.240
错觉或者是我并没有能够很好的

1064
0:40:04.240 --> 0:40:05.080
观察得到

1065
0:40:05.160 --> 0:40:06.600
对但是我确实觉得

1066
0:40:06.600 --> 0:40:09.200
而且现在学校里面的一些学生

1067
0:40:09.200 --> 0:40:11.880
其实也有一个趋势是什幺趋势

1068
0:40:12.000 --> 0:40:14.960
就是普遍对软件工程这件事情

1069
0:40:15.160 --> 0:40:17.240
没有那幺的感兴趣

1070
0:40:17.680 --> 0:40:21.960
对因为你都变成一个背书的课程了

1071
0:40:21.960 --> 0:40:23.360
当然就不感兴趣了

1072
0:40:23.440 --> 0:40:24.280
对吧对

1073
0:40:24.320 --> 0:40:25.160
对的

1074
0:40:25.840 --> 0:40:26.760
还有一个原因是什幺

1075
0:40:27.120 --> 0:40:30.600
大家更加对一些所谓的一些新技术

1076
0:40:30.600 --> 0:40:31.440
更加感兴趣

1077
0:40:31.440 --> 0:40:31.920
什幺意思

1078
0:40:32.480 --> 0:40:34.280
刚才大家所提到一些前段一些语言

1079
0:40:34.280 --> 0:40:37.760
再比如说一些AI或者是深度学习的

1080
0:40:37.760 --> 0:40:39.200
一些新的框架

1081
0:40:39.760 --> 0:40:41.720
普遍对这个东西感兴趣

1082
0:40:41.920 --> 0:40:45.080
对这个就是我感觉就在学校里面

1083
0:40:45.080 --> 0:40:46.880
现在还是有挺多的一些困惑的

1084
0:40:47.120 --> 0:40:51.120
对听听两位老师的一些看法

1085
0:40:52.400 --> 0:40:56.120
我觉得不光是学校困惑

1086
0:40:56.200 --> 0:41:00.080
其实真正在企业界也困惑

1087
0:41:00.480 --> 0:41:02.400
因为没有理论

1088
0:41:02.400 --> 0:41:05.320
软件工程的那些所谓的理论

1089
0:41:05.760 --> 0:41:08.760
怎幺说他都不实用

1090
0:41:09.200 --> 0:41:11.960
或者说我进华为对吧

1091
0:41:11.960 --> 0:41:15.160
我在进华为之前已经工作了多少年

1092
0:41:15.160 --> 0:41:16.320
工作了16年

1093
0:41:16.360 --> 0:41:19.000
就是97年毕业到13年

1094
0:41:19.040 --> 0:41:21.240
到了2013年进华为的时候

1095
0:41:21.240 --> 0:41:23.000
是工作了16年

1096
0:41:23.080 --> 0:41:25.480
大大小小也在各种各样的公司干过

1097
0:41:25.520 --> 0:41:26.800
但是进了华为以后

1098
0:41:26.800 --> 0:41:29.520
给我最大的震撼就是规模

1099
0:41:29.520 --> 0:41:32.960
一个项目2000人开发什幺概念

1100
0:41:32.960 --> 0:41:34.400
以前从来没想过

1101
0:41:35.600 --> 0:41:37.520
然后因为2000个人

1102
0:41:37.520 --> 0:41:40.040
会同时往一个代码仓库提交代码

1103
0:41:40.040 --> 0:41:41.880
会发生什幺事情没想过

1104
0:41:43.240 --> 0:41:45.080
然后因为这2000个人

1105
0:41:45.080 --> 0:41:47.600
不可能向同一个仓库提交代码

1106
0:41:47.640 --> 0:41:49.480
所以他们要如何分解

1107
0:41:50.160 --> 0:41:52.320
分开来做事情该怎幺分

1108
0:41:53.040 --> 0:41:55.040
然后该怎幺样又合在一起

1109
0:41:55.040 --> 0:42:01.440
然后整个的把这些人全部规划到一起去做事情

1110
0:42:02.080 --> 0:42:03.600
光是提一个敏捷

1111
0:42:03.720 --> 0:42:06.040
我们快速迭代根本不解决问题

1112
0:42:07.560 --> 0:42:10.160
所以后面敏捷这个领域

1113
0:42:10.160 --> 0:42:12.600
才提出来叫什幺大规模敏捷

1114
0:42:13.960 --> 0:42:16.960
其实也是为了适应超大型企业

1115
0:42:17.000 --> 0:42:18.840
他的特大型项目

1116
0:42:19.080 --> 0:42:21.600
然后又想要把敏捷这个词给守住

1117
0:42:21.600 --> 0:42:23.520
我觉得大规模敏捷

1118
0:42:23.520 --> 0:42:25.560
听上去就好像黑色的白一样

1119
0:42:25.560 --> 0:42:29.600
对本来是一个很轻盈的对吧

1120
0:42:29.600 --> 0:42:31.200
敏捷灵动的东西

1121
0:42:31.200 --> 0:42:33.080
现在变得全公司协调一致

1122
0:42:33.080 --> 0:42:34.120
大规模敏捷

1123
0:42:34.120 --> 0:42:35.120
那还敏捷个头

1124
0:42:35.120 --> 0:42:35.960
对

1125
0:42:35.960 --> 0:42:36.520
对

1126
0:42:37.360 --> 0:42:40.240
这个其实有很多很有意思的事情

1127
0:42:41.560 --> 0:42:43.280
我其实想说的话挺多的

1128
0:42:43.280 --> 0:42:45.360
先说刚才对王老师的

1129
0:42:45.680 --> 0:42:47.720
关于学校教学的一个评论

1130
0:42:47.760 --> 0:42:49.960
其实整个的没有理论

1131
0:42:50.160 --> 0:42:52.240
所以学校教不好是必然的

1132
0:42:52.240 --> 0:42:55.120
因为学校没有拿到一个理论的东西

1133
0:42:55.160 --> 0:42:57.520
当然学校也没有太多的

1134
0:42:57.520 --> 0:42:59.640
去真的去研究这些

1135
0:42:59.840 --> 0:43:01.640
软件工程的理论的这样东西

1136
0:43:01.640 --> 0:43:03.880
因为业界的这种声音太多了

1137
0:43:04.160 --> 0:43:06.680
所以动不动就出来一个打引号的大牛

1138
0:43:06.680 --> 0:43:07.800
就说我们应该这幺干

1139
0:43:07.800 --> 0:43:08.960
我们要截兑编程

1140
0:43:09.240 --> 0:43:10.400
截兑编程好

1141
0:43:10.640 --> 0:43:11.680
我插一句

1142
0:43:12.120 --> 0:43:14.840
在软件工程这个领域没有理论的

1143
0:43:14.840 --> 0:43:15.800
只有经验

1144
0:43:16.240 --> 0:43:19.080
就是在自然科学这个领域里面

1145
0:43:19.120 --> 0:43:20.560
称之为理论

1146
0:43:20.560 --> 0:43:22.160
它必须是普世的

1147
0:43:22.160 --> 0:43:24.680
在它约定的条件下

1148
0:43:24.720 --> 0:43:28.080
可以在任何场景下实验重现它的

1149
0:43:28.120 --> 0:43:29.320
这才叫理论

1150
0:43:29.360 --> 0:43:31.520
但是软件领域不可能这种东西的

1151
0:43:31.520 --> 0:43:32.440
只有经验

1152
0:43:34.560 --> 0:43:37.760
所以你说拿这种经验的东西去教学

1153
0:43:38.040 --> 0:43:40.560
其实我觉得如果学校里要做的话

1154
0:43:40.560 --> 0:43:42.480
最合理的做法就是学徒制

1155
0:43:42.760 --> 0:43:43.560
就是试图教学

1156
0:43:43.560 --> 0:43:44.520
那得有多少师傅

1157
0:43:45.080 --> 0:43:46.720
没师傅你教不好的

1158
0:43:46.840 --> 0:43:49.400
你只能够让他们去算算工作量

1159
0:43:49.400 --> 0:43:50.760
什幺的

1160
0:43:51.240 --> 0:43:52.640
就干点这种事情

1161
0:43:52.880 --> 0:43:54.920
然后其实我可以值得

1162
0:43:54.960 --> 0:43:56.520
觉得在软件工程这个领域

1163
0:43:56.520 --> 0:43:58.320
还有很多其他的话题可以聊

1164
0:43:58.320 --> 0:43:59.360
反正我先开话题

1165
0:43:59.360 --> 0:44:02.320
咱们到时候再看王老师李俊两位补充

1166
0:44:02.560 --> 0:44:03.760
第一个话题

1167
0:44:03.760 --> 0:44:05.640
就还是从人员神话说起

1168
0:44:06.720 --> 0:44:10.320
其实人员神话里面提到的一个内核观点

1169
0:44:10.760 --> 0:44:14.080
是叫做布鲁克斯法则

1170
0:44:14.680 --> 0:44:15.840
大概的意思就是说

1171
0:44:15.840 --> 0:44:18.480
在一个已经落后的软件项目当中

1172
0:44:18.480 --> 0:44:21.240
增加人手只会让他更加落后

1173
0:44:21.960 --> 0:44:23.480
这个话其实非常经典

1174
0:44:23.480 --> 0:44:26.000
而且所有的做软件开发的

1175
0:44:26.000 --> 0:44:28.320
尤其是项目管理和工程人员

1176
0:44:28.320 --> 0:44:30.520
都特别喜欢拿这个话去教训老板

1177
0:44:31.080 --> 0:44:33.200
因为老板总觉得你都来不及了

1178
0:44:33.200 --> 0:44:34.200
我给你再加点人

1179
0:44:34.200 --> 0:44:35.720
你能不能快点给我做完

1180
0:44:35.880 --> 0:44:38.760
然后就会项目管理

1181
0:44:38.760 --> 0:44:40.640
尤其是项目经理就会拿着去跟老板说

1182
0:44:40.640 --> 0:44:42.560
你有没有听说过布鲁克斯法则

1183
0:44:43.000 --> 0:44:44.200
加人不能够加快的

1184
0:44:44.200 --> 0:44:44.680
好吧

1185
0:44:45.240 --> 0:44:47.480
这个是常用的一种逻辑

1186
0:44:47.480 --> 0:44:49.960
我问一下你实践当中

1187
0:44:49.960 --> 0:44:52.600
有遇到过这样成功说服老板的吗

1188
0:44:54.040 --> 0:44:55.240
我有另外一个经验

1189
0:44:55.520 --> 0:44:59.280
其实这个是在进盛大之前

1190
0:44:59.480 --> 0:45:00.920
的有一家公司

1191
0:45:01.240 --> 0:45:04.280
那个时候我还是刚刚新当项目经理

1192
0:45:05.240 --> 0:45:08.200
然后那个时候我的老板CTO

1193
0:45:08.760 --> 0:45:11.440
对我们非常的他很有经验

1194
0:45:11.560 --> 0:45:13.280
然后就让我估工作量

1195
0:45:13.320 --> 0:45:14.800
我估个两个月

1196
0:45:14.800 --> 0:45:16.360
然后他就说你估两个月

1197
0:45:16.360 --> 0:45:19.560
那就乘二他会帮我乘二

1198
0:45:19.560 --> 0:45:22.000
果然有经验

1199
0:45:22.000 --> 0:45:23.920
对这是非常有经验的这种

1200
0:45:24.200 --> 0:45:24.960
他是干过的

1201
0:45:24.960 --> 0:45:26.440
他知道我太乐观了

1202
0:45:28.440 --> 0:45:30.440
但是反过来很少

1203
0:45:30.440 --> 0:45:32.880
就是说老板要求加急的时候

1204
0:45:32.880 --> 0:45:34.440
我们可能也只能够拼命

1205
0:45:34.960 --> 0:45:36.720
就熬夜拼命

1206
0:45:36.720 --> 0:45:38.880
但是这个时候加新人手

1207
0:45:39.040 --> 0:45:40.320
其实也很少听说

1208
0:45:40.320 --> 0:45:41.280
可能华为有

1209
0:45:41.920 --> 0:45:44.000
华为突然大杠快上的时候说

1210
0:45:44.000 --> 0:45:45.440
我给你调1000个人过来

1211
0:45:45.440 --> 0:45:48.520
这个真的有

1212
0:45:48.520 --> 0:45:50.880
绝对土豪

1213
0:45:50.880 --> 0:45:53.640
就突然有一个公司级的战略级的项目

1214
0:45:54.320 --> 0:45:55.720
加人也是很正常

1215
0:45:56.080 --> 0:45:59.840
但是其实在布鲁克斯的法则里面

1216
0:45:59.840 --> 0:46:00.960
其实说的很清楚

1217
0:46:01.400 --> 0:46:04.520
如果加了新人以后会增加三种代价

1218
0:46:04.520 --> 0:46:06.760
第一个是你工作要重新切分的

1219
0:46:07.600 --> 0:46:09.640
对你本来是5个人干的

1220
0:46:09.640 --> 0:46:10.760
现在变成10个人干

1221
0:46:10.760 --> 0:46:11.920
你得把5个人的活

1222
0:46:11.920 --> 0:46:13.320
另外分成10份

1223
0:46:13.680 --> 0:46:15.160
这是第一类工作量

1224
0:46:15.160 --> 0:46:17.160
第二个工作量就是新人要训练

1225
0:46:18.480 --> 0:46:19.920
你新进来他啥也不懂

1226
0:46:19.920 --> 0:46:21.120
都不知道你原来干了啥

1227
0:46:21.120 --> 0:46:22.600
他进来以后先摸索

1228
0:46:22.600 --> 0:46:24.320
就要一段时间新人训练

1229
0:46:24.320 --> 0:46:27.320
第三个就是相互交流的成本

1230
0:46:30.000 --> 0:46:33.000
你10个人的交流成本和5个人的交流成本

1231
0:46:33.000 --> 0:46:33.880
就不是乘以2

1232
0:46:34.040 --> 0:46:35.440
可能乘以20都不止

1233
0:46:36.000 --> 0:46:37.080
对指数的

1234
0:46:37.080 --> 0:46:38.760
对是一个指数上升的

1235
0:46:39.360 --> 0:46:41.240
但是很有意思的是

1236
0:46:41.240 --> 0:46:43.400
我可以给大家介绍的另外一本书

1237
0:46:43.400 --> 0:46:45.200
就叫做大家同有极致

1238
0:46:46.200 --> 0:46:48.520
就是Eric Raymond

1239
0:46:48.840 --> 0:46:51.120
写的一本关于开源的书

1240
0:46:51.120 --> 0:46:52.160
开源大佬

1241
0:46:52.160 --> 0:46:52.880
对

1242
0:46:53.000 --> 0:46:55.240
他在书里面是这幺写的

1243
0:46:55.240 --> 0:46:57.480
他就说布鲁克斯定律

1244
0:46:57.680 --> 0:47:00.200
定律已经被广泛的视为真理了

1245
0:47:00.280 --> 0:47:04.120
但是其实我们看过Linux的开发以后

1246
0:47:04.600 --> 0:47:08.160
我们就发现开源软件的开发过程

1247
0:47:08.600 --> 0:47:12.040
和定律的实际情况是违背的

1248
0:47:12.040 --> 0:47:15.200
或者说从实践上来看

1249
0:47:15.200 --> 0:47:17.000
如果布鲁克斯定律

1250
0:47:17.000 --> 0:47:20.120
普适于所有的软件开发项目的话

1251
0:47:20.120 --> 0:47:22.000
那幺Linux是不可能完成的

1252
0:47:22.360 --> 0:47:24.280
因为Linux就是几千人

1253
0:47:24.560 --> 0:47:26.200
全世界几千人在开发

1254
0:47:26.240 --> 0:47:27.480
而且没有任何管理

1255
0:47:29.480 --> 0:47:32.680
那幺这个背后到底怎幺回事

1256
0:47:32.920 --> 0:47:36.480
在Eric Raymond的解释里面就是说

1257
0:47:36.920 --> 0:47:37.400
是的

1258
0:47:37.400 --> 0:47:38.840
你布鲁克斯是对的

1259
0:47:38.840 --> 0:47:41.720
就是你只要加人就会增加沟通成本

1260
0:47:41.720 --> 0:47:45.400
但是如果有一个大规模的开发群体

1261
0:47:45.400 --> 0:47:48.000
再加上一个低成本的沟通机制

1262
0:47:48.840 --> 0:47:50.840
其实人越多效率会越高

1263
0:47:51.840 --> 0:47:54.040
这就是开源软件厉害的地方

1264
0:47:55.280 --> 0:47:59.000
所以他才会写叫做大教堂开发模式

1265
0:47:59.000 --> 0:48:00.920
和集市开发模式

1266
0:48:03.360 --> 0:48:04.680
大家谈了开发模式

1267
0:48:04.720 --> 0:48:05.480
你不能加人

1268
0:48:05.480 --> 0:48:08.280
因为人家都已经整个工程队

1269
0:48:08.320 --> 0:48:11.080
整个管理体系一个金字塔都放在那了

1270
0:48:11.080 --> 0:48:13.400
然后你往里加人肯定很难

1271
0:48:13.400 --> 0:48:15.040
但如果你本来就是一个大集市

1272
0:48:15.480 --> 0:48:17.480
呼啦啦再进10个人

1273
0:48:17.480 --> 0:48:19.160
进100个人到这个集市里来

1274
0:48:19.160 --> 0:48:21.000
也只会让这个集市更热闹

1275
0:48:22.400 --> 0:48:26.720
这样开发Linux或者说开发其他的开源

1276
0:48:26.720 --> 0:48:28.360
软件的效率就会上去

1277
0:48:29.480 --> 0:48:31.360
这是一个很有意思的悖论

1278
0:48:32.000 --> 0:48:34.400
王老师你们怎幺看这个事情

1279
0:48:34.400 --> 0:48:35.600
我觉得这不是悖论

1280
0:48:35.600 --> 0:48:38.680
我觉得这是ESR在混淆视听

1281
0:48:38.680 --> 0:48:43.080
并不是因为Linux开源

1282
0:48:43.080 --> 0:48:45.000
所以他就具备了这种能力

1283
0:48:45.000 --> 0:48:46.120
不是的

1284
0:48:46.120 --> 0:48:49.160
我觉得他举的这个问题很容易解释

1285
0:48:49.160 --> 0:48:51.280
根本就不违反布鲁克斯定律

1286
0:48:51.280 --> 0:48:52.480
为什幺呢

1287
0:48:52.480 --> 0:48:54.280
我觉得有两个很大的原因

1288
0:48:54.280 --> 0:48:56.240
第一个原因是Unix哲学

1289
0:48:58.240 --> 0:49:01.200
所有对软件系统有兴趣的朋友

1290
0:49:01.200 --> 0:49:03.800
都应该去了解一下所谓的Unix哲学

1291
0:49:03.800 --> 0:49:05.400
Unix哲学有很多东西

1292
0:49:05.400 --> 0:49:07.320
有人专门总结过9条10条

1293
0:49:07.320 --> 0:49:10.040
但我认为里面最重要的有几条

1294
0:49:10.040 --> 0:49:17.120
比如说他强调每一个进程都要高内聚低偶合

1295
0:49:17.120 --> 0:49:19.840
就是你尽量只做你要做的事情

1296
0:49:19.840 --> 0:49:20.720
并且把它做好

1297
0:49:22.480 --> 0:49:24.520
就降低你跟周边的依赖

1298
0:49:24.520 --> 0:49:26.080
但是你把你要做的事情做得很好

1299
0:49:26.080 --> 0:49:27.040
而且很内聚

1300
0:49:27.040 --> 0:49:28.080
这是第一

1301
0:49:28.080 --> 0:49:31.000
第二就是管道式接口

1302
0:49:31.000 --> 0:49:32.720
就是每一个进程

1303
0:49:32.720 --> 0:49:34.640
它可以读各种各样的输入

1304
0:49:34.640 --> 0:49:38.200
然后把它的结果以标准化的方式输出

1305
0:49:38.200 --> 0:49:41.000
这种输入输出在Unix里面叫管道

1306
0:49:41.000 --> 0:49:42.480
所有东西都是管道

1307
0:49:42.480 --> 0:49:44.880
读写文档的IO是管道

1308
0:49:44.880 --> 0:49:48.200
这个Network就是网络是管道

1309
0:49:48.200 --> 0:49:50.800
然后另一个进程的输入输出也是管道

1310
0:49:50.800 --> 0:49:53.040
这样就很容易可以把不同的工具串起来

1311
0:49:53.040 --> 0:49:55.600
就Unix哲学里面有很多这样的东西

1312
0:49:55.600 --> 0:49:58.720
这都是在60年代最早他们研发Unix的时候

1313
0:49:58.720 --> 0:50:01.680
就已经确立下来一些非常有先见之明

1314
0:50:01.680 --> 0:50:04.080
而且非常优秀的软件架构风格

1315
0:50:04.080 --> 0:50:06.560
因为有这样一些风格

1316
0:50:06.560 --> 0:50:09.040
就使得各自独立开发软件

1317
0:50:09.040 --> 0:50:12.080
并且把它们之间很漂亮的组合起来

1318
0:50:12.080 --> 0:50:13.800
比如你如果用惯了Windows

1319
0:50:13.800 --> 0:50:17.160
你没办法理解在Unix下面做那些事情的逻辑

1320
0:50:17.160 --> 0:50:18.320
比如在Unix下面

1321
0:50:18.320 --> 0:50:23.760
它可以用find这个命令来搜索你想找的一些文档

1322
0:50:23.760 --> 0:50:26.960
然后把它的结果交给grip这个命令

1323
0:50:26.960 --> 0:50:30.560
来去在这个文档里面去搜索你要的字符串

1324
0:50:30.560 --> 0:50:33.840
然后把结果输出到一个文档里面去

1325
0:50:33.840 --> 0:50:35.920
这是几个不同的东西

1326
0:50:35.920 --> 0:50:38.000
然后通过管道把它串起来

1327
0:50:38.000 --> 0:50:40.720
彼此这几个东西之间互相需要了解吗?

1328
0:50:40.720 --> 0:50:41.600
一点都不需要

1329
0:50:41.600 --> 0:50:43.360
你比如说写find这个人

1330
0:50:43.360 --> 0:50:46.160
就把搜文档这件事情做到极致就可以了

1331
0:50:46.160 --> 0:50:50.520
做grip的这个就是把大量的文本里面去查找一个字符串

1332
0:50:50.520 --> 0:50:52.800
这件事情做到极致就行了

1333
0:50:52.800 --> 0:50:58.880
然后文档系统只需要解决文档IO读写词盘的问题就行了

1334
0:50:58.880 --> 0:51:01.040
所以它是一种非常朴素

1335
0:51:01.040 --> 0:51:04.160
但是非常优秀的组件化的概念

1336
0:51:04.160 --> 0:51:06.240
因为有Unix这样的哲学

1337
0:51:06.240 --> 0:51:09.360
所以在Unix基础之上所产生的Linux

1338
0:51:09.360 --> 0:51:14.800
它的分层和它的构建化就先天的创建了一种架构风格

1339
0:51:14.800 --> 0:51:18.640
这种风格有利于分布式的大规模协作

1340
0:51:18.640 --> 0:51:20.880
这是我觉得第一个非常重要的原因

1341
0:51:20.880 --> 0:51:24.720
它实际上恰恰是站在Brooks的很重要的一个理论上

1342
0:51:24.720 --> 0:51:26.080
Brooks讲没有银弹

1343
0:51:26.080 --> 0:51:28.880
他说软件的内核困难在哪里

1344
0:51:28.880 --> 0:51:32.720
其实是理解需求和做好架构设计

1345
0:51:32.720 --> 0:51:37.600
而恰恰这件事情在Linux的内核团队它已经做好了

1346
0:51:37.600 --> 0:51:41.040
然后通过之前Unix几十年的耕耘

1347
0:51:41.040 --> 0:51:44.080
这批人他脑子里面已经印入了Unix哲学

1348
0:51:44.080 --> 0:51:45.280
所以他可以做到这件事情

1349
0:51:45.280 --> 0:51:50.800
第二个很多很多的复杂的辛苦的脏活累活

1350
0:51:50.800 --> 0:51:51.920
谁在干呢

1351
0:51:51.920 --> 0:51:56.400
是Linux的包管理的那部分人他们在做这事

1352
0:51:56.400 --> 0:51:59.520
这个工作量是非常大的

1353
0:51:59.520 --> 0:52:03.840
你像Debian就是GNU的Linux的发布包

1354
0:52:03.840 --> 0:52:07.280
包括什幺Ubuntu都是在技术上做的

1355
0:52:07.280 --> 0:52:12.000
他们的社区的参与人员是非常多的

1356
0:52:12.000 --> 0:52:13.200
就是维护那些包的

1357
0:52:13.200 --> 0:52:15.520
然后他还有在这个人里面

1358
0:52:15.520 --> 0:52:19.040
他有一个几百人的团队做包之间的依赖关系

1359
0:52:19.040 --> 0:52:20.160
还有这些东西的管理

1360
0:52:20.160 --> 0:52:22.560
这帮人的工作是挺辛苦的

1361
0:52:22.560 --> 0:52:24.720
我经常看到那个邮件列表里面有人吐槽

1362
0:52:24.720 --> 0:52:25.600
有人发牢骚

1363
0:52:25.600 --> 0:52:28.160
说什幺搞的什幺鬼

1364
0:52:28.160 --> 0:52:31.360
害得我们几十个包都要重购等等

1365
0:52:31.360 --> 0:52:34.320
这部分工作其实仍然逃不掉的

1366
0:52:34.320 --> 0:52:38.880
他并不是说大家各干各的就没事了

1367
0:52:38.880 --> 0:52:39.360
不是的

1368
0:52:39.360 --> 0:52:41.600
就是有一批人在专门做Distro的这批人

1369
0:52:41.600 --> 0:52:44.080
在很辛苦的去做捏合起来的事情

1370
0:52:44.080 --> 0:52:48.800
所以就是软件开发的内核困难

1371
0:52:48.800 --> 0:52:52.240
至今为止仍然没有太大的解决

1372
0:52:52.240 --> 0:52:56.080
解决它的方案仍然是要有非常良好的设计思想

1373
0:52:56.080 --> 0:52:57.360
和非常良好的架构

1374
0:52:57.360 --> 0:53:00.960
我对所谓集市开发模式

1375
0:53:00.960 --> 0:53:03.760
当然它里面也有一些东西是有价值的

1376
0:53:03.760 --> 0:53:06.320
你比如说开源软件里面

1377
0:53:06.320 --> 0:53:09.520
比如像Git本身就提供了一些

1378
0:53:09.520 --> 0:53:12.720
大规模协作开发里面很便利的工具

1379
0:53:12.720 --> 0:53:16.560
但这些东西也是要有人正确的去使用它的

1380
0:53:16.560 --> 0:53:19.520
比如Git同时提供了rebase

1381
0:53:19.520 --> 0:53:22.320
rebase用不好的人太多了

1382
0:53:22.320 --> 0:53:25.920
rebase用不好的人简直就是一个团队里面的炸弹

1383
0:53:25.920 --> 0:53:27.200
对不对

1384
0:53:27.200 --> 0:53:30.800
它一炸就能把你整个这个repo都炸掉

1385
0:53:30.800 --> 0:53:32.320
这种非常有破坏性的

1386
0:53:32.320 --> 0:53:36.400
好 但是完全可能你完全不用rebase

1387
0:53:36.400 --> 0:53:38.480
所有的这些事情都用分叉

1388
0:53:38.480 --> 0:53:39.760
都用branch来解决

1389
0:53:39.760 --> 0:53:42.080
你可以一点都不用rebase

1390
0:53:42.080 --> 0:53:43.920
你发现你之前的某个不行了

1391
0:53:43.920 --> 0:53:44.480
你就分叉了

1392
0:53:44.480 --> 0:53:46.640
然后后面再去merge

1393
0:53:46.640 --> 0:53:48.960
这是两种不同的风格

1394
0:53:48.960 --> 0:53:50.880
但这种风格各有利弊了

1395
0:53:50.880 --> 0:53:52.800
如果你不掌握它的方法

1396
0:53:52.800 --> 0:53:54.080
你掌握的不正确的话

1397
0:53:54.080 --> 0:53:55.600
你都可以把它整死

1398
0:53:55.600 --> 0:53:59.520
比如说Git跟以前SVN相比

1399
0:53:59.520 --> 0:54:01.120
有一个非常大的前进

1400
0:54:01.120 --> 0:54:02.000
一个进步

1401
0:54:02.000 --> 0:54:06.000
它把branch的成本降到非常低了

1402
0:54:06.000 --> 0:54:08.400
以前SVN里面你branch一下

1403
0:54:08.400 --> 0:54:10.560
相当于整个repo要克隆

1404
0:54:10.560 --> 0:54:13.360
你的磁盘的占用量就要double

1405
0:54:13.360 --> 0:54:15.280
然后你merge一次

1406
0:54:15.280 --> 0:54:16.960
就是大量的磁盘读写操作

1407
0:54:16.960 --> 0:54:19.280
但是在Git里面通过一个很巧妙的

1408
0:54:19.280 --> 0:54:20.960
存储结构的设计

1409
0:54:20.960 --> 0:54:22.240
这些事情都被解决了

1410
0:54:22.240 --> 0:54:23.840
branch非常轻量级

1411
0:54:23.840 --> 0:54:25.280
merge非常快速

1412
0:54:25.280 --> 0:54:28.240
但是这些工具很方便很好用

1413
0:54:28.240 --> 0:54:30.480
但不会用的话仍然可以干坏事

1414
0:54:30.480 --> 0:54:34.880
所以最终我觉得可能是

1415
0:54:34.880 --> 0:54:37.600
这个Erik Riemann

1416
0:54:37.600 --> 0:54:39.360
他周围的人素质都还是比较好的

1417
0:54:39.360 --> 0:54:41.920
就好像那批搞敏捷开发的人

1418
0:54:41.920 --> 0:54:44.080
他们会觉得敏捷开发是唯一正确的

1419
0:54:44.080 --> 0:54:45.680
软件工程方法

1420
0:54:45.680 --> 0:54:48.560
但是实际上我认为这个世界上

1421
0:54:48.560 --> 0:54:51.440
现存的70%-80%的软件工程师

1422
0:54:51.440 --> 0:54:55.280
是没有能力去真正实践敏捷开发的

1423
0:54:55.280 --> 0:54:56.960
他受能力限制的

1424
0:54:56.960 --> 0:54:59.440
我说一下

1425
0:54:59.440 --> 0:55:02.000
对 即时开发模式我觉得挺好

1426
0:55:02.000 --> 0:55:03.840
但它对人确实是有要求的

1427
0:55:03.840 --> 0:55:05.600
而且有些工作仍然逃不掉

1428
0:55:05.600 --> 0:55:06.560
这是我的结论

1429
0:55:06.560 --> 0:55:07.600
好

1430
0:55:07.600 --> 0:55:11.440
我说一下我对即时开发模式的看法

1431
0:55:11.440 --> 0:55:15.520
其实Erik Riemann在讲Linux的

1432
0:55:15.520 --> 0:55:16.240
所有好处

1433
0:55:16.240 --> 0:55:18.720
讲开源软件开发的所有好处的时候

1434
0:55:18.720 --> 0:55:21.440
他漏掉了一个重点

1435
0:55:21.440 --> 0:55:26.480
这个重点是跟企业软件开发最大的区别

1436
0:55:26.480 --> 0:55:32.080
企业软件开发老板不可能容忍

1437
0:55:32.080 --> 0:55:34.880
说我这个项目绝大多数的工作

1438
0:55:34.880 --> 0:55:36.800
是一个进程员做的

1439
0:55:36.800 --> 0:55:39.680
然后剩下的人只是做5%

1440
0:55:39.680 --> 0:55:43.440
甚至1%的工作

1441
0:55:43.440 --> 0:55:46.960
他既然花了钱把这些人请到公司里来

1442
0:55:46.960 --> 0:55:49.200
这些人他都得用足的

1443
0:55:49.200 --> 0:55:53.680
但是开源软件之所以还能那幺

1444
0:55:53.680 --> 0:55:56.240
轻松愉快的把它做出来

1445
0:55:56.240 --> 0:55:58.560
有一个很重要的原因是因为

1446
0:55:58.560 --> 0:56:00.720
其实大家都不着急

1447
0:56:00.720 --> 0:56:04.560
而且很多人就说我不负责这些东西

1448
0:56:04.560 --> 0:56:06.640
我只管把代码提交上去

1449
0:56:06.640 --> 0:56:07.680
有人磨解

1450
0:56:07.680 --> 0:56:11.360
有人去帮我Codereview

1451
0:56:11.360 --> 0:56:12.240
就结束了

1452
0:56:12.240 --> 0:56:15.440
而且的话工作量

1453
0:56:15.440 --> 0:56:18.160
就80%的工作可能只20%

1454
0:56:18.160 --> 0:56:20.240
甚至还不仅仅不是二八原则

1455
0:56:20.240 --> 0:56:23.520
甚至是一个更极端的原则

1456
0:56:23.520 --> 0:56:27.120
一个比例把所有的活给干了

1457
0:56:27.120 --> 0:56:30.160
看上去是一个几千人的大团队

1458
0:56:30.160 --> 0:56:33.280
但是这几千人当中真正

1459
0:56:33.280 --> 0:56:35.520
每天都提交代码的人

1460
0:56:35.520 --> 0:56:37.680
可能也就几十个

1461
0:56:37.680 --> 0:56:41.200
但是对于一家公司来说

1462
0:56:41.200 --> 0:56:42.800
我养个2000人的团队

1463
0:56:42.800 --> 0:56:46.240
这2000人当中有1500个人

1464
0:56:46.240 --> 0:56:48.640
甚至有1580个人

1465
0:56:48.640 --> 0:56:51.120
每天都只提交一行代码

1466
0:56:51.120 --> 0:56:53.120
甚至不提交代码

1467
0:56:53.120 --> 0:56:54.080
怎幺可能

1468
0:56:54.080 --> 0:56:57.840
老板怎幺可能给他们发工资

1469
0:56:57.840 --> 0:57:02.480
这个恰恰是企业开发模式和

1470
0:57:02.480 --> 0:57:05.520
集市开发模式最大的区别

1471
0:57:05.520 --> 0:57:10.320
老板不可能养闲人

1472
0:57:10.320 --> 0:57:12.560
而且还有一个我觉得也挺重要的

1473
0:57:12.560 --> 0:57:14.400
就是开源软件

1474
0:57:14.400 --> 0:57:18.560
大部分都是每一个成功的开源软件

1475
0:57:18.560 --> 0:57:21.120
背后都有一个灵魂人物

1476
0:57:21.120 --> 0:57:23.760
这个灵魂人物是真的爱这个软件

1477
0:57:23.760 --> 0:57:27.200
或者他真的有强烈的责任感

1478
0:57:27.200 --> 0:57:29.520
要把它维护好

1479
0:57:29.520 --> 0:57:33.120
他是底线支撑

1480
0:57:33.120 --> 0:57:35.920
那幺其他的协作反而就更容易做了

1481
0:57:35.920 --> 0:57:37.680
因为反正有人保底了

1482
0:57:37.680 --> 0:57:38.880
那幺那些就是锦上添花

1483
0:57:38.880 --> 0:57:40.640
就是永远它是正向的

1484
0:57:40.640 --> 0:57:45.040
它不会对有太大的负面危害

1485
0:57:45.040 --> 0:57:46.640
企业软件开发确实

1486
0:57:46.640 --> 0:57:48.800
而且时间要求上也高太多了

1487
0:57:48.800 --> 0:57:51.360
就是开源软件里面动不动一个bug

1488
0:57:51.360 --> 0:57:53.280
如果不是特别critical的话

1489
0:57:53.280 --> 0:57:57.840
放几年很正常的

1490
0:57:57.840 --> 0:58:00.640
就是一个比较少的场景碰到的

1491
0:58:00.640 --> 0:58:01.920
几年都不动

1492
0:58:01.920 --> 0:58:03.520
我前一阵子看

1493
0:58:03.520 --> 0:58:08.800
因为我在我用的emacs上面有一个包

1494
0:58:08.800 --> 0:58:10.800
也是很古老的包了

1495
0:58:10.800 --> 0:58:15.520
大概有15年以上的一个bug被我碰到了

1496
0:58:15.520 --> 0:58:19.680
然后我就去盯着维护者发issue

1497
0:58:19.680 --> 0:58:20.880
催了他好多次

1498
0:58:20.880 --> 0:58:22.240
然后修了15年了

1499
0:58:22.240 --> 0:58:25.200
他肯定很郁闷

1500
0:58:25.200 --> 0:58:26.880
为啥你不把它修掉

1501
0:58:26.880 --> 0:58:28.000
还要盯着他来修

1502
0:58:28.000 --> 0:58:29.120
没有我跟他说

1503
0:58:29.120 --> 0:58:30.240
我如果可以的话

1504
0:58:30.240 --> 0:58:32.560
我也可以发一个PR给他

1505
0:58:32.560 --> 0:58:35.280
但是我说肯定他来修会更快一些

1506
0:58:35.280 --> 0:58:37.360
后面他就修了

1507
0:58:37.360 --> 0:58:38.800
本身不大那个问题

1508
0:58:38.800 --> 0:58:40.800
不是特别麻烦的一个问题

1509
0:58:40.800 --> 0:58:43.280
我接着讨论下一个话题

1510
0:58:43.280 --> 0:58:44.960
这个其实也是老话题

1511
0:58:44.960 --> 0:58:47.360
因为刚才其实我们不自觉的

1512
0:58:47.360 --> 0:58:49.520
就会绕不开的提到它

1513
0:58:49.520 --> 0:58:51.360
就是关于敏捷的问题

1514
0:58:51.360 --> 0:58:55.840
在我们做进程员的这幺多年来

1515
0:58:55.840 --> 0:58:59.360
其实一直以来是生活在这样一个场域里面的

1516
0:58:59.360 --> 0:59:02.080
甚至到现在为止都还是如此

1517
0:59:02.080 --> 0:59:04.000
敏捷就是好

1518
0:59:04.000 --> 0:59:06.160
然后CMM就是坏

1519
0:59:06.160 --> 0:59:09.680
CMM代表了瀑布式

1520
0:59:09.680 --> 0:59:10.240
对

1521
0:59:10.240 --> 0:59:13.520
其实CMM并不等于瀑布式

1522
0:59:13.520 --> 0:59:15.360
这个其实是一个很大的误解

1523
0:59:15.360 --> 0:59:16.880
对

1524
0:59:16.880 --> 0:59:21.280
而且CMM就等于沉重的流程

1525
0:59:21.280 --> 0:59:22.960
就等于官僚体系

1526
0:59:22.960 --> 0:59:25.200
就等于浪费时间

1527
0:59:25.200 --> 0:59:26.960
就等于愚蠢

1528
0:59:26.960 --> 0:59:28.400
甚至等于愚蠢

1529
0:59:28.400 --> 0:59:31.520
这是一个很有意思的一个

1530
0:59:31.520 --> 0:59:34.000
怎幺说呢

1531
0:59:34.000 --> 0:59:37.600
这个行业已经被敏捷的一堆朋友

1532
0:59:37.600 --> 0:59:39.760
因为我跟他们都很熟

1533
0:59:39.760 --> 0:59:40.880
他们做敏捷

1534
0:59:40.880 --> 0:59:42.080
帮助consultant的

1535
0:59:42.080 --> 0:59:42.720
对

1536
0:59:42.720 --> 0:59:45.360
他们就会传递这样的信念

1537
0:59:45.360 --> 0:59:47.760
而在我看来

1538
0:59:47.760 --> 0:59:49.680
其实我后来

1539
0:59:49.680 --> 0:59:52.560
真二八紧的去了解了一下CMM

1540
0:59:52.560 --> 0:59:54.160
我觉得人家讲的挺好的

1541
0:59:54.160 --> 0:59:58.080
它的所谓的能力成熟度模型

1542
0:59:58.080 --> 1:00:00.640
它其实在讲的是一个组织

1543
1:00:00.640 --> 1:00:03.280
一个研发团队是怎幺进化的

1544
1:00:03.280 --> 1:00:04.960
从一开始的时候

1545
1:00:04.960 --> 1:00:08.720
你要把你的工作给规范起来

1546
1:00:08.720 --> 1:00:13.040
你要变得严格的能够去执行正确的过程

1547
1:00:13.040 --> 1:00:17.120
然后这个过程有标准可定义

1548
1:00:17.120 --> 1:00:19.280
最后还要能够持续改善

1549
1:00:19.280 --> 1:00:21.360
具体的每一集我不说

1550
1:00:21.360 --> 1:00:22.720
它是一个

1551
1:00:22.720 --> 1:00:25.840
我觉得是一个很好的实践模型

1552
1:00:25.840 --> 1:00:29.360
不管你做任何的工作

1553
1:00:29.360 --> 1:00:31.440
甚至不是说软件开发

1554
1:00:31.440 --> 1:00:34.800
你只要是有一堆的第一步

1555
1:00:34.800 --> 1:00:37.040
第二步和第三步这样的定义

1556
1:00:37.040 --> 1:00:38.400
有一个过程的

1557
1:00:38.400 --> 1:00:42.160
其实就一定会存在一个叫做过程的成熟度

1558
1:00:42.160 --> 1:00:44.160
而且一定会回过头来

1559
1:00:44.160 --> 1:00:47.440
你要去看我怎幺样持续的改善这个过程

1560
1:00:47.440 --> 1:00:49.920
所以我其实很好奇

1561
1:00:49.920 --> 1:00:52.720
这个CMM是如何被黑化的

1562
1:00:52.720 --> 1:00:54.160
我跟你说

1563
1:00:54.160 --> 1:00:58.800
我可能是国内最早参与这个的人之一了

1564
1:00:58.800 --> 1:01:02.560
我当年创我们那个创业公司

1565
1:01:02.560 --> 1:01:03.680
是零几年

1566
1:01:03.680 --> 1:01:05.440
零四到零五年

1567
1:01:05.440 --> 1:01:07.760
因为那个时候我们做政府的项目比较多

1568
1:01:07.760 --> 1:01:10.880
然后政府招标那个时候开始

1569
1:01:10.880 --> 1:01:12.800
刚刚开始实行

1570
1:01:12.800 --> 1:01:17.360
把CMM作为附加条件之一放进去

1571
1:01:17.360 --> 1:01:23.440
所以我们当时是广州市最早一批拿到CMM三级认证的

1572
1:01:23.440 --> 1:01:25.040
那个时候还没有CMMi

1573
1:01:25.040 --> 1:01:26.400
是以CMM为主

1574
1:01:26.400 --> 1:01:27.280
就是三级

1575
1:01:27.280 --> 1:01:28.640
四级就很高很高了

1576
1:01:28.640 --> 1:01:32.160
当时国内有四级的就那幺几家东软啊什幺之类的

1577
1:01:32.160 --> 1:01:34.400
所以我们当时拿三级挺早的

1578
1:01:34.400 --> 1:01:34.960
好

1579
1:01:34.960 --> 1:01:39.120
我的理解我分两部分来回答刚才老庄说这个问题

1580
1:01:39.120 --> 1:01:41.120
第一个就是CMM到底是什幺

1581
1:01:41.120 --> 1:01:44.320
CMM其实跟具体流程没关系的

1582
1:01:44.320 --> 1:01:47.120
它可以兼容不同的流程

1583
1:01:47.120 --> 1:01:51.360
CMM更多的是对组织的能力提出的一个要求

1584
1:01:51.360 --> 1:01:53.520
比如说他要求你一定要创建一个委员会

1585
1:01:53.520 --> 1:01:56.800
这个委员会专门关注组织内的流程改进

1586
1:01:56.800 --> 1:01:59.840
至于这个流程应该怎幺做改进成啥样

1587
1:01:59.840 --> 1:02:01.600
这不是他关注的领域

1588
1:02:01.600 --> 1:02:03.520
当然他有一些参考模型了

1589
1:02:03.520 --> 1:02:06.080
但是他不会说你一定要走这个流程才是正确的

1590
1:02:06.080 --> 1:02:10.880
他强调的是你要从哪几个指标上去分析你的流程好还是不好

1591
1:02:10.880 --> 1:02:14.400
然后这些指标如果不好的话你要持续改进

1592
1:02:14.400 --> 1:02:15.680
当你要改进的时候

1593
1:02:15.680 --> 1:02:19.120
你这个委员会跟生产部门应该如何协调

1594
1:02:19.120 --> 1:02:21.520
所以他会要求你必须是你的

1595
1:02:21.520 --> 1:02:23.760
你的组织里面必须得有一个人

1596
1:02:23.760 --> 1:02:27.520
这个人相当于我们经常说的叫做工程副总

1597
1:02:27.520 --> 1:02:29.680
就是engineering VP

1598
1:02:29.680 --> 1:02:31.680
他得是公司的高管层级

1599
1:02:31.680 --> 1:02:34.320
然后他是负责所有跟工程有关的管理的

1600
1:02:34.320 --> 1:02:35.920
很多公司里不够大的公司

1601
1:02:35.920 --> 1:02:38.160
这个就可能跟技术的副总是一个人了

1602
1:02:38.160 --> 1:02:41.360
但大点的公司可能CTO跟这个工程的副总就会分开

1603
1:02:41.360 --> 1:02:42.960
但不管怎幺样得有这幺一个人

1604
1:02:42.960 --> 1:02:45.840
他跟技术的那个老大得是平级的

1605
1:02:45.840 --> 1:02:47.520
然后由这个人来做

1606
1:02:47.520 --> 1:02:50.960
他一定要是工程改进委员会里面的重要角色

1607
1:02:50.960 --> 1:02:54.400
理想情况下最好CEO来做这个工程改进的老大

1608
1:02:54.400 --> 1:02:56.880
如果实在不行的话至少得有一个有公信力的人

1609
1:02:56.880 --> 1:02:58.480
他的规定是这样的一些东西

1610
1:02:58.480 --> 1:03:00.560
就是他要关注的是

1611
1:03:00.560 --> 1:03:03.920
你的过程长期处于有问题的情况下没人关注

1612
1:03:03.920 --> 1:03:06.240
或者有人关注了难以改进

1613
1:03:06.240 --> 1:03:08.800
他其实重点是要解决这种问题

1614
1:03:08.800 --> 1:03:12.240
好 还有一些问题是跟过程无关的

1615
1:03:12.240 --> 1:03:13.200
是跟结果有关的

1616
1:03:13.200 --> 1:03:15.920
就是你的结果的可信度

1617
1:03:15.920 --> 1:03:18.720
就是你怎幺验证你的软件产品

1618
1:03:18.720 --> 1:03:20.720
它的结果是好的

1619
1:03:20.720 --> 1:03:23.120
你实现功能就够了吗

1620
1:03:23.120 --> 1:03:23.680
不是

1621
1:03:23.680 --> 1:03:26.800
他还必须提供相应的过程文档

1622
1:03:26.800 --> 1:03:33.040
这些过程文档才是也是你的软件交付物和品质的一部分

1623
1:03:33.040 --> 1:03:35.200
这些都是对的对不对

1624
1:03:35.200 --> 1:03:38.160
所以而且这些东西几乎不可能错

1625
1:03:38.160 --> 1:03:41.680
就是跟你什幺这个瀑布式跟什幺敏捷关系不大

1626
1:03:41.680 --> 1:03:44.800
他其实关注的是你整个管理体系

1627
1:03:44.800 --> 1:03:47.040
以及你这个体系里面的员工

1628
1:03:47.040 --> 1:03:49.600
他的能力是不是能逐步逐步的提升

1629
1:03:49.600 --> 1:03:51.920
并且不断的越来越成熟

1630
1:03:51.920 --> 1:03:53.920
这是一个很好的东西没有问题

1631
1:03:53.920 --> 1:03:57.280
好 然后是第二个方面的回答

1632
1:03:57.280 --> 1:03:59.840
就是它是怎幺成为现在这个德性的

1633
1:03:59.840 --> 1:04:05.600
很简单就是咨询公司要赚钱

1634
1:04:05.600 --> 1:04:09.840
而咨询公司赚钱的方法

1635
1:04:09.840 --> 1:04:14.720
你说的是CMM的咨询公司还是敏捷的咨询公司

1636
1:04:14.720 --> 1:04:18.000
其实不一定是敏捷

1637
1:04:18.000 --> 1:04:19.040
那个时候还没有敏捷

1638
1:04:19.040 --> 1:04:20.000
我做的时候还没有敏捷

1639
1:04:20.000 --> 1:04:20.800
对对对

1640
1:04:20.800 --> 1:04:24.400
我做的时候他们贩卖的就是IOP的那一套

1641
1:04:24.400 --> 1:04:27.040
Unified Process统一过程

1642
1:04:27.040 --> 1:04:30.960
统一过程是创建在瀑布模型之上的

1643
1:04:30.960 --> 1:04:36.640
但其实它里面的主要部分你搬到敏捷也没问题

1644
1:04:36.640 --> 1:04:40.160
因为它强调的是比如需求的管理

1645
1:04:40.160 --> 1:04:43.040
比如质量的评估

1646
1:04:43.040 --> 1:04:46.240
然后以及这个过程当中分解成若干子过程之后

1647
1:04:46.240 --> 1:04:48.080
每个过程要交付哪些文档

1648
1:04:48.080 --> 1:04:50.400
那敏捷它也有这一套东西

1649
1:04:50.400 --> 1:04:52.240
只不过它的文档交付

1650
1:04:52.240 --> 1:04:54.480
它的流程它是另外一套体系

1651
1:04:54.480 --> 1:04:56.400
比如敏捷可能会有人跟你说

1652
1:04:56.400 --> 1:04:59.120
你不需要交付这个详细设计文档

1653
1:04:59.120 --> 1:05:01.200
因为你可以用代码来代替它

1654
1:05:01.200 --> 1:05:02.560
是吧

1655
1:05:02.560 --> 1:05:04.480
但是敏捷会告诉你说

1656
1:05:04.480 --> 1:05:06.160
你不需要任何需求文档

1657
1:05:06.160 --> 1:05:07.280
会吗?不会的

1658
1:05:07.280 --> 1:05:09.840
敏捷要求有非常好的需求文档

1659
1:05:09.840 --> 1:05:13.680
所以它实际上只是在这种层面上有一些改进

1660
1:05:13.680 --> 1:05:16.880
那幺内核的部分其实都是那些

1661
1:05:16.880 --> 1:05:19.440
好,那这些咨询公司

1662
1:05:19.440 --> 1:05:22.640
当他们要去做这件事情的时候

1663
1:05:22.640 --> 1:05:24.160
他们就非

1664
1:05:24.160 --> 1:05:29.920
因为他们很难参与到公司的深刻的组织架构的里面去

1665
1:05:29.920 --> 1:05:33.280
那你整个组织的优化只能交给公司自己去做

1666
1:05:33.280 --> 1:05:34.480
那他们做什幺呢

1667
1:05:34.480 --> 1:05:36.560
就是给你很多很多的文档模板

1668
1:05:36.560 --> 1:05:37.360
是吧

1669
1:05:37.360 --> 1:05:38.640
给你一套

1670
1:05:38.640 --> 1:05:39.680
对

1671
1:05:39.680 --> 1:05:41.200
它就要求你

1672
1:05:41.200 --> 1:05:43.520
执行一个很

1673
1:05:43.520 --> 1:05:46.080
相对比较固定的流程

1674
1:05:46.080 --> 1:05:49.120
然后这流程里面去产出相应的文档

1675
1:05:49.120 --> 1:05:51.440
然后拿这个文档去做认证

1676
1:05:51.440 --> 1:05:53.120
认证通过了再给甲方看

1677
1:05:53.120 --> 1:05:54.560
你看我们认证通过了

1678
1:05:54.560 --> 1:05:57.920
我们做你的项目会给你提供这幺多漂亮的文档

1679
1:05:57.920 --> 1:06:01.600
它成了一个这样的商业的逻辑

1680
1:06:01.600 --> 1:06:05.440
但其实这些东西在我看来它是本末倒置了嘛

1681
1:06:05.440 --> 1:06:07.280
就是

1682
1:06:07.280 --> 1:06:11.280
你这种文档的格式其实是相对灵活的

1683
1:06:11.280 --> 1:06:14.400
而你这个流程里面也有相当的一些节点

1684
1:06:14.400 --> 1:06:16.320
是可以简化或者跳过的

1685
1:06:16.320 --> 1:06:17.520
但是你要抓重点

1686
1:06:17.520 --> 1:06:18.400
怎幺抓重点呢

1687
1:06:18.400 --> 1:06:21.440
还是要回到你这个公司做的主业业务是什幺

1688
1:06:21.440 --> 1:06:23.600
你的员工的能力水平怎幺样

1689
1:06:23.600 --> 1:06:26.240
你在现有基础之上主要的改进目标是啥

1690
1:06:26.240 --> 1:06:28.800
比如说我们当时的问题是

1691
1:06:28.800 --> 1:06:32.480
我们认为这个需求变更是我们最大的问题

1692
1:06:32.480 --> 1:06:34.880
那我们就要在需求变更上做更多的事情

1693
1:06:34.880 --> 1:06:38.480
尤其跟甲方之间交互的一些东西要做得更严格一些

1694
1:06:38.480 --> 1:06:40.640
这是所有做2B的生意的人

1695
1:06:40.640 --> 1:06:43.280
都会去面临的一个问题

1696
1:06:43.280 --> 1:06:44.960
那这些就要重点去做了

1697
1:06:44.960 --> 1:06:47.360
但有些东西可能就没有那幺重要

1698
1:06:47.360 --> 1:06:49.680
所以这里面就涉及到很多灵活的东西

1699
1:06:49.680 --> 1:06:54.720
那这些都是咨询公司它没办法参与也不关注的

1700
1:06:54.720 --> 1:06:56.720
好最后就给大家一个感觉就是

1701
1:06:56.720 --> 1:06:58.880
做CMM就是拿认证

1702
1:06:58.880 --> 1:07:03.520
拿认证的方法就是大量的文读工作

1703
1:07:03.520 --> 1:07:06.160
它变成了这幺一个逻辑了

1704
1:07:06.160 --> 1:07:09.120
所以等到敏捷宣言出来的时候

1705
1:07:09.120 --> 1:07:13.920
能够工作的软件要比详尽的文档重要

1706
1:07:13.920 --> 1:07:17.680
那幺做进程员的朋友们一听就说那当然

1707
1:07:17.680 --> 1:07:20.000
对这就有点像什幺呢

1708
1:07:20.000 --> 1:07:25.040
就有点像我们现在防疫面临的情况

1709
1:07:25.040 --> 1:07:27.520
就是我上次看到一个哥们讲了这句话笑死我了

1710
1:07:27.520 --> 1:07:31.040
他说过去两年多大家都受尽了防疫的苦

1711
1:07:31.040 --> 1:07:36.080
接下来该受一受疫情本身的苦了平衡一下

1712
1:07:36.080 --> 1:07:39.600
就是之前大家都觉得软件工程是一个很枯燥的

1713
1:07:39.600 --> 1:07:41.440
大量文读工作的这个东西

1714
1:07:41.440 --> 1:07:43.600
然后当敏捷出来大家就认为

1715
1:07:43.600 --> 1:07:46.640
就把他心目中痛恨的东西的反面

1716
1:07:46.640 --> 1:07:50.160
就人为的就立刻就跟敏捷挂钩了

1717
1:07:50.160 --> 1:07:52.320
比如说敏捷就是不用开会

1718
1:07:52.320 --> 1:07:53.920
不写文档

1719
1:07:53.920 --> 1:07:55.360
流程自由

1720
1:07:55.360 --> 1:07:56.400
是吧

1721
1:07:56.400 --> 1:07:59.040
就是他因为这个之前

1722
1:07:59.040 --> 1:08:01.840
工程里面很多东西让他觉得不舒服的地方

1723
1:08:01.840 --> 1:08:02.880
麻烦的地方

1724
1:08:02.880 --> 1:08:04.240
他就把它抛弃掉

1725
1:08:04.240 --> 1:08:06.000
然后都认为这是敏捷带来的

1726
1:08:06.000 --> 1:08:09.920
其实其实敏捷他的本质也不完全是这些东西

1727
1:08:09.920 --> 1:08:10.800
敏捷不开会吗

1728
1:08:10.800 --> 1:08:11.840
敏捷要经常开会

1729
1:08:11.840 --> 1:08:12.960
每天晨会

1730
1:08:12.960 --> 1:08:15.360
站在一站站一个小时很正常

1731
1:08:15.360 --> 1:08:16.400
是吧

1732
1:08:16.400 --> 1:08:18.240
敏捷不需要文档吗

1733
1:08:18.240 --> 1:08:19.760
是很多文档可以不用写

1734
1:08:19.760 --> 1:08:21.680
但你代码要写的特别好呀

1735
1:08:21.680 --> 1:08:23.680
你的代码要特别可读

1736
1:08:23.680 --> 1:08:26.560
然后它里面就蕴含了很多设计的结构在里面

1737
1:08:26.560 --> 1:08:28.480
这样的代码才能省掉文档

1738
1:08:28.480 --> 1:08:30.640
但很多人写不出这样的代码

1739
1:08:30.640 --> 1:08:32.000
咋办呢

1740
1:08:32.000 --> 1:08:36.160
比如说敏捷他强调自测试

1741
1:08:36.160 --> 1:08:40.160
很多人就故意把敏捷的自测试这块就选择性无视了

1742
1:08:40.160 --> 1:08:42.320
我要敏捷的那些东西

1743
1:08:42.320 --> 1:08:44.720
但是我不愿意写自己的Unitest

1744
1:08:44.720 --> 1:08:46.720
那就没有意义吗

1745
1:08:46.720 --> 1:08:47.520
对呀

1746
1:08:47.520 --> 1:08:49.360
如果你不写自己的Unitest的话

1747
1:08:49.360 --> 1:08:51.440
敏捷很多前提条件就不存在了

1748
1:08:51.440 --> 1:08:56.400
你很可能敏捷是通过写Unitest来证明你懂了需求

1749
1:08:56.400 --> 1:08:59.280
你如果Unitest没写对的话

1750
1:08:59.280 --> 1:09:00.560
说明你对需求理解就不对

1751
1:09:00.560 --> 1:09:04.000
而Unitest就是你跟需求方之间的一个接口

1752
1:09:04.000 --> 1:09:06.960
结果他觉得我不写Unitest

1753
1:09:06.960 --> 1:09:13.200
或者我直接就是一个空的能够瞒过集成系统的一个假的Unitest

1754
1:09:13.200 --> 1:09:14.480
我就认为他OK了

1755
1:09:14.480 --> 1:09:15.440
很多人这幺干的

1756
1:09:15.440 --> 1:09:16.240
对

1757
1:09:16.240 --> 1:09:17.680
那你还敏捷个头

1758
1:09:17.680 --> 1:09:22.320
所以这个就我觉得是人性问题

1759
1:09:22.320 --> 1:09:26.960
其实我自己感觉

1760
1:09:26.960 --> 1:09:32.080
敏捷跟CMM一个很大的区别

1761
1:09:32.080 --> 1:09:37.440
就是敏捷更关注于开发技术本身

1762
1:09:37.440 --> 1:09:42.320
就是比如说持续集成

1763
1:09:42.320 --> 1:09:43.840
测试机动开发

1764
1:09:43.840 --> 1:09:46.160
然后重构

1765
1:09:46.160 --> 1:09:47.440
工程的一些工具

1766
1:09:47.440 --> 1:09:48.720
他们很强调

1767
1:09:48.720 --> 1:09:50.000
对

1768
1:09:50.000 --> 1:09:54.080
这些东西确实会更加的对进程员的胃口

1769
1:09:54.080 --> 1:09:58.160
就是CMM这种东西比较对老板的胃口

1770
1:09:58.160 --> 1:10:03.040
但是敏捷的东西比较对进程员的胃口

1771
1:10:03.040 --> 1:10:05.600
对

1772
1:10:05.600 --> 1:10:06.880
自动测试

1773
1:10:06.880 --> 1:10:08.400
持续集成

1774
1:10:08.400 --> 1:10:12.000
这些东西怎幺说呢

1775
1:10:12.000 --> 1:10:13.280
就是在今天这个时代

1776
1:10:13.280 --> 1:10:15.840
对于一个有一点技术背景

1777
1:10:15.840 --> 1:10:21.600
或者说在管理团队里有比较强技术背景的人存在的情况下

1778
1:10:21.600 --> 1:10:23.520
老板们也会很喜欢

1779
1:10:23.520 --> 1:10:24.800
是吧

1780
1:10:24.800 --> 1:10:26.080
就假设

1781
1:10:26.080 --> 1:10:28.640
你这个持续集成做得很好

1782
1:10:28.640 --> 1:10:32.480
每天或者是隔天能够有持续集成报告

1783
1:10:32.480 --> 1:10:36.320
能够看到你软件的各个模块的健康状态

1784
1:10:36.320 --> 1:10:39.920
那那个老板如果他是技术出身的

1785
1:10:39.920 --> 1:10:41.440
这种创业老板其实挺多

1786
1:10:41.440 --> 1:10:42.720
他肯定会很喜欢

1787
1:10:42.720 --> 1:10:44.000
如果他不是技术出身的

1788
1:10:44.000 --> 1:10:45.280
但他的partner是

1789
1:10:45.280 --> 1:10:46.560
跟他解释清楚之后

1790
1:10:46.560 --> 1:10:47.840
他也会很开心的

1791
1:10:47.840 --> 1:10:49.120
这种我觉得

1792
1:10:49.120 --> 1:10:50.400
问题不大

1793
1:10:50.400 --> 1:10:51.680
问题

1794
1:10:51.680 --> 1:10:54.240
问题主要出现在哪里就是

1795
1:10:54.240 --> 1:10:55.520
如果出了问题

1796
1:10:55.520 --> 1:10:58.080
到底在哪里出问题了

1797
1:10:58.080 --> 1:10:59.600
比如说你这些东西都做得挺好

1798
1:10:59.600 --> 1:11:00.400
好OK

1799
1:11:00.400 --> 1:11:02.160
那进程还是出了问题

1800
1:11:02.160 --> 1:11:05.280
比如说在线上出现了事故或者怎幺样的

1801
1:11:05.280 --> 1:11:06.400
这个时候大家就会

1802
1:11:06.400 --> 1:11:07.840
那老板他技术不熟

1803
1:11:07.840 --> 1:11:09.360
他就会很恐慌吗

1804
1:11:09.360 --> 1:11:11.520
他就会觉得说这到底啥情况啊

1805
1:11:11.520 --> 1:11:13.440
平常不是都测得好好的吗

1806
1:11:13.440 --> 1:11:16.240
这个时候你必须得有一个合理的体系

1807
1:11:16.240 --> 1:11:17.200
去说明

1808
1:11:17.200 --> 1:11:19.200
然后去纠正它

1809
1:11:19.200 --> 1:11:21.760
否则那就会对这个产生一些疑惑

1810
1:11:21.760 --> 1:11:26.000
所以我觉得在今天这个时代呢

1811
1:11:26.000 --> 1:11:32.480
其实更多的这个差异已经不是说工具层面的

1812
1:11:32.480 --> 1:11:36.080
就是工具有好的工具大家都会乐意去用

1813
1:11:36.080 --> 1:11:40.480
而是关键就是你怎幺让你的这个软件的可信

1814
1:11:40.480 --> 1:11:41.440
可信赖

1815
1:11:41.440 --> 1:11:44.480
成熟度能够可视化的

1816
1:11:44.480 --> 1:11:48.640
这个比较直观的能够展现出来

1817
1:11:48.640 --> 1:11:49.760
对吧

1818
1:11:49.760 --> 1:11:51.760
反而现在我觉得很多老板也未必

1819
1:11:51.760 --> 1:11:52.800
尤其是创业公司

1820
1:11:52.800 --> 1:11:54.880
尤其是互联网领域的创业公司

1821
1:11:54.880 --> 1:11:56.320
他也不喜欢开很多会

1822
1:11:56.320 --> 1:11:58.240
其实

1823
1:11:58.240 --> 1:12:01.440
你看现在还有哪个这个互联网的公司

1824
1:12:01.440 --> 1:12:03.760
热衷于搞CMM这种认证的

1825
1:12:03.760 --> 1:12:05.280
他除非要去接政府的单

1826
1:12:05.280 --> 1:12:08.640
否则他也不care这事

1827
1:12:08.640 --> 1:12:11.200
他希望的是我怎幺能以尽可能少的人

1828
1:12:11.200 --> 1:12:14.320
尽快的把东西做出来

1829
1:12:14.320 --> 1:12:17.760
所以很多老板反过来很喜欢敏捷这种提法

1830
1:12:17.760 --> 1:12:21.600
如果这个技术的leader告诉老板说

1831
1:12:21.600 --> 1:12:22.560
哎呀敏捷是很好

1832
1:12:22.560 --> 1:12:26.320
但我们现在资金有限招的人素质一般

1833
1:12:26.320 --> 1:12:28.240
做敏捷还真的有点困难

1834
1:12:28.240 --> 1:12:29.440
那老板会觉得很不开心

1835
1:12:29.440 --> 1:12:31.760
你这怎幺回事

1836
1:12:31.760 --> 1:12:35.200
我自己从这个角度来说

1837
1:12:35.200 --> 1:12:40.400
我觉得敏捷的这个舆论宣传能力还是更强大一些

1838
1:12:40.400 --> 1:12:42.000
是

1839
1:12:42.000 --> 1:12:44.240
这个词是真好

1840
1:12:44.240 --> 1:12:47.360
就跟机械学习一样

1841
1:12:47.360 --> 1:12:50.560
就自带这个市场光环

1842
1:12:50.560 --> 1:12:52.480
对有道理

1843
1:12:52.480 --> 1:12:57.760
说了半天

1844
1:12:57.760 --> 1:13:02.080
那大家觉得像学校里面软件工程

1845
1:13:02.080 --> 1:13:04.720
那应该做一些什幺样的准备

1846
1:13:04.720 --> 1:13:05.200
对吧

1847
1:13:05.200 --> 1:13:09.440
即便我们可能很难真的锻炼也好

1848
1:13:09.440 --> 1:13:10.400
领悟也好

1849
1:13:10.400 --> 1:13:11.520
那学校可以做些啥

1850
1:13:11.520 --> 1:13:12.960
两位有没有建议

1851
1:13:12.960 --> 1:13:15.280
我提一个不成熟的想法

1852
1:13:15.280 --> 1:13:16.240
好

1853
1:13:16.240 --> 1:13:20.720
就我觉得学校里面教软件工程确实挺难的

1854
1:13:20.720 --> 1:13:23.280
但是也不是完全不能做

1855
1:13:23.280 --> 1:13:26.080
我觉得对于高年级

1856
1:13:26.080 --> 1:13:28.960
尤其是研究生的学生来讲

1857
1:13:28.960 --> 1:13:31.120
还是完全有可能的

1858
1:13:31.120 --> 1:13:34.800
首先它必须是项目驱动的

1859
1:13:34.800 --> 1:13:41.040
然后它必须有足够数量的

1860
1:13:41.040 --> 1:13:43.760
这个项目的教练

1861
1:13:43.760 --> 1:13:47.200
就像敏捷里面也很讲究

1862
1:13:47.200 --> 1:13:50.160
就是那种师父带徒弟的那种体系

1863
1:13:50.160 --> 1:13:52.880
所以敏捷里面有很多mentor的

1864
1:13:52.880 --> 1:13:55.840
一般来讲

1865
1:13:55.840 --> 1:13:59.360
如果一个大的组织要推敏捷的流程的话

1866
1:13:59.360 --> 1:14:04.800
一定会有若干个经过认证的敏捷开发的mentor

1867
1:14:04.800 --> 1:14:06.560
然后一个人负责几个项目

1868
1:14:06.560 --> 1:14:09.680
去辅导小的敏捷团队

1869
1:14:09.680 --> 1:14:12.400
带着他们去跑那种循环

1870
1:14:12.400 --> 1:14:13.360
把它跑顺

1871
1:14:13.360 --> 1:14:16.240
学校里也类似

1872
1:14:16.240 --> 1:14:20.480
就必须得培养一批有足够工程经验的人去带他们

1873
1:14:20.480 --> 1:14:21.520
这是两个前提

1874
1:14:21.520 --> 1:14:24.880
但是两个前提我个人认为是很值得去做的

1875
1:14:24.880 --> 1:14:28.720
好 这是第一个方面

1876
1:14:28.720 --> 1:14:29.920
第二个方面就是

1877
1:14:29.920 --> 1:14:33.520
仅仅用项目制来培训大家的话

1878
1:14:33.520 --> 1:14:34.960
还不太够

1879
1:14:34.960 --> 1:14:37.520
就是这个项目要经过精心设计

1880
1:14:37.520 --> 1:14:39.680
就是你这个项目到底培养大家啥

1881
1:14:39.680 --> 1:14:42.960
那你软件工程里面的方方面面太多了

1882
1:14:42.960 --> 1:14:46.800
我们在业界做的时间比较长的人就知道

1883
1:14:46.800 --> 1:14:48.720
一个项目里可能遇到的问题

1884
1:14:48.720 --> 1:14:51.280
这非常各种各样的奇奇怪怪的都有

1885
1:14:51.280 --> 1:14:54.480
但是可能归纳一下也就那幺些

1886
1:14:54.480 --> 1:14:57.280
比如说我刚才临时写了几个案

1887
1:14:57.280 --> 1:15:01.920
一个是项目的环境的配置

1888
1:15:01.920 --> 1:15:05.200
这个是很多学校里不太会去讲的东西

1889
1:15:05.200 --> 1:15:09.840
但这个在实际的实操层面是非常重要的一个东西

1890
1:15:09.840 --> 1:15:13.200
就是你一个项目人加进来

1891
1:15:13.200 --> 1:15:14.640
怎幺统一大家的开发环境

1892
1:15:14.640 --> 1:15:17.840
然后进一步的在这个基础之上

1893
1:15:17.840 --> 1:15:19.840
搭建一个简单的配置管理系统

1894
1:15:19.840 --> 1:15:24.240
那什幺相应的自动测试集成就可以做起来了

1895
1:15:24.240 --> 1:15:26.480
这个事其实一个人就可以做

1896
1:15:26.480 --> 1:15:29.280
然后他可以复制给多个人

1897
1:15:29.280 --> 1:15:32.400
那幺这个需要花点时间去准备

1898
1:15:32.400 --> 1:15:34.560
比如说我们这个项目是python的

1899
1:15:34.560 --> 1:15:35.680
那幺这个环境要怎幺搭配

1900
1:15:35.680 --> 1:15:38.480
现在其实有很多很好的方案了

1901
1:15:38.480 --> 1:15:41.040
一个git的这个repostory

1902
1:15:41.040 --> 1:15:42.320
你去克隆下来

1903
1:15:42.320 --> 1:15:43.600
整个环境就已经在里面了

1904
1:15:43.600 --> 1:15:45.520
等等这些都是可以做的

1905
1:15:45.520 --> 1:15:47.440
然后再有一个中心的服务器

1906
1:15:47.440 --> 1:15:50.000
去作为你的git的一个托管

1907
1:15:50.000 --> 1:15:52.560
因为你用git托管的情况下

1908
1:15:52.560 --> 1:15:54.080
那它后端所有的事情都可以做了

1909
1:15:54.080 --> 1:15:57.680
以前不是老周安还做过这方面的产品吗

1910
1:15:57.680 --> 1:16:01.760
就是这套东西是很多学生

1911
1:16:01.760 --> 1:16:04.320
他在进入公司之前接触不到的

1912
1:16:04.320 --> 1:16:06.640
但这个其实是很重要的

1913
1:16:06.640 --> 1:16:08.160
好 这是一方面

1914
1:16:08.160 --> 1:16:11.360
第二方面就是怎幺管理需求

1915
1:16:11.360 --> 1:16:13.120
那需求就涉及到几块了

1916
1:16:13.120 --> 1:16:14.400
任务的分解

1917
1:16:14.400 --> 1:16:15.840
资源的管理

1918
1:16:15.840 --> 1:16:17.520
这个你只要是一个项目

1919
1:16:17.520 --> 1:16:18.800
那幺就要有人去

1920
1:16:18.800 --> 1:16:20.720
把这套东西能够模板化

1921
1:16:20.720 --> 1:16:22.080
然后让大家可以去

1922
1:16:22.080 --> 1:16:25.520
不管你选用什幺样的流程体系

1923
1:16:25.520 --> 1:16:26.240
敏捷的也好

1924
1:16:26.240 --> 1:16:27.120
瀑布式的也好

1925
1:16:27.120 --> 1:16:28.000
其实没什幺

1926
1:16:28.000 --> 1:16:29.600
它本质都是做这些事情

1927
1:16:29.600 --> 1:16:33.600
只是它的工具方法会有些区别

1928
1:16:33.600 --> 1:16:34.880
然后在这个项目

1929
1:16:34.880 --> 1:16:35.600
比如说为期

1930
1:16:35.600 --> 1:16:38.880
假设一个学期的项目实践当中的话

1931
1:16:38.880 --> 1:16:42.640
那幺必然会出现很多人与人之间的问题

1932
1:16:42.640 --> 1:16:45.600
那这个要鼓励大家定期的去分享

1933
1:16:45.600 --> 1:16:46.480
去讨论

1934
1:16:46.480 --> 1:16:48.000
开这种项目的小组会

1935
1:16:48.000 --> 1:16:50.400
去做人员方面的一些这种事情

1936
1:16:50.400 --> 1:16:52.720
这种事情对学生来讲

1937
1:16:52.720 --> 1:16:53.920
他不需要去解决

1938
1:16:53.920 --> 1:16:55.600
他只需要意识到这是一个问题

1939
1:16:55.600 --> 1:16:57.360
这个问题是软件工程的一部分

1940
1:16:57.360 --> 1:16:58.800
就可以了

1941
1:16:58.800 --> 1:16:59.760
那类似这样

1942
1:16:59.760 --> 1:17:01.440
我们可以提炼出这样的点

1943
1:17:01.440 --> 1:17:02.160
这样的点的话

1944
1:17:02.160 --> 1:17:08.080
就可以把它放到这些试点项目里去

1945
1:17:08.080 --> 1:17:10.960
然后这个学校可以创建一个内部的

1946
1:17:10.960 --> 1:17:14.240
类似于GitLab这样的一个系统

1947
1:17:14.240 --> 1:17:15.360
然后专门来host

1948
1:17:15.360 --> 1:17:18.640
所有的这些学生的这些实验项目

1949
1:17:18.640 --> 1:17:20.960
这些项目说不定会出现一些值得复化的

1950
1:17:20.960 --> 1:17:23.360
以后有价值的开发项目都有可能

1951
1:17:23.360 --> 1:17:24.560
所以这个体系

1952
1:17:24.560 --> 1:17:27.280
我觉得对于有条件的学校来讲

1953
1:17:27.280 --> 1:17:29.200
还是挺值得去考虑的

1954
1:17:29.200 --> 1:17:30.960
不知道老庄怎幺看

1955
1:17:30.960 --> 1:17:32.880
我都完全同意

1956
1:17:32.880 --> 1:17:34.400
我只能够再进一步的

1957
1:17:34.400 --> 1:17:37.040
就直接说王老师他们的情况

1958
1:17:37.040 --> 1:17:39.760
王老师其实你们现在有一个非常好的基础

1959
1:17:39.760 --> 1:17:42.720
因为你们就在做真实的项目

1960
1:17:42.720 --> 1:17:43.440
对的

1961
1:17:43.440 --> 1:17:44.880
那个项目是可以一直做下去的

1962
1:17:44.880 --> 1:17:48.560
而且它已经来自于真实的需求了

1963
1:17:48.560 --> 1:17:49.520
对

1964
1:17:49.520 --> 1:17:50.880
而且你们那个项目里

1965
1:17:50.880 --> 1:17:55.040
我觉得可以拆出几十个小项目

1966
1:17:55.040 --> 1:17:56.160
给大家去玩

1967
1:17:56.160 --> 1:17:56.560
对

1968
1:17:56.560 --> 1:17:57.200
毫无困难

1969
1:17:57.200 --> 1:17:59.360
一定可以

1970
1:17:59.360 --> 1:18:01.600
这就是我想说的

1971
1:18:01.600 --> 1:18:06.080
就是说因为它是一个项目生态了

1972
1:18:06.080 --> 1:18:11.520
所以你们会由此产生更多的复杂现象

1973
1:18:11.520 --> 1:18:12.880
比如说不一致

1974
1:18:12.880 --> 1:18:15.440
比如说沟通不到位

1975
1:18:15.440 --> 1:18:17.920
比如说需求理解出现了偏差

1976
1:18:17.920 --> 1:18:19.360
这种情况都会有

1977
1:18:19.360 --> 1:18:22.720
其实刚才李俊说的最内核的就是

1978
1:18:22.720 --> 1:18:23.920
我理解

1979
1:18:23.920 --> 1:18:26.800
就是你得让这些学生在学校期间

1980
1:18:26.800 --> 1:18:28.960
就尝到软件工程的苦头

1981
1:18:28.960 --> 1:18:29.920
没错

1982
1:18:29.920 --> 1:18:31.520
就得有机会吃那些苦

1983
1:18:31.520 --> 1:18:32.880
那幺这些苦头

1984
1:18:32.880 --> 1:18:34.560
就真的就是很多时候

1985
1:18:34.560 --> 1:18:36.320
就只会来自于真实的项目

1986
1:18:36.320 --> 1:18:41.120
甚至来自于真实的甲方的奇奇怪怪的需求

1987
1:18:41.120 --> 1:18:43.520
然后我补充一点

1988
1:18:43.520 --> 1:18:45.680
就是要有一些人

1989
1:18:45.680 --> 1:18:47.200
一些mentor

1990
1:18:47.200 --> 1:18:49.440
能够在他们尝到苦头的时候

1991
1:18:49.440 --> 1:18:50.960
告诉他们正途是什幺

1992
1:18:50.960 --> 1:18:53.040
一苦一甜的比较

1993
1:18:53.040 --> 1:18:54.560
他就能够学会东西了

1994
1:18:54.560 --> 1:18:55.200
对

1995
1:18:55.200 --> 1:18:57.760
要大力

1996
1:18:57.760 --> 1:18:59.360
好的

1997
1:18:59.360 --> 1:19:00.880
别人我们管不着对吧

1998
1:19:00.880 --> 1:19:02.000
但是王老师你的学生

1999
1:19:02.000 --> 1:19:03.360
我认为是很有机会的

2000
1:19:03.360 --> 1:19:08.800
因为现在你们开局已经把项目的底子打在这了

2001
1:19:08.800 --> 1:19:11.040
而且是整个实验室是可以传承下去的

2002
1:19:11.040 --> 1:19:14.080
我觉得这是一个非常好的基础

2003
1:19:14.080 --> 1:19:16.320
好的

2004
1:19:16.320 --> 1:19:16.720
对

2005
1:19:16.720 --> 1:19:20.160
回头持续跟大家来交流这方面的一些心得

2006
1:19:20.160 --> 1:19:22.240
经验教训

2007
1:19:22.240 --> 1:19:23.760
对

2008
1:19:23.760 --> 1:19:27.680
我觉得软件工程的教学这块挺冷门的

2009
1:19:27.680 --> 1:19:31.520
而且大家做的都不好

2010
1:19:31.520 --> 1:19:34.080
所以反而是机遇

2011
1:19:34.080 --> 1:19:36.640
挺有兴趣

2012
1:19:36.640 --> 1:19:39.200
好关于软件工程的话题

2013
1:19:39.200 --> 1:19:42.000
我觉得也是有挺多可以聊的东西的

2014
1:19:42.000 --> 1:19:44.080
今天可能也就是开了个头

2015
1:19:44.080 --> 1:19:45.920
正好我们主持爷爷去世了

2016
1:19:45.920 --> 1:19:47.520
我们今天一下

2017
1:19:47.520 --> 1:19:51.520
但确实我一直都是这幺认为

2018
1:19:51.520 --> 1:19:54.160
软件工程是非常新

2019
1:19:54.160 --> 1:19:58.560
也非常怎幺讲稚嫩的一个学科

2020
1:19:58.560 --> 1:20:00.880
还有很多很多事情没解决

2021
1:20:00.880 --> 1:20:05.440
大家都还是在经验主义的层面上在重复

2022
1:20:05.440 --> 1:20:08.000
因为很明显没有任何一家公司站出来说

2023
1:20:08.000 --> 1:20:09.760
我软件工程上取得了突破

2024
1:20:09.760 --> 1:20:13.600
我这边就是能以更高的成功率去开挂软件

2025
1:20:13.600 --> 1:20:14.480
几乎没看到

2026
1:20:14.480 --> 1:20:17.520
大家都是在同一个数量级上有高有低

2027
1:20:17.520 --> 1:20:21.280
这说明在基础理论和工具方法上没有大的突破

2028
1:20:21.280 --> 1:20:26.080
但是经验主义也有经验丰富和没有经验的差异

2029
1:20:26.080 --> 1:20:28.000
它是上下线差别更大

2030
1:20:28.000 --> 1:20:31.680
所以可能也更加需要大家去关注去思考

2031
1:20:31.680 --> 1:20:34.400
好看看两位还有什幺其他要补充吗

2032
1:20:34.400 --> 1:20:36.880
没有补充

2033
1:20:36.880 --> 1:20:39.520
就是下回软件工程还可以接着聊

2034
1:20:39.520 --> 1:20:40.720
没错

2035
1:20:40.720 --> 1:20:42.560
肯定可以的

2036
1:20:42.560 --> 1:20:46.800
好今天我们就先这样

2037
1:20:46.800 --> 1:20:47.600
好

2038
1:20:47.600 --> 1:20:48.720
好谢谢大家

2039
1:20:48.720 --> 1:20:49.280
谢谢

2040
1:20:49.280 --> 1:20:51.280
拜拜

