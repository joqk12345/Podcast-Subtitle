1
00:00:00,000 --> 00:00:03,680
各位朋友大家好啊欢迎来到后互联网时代的乱谈

2
00:00:03,680 --> 00:00:07,720
那今天是周六啊因为明天周日是上班啊

3
00:00:07,720 --> 00:00:09,720
所以今天我们来把节目录了

4
00:00:09,720 --> 00:00:12,840
嗯赵丽是我跟我们老庄

5
00:00:12,840 --> 00:00:14,200
哎大家好

6
00:00:14,200 --> 00:00:15,400
还有王老师

7
00:00:15,400 --> 00:00:16,960
哎大家好

8
00:00:16,960 --> 00:00:19,320
嗯我们一起来聊一聊

9
00:00:19,320 --> 00:00:26,720
我们今天主要的几个都是跟技术有关的跟软件行业有关的事情啊

10
00:00:26,720 --> 00:00:29,080
但是在此之前呢有一个新闻

11
00:00:29,080 --> 00:00:32,520
我觉得值得跟大家去稍微地聊一聊

12
00:00:32,520 --> 00:00:41,400
就是之前联合管理会终于通过了一个要求以色列停火的这样的一个决议之后啊

13
00:00:41,400 --> 00:00:48,080
以色列干了好几件看上去比较疯的事儿啊包括炸了伊朗驻叙利亚的大使馆

14
00:00:48,080 --> 00:00:57,040
然后炸了一个公益组织的车队这个组织呢叫WCK世界中央厨房啊world central kitchen

15
00:00:57,040 --> 00:01:03,880
这两个事儿呢引起的反响都挺大的但是可能跟很多朋友的想法不太一样的是啊

16
00:01:03,880 --> 00:01:07,520
炸WCK这件事情影响会远远大于另外一件事儿啊

17
00:01:07,520 --> 00:01:10,560
虽然以色列炸伊朗这个事情也很严重

18
00:01:10,560 --> 00:01:17,280
现在美国人一直在说说伊朗大概最近几天或者最迟下个礼拜就会开始大规模报复

19
00:01:17,280 --> 00:01:26,920
但这个呢其实是中东的常态啊这个没有什么很特别的地方最多是火更旺一点或者更没那么旺一点就差异没有那么大

20
00:01:26,920 --> 00:01:36,120
而且说实话伊朗自己包括其他几个大国也都不太希望伊朗太深地搅进去这个会让中东更难以收场

21
00:01:36,120 --> 00:01:46,320
但是WCK这个事情呢就影响会很大去年底那个我们几个人做预言的时候我曾经提过今年影响最大的事件就是美国的大选

22
00:01:46,320 --> 00:01:51,640
那美国大选就会牵扯很多很多的事情这是其中的一个会对它影响很大的事情

23
00:01:51,640 --> 00:01:56,360
首先我要简单跟大家介绍一下这个WCK是一个什么样的组织

24
00:01:56,360 --> 00:02:06,400
它叫世界中央厨房这个名字听上去呢就很厨房是吧那哎才真的它的创办人是一个拉丁裔的美国人是一个大厨

25
00:02:06,400 --> 00:02:16,520
它是一个一直都很信奉人道主义的一个大厨所以呢它在二零一零年创建了这个组织叫WCK

26
00:02:16,560 --> 00:02:27,280
那这个组织其实它为什么很引人注目因为它很像另外一个口碑相当好的恩救叫吴国借医生

27
00:02:27,280 --> 00:02:37,520
就WCK它的宗旨非常非常单纯就是叫食物是基本人权就是你随便你是什么人你打仗也好你你怎么样也好啊就是你都不应该饿死

28
00:02:37,520 --> 00:02:44,200
啊你哪怕是一个很坏的人那也有法律来制裁你但是你不应该因为没有食物而死掉

29
00:02:44,200 --> 00:02:56,720
这跟吴国借医生就很像吴国借医生也是不管你政治立场不管你是什么样的人但是救死赴伤嘛就医生的天职那把你救活了以后法律怎么惩罚你那是法律的事情

30
00:02:56,720 --> 00:03:04,000
所以这两个组织呢在过去的十来年里面应该是口碑最好的几个国际的公益组织

31
00:03:04,000 --> 00:03:11,840
这台湾CK还有一点比较特别的呢就是它不仅在国际上很有声望在美国国内也很有声望

32
00:03:11,840 --> 00:03:23,160
因为大家知道一般这种 NGO啊尤其是搞这种救援性质的一般不太会关心美国美国是一个物资极大丰富的一个国家说完听点只要你肯要饭你绝对饿不死

33
00:03:23,160 --> 00:03:34,080
所以基本上RCK在创立初期的十年时间里面基本上主要就是在拉丁美洲这个加勒比海这一带去活动但是呢新冠疫情出现的时候

34
00:03:34,080 --> 00:03:41,440
他们发现美国国内有很多需要救助的人生病的或在社区里面失业了没有钱也没有食物等等

35
00:03:41,440 --> 00:03:46,320
就他们很快做调整啊在美国国内建立了一整套的活动的机制

36
00:03:46,320 --> 00:03:52,200
然后救助了非常多在疫情当中有困难的社区

37
00:03:52,200 --> 00:04:01,720
而且这个过程当中表现比较亮眼就一方面管理和运作能力比较强另一方面也很灵活很会创新比如当时

38
00:04:01,720 --> 00:04:10,440
用无人机给就是疫情爆发的社区送食物就是他们最早干所以这个社区在美国国内口碑也非常的好

39
00:04:10,440 --> 00:04:21,960
那这件事情为什么很特别呢就是这次他遇难的七个人三辆车被炸掉七个人死了这遇难的七个人是七个什么样的人呢

40
00:04:21,960 --> 00:04:28,840
一个是整个援助组的组长是一个澳大利亚的白人女性

41
00:04:28,840 --> 00:04:38,040
她带了三个援助组的成员其中一位是巴勒斯坦当地人啊这个一般在那边活动的肯定有个当地人的

42
00:04:38,040 --> 00:04:47,640
然后另外一位呢是波兰籍的白人男性好最后一位很有意思是美国加拿大双国籍的白人男性

43
00:04:47,640 --> 00:04:56,600
另外有三个是安保团队是三个英国的白人男性全部都是英国的退伍军人

44
00:04:56,600 --> 00:05:06,040
所以你看这个团队里面澳大利亚美国英国加拿大就是昂萨体系的核心的四个国家全在里面了

45
00:05:06,040 --> 00:05:17,400
所以这次出现这个问题之后立马就英美加拿大澳大利亚的领导人都站出来说谴责这个袭击因为都有他自己的人在里面

46
00:05:17,400 --> 00:05:24,840
而这个事情的影响就在我看来就是排斥昂萨的这种种族主义的基因在里面

47
00:05:24,840 --> 00:05:31,960
就是加沙这边死了几万人其中有一万多的儿童他们也没有这么的触动

48
00:05:31,960 --> 00:05:38,680
那这回呢死的是正儿八经的自己人肯定是没法交差就是你必须要采取的行动

49
00:05:38,680 --> 00:05:53,200
所以这个已经看到它的后果就昨天呃美国白宫和国务院都分别的出了正式的文件说他们已经跟以色列当面地讲了啊你们必须要保障平民和这些国际组织的安全

50
00:05:53,240 --> 00:06:23,080
如果你们不做出改变那么我们会做出改变这个是去年的阿克萨洪水行动之后美国最强硬的一个表态了当然这个并不在把他骂就有什么行动啊只是说他已经被逼到这个份上他必须要做一些表态所以从这个角度来讲我推想啊以色列他去炸伊朗的大使馆这个是他蓄意的他就是想把伊朗拉下水然后如果伊朗亲自去作战的话那么美国也就会更深的卷入这是以色列希望的

51
00:06:23,080 --> 00:06:32,400
但是炸WCK这件事情我认为是以色列出了问题就他没有正确判断这件事情的后果或者干脆就是出了失误

52
00:06:32,400 --> 00:06:52,160
那这个事情会影响很大所以简单地跟大家解释一下这个为什么会有这么大的一个意义那需要去观察我看昨天川普也出来说了一段话啊非常有意思因为川普是比民主党这边更亲以色列的而且他跟以色列现任的总理关系是非常非常好的

53
00:06:52,160 --> 00:07:22,160
那他怎么说呢他的整段讲话大概的意思就是说内塔尼亚夫你这个人太笨了你把这个事情干得太差劲了导致都没人能支持你你赶紧做出改变吧这个意思表达得非常有怎么讲就是很奇特就是他并不是说我就不支持以色列了但是我认为你没做好是这么一个意思所以这个接下来是很大的观察点这还是批评自家兄弟的这种口气对对就因为共和民两党肯定是共和民

54
00:07:22,160 --> 00:07:52,160
共和党更亲以色列这个历来都是这样而且不太会改变从各种原因各种因素的影响都是这样那达威斯基跟吴国家医生这样的组织啊真的是非常的令人尊敬啊就虽然他这个组织从他的宗旨到他的整个组织的这个形式你可以说他非常白左但是他们是真的用自己的生命在第一线去践行这些东西所以是非常了不起的那这一次其实吴医生在那边也牺牲了好多人

55
00:07:52,160 --> 00:07:54,360
这次是一次性的一个车队就没了

56
00:07:54,840 --> 00:07:59,120
然后原来准备好的上百吨的物资就撤回来了就不敢进去了

57
00:07:59,520 --> 00:08:02,720
所以这个也影响挺大的就看接下来怎么去推进啊

58
00:08:03,280 --> 00:08:14,920
我我只是正好看到一条推就是那个总统美国总统拜登发了一条推类似于就是说这样的行为怎么怎么不可接受之类的下面有很多美国人在骂他

59
00:08:15,600 --> 00:08:18,440
大概的意思就是说不就是你卖武器给以色列的吗

60
00:08:19,000 --> 00:08:22,120
不就是你在支持他们吗很多很多美国人在骂他

61
00:08:22,720 --> 00:08:29,240
我觉得这种压力他也应该能感受到一些对我可以给你们举个例子这压力到什么程度啊就白宫可能还好一点

62
00:08:30,080 --> 00:08:37,120
美国的国务卿布林卡他住的区域是在华盛顿市郊是一个就是富人区啊就那很好的环境别墅

63
00:08:38,080 --> 00:08:43,080
然后现在他那个周围住的地方已经被人占领了全都是抗议的人二十四小时呆在那里不走

64
00:08:44,600 --> 00:08:48,480
吃喝拉撒睡然后故意把垃圾啊什么丢在他门前然后

65
00:08:49,160 --> 00:08:55,600
甚至在到处喷那种红色的像血一样那种漆就在家门口啊然后确实也没骂错因为

66
00:08:56,200 --> 00:09:06,080
谴责归谴责然后前两天美国又卖了一批一千多枚那种高爆炸弹每一个大概接近一吨重九百多公斤的一个炸弹

67
00:09:06,360 --> 00:09:10,440
就基本上是我们现在的战当中看到的杀伤力最大的普通炸弹

68
00:09:11,200 --> 00:09:16,880
就是一边在谴责一边还在继续干这种事情所以实质性的行动就是看他们什么时候停止干这种事

69
00:09:17,880 --> 00:09:25,080
好那这个呢反正就是给大家提个醒儿啊就不要小看了这个事情啊后面我们可以继续去观察

70
00:09:25,880 --> 00:09:40,120
好下面就开始我们主要的几个话题啊第一个呢是关于最近啊开源界又出了一堆的事儿啊其中最严重的一个应该就是一个非常常用的一个公共库XC

71
00:09:40,680 --> 00:09:46,000
压缩解压的一个库这个库上出现了非常恶劣的供应链投毒事件

72
00:09:46,000 --> 00:09:59,800
这个等一下我们还给它展开聊到简单介绍一下怎么回事儿就是这是一个开源的库嘛它是host在GitHub上面的然后发现呢最近有一位已经有一年多的时间做贡献者的这样的一个用户

73
00:10:00,280 --> 00:10:12,520
他上传的某个版本当中啊合并进主分支的这个版本里面有恶意的代码这个代码绝对不是疏忽啊是故意放进去的是很专业的黑客行为

74
00:10:13,000 --> 00:10:40,280
看上去不引人注目的一些测试用的数据文件但里面其实潜藏了呃类似于木马这样的代码啊它可以做到就是说如果使用这个库的话那么可以远程地获取上面的数据啊包括用户名啊账号这样的一些东西这个我印象中应该是这些年看下来最严重的一次投毒事件了第一是因为这个库运动得非常广几乎所有主要系统上面都肯定会有

75
00:10:40,280 --> 00:11:10,280
然后第二个呢就是这个事件本身也非常的特别因为这个人他不是一个从外部进来黑掉这个库他是一个潜入社区已经做一年多的贡献之前非常积极而且也让人很可信的一个代码贡献者啊突然他做这么一个事情当然这个到底什么原因这个还可以有很多不同的版本这点我们也可以分析啊但总之是有这么一个事儿哎这个事显然对很多人的触动

76
00:11:10,280 --> 00:11:40,280
大最近有另外一个情况呢就是有一个著名的音视频相关的基础库叫爱分派这个库也非常非常关键啊就基本上所有跟音视频编解码有关的事情基本上都跟它有关啊它是最底层的那些音视频格式的编解码最核心的那些代码在这个库里面然后最近出了一个事儿啊就是微软的一个商业产品叫teams啊就类似于飞书这样的一个产品突然到他们的社区里说啊我们这边发现一个问题是很紧急

77
00:11:40,280 --> 00:12:10,280
的问题请你们作为最高优先级来解决这个事情就让爱分派的人有些不快觉得你们微软这么有钱也没给我一分钱啊出了事儿就要我们高级别对待啊这个没有道理而且还把这个事儿呢跟XA投毒的这个事情也关联起来说了所以这个呢我们想稍微讨论一下就是开源现在面临的这样一个困境啊就是品质安全相应的责任到底怎么去分配这里面到底有没有成为生意的这样

78
00:12:10,280 --> 00:12:18,760
的可能性或者如果它不是一个常规的生意它怎么能够自负盈亏能够运作下去这个已经成为一个很大的难题啊

79
00:12:18,760 --> 00:12:33,360
要不老庄也给我们再展开说一下好呀我正好可以先补充两段内容啊一段内容是有一个公众号是三六零威胁情报中心我不知道是不是三六零那边搞安全的人做的

80
00:12:33,760 --> 00:12:42,480
它其实最核心的当然它讲了一堆的技术啊就里面讲到什么吉莱布斯的爱放客啊还是怎么样做到的劫持啊

81
00:12:42,480 --> 00:13:02,680
然后这个攻击的时间线第一步做什么第二步做什么第三步这都不重要这个不懂技术的无所谓不管它但是其中有一段话引起我注意的我稍微读一下就是说它的恶意提交行为分析说安全设计社区统计了它的这个代码提交时间

82
00:13:02,680 --> 00:13:18,520
从其中可以看出二零二四年的三月份的这一次恶意代码提交的时间存在非常明显的异常与以往历史的规律时间相差了接近十一个小时与该人员的作息时间完全相反

83
00:13:18,520 --> 00:13:31,480
所以不排除这个账号被盗用的可能嗯这是这是一个值得关注的点就是说当然我们一直在说啊这个账号看上去很像一个中国人那他会不会是中国人呢

84
00:13:31,480 --> 00:13:31,560
先当当我们说账号起名叫中国人的外国人完全有可能是吧还有一种可能性就是一个账号被盗用了这是三六零那边的一个信息但是我衷一句啊嗯就是现在我看呀基本上就只有两种可能一种可能是这个人处心积虑进来潜伏一年多然后在合适的时机提交这个嗯关键性的炸弹这是潜伏的故事是吧第二个故事就是他是一个正常的贡献者然后他的号被盗了然后有另外的黑客黑了他去干

85
00:14:01,480 --> 00:14:31,480
这件事情这两种可能性如果是第一种可能性的话那他为什么故如果他是中国人的话他为什么要起一个中国人的名字他既然是蓄意潜伏这么埋陷这么远的一个这么周密的潜伏计划他为什么会这么明显地暴露自己的可能的来源这个是不合理的如果是后面这种盗用情况那就更加不可察了所以我觉得这个事至少我不是很关心他这个名字本身带来什么这个不说明任何问题对就着这一点打的基本上可以做到

86
00:14:31,480 --> 00:14:38,000
作为一个风向标就你可以认为这个人他不是真正关心这件事情而是在那里炒流量为主的

87
00:14:38,000 --> 00:14:42,620
就我是这么判断对所以这个不足以作为判断的依据那个用户名啊

88
00:14:42,620 --> 00:14:56,280
但是另外一些线索呢让我又觉得可能不是账号被劫持为什么呢就是有另外一篇文章专门分析了这个供应链投毒的涉工时间线

89
00:14:56,720 --> 00:15:04,000
嗯就它里面就讲到就是说二零二一年的十月二十九号他最开始提交了一个补丁

90
00:15:04,000 --> 00:15:12,600
然后十一月二十九号就一个月之后又提交了第二个补丁到了第二年的四月份又过了五个月之后又提交了一个补丁

91
00:15:12,600 --> 00:15:25,000
然后记住啊这是四月十九号但是到了三天之后就有另外一个什么什么的一个人发了诉风邮件抱怨这个人的补丁没有被合并

92
00:15:25,000 --> 00:15:45,720
然后呢事实上这个时候这个XZ的这个作者已经合并了贾谈的这个四个补丁了而且他还感谢了贾谈但是有两个人一个是叫什么基尔什么库玛另外一个叫丹尼斯伊恩斯一直就在询问呃这些项目为什么维护效率低下

93
00:15:45,960 --> 00:16:13,000
然后呢这个主作者就抱歉说啊不好意思我确实忙什么什么的但是呢这个贾谈呢一直在幕后为他做贡献他可能会扮演更加重要的角色很明显我的精力有限所以长远来看必须有所改变此后有这两个人就是除了贾谈之外的另外两个人多次施加压力要求这个主作者XZ的主作者放权转交维护工作嗯

94
00:16:13,000 --> 00:16:21,600
然后一直以来就这样往后看往后看往后看但是我们就发现这两个人的邮箱其实一直就没有来历

95
00:16:21,600 --> 00:16:24,400
就不是一个不知道从哪里来的邮箱

96
00:16:24,400 --> 00:16:35,120
嗯就很有可能他们就是这个贾谈的同谋或者说是一起来帮忙轰脱这个坏

97
00:16:35,120 --> 00:16:40,760
甚至有可能提交代码的那个账号根本就不是一个人呀它根根本就是一个虚拟出来的一个账号

98
00:16:41,000 --> 00:16:43,280
他们很可能是一个团队

99
00:16:43,280 --> 00:16:53,360
这可能性很大的对而且的话呢再接下来就是说这个贾谈不仅仅是在这个账号下面提交了恶意代码

100
00:16:53,360 --> 00:17:03,120
然后去污染了这个库其实他还同时在其他地方去去推动这个XZ的这个库被其他的下游发行板所接纳

101
00:17:04,800 --> 00:17:10,720
就他一直在做相关的事情希望这件事情不断地往外推往外推有更多的发行板

102
00:17:10,720 --> 00:17:20,960
有更多的这个社区能够接纳它所以它是一个组合拳如果单看一次提交嗯这个事儿我觉得它也可以反过来说啊

103
00:17:20,960 --> 00:17:30,720
它就是一个热心的社区工作者对你也完全没法证明它不是这种就是它它有两种动机都可能做这个事情对是吧

104
00:17:30,720 --> 00:17:39,960
所以它到目前为止除了那个扔炸弹的类似以外其他所有的行为你都可以理解为它有两种可能一种是一个优秀的热心的社区贡献者

105
00:17:40,000 --> 00:17:57,560
另一种可能是处心积虑的潜伏的特务对说因为他们的行为模式是一样的对啊就没法判断这个对这就是最危险的事情就是说嗯我们这点很重要啊就是跟我们下面的讨论啊我觉得这点非常重要为什么呢

106
00:17:57,560 --> 00:18:08,760
就是实际上这个揭示了一个很大的挑战啊就是在开源的这个协同至少目前主流的开源协同环境下这样的行为你真的识别不出来对对

107
00:18:09,280 --> 00:18:15,280
啊你继续然后呢再接着说那个ffmpeg的这个推文的事情

108
00:18:15,640 --> 00:18:37,360
然后我们要深入的去去剖析一下为什么要深入呢因为我们要去看到一个是ffmpeg这个官网的账号说了啥其实这个官网的账号只说了很少的一段话大概的意思就是说呃这个呃麦克斯托夫的teams这个呃

109
00:18:38,920 --> 00:18:40,200
某某员工吧

110
00:18:40,960 --> 00:18:49,520
他这个还在依赖一个数万亿美元的公司还希望得到志愿者的免费和紧急的支持

111
00:18:51,080 --> 00:18:52,760
但是没有谈到钱的事情

112
00:18:53,880 --> 00:19:06,320
对就是说这件事情在英文的这个聊天记录里面其实只出现了几个来回一个就是说一个微软的有一个员工他应该是微软的teams项目组织里面的人他在曝bug

113
00:19:06,800 --> 00:19:22,120
曝了bug以后人家就跟他说了说了以后呢就还说了一句就是他就说这是一个高优先级因为这个teams已经在全球范围内用的非常广泛了本身就他很着急嘛就是这应该是他手头的工作他觉得不能被耽误但是到了

114
00:19:23,080 --> 00:19:32,560
在中文的推特圈里面有一个比较著名的叫保育的人这个人经常看到他有七点七万份

115
00:19:33,560 --> 00:19:58,880
他在转述这件事情的时候已经加了很多失获了第一就写叫大公司白嫖开源项目这是他写的标题人家没这么说啊第二个是他还说了微软在被礼貌的要求签订长期维护的支持合同后却仅提出了一次性支付几千美元的方案这种做法绝对是不可接受的

116
00:19:58,880 --> 00:20:28,800
但事实上我们回过头去看那个聊天记录看讨论没有谈到长期维护合同也没有谈到几千美元的方案嗯也就是说保育在扩大这件事情而且我看了一下他那个推文啊就是保育的那个推文嗯他是一个非常怎么说呢就是我如果说是好一点的话我就认为他是写得非常不严谨如果我诸心一点的话他是有

117
00:20:28,880 --> 00:20:58,880
意地在做混淆什么意思呢就是前面是他的一些介绍全当他是标题党啊嗯就有些很夸张的说法啊然后下面他有句话说以下为其推文转译然后下面一共有一二三四五六七段话他说以下为其推文转译冒号在这一句的下面一共七段话对这七段话里面其实只有头两段是原始推文嗯从第三段到后面的

118
00:20:58,880 --> 00:21:28,880
第七段中间这些所有东西都是他加上去的当然他也没有说这些来源他这东西我不知道他是不是有另外的来源在别的地方有提到或怎么样我不知道啊但总之他原始推文就只有那两段话这是一种非常常见的我在国内的这些呃媒体的运营当中经常看到的一种陷阱或者一种肮脏的手段嗯就是把事实跟自己的评论混在一起让你分不出哪些是事实哪些是评论

119
00:21:28,880 --> 00:21:58,880
好的他还有一个链接但是呢这个链接很多人也不会点或者点进去看全是英文给推出来了就他们利用语言上的这个障碍啊做很多这种煽动性的事情我就补充这个嗯呃然后我接着再说其实我我要点评的还不仅仅是保育这个人另外有一点就是ffmpeg的原始的账号里面其实也在扯为啥呢就是他在扯XZ的事情嗯

120
00:21:58,880 --> 00:22:28,880
大概的意思就是说XZ的惨败表明对无偿志愿者的依赖会导致重大问题嗯好像意思就是说XZ之所以会被人投毒就是因为呃这些志愿者没钱嗯但这肯定又是一个混淆视听或者说是混淆逻辑的一个做法就是说ffmpeg本身也在混淆逻辑为啥呢

121
00:22:28,880 --> 00:22:58,880
真正我们刚才回顾了那个呃XZ的投毒事件的过程当中从头到尾跟钱没关系是一个处心积虑的黑客然后用了一个非常长线钓鱼的办法然后打入了这个项目组的内部然后投毒或者说是安装了后门这件事情说难听点只要是开源项目就几乎无法避免因为这些行为在社区

122
00:22:58,880 --> 00:23:28,880
里非常的正常嗯你不能都以前的方式去解决我我不知道啊我猜想fmpeg他说这个意思是不是隐含的是这么一个意思啊就是如果我们这个项目有更多的钱我就可以雇更多的人或者去买一些服务来对项目做更严格的代码review或者是安全检查他他是这么这么一种意思吗我觉得因为这个也是一个合理的想法就是很多情况下

123
00:23:28,880 --> 00:23:58,880
当然这是一道更复杂的一个问题就是开源代码到底我们是不是要把它当做是商业产品那样来要求或者说我们在使用开源代码的时候能不能有这样的假定还是说我其实不能这样做假定我自己要去承担相应的风险这就是更复杂的问题了当然嗯其实呃我们如果我我记得就是说以前有一幅画就是在很多很多的场合都会出现的一幅漫画

124
00:23:58,880 --> 00:24:03,080
大概的意思就是说一个高楼大厦就一层一层的网上堆叠

125
00:24:03,080 --> 00:24:12,080
但是呢这个这个堆叠上去的很多很多层每一层会变会会被标注为a技术b技术c技术反正都是赫赫有名的一堆技术

126
00:24:12,080 --> 00:24:16,080
然后呢在那个图的右下角有一根非常短的一根短棍

127
00:24:16,080 --> 00:24:23,080
那根短棍在不同的时期会被标上不同的名字比如说有一段时间就被被标上openssl

128
00:24:23,080 --> 00:24:26,080
有一段时间被标上罗格弗揭

129
00:24:26,280 --> 00:24:33,280
有一段时间可能会被标上xz嗯反正什么时候出问题了什么时候就标一根短棍在那儿

130
00:24:33,280 --> 00:24:41,280
好像整个世界整个互联网也好整个软件也好整个世界就被那一根短棍支撑那根短棍断了整个世界就塌了

131
00:24:41,280 --> 00:24:50,280
但事实上我们真实的去观察开源生态的话就发现在软件生态里面有无数根短棍

132
00:24:50,480 --> 00:25:18,480
实际上成百成千上万甚至几十万根短棍支撑起了整个世界一方面我们呃夸大一点说这几十万根棍子当中的任何一根断了都有可能为整个世界造成巨大的损害但是我们乐观一点说是哪怕断几百根这世界也塌不了就无非就是损害而已世界也塌不了或者说因为这些开源软件的数量是几十万个这么多

133
00:25:18,480 --> 00:25:18,880
那么我们真正要想去给钱那么要给到一个什么程度呢这是一个非常非常困难的命题但是每年我们一旦遇到了一个这种安全的漏洞之后就一定会有人跳出来说啊要更关注开源软件安全这话没错啊第二句话就是大企业要给钱因为你看你们这些万亿万亿美元的公司都不给钱怎么怎么样

134
00:25:48,480 --> 00:26:18,480
就很有意思但事实上这些万亿美元的公司已经给了钱他们给的是谁呢很多这样的就是全球范围内的巨头公司通常都会把钱给一个叫Open SSF就是开源软件安全基金会这样的一个基金会它也是联益式基金会下面的一个子基金会它们是专门关注软件供应链安全的然后钱是给这个基金会然后再通过这个基金会更加有效地

135
00:26:18,480 --> 00:26:48,480
把钱花到一些比如说全球关键基础设施项目当中去然后试图来提高它的安全性这个我我觉得这才是正道而不是像这个FFM派的这样的一个过来说哎呀你们都不给钱所以这个这个XZ这样的事情就会就会爆出来或者说就会惨败什么什么的我觉得嗯这里面的逻辑问题其实这个事出来之后我并没有觉得特别的正道

136
00:26:48,480 --> 00:27:18,480
原因在于这个事第一很快就发现了就是它其实没有造成特别严重的后果了或者至少我们不知道啊但是总之它是比较快就发现了三月份提交的这个关键的错误的代码大概两周左右的时间里面就发现了这所有的相关的问题而且把相关的链也找出来了这肯定是有专业的安全人员在背后做了事情的那说不定就是刚才奥创说的这个Open SSF或者类似这样的白帽团队去做的事情所以我我赞同他

137
00:27:18,480 --> 00:27:48,480
老张说这个观点啊就是实际上那些最大的用户们他们在以他们认可的一种方式在投入到这个事情里面去那反过来呢我倒也不觉得这个Fmpeg这个有很大的问题因为在我看来他那则推文啊就是发了个牢骚第一他也没有去很严厉的说什么他就说了一句怪话说一句阴阳怪气的话给人感觉就是这样子而Fmpeg确实是应用极广啊然后

138
00:27:48,480 --> 00:27:52,080
微软的那个ticket就是给他们报bug那个事情

139
00:27:52,440 --> 00:27:54,760
确实我觉得语气也不是特别好

140
00:27:54,920 --> 00:27:57,120
而且说到底他那个事儿呢不算个

141
00:27:57,520 --> 00:27:58,800
真正意义上的bug

142
00:27:58,800 --> 00:28:00,960
它实际上是一种什么呢就是

143
00:28:00,960 --> 00:28:03,800
老版本跟新版本在行为上有变化

144
00:28:03,920 --> 00:28:05,920
但是文档里没有很清楚的说出来

145
00:28:06,000 --> 00:28:08,160
啊属于一种比较小的issue吧

146
00:28:08,400 --> 00:28:11,280
anyway反正这个事情我看那个帖子里面

147
00:28:11,280 --> 00:28:13,200
他们的交互也挺正常的

148
00:28:13,200 --> 00:28:15,600
基本上相当于是解决了的状态

149
00:28:16,000 --> 00:28:19,440
然后可能管推了账号的人就发个牢骚

150
00:28:19,680 --> 00:28:20,480
那就属于这样

151
00:28:20,480 --> 00:28:27,440
然后被我们的某些流行的话叫网感很好的大v拿来宣传了一把

152
00:28:27,440 --> 00:28:30,160
啊给我的感觉是这样啊哈哈

153
00:28:30,800 --> 00:28:34,800
其实稍微多点评两句的就是那个微软的那个员工啊

154
00:28:35,360 --> 00:28:41,680
其实呃我们会发现很多企业里面的那种低阶员工

155
00:28:41,960 --> 00:28:45,480
未经训练就会给自己的公司招致

156
00:28:45,600 --> 00:28:46,640
公关危机

157
00:28:47,120 --> 00:28:49,360
嗯挺常见的这个不会说话

158
00:28:50,080 --> 00:28:54,160
其实所谓的高优先级对于微软来说这优先级一点都不高

159
00:28:54,320 --> 00:28:59,200
只是对于这个员工对于他所在的项目组可能优先级挺高

160
00:28:59,680 --> 00:29:02,320
就这么简单就是说因为是我的工作

161
00:29:02,480 --> 00:29:04,960
所以我急着要让人帮忙修一下

162
00:29:05,600 --> 00:29:11,920
但是至于这个我这样说法给我自己所在的微软这个公司带来什么危险

163
00:29:11,920 --> 00:29:13,680
我不知道我不所谓

164
00:29:14,480 --> 00:29:19,040
对其实我不是特别理解啊那个事情它有很多办法可以沃克扔的

165
00:29:19,360 --> 00:29:25,280
对根本不需要这个开源项目给出一个很快的费根本不需要对

166
00:29:25,840 --> 00:29:29,120
它不属于那种就是很恶心的吧人很恶心吧什么概念呢

167
00:29:29,120 --> 00:29:32,880
就是你这个库里面有一个我必须要用到的feature

168
00:29:33,120 --> 00:29:37,120
然后这个feature更新之后出错了它工作不正常

169
00:29:37,600 --> 00:29:39,200
那我根本没有沃克扔的

170
00:29:39,760 --> 00:29:41,440
我退到老版本没这功能

171
00:29:42,000 --> 00:29:44,080
这个新版本里面这个功能出问题了

172
00:29:44,560 --> 00:29:47,440
这种它就必须要等上游的fix

173
00:29:47,680 --> 00:29:50,880
但是他提的那个问题呢我看了一下如果没理解错的话

174
00:29:50,880 --> 00:29:53,280
我觉得它有无数种沃克扔的办法

175
00:29:53,280 --> 00:29:56,640
对但是它却在这里要求开源社区去快速

176
00:29:56,640 --> 00:29:59,840
那这个假设我是开源的维护者会觉得你这是啥优先级啊

177
00:29:59,840 --> 00:30:02,240
你这根本在我这里不可能排到很高优先级啊

178
00:30:02,720 --> 00:30:04,640
更何况你还是微软

179
00:30:05,120 --> 00:30:08,400
对开源公敌是吗

180
00:30:08,960 --> 00:30:09,920
不光是开源公敌

181
00:30:09,920 --> 00:30:14,240
因为业界通常认为微软有很强的技术实力

182
00:30:14,960 --> 00:30:18,080
嗯你自己都不能搞定你是怎么进微软的

183
00:30:18,080 --> 00:30:20,640
对你费斯之后你给我个PR不好了吗

184
00:30:20,640 --> 00:30:21,120
对啊

185
00:30:22,160 --> 00:30:26,480
是呵呵所以真的那个人不太会说话我我的感觉是这样

186
00:30:26,480 --> 00:30:26,960
对

187
00:30:28,000 --> 00:30:33,280
该项其实挺多的你看光我们这个节目都已经聊了好几次

188
00:30:33,680 --> 00:30:37,840
开源呀和这些越来越多的这种安全视角

189
00:30:38,400 --> 00:30:40,720
对其实有有两观察一方面呢

190
00:30:41,200 --> 00:30:44,320
开源的这个趋势还是越来越热烈

191
00:30:45,040 --> 00:30:48,960
对包括对开源的这种依赖度

192
00:30:49,760 --> 00:30:51,600
对其实也是越来越多

193
00:30:52,240 --> 00:30:56,640
对这是一个本身软件行业的一个非常重要的一个特性

194
00:30:56,880 --> 00:31:02,160
对第二个呢就是像这种安全视角包括现在的这种资讯发达呀

195
00:31:02,640 --> 00:31:07,760
对以及嗯也有很多开源的项目不断去尝试

196
00:31:07,840 --> 00:31:10,000
各种商业化的一些发展

197
00:31:10,560 --> 00:31:13,680
对究竟就是究竟现在这个时代呀

198
00:31:14,080 --> 00:31:18,000
就是开源这件事情究竟怎么样去可持续性

199
00:31:18,560 --> 00:31:22,640
对我觉得还是一个挺值得去思考的问题

200
00:31:22,800 --> 00:31:27,760
对其实刚才老庄其实已经开始有有有一些这方面的一些一些点了

201
00:31:28,080 --> 00:31:32,480
对就是企业还有这些社区还有基金会

202
00:31:32,800 --> 00:31:37,280
对吧这几个方面怎么样共同去形成一些合力

203
00:31:37,680 --> 00:31:43,120
对吧而不是像一些大微软每次出一些问题

204
00:31:43,360 --> 00:31:47,520
对那可能就借机呀或者是吸引流量呀

205
00:31:47,840 --> 00:31:50,960
或者是抖一个激励呀对就是类似这样的事情

206
00:31:51,440 --> 00:31:54,320
对因为我也知道那个庄老师提到的

207
00:31:54,720 --> 00:31:58,800
嗯像利多方推行旗下的一些子基金会

208
00:31:59,040 --> 00:32:05,200
对专门去识别一些对既比较关键的一些开源组件

209
00:32:05,520 --> 00:32:09,440
同时呢也存在不是背后有大公司支持

210
00:32:09,600 --> 00:32:13,840
可能就一两个维护者甚至有一些常年去

211
00:32:14,080 --> 00:32:16,640
嗯没有去活跃和维护的项目

212
00:32:17,040 --> 00:32:19,840
对怎么样去资助它更好的去发展

213
00:32:20,240 --> 00:32:25,360
对但是那可能方基金会特别是只是利多

214
00:32:25,360 --> 00:32:28,000
利多方类型的基金会可能也不足够

215
00:32:28,320 --> 00:32:32,800
对虽然他们也有这个心对因为毕竟像刚才也提到就是像

216
00:32:33,200 --> 00:32:36,960
安全这个事情啊它还是一个非常非常专业的事情

217
00:32:37,280 --> 00:32:41,920
还是挺需要一些嗯专业的人来去干这些事的

218
00:32:42,400 --> 00:32:48,800
对那这个呢后续嗯其实我也没有特别好的一个一个主意啊

219
00:32:48,800 --> 00:32:55,600
但是我总觉得还是挺挺希望有有什么好的方法至少能够让它改善啊

220
00:32:56,400 --> 00:33:02,240
对这里涉及到一个我一直以来的一个疑惑啊就是开源软件

221
00:33:02,240 --> 00:33:11,280
我们在使用开源的代码的时候跟我们使用我付了钱的买的商业软件和商业代码的时候到底有没有差异

222
00:33:11,920 --> 00:33:17,040
就是它承担的责任和我对它的期待到底是有多大的差异

223
00:33:17,680 --> 00:33:22,400
现在其实开源软件开源也不一样有些开源软件真的已经到了

224
00:33:22,720 --> 00:33:25,520
刚才说的我们提到的这种技术设施的程度了

225
00:33:25,600 --> 00:33:30,720
最基本的比如说加解密和压缩解压缩这一类的

226
00:33:30,720 --> 00:33:34,880
然后就是网络上的一些通信用到的常见的一些库

227
00:33:34,880 --> 00:33:39,840
那么这些基本上都是在哪哪都会用到比如雷宁斯基金

228
00:33:39,840 --> 00:33:44,320
它一定会对这种级别的库会有一个更强的一个关注列表

229
00:33:44,320 --> 00:33:48,640
但是还有一些东西它是关注不到的比如说一些开发用的库

230
00:33:49,200 --> 00:33:54,560
或者不是系统不是操系统本身很常用的那些开发用的库

231
00:33:54,560 --> 00:33:58,160
比如最经典的前端的一些库但它用的也很广泛

232
00:33:58,560 --> 00:34:01,920
你随便打开一个机器里面很可能都有这样东西在里面

233
00:34:02,800 --> 00:34:05,840
所以到底我们怎么看待它我们怎么要求它呢

234
00:34:06,720 --> 00:34:10,960
出了问题责任算谁的开源社区的维护者肯定不认为是它的责任

235
00:34:11,600 --> 00:34:15,120
当然出了问题它会承受很强的影响这是肯定的

236
00:34:15,120 --> 00:34:17,440
但事实上真的是它的责任吗也说不清楚

237
00:34:18,160 --> 00:34:22,880
其实我们可以沿用一个比喻啊就叫做工地悲剧

238
00:34:23,520 --> 00:34:30,960
嗯或者说叫做搭变车效应简单的就是说呃安全这件事情搞得好

239
00:34:30,960 --> 00:34:39,680
那么就大家都会受益因为你相当于是为全世界所有用同一款开源软件的人都增强了它的安全性

240
00:34:39,680 --> 00:34:46,080
这是一个公共受益的事情但是呢一定会有人愿意或者说试图搭变车

241
00:34:47,280 --> 00:34:50,800
因为只要有人把这个安全漏洞修掉了我也就安全了嘛

242
00:34:50,800 --> 00:34:59,680
我最多跟着升个级就行了很多企业呃越是这种斤斤计较的企业越是没有长远的预眼光的企业

243
00:34:59,680 --> 00:35:19,280
它当然会等着别人去把把这种漏洞修掉当然也有可能它的体量很小了就同样的一个安全漏洞出来以后人家企业大型平台互联网平台的损失是以几十亿美元计它可能就几百万或者甚至几十万甚至都没什么损失完全有可能

244
00:35:19,840 --> 00:35:42,400
所以它当然没有动力去修复这样的漏洞或者说积极的为安修复安全漏洞去出钱出力出人都没有没有这个意愿这是一方面另外一方面就哪怕是受到损失的企业它的逻辑也很简单就是我尽可能的减少我的付出我只在真的遇到了安全问题的之后再去修一修

245
00:35:43,200 --> 00:36:02,720
其实我今天在跟范露聊天的时候在说说厨房里当我发现一一个蟑螂的时候其实当然我们理论上会认为这个厨房里面可能已经藏了上百只蟑螂了但是对于企业来说它只会找到那个蟑螂出来的那一个洞堵上它不可能把整个厨房的所有的蟑螂全找出来全杀掉

246
00:36:03,520 --> 00:36:09,760
因为这对它来说成本太高了而且相当于它在为别人去去做了太多的贡献凭什么

247
00:36:10,720 --> 00:36:13,200
这就是一个一种赌徒心理吗

248
00:36:13,760 --> 00:36:20,640
就读我下次没这么倒霉吗对对就是下次应该轮到别人了吧我我就把我这个赌上就可以了

249
00:36:21,200 --> 00:36:32,800
所以所以现在包括各家大厂去向OpenSSF或者向OpenChain向这些开源供应链安全相关的基金会去捐赠的时候它的钱都不多

250
00:36:33,120 --> 00:36:37,600
这就是现状这个现状就是说我们假设它自然发展的话

251
00:36:37,600 --> 00:36:47,280
它几乎不可能有一个飞速的改进除非就是一次又一次的越来越严重的越来越耸人听闻的安全漏洞投毒事件出现

252
00:36:47,680 --> 00:36:55,680
然后这些大厂大企业会逐渐的提升自己在安全领域的投入越来越有意思的系统的逐渐的投入

253
00:36:56,160 --> 00:37:05,200
从这个角度来说我我认为这个趋势很难被加快除非是什么呢我我就就今天也在说到就是说欧盟的做法

254
00:37:06,160 --> 00:37:11,600
以及其他的国家也应该去效仿的一种做法就是通过政府施加压力

255
00:37:13,120 --> 00:37:27,680
把一个可能出现安全漏洞之后的损失进一步的放大放大到一个让企业心惊肉跳甚至会说你杀鸡儆猴一个企业被罚款其他的企业都会怕到这样的程度

256
00:37:28,160 --> 00:37:35,120
那么才会有更多的钱会流向开源生态流向供应链安全否则的话这样的一个流速

257
00:37:35,200 --> 00:37:35,760
是不够的这个首先我觉得欧盟的那个做法很难啦嗯现在中国和美国的行业的领导者们都在暗笑啊就觉得欧盟这个叫自断经脉啊自觉武功的做法现在欧盟已经是一个几乎不可能出创新的一个地方了他已经把这些可能性都封死了你真的要在很多事情里面做的话你不能有这么大的风险施加到企业身上嗯这个其实是有很大的副作用的

258
00:38:05,200 --> 00:38:35,200
这是一个第二个呢就是我突然想啊之所以现在是刚才老庄说这种现状那唯一的解释就是危害还不够大对就是没有出现那么大的危害那就说明现在这个投入也就够了这就是现状就是这样嘛那我就突然可以理解就很多那个游戏啊RPG里面的那些最终 boss他们的出发点可能是好的就是他觉得有某个事情

259
00:38:35,200 --> 00:39:05,200
很恶但大家都没有引起足够的重视昨晚让我来使用一种超自然的力量让这种恶变得特别夸张啊毁灭世界看你们还紧不紧张你们来打我呀很多游戏加速版对就是加速快嘛很多游戏的 boss都是这风格但是我觉得好像在开门这事上还最好不要这样啊这样说起来搞不好这个 X 的投毒事件是某个加速派干的呢也说不定啊

260
00:39:05,200 --> 00:39:07,080
嗯突然觉得有合理性

261
00:39:07,080 --> 00:39:13,760
嗯说不定是个好人呢说你们都不重视开源软件的供应链的这个安全问题

262
00:39:13,760 --> 00:39:25,160
我来给你们我来给你们整个大的嗯好吧毛骨悚然然后好像嗯没有更好的解释

263
00:39:25,160 --> 00:39:35,160
反正现在我觉得就属于危害还不够大嗯没有出足够这这说明什么说明就是那些最 critical 的系统啊它的安全性真的还是可以的

264
00:39:35,160 --> 00:40:05,160
就是那些系统本身自己投了很多钱去提升那个系统整合之后的安全的可靠性这个肯定还是有这样的东西的但是很多其实对供应链上出问题中小企业反而是受害最大但这些企业呢怕受到害又不足以引起很大的后果那所以大约限制之量哎呀这个反正再看吧我觉得确实近几年基本上每隔个半年左右都会出大了半年到一年啊

265
00:40:05,160 --> 00:40:35,160
出一个比较大的这样的事件而且我我自己的感觉是投毒手法越来越隐蔽然后可能的危害越来越大这个是一个趋势对而且我担心一个点就是未来AI发展得越来越好啊嗯这种事儿啊它跟其他很多事情不一样的点在于它这个事儿AI真的能做得相当唬人啊嗯对因为你看完社讯吗

266
00:40:35,160 --> 00:41:05,160
是能够通过邮件一序的跟踪的系统来协作的你这个玩儿就是纯文字交互甚至都不用上deepfake对吧你就在这个社区里瞄准几个比较活跃的人把他们的语道训练一遍啊听上去就挺像个专业的开发者了那造出一堆的虚拟的开发者所以代码提交前先做人脸识别人眨眨眼动动手所以这就是为什么我一直说就是开源有一个很大的问题

267
00:41:05,160 --> 00:41:35,160
这样地方在于商业软件每一个代码是谁做的什么时候做的它是百分之一百可以追溯的嗯因为它是雇员它是建立了现实世界的法律联系的人嗯但开源世界里这个真的不是那什么时候开源社区比如给它强制要求你实名认证或者像你刚才说的要刷脸了那是不是反而也会影响开源的活跃度或者让很多人就望而却步了现在呃

268
00:41:35,160 --> 00:42:05,160
威尼克斯基金会有一个开源项目跟我们那个天空开户基金会也在力推的叫sigstore嗯就是signature store大概的意思就是在开源供应链的每一个环节引入签名制度对嗯对它也是希望有大的问题啊就是它实际上强制要求所有的贡献者都必须获取一个可信的签名是的这个事其实很多人是不接受的对不愿意参与的所以anyway就是

269
00:42:05,160 --> 00:42:35,160
拿的就是你总之要牺牲点什么的你不可能真的没有任何代价就就搞定啊这就非常难嗯好那这个我们就先说到这吧我们改看下一个啊下一个是这样的就是我们老庄啊在知乎上看到一个非常有意思的问题啊这个问题他问的是这样的说为什么python内置的sort排序的那个函数啊比我自己写了一个快速排序内置的那个版本比我写的要快一百倍

270
00:42:35,160 --> 00:43:05,160
啊是这么一个问题这个问题本身呢就挺有意思的啊我后面专门去做了些考证啊这个等下再说但最有意思的是有一个回答他回答是这样的他说程序员的常见错觉三大错觉第一我超越了标准库那就是我可以比标准库写得更好第二我比编译器聪明我能够把代码优化得编一些好第三我能管理好内存我不信任那些帮我管内存的

271
00:43:05,160 --> 00:43:35,160
方法然后下面有一个更有意思的评论啊这评论说反过来了啊他说实际上很多甚至更多的开发者是另一个极端他们的三大错觉是这样的第一标准库是神邪的第二编译器不可能出错第三我不配管理内存非常有意思啊截然相反的两个嗯都是错觉我这我也承认这就是这六种都是错觉嗯

272
00:43:35,160 --> 00:44:05,160
但我觉得后面这个实际上呢我个人认为就要好很多啊就是就是你如果错觉是后面这个版本的话至少它没有太大危害嗯就是标准库是神邪的编译器不可能出错我不配管内存这什么意思呢就承认我水平一般嘛我标准库里有的我就用我不要去尝试去写得比它更好这本身就很难真的很难嗯第二编译器不可能出错你遇到编译器出错的概率

273
00:44:05,160 --> 00:44:35,160
你讲那就是比中彩票也多吧多少所以你就考虑找问题就好其他问题的话都是OK的啊第三个不配管内存那确实是就手动管理内存的能够掌握的很好的人确实就少所以如果你对这个没有自信的话用一个有内存管理体系的比如像甲瓦这种实体机自动垃圾回收的那其实可以省很多事让你把更多的精力放在业务或者那些你能驾驭的领域所以这三个呢虽然也不对

274
00:44:35,160 --> 00:45:05,160
了标准库显然不是谁写的编译器偶尔也真的有可能出错肯定都不对但是呢对绝大部分程学来讲我觉得后面这个错觉呢它的危害没有那么大作为技术管理者或者是产品经理之内的人碰到前面那三个错觉的人那真的是头大就没事就要这个标准库我不用了我要自己写更好的嗯得花很多时间那我一定要把这个代码写成这个样子这样编译器才会优化得比较好

275
00:45:05,160 --> 00:45:35,160
其实越先进的编译器越不会在乎你这东西这个典型的就是C语言的编译器那经过这么多时间的历练啊它的静态分析啊等等的话那确实比一般的人样强多了然后说我能管理好内存啊这个呃如果你真的是用C啊或者类似这种需要自己去管理内存的话稍微复杂的系统其实就非常容易出问题所以为什么甲瓦是很多很多巨大型的系统就采用了呢实际上就这个问题

276
00:45:35,160 --> 00:46:05,160
规避掉能省很多事实际上甲瓦虚拟机的机器啊那个垃圾回收的系统也是它的重灾区啊我当年在九零年代零零年代用甲瓦的时候那个机器几乎就没正常过我们那个时候写的一些大型的系统那每个月重启一次几乎是一定要的否则再多内存也都会耗光的那就是版本的问题就我们仔细地排查过然后也找厂商什么三啊爱彬他们去研究

277
00:46:05,160 --> 00:46:35,160
之后确定就是关于你的问题那现在会好很多现在就比那个时候真的已经成熟太多了就这种事情会少很多但是也仍然没有办法完全避免但不论怎么说它这个也比你手工的要强得多因为那个毕竟是世界上最一流的人去做出来的所以这个事儿个人感觉就这样其实这些确实也都是错觉但是后面这个稍微好一点就危害是小一点嗯谦逊一点肯定是对的啊是然后嗯

278
00:46:35,160 --> 00:47:05,160
其实另外一种心态就是说谦虚是一方面啊为什么我也会支持那种嗯是错觉或者说其实它不仅仅是代表的心态是一种谦虚的心态其实还代表着更重要的一种心态叫不求甚解嗯嗯就是就是啊这个全交给谁吧我就不用想了那么其实这样的程序员最常见的一种结局啊就是我就写写业务代码吧嗯我就把手上的这点

279
00:47:05,160 --> 00:47:35,160
专班了吧这个呢是有可能限制一个程序员的成长我我们说一个程序员他他什么时候成长最快呢其实你不甘心你想跟大神掰掰腕子你想去找到一些系统级的bug的时候就哪怕不成功的成长也会更快一些嗯我就补充这个嗯确实嗯啊我顺便说一下原始的那个问题是为什么就是为什么拍摄内景

280
00:47:35,160 --> 00:48:05,160
制的那个塞比自己写的快速排序要快那么多两个原因啊第一个原因是拍摄这个语言还挺时髦的我为了这个问题专门去查了一下我才看到就是其实拍摄一直在更新在迭代它内置的那个排序的算法过去的那个算法呢是基于规定排序啊摩托塞的一个优化的版本所以本身就比较的高效啊当然我们知道摩托塞跟这个快刷跟这个快速排序

281
00:48:05,160 --> 00:48:35,160
相比这两个呢在比较好的情况下都是恩成劳根的时间复杂度但是区别在于摩托塞的是稳定的它在日对任何数据集它都能保证恩成劳根的这样的时间复杂度但它的代价就是它需要一个额外的跟原始数据一样大的缓冲区啊它在内存上需要占用一点当然现在大家都觉得内存跟时间相比还是时间更宝贵嘛所以这个被认为不是个大问题

282
00:48:35,160 --> 00:49:05,160
如果你测试的这个级包括你写的快刷算法里面选取那个基准值选的不好的话你随便选一个那很有可能概率上就达不到快刷最好的那个级别但是摩托塞没这个问题就你不用选它跟数据机没关啊它就是会比较稳定一些然后呢在最新的三点一零不知道三点一一里面凯森又升级了它这个算法

283
00:49:05,160 --> 00:49:35,160
是一个最好的塞的算法叫抛塞有大家有兴趣可以去查一下它实际上也是摩托塞的一个变种但是性能更好更优化一些所以它本身算法就比你一个正在学排序的人写的快刷要快这是肯定的这是一个方面那另一个方面呢可能更直接一些就是内置的那个塞的函数它底层实际上是用c语言实现的

284
00:49:35,160 --> 00:50:05,160
是一个高度优化的一个塞语言然后通过高度优化的编译器编译出来的直接可执行的代码然后通过派森和塞的接口来调用的其实派森用这种方式啊提供了非常多的优化比如派森里面有一个现在对于派森来讲我经常讲原来Ruby为什么火因为有Ruby on Rails这样的killer级的APP这样的应用的环境那派森的killer级的应用是什么呢我认为是它的那个难品的那个功能

285
00:50:05,160 --> 00:50:35,160
库啊就它那个数据算的那个库它那个库其实底层就几乎核心的部分全都是用塞写的什么那个数组的实现啊然后数组的一些最基本的操作包括什么矩阵相乘啊这样的一些最耗时的操作统统都是那种很高效的塞语言做的所以这方面他投入了很大的资源精力那么自然也就获得了很好的回报那假设我们有一些小朋友自己去

286
00:50:35,160 --> 00:51:05,160
写一窥掃写的也很地道啊没问题这个要跟我刚才说这种啊第一是C源优化代码第二是一个更高效的算法我觉得还是会有差距啊是不是一百倍这个不好说这个看他怎么测试的听来李老师刚才解释一下包括这个题目其中我觉得是它自然是个挺好的题目特别是如果把它再用在一些教学或者是一些面试复试场景里嗯其实里面包含的知识点还是挺丰富的对吧

287
00:51:05,160 --> 00:51:35,160
第一个是排序我们知道不存在在所有情况下都能够最优的一个排序第二个呢就是包括派生本身类制的那个排序它的不同的版本是用什么实现对其实我也是第一次听到那个李老师解释最新的还有呢就是一部分的一些派生的一些库对特别是常用重要的对会用

288
00:51:35,160 --> 00:52:05,160
c这样的一些语言去做加速对因为嗯拍摄嘛我们在教学的时候很多时候都会去说那个它相对于很多其他语言不是一个嗯是一个快的语言以及怎么样去比较算法之间的这种速度对这些东西呢其实都考到了呵呵嗯还是个挺好的题我不是今年我们在搞那个算法和人工智能的那个新课程吗

289
00:52:05,160 --> 00:52:35,160
对对所以我做了一系列的算法的重新我自己手写了一些算法和它的benchmark嗯然后确实发现很多地方是有很大的差异的我举个例子我们很多算法做测试的时候我需要一个很大的数组啊比如说一千万甚至一亿个元素的数组它里面的这个数是随机生成的然后我用它来测试排序啊或类似这样的性能对吧哎就很明显假设我用拍摄内置的算法去用

290
00:52:35,160 --> 00:53:05,160
并将类似这样的函数去生成随机数或者我调用难品它也有一个专门的函数能够生成零到一之间的随机数随便多少个你指定就行这两个就有数量级的差异就速度这就很明显就是因为难品是底层是c语言高度优化的啊嗯所以后面很多这种跟benchmark有关的我就不太会用拍摄自己自带的那个list了就会去用一些这样高效的库

291
00:53:05,160 --> 00:53:35,160
类似这样的东西的话呢对于如果你是干这个语言的职业的程序员的话那对你是常识但是对于学习的人来讲很多学生尤其我们现在大学里没出校园的学生他对于性能这个事情他没有体感嗯那类似这样的事情可以给他很好的体感就是作为教学材料来讲我觉得非常好对对而且还挺有意思的就是让他感觉到哎这个不是很虚的书本里的东西

292
00:53:35,160 --> 00:54:05,160
它是我实际就能体验到的好那这个就先这样啊我们来看下一个话题啊那就是这样的就是重构还是重写啊这也是软件工程里的一个经典的难题了那最近我们看到这个故事呢是来自于林克因啊被外说购的这家巨大的在北美非常有影响力的求职啊和职业信息分享的这样的一个社交网络那么他遇到的一个问题呢就是时间太长了

293
00:54:05,160 --> 00:54:35,160
积累了非常海量的前端的代码那么这里面问题很多到底怎么做啊这个技术路线上发生了问题啊就最后导致其中有一个很资深的技术负责人就因为这个句话他不是很认可他就说他不干了这个故事要不老庄跟我们来先说一说这个事情然后我们来讨论一下关于重构还是重写的问题这个事情其实呃我稍微简单说一下吧英佛Q上这篇文章还挺长的

294
00:54:35,160 --> 00:54:44,120
嗯就是简单的说就是林克因里面呃有一个官网的技术负责人他已经在这上面工作了将近五年了

295
00:54:44,120 --> 00:54:53,080
然后呢前端代码就有两百万行嗯还不说后端前端代码两百万行构建时间长达十七分钟

296
00:54:53,080 --> 00:54:59,480
然后呢大家都受不了了因为这个已经呃太多太多了他们他们想迁移

297
00:54:59,680 --> 00:55:05,840
然后之前的代码的话呢是基于安波尖点结石他们想迁到锐亚特

298
00:55:05,840 --> 00:55:11,960
然后呢作为一个比较谨慎的人他制定了一个五年迁移计划

299
00:55:11,960 --> 00:55:26,440
五年的时间逐步逐步地把一个基于安波结斯的一个前端的系统两百万行代码后面又变成了三百万行代码我不知道为啥这个这个文章里面一会写两百万行一会写三百万行

300
00:55:26,480 --> 00:55:35,920
然后五年之后最后全部地迁移到锐亚特进去但是呢在这个公司里面另外有一个团队提出了一个大爆炸式的替代方案

301
00:55:35,920 --> 00:55:44,120
干脆全部重写算了嗯嗯呃相比起这个叫克里斯的人的五年计划相比呢后者更能够投领导所好

302
00:55:44,120 --> 00:55:56,400
然后呢他的提议就落选了然后呢克里斯就当然有很多抱怨嘛一方面政治斗争失败一方面他会觉得领导公司怎么没有重视代码质量没有重视技术债务

303
00:55:56,600 --> 00:56:07,360
他并且还暗示替代方案估计也搞不好然后呢对着出于对公司技术文化的深深的失望这个叫克里斯的人离开了这个铃屏

304
00:56:08,640 --> 00:56:14,000
当然离开完了之后还写了很长的一篇文章对讲这件事情的来龙去脉

305
00:56:14,000 --> 00:56:26,240
呃说实话我我对这种怨户型的文章退一步越想越气是吧对为什么叫怨户型的文章呢就这种人一旦离开了

306
00:56:26,240 --> 00:56:26,320
一家公司而且是以这样的情况下辞职的人他不可能有什么好话嗯无论是对于系统的问题无论是对于问题的解决方案的描述包括对另外一个团队的攻击包括对于领导层的决策他都会有很多很多的负面的评价最后的结论当然是呃我是对的他们是错的而且他们早晚会栽在坑里这我就我们就等着看吧对最后将证明我是对的对

307
00:56:56,240 --> 00:57:26,240
对然后当然他会为什么叫怨户呢就他现在肯定在数啊看看这个林克尹什么时候宕机啊什么时候整个整个系统挂掉啊什么时候整个团队崩掉啊他都就在盼着这样的事情发生嗯但说实话一个系统如果要迁移五年你迁到哪个版本的react五年之后的react发展成什么样子前端框架的react还流不流行你都不知道对

308
00:57:26,240 --> 00:57:56,240
可能你签完之后又落后了对啊所以我完全不能理解一个迁移要五年然后他还觉得这是对的这这件事情在很多公司都无法被领导承接呢你说你要签五年然后IT现在的发展技术你不懂吗五年之后会发生什么事情你想你想过没所以所以我我对这个写字片文章的人有很多的负面评价就是说我我虽然不在这个团队里面

309
00:57:56,240 --> 00:58:26,240
真实的去讨论技术但是我观但是从五年这样的一个素质以及两百万行代码然后所以就要迁移五年这件事情来说我怎么听怎么就不像是一个正经的一个估算这是这是我一个简单的概述吧可以等会可以展开嗯就这种我称之为叫非常困难的技术决策就它肯定不是一个简单的事情它确实很困难但是呢基本上有几个原则

310
00:58:26,240 --> 00:58:30,040
第一呢如果真到这一步了不改是不行的

311
00:58:30,040 --> 00:58:36,160
你越往后拖债务会越来越多所以要当即立断越快越好地采取行动

312
00:58:36,160 --> 00:58:40,800
啊这是一个技术部的人应该要有的担当啊这是第一

313
00:58:40,800 --> 00:58:47,440
第二呢至于说具体的技术路线比如说选什么样的技术

314
00:58:47,440 --> 00:58:55,680
以及在具体的迁移当中采取什么样的策略比如说是完全重写还是渐进式的替代

315
00:58:55,680 --> 00:59:03,680
这个呢我其实觉得呢都是有可能的它主要要看团队和人

316
00:59:03,680 --> 00:59:09,200
就是有什么样的人你才能够选择合适这些人的方案

317
00:59:09,200 --> 00:59:22,240
所以从这个逻辑上来讲呢其实我很难判断这件事情里面谁对谁错但是我同意两个点第一就是刚才老庄说的无论如何这个五年都是没法接受的

318
00:59:22,240 --> 00:59:31,280
这有很多很现实的问题第一就是刚才说的你现在就选行五年之后很可能就已经不对了啊不是好不好的问题可能就不对了这是一种

319
00:59:31,280 --> 00:59:48,560
第二个这种技术迁移拖的时间越长对团队来讲是越是一种很沉重的负担和打击当你的团队投入大量的资源去做这样的一些技术迁移的时候那么它在一些新的东西的迭代上面就可能会受到一些影响

320
00:59:48,560 --> 01:00:08,960
所以这个时候整个团队会处于一个就不是很好的一个精神状态那反而会加剧它的一些问题我个人认为啊在一般的企业团队里面一到两年是极限了就是做这样的工程啊一到两年你做不完的那你这个方法一定有问题你得重新想别的办法对完全同意

321
01:00:08,960 --> 01:00:37,760
就这是一个极限了最好是一年之内能搞完不行的话跨年的话也不要超过两年否则的话整个是很难很难维系的啊这是第一个我觉得五年实在是太过分了这个任何老板不管他是懂技术的不懂技术的我觉得都没法接受这是第一个第二个呢我有一个可能算暴乱算偏见有点小偏见啊就呵呵就是我我比较倾向于就是在前端项目上是可以考虑完全重写的

322
01:00:37,760 --> 01:01:07,760
这个呢当我我是做后端出身的但是并不是真的歧视前端主要是由于这个前端它有一些特点为什么呢就是现在的互联网的应用架构里面不管你是网站这个他讲的例子应该主要是聆听的那个网站啊跟我们国内的情况不太一样美国现在有很多重要的业务仍然网站有相当大的流量比如像聆听这种业务它可能网站跟手机APP的流量相比可能是一半对一半

323
01:01:07,760 --> 01:01:37,760
甚至有可能网站会更大一点因为它是一个纯professional就是向职业的用户去提供的一个服务不像我们国内我们国内现在有手机的基本上网站就一个小头了但他们那边网站还挺重要的对它可能它网站的这个项目啊不管你是网站还是APP它前端的功能的迭代它有两个得天独厚的地方是非常利于它去做重构或者重写的第一

324
01:01:37,760 --> 01:01:40,560
它依赖的后端基本上是稳定的

325
01:01:41,760 --> 01:01:45,440
就是我后端基本上都已经API化了这些API即使要调整

326
01:01:45,640 --> 01:01:47,440
它也是非常结构化的调整

327
01:01:48,200 --> 01:01:51,240
因为长期运行下来没有出大的问题的话

328
01:01:51,360 --> 01:01:57,560
你这个业务后端所需要用到的数据是哪些怎么分组分类一定是确定的

329
01:01:57,960 --> 01:02:06,160
然后每组数据增杉改查分别是用什么样的格式什么样的输入和输出的协议一定也是确定的

330
01:02:06,160 --> 01:02:10,560
最多有一些局部的修改而且局部修改呢因为历史上已经改过很多次了

331
01:02:10,760 --> 01:02:15,760
所以后端都有办法适应你要加个字段减个字段你要换一换它的这个格式

332
01:02:16,000 --> 01:02:19,160
其实后端都很容易应对一般来讲是肯定做得到的

333
01:02:19,960 --> 01:02:24,760
所以后台的API是稳定的那就意味着什么呢意味着前端的代码啊

334
01:02:25,160 --> 01:02:34,440
它所面对的后端可操作的资源如果它的整个架构是真的比较接近我们所推崇的RESTFOR这样的架构风格的话

335
01:02:34,640 --> 01:02:37,640
那么后端能使用的数据是非常确定的

336
01:02:38,120 --> 01:02:48,040
这就意味着它出不了特别大的问题啊这是第一个很好的优势第二个优势就是前端它是非常容易测试的

337
01:02:48,640 --> 01:02:58,640
因为有产品团队的很详尽的spec这种用户需求规约啊另外有成千上万的用户在不断在用

338
01:02:59,840 --> 01:03:04,240
所以你没有什么隐藏的太阳照不到的角落很少

339
01:03:05,440 --> 01:03:10,720
如果真有那样的角落几年时间都没人用到的话那是不是都可以砍掉了就没什么用啊

340
01:03:11,240 --> 01:03:32,240
所以从这两个角度来讲的话就是它哪怕是重写整个前端的网站第一后端API陷死了你出不了大问题你出不了架构上的问题比如说你设计个方案它就无法支撑现在业务量这种事情就出不了因为后端已经帮你cover住了那个API那一层就把所有事情都搞定了

341
01:03:33,240 --> 01:03:40,440
第二呢就是高度可测试你每完成一个模块就可以进行很充分的验证和用户的测试

342
01:03:40,920 --> 01:03:47,640
所以从这两个角度来讲呢其实前端的选择是比较多的你不论是重构也好重写也好其实都问题不大

343
01:03:48,640 --> 01:04:01,920
好那最后可能他们的方案的差异啊我猜想啊很可能是在一些项目节点的设定上面会有差异比如这位克里斯写的这个五年的方案它可能偏保守

344
01:04:02,240 --> 01:04:07,840
但它这个过程当中也一定是一边改一边重写然后替换掉一个模块如何如何再怎么样

345
01:04:08,240 --> 01:04:13,720
但是它这里面是不是考虑了新系统和旧系统并存的时候怎么去处理的问题

346
01:04:14,240 --> 01:04:21,640
而另一个方案呢可能它的策略我不知道因为它没有具体讲它对面那个方案这也是这个人很糟糕的一个点

347
01:04:22,040 --> 01:04:31,320
就是如果你真的是一个就事论事的人的话你应该很详细地阐述你和另外一个方案的核心的观点以及一同所在

348
01:04:31,320 --> 01:04:37,800
这样你才好去比较嘛这篇文章虽然很长但是没有认真去讲这个让我觉得就是属于不够那么客观

349
01:04:38,800 --> 01:04:46,600
好那很有可能另外一个方案就比如说是分批分阶段的根据用户需求重新开发前端网站的所有功能

350
01:04:47,320 --> 01:04:55,520
然后继承API的设计继承前端的一些用户交互的设计顺便还可以做一些优化啊可能一年或者一年半的时间把它全部做出来

351
01:04:56,200 --> 01:04:59,000
他们统计一下所有的功能点认为可以做到那就做了

352
01:04:59,880 --> 01:05:08,280
这个其实我觉得是相当靠谱的没什么大问题只要他投入的这个团队的量能够按期把这个功点做完那就一定可以用

353
01:05:09,280 --> 01:05:16,400
而且这些代码是新的就算这个代码里有问题也比那个数年积累的三维行代码要更好维护

354
01:05:17,200 --> 01:05:23,200
毕竟是现实团队做出来的所以你要问我的话没有更进一步的信息的话我还是觉得重写比较靠谱

355
01:05:24,200 --> 01:05:30,200
我也认为呃一个系统复杂到一定程度之后就是所谓的史山

356
01:05:31,400 --> 01:05:41,280
宁可嗯就不我不管它到底有多复杂真的要一点点的抽丝剥茧地去给它改造真的不如重写

357
01:05:42,680 --> 01:05:51,760
是啊尤其他们如果要换框架的话那对呀太多的事情那就是拼命在史山里面找出能用的一点点把它迁移过来

358
01:05:51,960 --> 01:05:54,360
这个累死人了对

359
01:05:55,360 --> 01:05:58,160
对我正好也有两个相关的观察

360
01:05:59,160 --> 01:06:07,760
一个是以前我们聊过就是企业现在一个很大的一个困难就是要处理一些遗留代码

361
01:06:08,760 --> 01:06:17,160
包括员工离职对吧怎么样去维护对吧甚至有的不愿意维护直接重写

362
01:06:17,760 --> 01:06:20,840
这个是一个整开发者职业更愿意干的事儿

363
01:06:21,360 --> 01:06:25,960
第二个呢其实我们学校的同学我觉得我也个挺好的观察两两位老师可以看一下

364
01:06:26,760 --> 01:06:34,760
对就是我们会去问同学你擅长什么或者是年轻生阶段在开发这一块你更愿意偏向哪一块

365
01:06:34,760 --> 01:06:40,160
大概十个里面有八个都是更愿去做后段

366
01:06:41,160 --> 01:06:51,160
现在我们做开发这一块前端的同学特别特别细确你问他为什么哎你你为什么要写后端

367
01:06:51,160 --> 01:07:02,160
他就觉得后端稳定那个不用老是变据说企业界职业发展职业规划是不是会更好一点

368
01:07:03,160 --> 01:07:05,160
对这是大家的看法

369
01:07:06,160 --> 01:07:09,160
这个我先说啊然后老庄你可以纠正

370
01:07:10,160 --> 01:07:20,160
我觉得这个观点很可能是不对的嗯有两个问题啊第一个问题是后端真的要达到一定的水平比前端要难很多

371
01:07:20,160 --> 01:07:27,160
要需要长得多的时间很多东西你没有亲自碰过的话学校里当然更不会教了

372
01:07:27,160 --> 01:07:33,160
我现在看到学校里面涉及到后端真正比较实用性的东西很少这不光是我们国家美国都一样

373
01:07:33,160 --> 01:07:42,160
就是关于后端的比较有力度比较有分量的技术性的文章基本上全是大企业出来的没见过学校里出来的学生根本接受不到

374
01:07:42,160 --> 01:07:50,160
所以他其实很难一就业他马上就能够成为后端的比较专家的人但是前端其实入门的门槛低很多这是第一个

375
01:07:50,160 --> 01:08:01,160
第二个呢前端的人才的需求量永远是比后端要多很多的就像刚才说的后端相对来讲我们比较希望它稳定一点

376
01:08:01,160 --> 01:08:08,160
嗯所以呢它一般来讲都是交给非常资深的很有经验的架构师去设计整个框架

377
01:08:08,160 --> 01:08:22,160
然后模块也是给一些比较熟手去做的但前端不是这样前端它是跟着市场跟着用户跟着产品经理甚至跟着老板的想法在不断地变的

378
01:08:22,160 --> 01:08:29,160
所以前端的整个做了改改了做这个循环的次数要远远多于后端

379
01:08:29,160 --> 01:08:38,160
所以它需要的团队和人才的数量也是大很多而且它呢像我刚才说的它闹不出特别严重的问题

380
01:08:38,160 --> 01:08:48,160
所以也比较放心让新人去做所以不论从哪个角度上来讲的话编程最容易入门的点一定是在偏前的部分

381
01:08:48,160 --> 01:08:57,160
当然也不排除有一些同学他会很适合一先来就后端这当然没问题但是我刚才说的这是一个统计意义上的一个大概率事件

382
01:08:57,160 --> 01:09:04,160
如果有刚才这个说法要么就是这个人很特别他通过某种方式他很早就领悟到了这里面的特色

383
01:09:04,160 --> 01:09:11,160
然后他喜欢并且擅长后端的一些思维模式和一些技术啊这个没有问题

384
01:09:11,160 --> 01:09:22,160
但更大概率的呢很可能是他对于后端的人员的要求和他的能力级啊可能不一定理解得很对这是我的一个想法

385
01:09:22,160 --> 01:09:26,160
我有点反其道而行之啊

386
01:09:26,160 --> 01:09:37,160
就是因为前端入行容易学起来快所以作为一个程序员尤其是新人程序员的话你先在后端干

387
01:09:37,160 --> 01:09:49,160
务以期为贵是吧对啊你你将来转前端也不难而且说难听点你现在转前端和两年后再转前端可能学习的内容都不一样

388
01:09:49,160 --> 01:10:05,160
两年前学的东西也白学所以从某种意义上来说先在后端打下扎实的基础了解后端到底是怎么工作的然后将来更有可能成为一个优秀的前端

389
01:10:05,160 --> 01:10:18,160
嗯暗度陈昌是吧对是不是有点道理其实啊我现在在学校里面给学生一些建议啊我都建议他们在目前阶段不要去区分前端和后端

390
01:10:18,160 --> 01:10:48,160
最好做一个全站程序员就是你从数据库的结构的设计到基本逻辑的实现到前端的用户交互界面最好全能做这个其实是最好的而且我以前在公司里招人的时候啊我就最喜欢招这种人就他其实可塑性会更好嘛嗯就我很清楚地知道他不可能从要毕业在我这里就是立刻合用的但是如果他自己全站他都玩过那我可以根据需要去在定向地去配合

391
01:10:48,160 --> 01:11:18,160
培养他但是他基本上有一个完整的链条他是串起来的我最怕的是什么人哦最怕的是那种实习啊毕业的头几年啊都在大厂里面做一个螺丝钉只做一个岗位上很局限的事情的那种人比如说我就只做过前端的加斯奎所有的API我都不知道怎么设计出来的我只去调他给我一个杰森啊那个串我剩下心我来搞前端东西或者他只做后端的呃数据库的管理员迪别除此以外别的事情没做过啊

392
01:11:18,160 --> 01:11:26,720
只做后端的一些简单的封装我觉得他非常窄的那种是最难用的这个我同意嗯

393
01:11:26,720 --> 01:11:27,040
所以说不容易啊因为很多同学其实就是希望哎呀这个技术变化那么快我就想把一行某一个掌握在手里对然后呢是不是可以以后一直做到职业第二个呢就是前端这个事情啊我还有个观察就是因为前端这个东西还要和用户打交道对我们很多同学呢他更愿意更系统比如说我跟数据库打交就好了我跟用户打交道他就嗯挺难的

394
01:11:56,720 --> 01:12:26,720
对这个其实呢说实话就是我接触了那么多的程序员我认为优秀的程序不管前端后端的你最怕的这个也恰是你最离不开的就是你一定要跟人打交道嗯是的软件以人为本你哪怕是做后端架构师的其实后端的架构师做到顶级之后他主要能力是啥其实是理解需求就怎么把一个业务上的需求非常敏锐

395
01:12:26,720 --> 01:12:56,720
的把里面的技术需求剥离出来这个其实是除了经验以外是很多其实是人情和业务相关的东西而不是那些很生硬的框架我见过一些很年轻的就是阅历没有那么好的一些人但是很聪明技术基本功也很扎实所以生得很快很快就变成架构师了但是你会发现这种他经常会用一些很炫的技术架构业界很流行的啊我看到什么什么公司这么做

396
01:12:56,720 --> 01:13:26,720
的但是其实他用在这个公司未必适合有很多原因不适合钱可能花的钱太多第二可能不适合这个团队这个团队驾驭不了啊第三可能他不知道怎么拿这个技术架构去说服其他的人各种各样原因就导致他最后其实没有办法很好的做到这件事情所以那前端更是吧前端我以前招前端的程序员我都要求他有一些我称之为叫用户感我经常问的问题就是因为前端的不论是设计

397
01:13:26,720 --> 01:13:56,720
还是程序员都很喜欢拿自己的作品来看嘛我打开他的作品网页或者是APP我就问他这是你自己设计的吗啊是的我说你觉得能用吗你喜欢这样去交互吗他如果说不出个所以然来那作为前端来讲就欠缺就很大所以可能各有各的考验吧但无论如何跟人打交道是一定要的嗯很重要要这样跟同学说就是哪怕你不去跟用户打交道你也要跟产品经理打交道对啊

398
01:13:56,720 --> 01:14:26,720
你说这个功能必须做然后你能说得清楚为什么可以不做吗否则你连跟产品经理谈判的资格都没有叫你做你不就做了我最早那份工作不是做2b的生意的吗给政府和企业做系统的吗你知道政府和企业的项目里的产品经理是谁吗是那个假方嗯这个媒体比你公司里技术人员跟产品经理聊还地位不平等还惨对那那个时候我靠什么说服他呢

399
01:14:26,720 --> 01:14:56,720
这种情况就是他要东西是这样子我能给他东西呢比他要东西会稍微差一点点但是实现的成本代价会低很多很多那我怎么说服他就这其实是一个本事我觉得我很大的一个本事在那个时候练出来的就是我能够把这个包装的很高大上不是我为了省钱而是哎这个技术架构比较合理满足你以后东西虽然离你说那个有点小差距但本质是差不多的都ok的但是呢哎你能省很多其他东西

400
01:14:56,720 --> 01:15:26,720
赔钱也方便如何如何就有很多东西实际上就是肯遭他那套东西嘛嗯里边有一半是忽悠人的一半也是对的哈哈哈挺好挺好嗯我也补充一个就是当年我在一家渡币的公司的时候我自己不行啊但是我跟着我的老板去跟那个客户谈我那个老板为了能够让客户更听他的话甚至还花钱去读了个博士啊是这个很有用啊在在两千年的时候

401
01:15:26,720 --> 01:15:31,960
就是两千年到两千零四年的时候那个时候的博士还是值钱的

402
01:15:31,960 --> 01:15:42,600
你不管他真的假的对然后就跟政府里面的那些管IT的主管一谈说未来的电子商务未来的数字化城市哇是砍得人家晕头转向的

403
01:15:42,600 --> 01:15:54,520
然后对对对要听要听这个张博士王博士的就听了嗯然后我当时就就理解到一点就是说低端的开发人员是满足用户需求

404
01:15:54,800 --> 01:16:04,360
高端的大佬是直接去引导用户需求的直接把人家用户牵着鼻子走的这才是高端对啊不然怎么赚钱对嗯

405
01:16:05,120 --> 01:16:12,760
所以老外像艾比恩吗他们这些做色录的他们就一句名言嘛就是肯遭他卖不进去的话产品就不要卖了

406
01:16:13,320 --> 01:16:21,600
嗯你没法影响对方的需求情况下你进去做项目就一定死在里面嗯所有的弊端生意都是这样

407
01:16:22,240 --> 01:16:43,960
好吧我们从这个重构还是重写扯远了啊我们就先说到这吧哈哈哈嗯好的好的嗯好最后一个我们来聊一聊怎么通过开源项目来学习的问题这个呃缘起是对王老师最近你们俩都去深圳开了那个会啊然后王老师碰到一个很有意思的一个本科生啊给我们讲讲他的故事呗

408
01:16:44,760 --> 01:17:00,520
dive together对开发者的一个大会对我们这几年我跟庄老师啊基本上每年都去对然后今年呢在这个会上应该算得上是我嗯最重要的一个收获之一啊就是碰到了一个大四的学生对吴同学

409
01:17:01,200 --> 01:17:11,200
对那一开始呢我们以为可能是想参与一些开源项目对吧社区的一些活动对后来呢跟他聊了一下哎

410
01:17:11,200 --> 01:17:19,920
还挺不一样的甚至他自己还在组织对因为我们那个会里面有一个叫做on conference的一个活动

411
01:17:20,440 --> 01:17:30,800
对其实就是自己组织几个人就是相关的一起来聊一些话题对周围的观众可以来听同时也可以随时参与这个话题里面

412
01:17:31,520 --> 01:17:42,960
对那这个吴同学他关心什么事儿呢他关心这么一个事儿对就是如何通过开源社区增强高校和企业之间的连接

413
01:17:43,840 --> 01:17:50,400
他关心这么一个话题对因为这个呢我觉得哎你做一个学生明显不是你现在应该关心的事儿呀

414
01:17:50,960 --> 01:17:57,080
即便是你们学到老师这个也不是普通的老师应该关心的事儿对吧所以说呢我挺好奇的

415
01:17:57,640 --> 01:18:05,400
对我那天在他组织那个活动上面我就我就过去了对然后我就跟他聊聊了还挺长时间的

416
01:18:05,880 --> 01:18:12,840
对特别是我想关心你为什么会问这个问题嗯对然后呢他就把他现在的一个困惑

417
01:18:13,480 --> 01:18:26,360
对跟我聊了一下什么困惑呢对因为他其实来自一个挺普通的学校对既不是教八五也不是哎呀对甚至连那个一本中的甚至偏中下的

418
01:18:27,080 --> 01:18:32,600
那他们周围的同学包括他自己呀对也会参加很多的一些比赛

419
01:18:33,320 --> 01:18:39,640
对什么数学建模比赛呀程序设计大赛呀对等等还有各种企业相关的一些比赛

420
01:18:40,040 --> 01:18:53,880
对然后呢他发现一个现象就是比赛特别是在白名单里面的那些比赛特别受文学和老师关影特别是老师那他有一大有kpi呀

421
01:18:54,840 --> 01:19:22,520
对你某个同学在白名单里面取得那些成绩那老师都是非常认可各种加分对吧但是呢在白名单里面取得的一些比赛呀很多时候我们也知道他其实也是通过刷题对因为那些比赛都是模式化比较标准的对吧也有各种各样的一些历练征题对吧你只要花功夫去做对当然也不容易啊对那你基本还是可以取得好成绩的

422
01:19:22,520 --> 01:19:52,520
但是呢这种同学对用吴同学的话来说哎他的实战能力特别是在我们同学心目中其实大部分也不是高手存在哎那我们同学心目中的高手是啥呢哎就是那种能够在开元社区里面去做贡献并并且被开元社区去认可以及参与到一些开元社区里面的一些活动但是呢他们所认可的这些在开元社区里面的一些比较厉害的

423
01:19:52,520 --> 01:20:22,520
技术的同学那老师不太待见对因为你参加的那些社区也好那些活动也好老师天天没听过所以说呢他特别困惑这个事情所以说他就想做一件事情或者是他的一个心愿吧就是希望能够改变开元社区的贡献和活动在一个学校评价当中的地位对那他就试图从企业和学校的关系来看

424
01:20:22,520 --> 01:20:52,520
对因为而且他也看到像开元社区里面的很多的一些技术的一些不错的啊最后在工作这一块其实往往都找到会更好更受企业一些欢迎因为它能够解决一些实际的一些一些问题对因为像开元社区本身它很多都是一些实际的开元项目本身也是需要解决一些一些实际的一些一些内容的对那我和他聊了我还是我还挺有感触的对就是嗯这个也是我们一直想倡议的

425
01:20:52,520 --> 01:21:22,520
就是本身现在高校里面其实也是有很多的一些一些缺失和不足对吧过于这种嗯卷积点卷比赛对但是呢你在实际的一些项目和一些嗯和能打交到和企业打交到这一块其实还是有些欠缺的对开元其实一个挺挺不错的对那我我是没想到确实一个大市的在校学生还能够去去凑这份心对吧我觉得还是还得

426
01:21:22,520 --> 01:21:52,520
挺有意思的对这个就是为什么提出来哎和两位老师一起来聊聊这个事儿啊嗯我先说之前挺好但是也挺挺难就或者说他操这个心其实操不着对吧嗯很可能会受到打击是的是的对他挺积极的而且是一个射牛和我们的当时去的一些同学聊聊得特别好射牛是不是我也有印象

427
01:21:52,520 --> 01:22:22,520
这个这个小伙儿太厉害嗯这其实是他一个优势啊怎么去发挥好其实我觉得要解决他这个问题啊除了把教育部拆了以外这个短期内做不到那就只能开源领域像比如说老庄你们基金会嗯想办法说服教育部把某个开源的比如黑客松之类的事情放进白名单里去就只能够就是走这条路才有可能实现

428
01:22:22,520 --> 01:22:52,520
他的那个想法如果这个路走不通的话呢那他那个想法我觉得就只能就是你就放弃学校的所有的东西就是你不指望在学校体系里面获得任何认可但是呢你转而去寻求社会上的认可那就是企业给招工啊或者类似这样的时候或者干脆你自己干我经常说的一个例子就是我跟老人都认识的我们上海之前上我们节目的那个托马斯尧他就是中学都没有念完

429
01:22:52,520 --> 01:23:22,520
但是他学会了他自己后来赖以生存的各种本事包括技术上的包括社交网络包括他去演讲包括他去设计一些事儿他来事的水平比我们都高虽然比我们要年轻一半啊但是他就特别能来事儿而且他很多时候去捕捉的一些热点也都比较的有意思就是都是他擅长并且能够在一个小众的区域里面杀出来的

430
01:23:22,520 --> 01:23:52,520
就这是他自己在社会上练出来的本事儿那不需要任何其他人认可他自己做就完了这是一条路大佬的路啊另一条路就是你去做你认为正确的事情积累你认为有价值的资源然后也许像他这种背景啊大厂招聘的时候招到他的概率很小很小啦因为大厂对学历啊不是学历的问题了对学校就是这个本科毕业院校就有很高的要求

431
01:23:52,520 --> 01:24:22,520
这个是绝对不合理的但是没有办法现象就这样而且改变不了的他很难那怎么办呢你就在你的那个领域里混出点名堂来然后中小企业还是很多机会的所以可能就只能这样子了具体到他个人我觉得就大概是这么一个想法但我觉得比较感兴趣的一个问题就是如果真的有像他这样或者有一批像他这样的人就是想在开源这个领域里学到一些东西然后让自己未来的人生

432
01:24:22,520 --> 01:24:26,000
更美好的话他到底能学到啥我我们能给他什么建议吗

433
01:24:26,760 --> 01:24:35,440
我先说前面一个事情啊就是基金会能干啥其实之前不是我跟王老师包括我们在想一个开源毕业设计吗

434
01:24:35,840 --> 01:24:55,600
嗯嗯嗯对吧然后呢基金会呢他一方面联络高校有多少学生每个学校出些学生出来来参加开源的课题的毕业设计另外呢就联络企业就是说呃比如五家十家甚至更多的企业每家企业出一些有意思的跟开源相关的毕业课题

435
01:24:55,960 --> 01:25:05,800
然后呢到了呃毕业的时候我们再去搞一个大赛把这些优秀的毕业生拎出来来做这个公开的在线的毕业答辩

436
01:25:06,400 --> 01:25:25,560
然后呢我们在像那个谷歌三毛付扣的吗对但但是呢我们是往毕业设计这个方向去搞嘛那么他更大的一个好处就是说学生一旦参与进来以后因为谷歌三毛付扣的他是可以退出的一些学生干着干着没兴趣了他可能就跑了不影响他毕业但是如果是毕业设计的话

437
01:25:25,600 --> 01:25:42,720
他不敢跑啊对吧他毕不了业这个对他来说影响很大所以说这个是一个一个好处那么另外一方面呢就是说嗯从基金会的角度来说假设已经优秀的毕业生我们去跟他安排了这个在线的这个呃毕业答辩

438
01:25:43,320 --> 01:25:53,520
然后呢这个接下来我们愿意为他写推荐书推荐信嗯推荐到跟我们有联络的这些出了毕业课题的大厂

439
01:25:53,920 --> 01:26:04,160
这些时候这个大厂可能会有兴趣招不管这个同学从哪个学校毕业出来这也许是一个办法就我我其实对说服教育部没什么信心

440
01:26:05,600 --> 01:26:22,280
我我对于这个扩展一个基金会的朋友圈然后通过朋友圈的方法去内推一些优秀的同学到一个一个的大厂去我觉得还是有信心的就是说如果一个大厂他莫名其妙地招一个二本三本的学生那当然没道理

441
01:26:22,520 --> 01:26:29,560
但是如果他招的是一个比较有影响力的大赛的优秀的什么什么毕业赛那么其实还是说得通的

442
01:26:30,240 --> 01:26:44,760
你这个啊我说实话我觉得没有那么容易啊我听下来我觉得有两个点是比较难的啊第一个点就是你选了毕业设计这样的一个场景它的好处当然是学生会认真地做到最后啊

443
01:26:45,720 --> 01:26:49,280
但它的一个很大的坏处就是它必须要学校很深度的参与

444
01:26:49,280 --> 01:26:57,960
但凡学校不想惹事儿他就绝对不会蹚这团水因为毕业设计这是一个大家都不愿意出问题的环节

445
01:26:59,360 --> 01:27:13,120
正常情况就是以我们现在教育部治下的大学大部分人是不愿意干这种事的啊好吧因为它有风险但没什么好处嗯也许能提升一点就业但是也不确定

446
01:27:13,800 --> 01:27:21,680
但它实在的风险巨大万一这过程当中跟传统的方式不一样导致有些人他变身出问题怎么办

447
01:27:23,000 --> 01:27:32,640
这个很多人是不愿意担这个风险的所以这个呢会跟其他我说那种赫桑那样的东西不太一样点就是它跟学校的核心业务绑得太紧

448
01:27:33,040 --> 01:27:39,120
嗯会有点风险这是第一第二这个大赛凭什么可以把人推到大厂里面去

449
01:27:39,120 --> 01:27:39,600
我觉得如果这个大厂它不是自己也投了精力进来出课题出辅导人员然后盯结果的话其实它也没把握甚至你都没把握推荐嗯你不太敢随便乱推荐的我们都是在行业里很多年的人有自己的credit对吧但这个credit其实很脆弱万一你推荐的有问题其实马上就有问题了所以就是除非就是我们投入很多精力或者那个企业自己投入很多精力去全程跟进这个

450
01:28:09,120 --> 01:28:39,120
这样的项目那这个就是一个悖论了为什么大厂现在有学历的歧视有本科毕业院校歧视就是他不想投精力啊他通过这一项把大多数人过滤掉之后他就可以只去挑少数人了也许他漏掉了一些那些二本学校很优秀的才子但是没问题啊我在更好的学校也能找到类似的人这下是大厂的优势和它的现在模式就是这样所以他不愿意出精力所以这变成一个悖论了

451
01:28:39,120 --> 01:29:09,120
你设想一下假设我是阿里或者腾讯的人啊然后我没有参加但是呢我知道啊有一些比较靠谱的人搞了这么大赛这些人都很靠谱然后后面也有些厂商一起参加搞完了好然后出了一些学生不错那这些学生对我来说他到底是不是真的不错呢跟我去校招的学生比哪个更好他一定觉得更相信自己校招的嘛嗯至少我校招不会差呀嗯所以我觉得这两点就为什么我刚才说如果真要

452
01:29:09,120 --> 01:29:39,120
去搞比赛什么的那真的还就只能是走教育部白名单为什么呢白名单的好处在于它能影响大量的不那么好的学校嗯因为那些学校他是没有自己的能力的他只要跟着教育部的政策走他这些孩子他就拿着这个证书就是有教育部背书的是的所以这就是现实世界我们都知道他不对他不合逻辑也不好但是现在就是这么运作的所以就很很郁闷就是这个嘛呵呵好吧

453
01:29:39,120 --> 01:29:47,040
唉理解但是很很长的叹息吧这个也说不了更多了

454
01:29:47,040 --> 01:30:00,640
就是sad but true啊就是令人悲伤但真实嗯那我们先不管这些呢就是说如果他就是冲着提升自己去嗯我们能建议他们干点啥

455
01:30:01,200 --> 01:30:08,960
呃其实我原来写过一个github上面的一个开源项目也内也不是开源项目就是一个开源文档项目

456
01:30:08,960 --> 01:30:30,600
就是这个项目也算是我在github上面最成功的一个一个开源项目了就是大概有个嗯多少个四大我看看啊说起来其实有点丢人四大数很少的只有一点七个四大一点七点七个一点七个四大对就是很少了可以嗯过门槛了可以呵呵

457
01:30:30,600 --> 01:30:30,640
对这个开源项目的名字就叫做借助开源项目学习软件开发嗯大概的意思就是说如果你想学软件开发你可以完全全部靠自学嘛那这个自学的话呢从什么时候开始呢就直接说你你先去准做个做好准备然后呢去学习一些基础知识比如说啊版本管理的工具啊给他呀包管理工具啊再去搭建一些语言环境啊然后再选择特定的一些

458
01:31:00,600 --> 01:31:02,600
比较什么什么样的开源项目

459
01:31:02,600 --> 01:31:04,600
然后接下来呢去阅读原码

460
01:31:04,600 --> 01:31:10,600
你想办法去读文档读读这个文档的这个架构哈洛沃的

461
01:31:10,600 --> 01:31:19,600
然后去做这个呃原代码的目录结构然后尝试着去跑完哈洛沃的以后去理解它的代码的主线等等等等

462
01:31:19,600 --> 01:31:22,600
然后接下来再尝试修改一个开源项目

463
01:31:22,600 --> 01:31:29,600
然后再尝试着实际的为开源项目做一些贡献直到成为一个开源社区的一员

464
01:31:29,600 --> 01:31:34,600
然后最后甚至如果有可能的话你自己也尝试可以发起一个开源项目

465
01:31:34,600 --> 01:31:41,600
通过这样的办法其实能够很好的锻炼一个嗯一个同学就是从一开始啥也不懂

466
01:31:41,600 --> 01:31:50,600
然后呢慢慢地开始尝试着某一种编程语言然后尝试着某一个开源项目甚至尝试着成为这个开源社区的一分子

467
01:31:50,600 --> 01:31:58,600
这个过程当中能够锻炼的不仅仅是软件的能力包括看代码写代码改代码的能力

468
01:31:58,600 --> 01:32:16,600
也包括很多软技能嗯比如说你你能够成为这个人家社区的一员你怎么样发邮件啊怎么样发PR啊怎么样去提提问怎么样去呃跟人家去套近户说难听点套近户怎么样去艾特某一个大佬请他帮你做扣的review

469
01:32:16,600 --> 01:32:25,600
这些其实都是需要某种社区的礼仪的要去遵守社区的规则和潜规则这些都是要学到的东西

470
01:32:25,600 --> 01:32:36,600
对而且它对于将来你的职业生涯不管你职业生涯到哪一步这些东西都不白学都有用大概就是这样的一份文档嗯挺好

471
01:32:36,600 --> 01:32:52,600
这可以推荐给我们的听友们去观摩观摩有兴趣的可以试一试嗯对因为我一直觉得像开源这件事情啊一直一直是一个学校在实践教学这块的一个挺好的补充

472
01:32:52,600 --> 01:33:21,600
对为啥呢就是不仅仅是因为学校的一些老师本来我们现在也都知道也挺忙的呀对也没有企业的这种经验啦对而且呢很多现在学校的课呢也是以一些理论课讲授为主而且呢现在学校其实又有一些各种各样的一些强制要求的那又是教育部留的货它是要求不同的专业在实践教学这块学分是需要达到一定比例

473
01:33:21,600 --> 01:33:51,600
对那至于你怎么达到比例你可以想办法对吧甚至有的学校就专业专门为了这个事儿请外面的一些企业给他们一些费用啊拿这些企业来带自己学生啊包括我们也知道学生还有一些实践环节呀这也是挺鸡肋的这次也跟那个吴同学聊过啊那我们的实践就是自己找一个地方去敲诈干嘛就就完了对他学分其实还挺多的

474
01:33:51,600 --> 01:34:21,600
对为什么我们前面也说到像这个毕业实习呢有发现很多学校毕业实习的每年的题目差不多的大同小异对因为很多都是老师出的嘛他基本上就是改一改换一换呀对很多同学做的也也没有太大的一些一些意识对那开学社区其实恰恰能够在这一块其实有挺好的一些补充对不光是本身也是一些真实的项目而且很多都是比较前沿的而且真正

475
01:34:21,600 --> 01:34:51,600
能够拿了出来又愿意有企业愿意来投入的对他肯定是嗯还挺有一些实际的一些重要性和影响力对这些东西呢如果对当然这个也也是难点了如果能够通过一些教学法去出道一些好的题目让学生参与进来对肯定是一个一个非常好的一些非常好的一个点对而且呢他的那个可以教学的或者是学习的一个

476
01:34:51,600 --> 01:35:21,600
场景也是特别丰富对他不光是代码对吧你可以去看你还有社区对还有一些人不光是企业导师还有你你自己的一些些小伙伴和一些其他的一些社区的一些开发者对那如果真的有一部分这个也是刚才李老所提到的对那这个的你要做的话一定是需要有学校的一方也参与深度的深度的组织这个呢就得把一些老师的

477
01:35:21,600 --> 01:35:51,600
一些积极性也能够也需要调整起来对如果是这样的话其实是可以提供我们目前学校里面所缺失的这一块对很多东西我们以前都觉得不要在学校里面去想对很多很多的一些技能很多的一些嗯职业上的发展必须在企业里面才能够拿到对那社区其实是提供了这样一个机会而且呢特别是给这些被九八五二一的学生其实是提供了一条路

478
01:35:51,600 --> 01:36:21,600
对让他们有机会去同步一些更好的一些一些一些技术啊或者是一些专家导师呀嗯这是我的想法嗯我有一个设想啊就是假设我们能够手上有两三个或者一两个很适合我们的太原项目又有一定的影响力那么可以把这些项目变成本身又有价值同时又很适合

479
01:36:21,600 --> 01:36:51,600
让新人进来去学这套方法的一个原地比如之前我不是指导了一个团队在他们的学校的这个活动里面去写那个新一代大学生的AI生存指南对对比如这个项目做成一个长期的项目它就是个开源维护的一个文档项目但是它可以持续做里边可以有一个比如说我建议他们去做的一个持续更迭的一个东西什么呢就是应用案例库

480
01:36:51,600 --> 01:37:21,600
可以学校里面的小伙伴有用AI做出了一个什么好的成果比如写了一个论文或者是写出一个程序或者自己写个游戏或者做了一幅绘本出来把这样的案例按照一定的格式编写好放上去然后就有人去宣传推广等等就是类似这样的入门门槛不高但是它又有足够深度可以不断地做我总是这么认为啊就是这个世界上凡是你扔到河里面去就能学会游泳的那些人

481
01:37:21,600 --> 01:37:22,600
嗯对他自己就全搞定了嗯我们这些那我们想干的事情其实不是针对这些人而是针对另外一些他很想学会游泳但是你扔到河里他一定淹死那种那这个时候怎么办呢我们就需要有那个专门的游泳池啊一点五米的然后有教练去教他的这个我觉得是一个很有意思的比如说像今年我我们有几个市啊包括我们那个智能教材啊嗯还有后面的编程大幕

482
01:37:51,600 --> 01:37:56,640
的事情啊这东西如果条件许可我们把它的一部分开源出来

483
01:37:58,080 --> 01:38:04,160
然后把这个社区当运营的样板来做这样那些事情

484
01:38:04,760 --> 01:38:13,840
然后多引导一些学生进去做些事情这个事可能要做很多年啊就是从起步开始它真的有影响力成为一个学习园地可能要挺长时间

485
01:38:14,400 --> 01:38:17,920
这个过程当中其他的一些已经很出名的开源项目

486
01:38:18,280 --> 01:38:24,720
那就可以做其他的一些更具体的和有针对性的比如前端项目那我们就培养一些前端人进去嘛

487
01:38:25,360 --> 01:38:31,560
或者什么科布内提斯这种我们就培养有后端这种运维啊devops相关的兴趣的人进去试嘛

488
01:38:32,240 --> 01:38:39,920
但是还是需要一个就是通用的启蒙的园地啊这个是我现在的一点设想啊嗯是的

489
01:38:40,480 --> 01:38:44,120
我比较认同这个游泳池的这样的一种设想

490
01:38:45,520 --> 01:38:55,200
一个精心设计的一个教学类的开源项目是一个呃是一个不错的一个起点我觉得期待你们赶紧搞出来

491
01:38:56,080 --> 01:39:05,160
嗯我现在在想到底什么样的事情比较适合它既适合入门但是又有足够深度啊然后呢又能持续运营

492
01:39:05,800 --> 01:39:07,880
不太容易找但我觉得还是应该会有的

493
01:39:08,440 --> 01:39:15,520
嗯好的嘿嘿嗯好呀看看两位还有什么需要补充吗我们几个话题都已经说完了啊

494
01:39:16,160 --> 01:39:29,640
嗯本来还想喷一点什么事情的不过想想算那种不值得为他们在招揽某种吸引力的这种关注度没有意义喷他们干嘛嗯嘿嘿我突然想通了一点

495
01:39:30,160 --> 01:39:37,760
嘿嘿是的好呀那我们今天的就到这里吧嗯好谢谢大家嗯好拜拜大家

496
01:39:37,880 --> 01:39:38,680
嗯拜拜

