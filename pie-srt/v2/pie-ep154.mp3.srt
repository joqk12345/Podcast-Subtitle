1
00:00:00,240 --> 00:00:01,108
各位朋友大家好

2
00:00:01,110 --> 00:00:03,151
欢迎来到后互联网时代的论坛

3
00:00:03,350 --> 00:00:04,876
今天照例在周末

4
00:00:04,880 --> 00:00:07,697
我跟我们老庄大家好

5
00:00:07,840 --> 00:00:09,688
还有王老师大家好

6
00:00:10,140 --> 00:00:11,382
一起来跟大家聊聊天

7
00:00:11,480 --> 00:00:12,839
今天我们话题也​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌不少

8
00:00:12,840 --> 00:00:15,150
而且今天有三月份的证书

9
00:00:15,430 --> 00:00:16,888
所以让我们赶紧开始

10
00:00:17,340 --> 00:00:21,116
首先我们有几个要回顾和点评的新闻

11
00:00:21,870 --> 00:00:25,995
一个是跟我们上一次聊到的rust语言有关的一个事儿

12
00:00:26,630 --> 00:00:28,568
但这个新闻里面其实没有ross语言

13
00:00:28,570 --> 00:00:29,690
所以成了新闻

14
00:00:31,820 --> 00:00:37,462
就是最近微软的团队想重写整个type script的一个工具链

15
00:00:38,290 --> 00:00:41,724
大家知道type rate实际上是一个javascript的一个变种

16
00:00:42,120 --> 00:00:43,440
它引进了很多新的东西

17
00:00:43,440 --> 00:00:46,528
比如说严格的类型的检查之类的东西

18
00:00:47,090 --> 00:00:49,118
所以现在用的也越来越广泛了

19
00:00:49,120 --> 00:00:53,151
很多比较大型的前端项目都会倾向于用type create了

20
00:00:54,630 --> 00:00:55,694
他一直有一个问题

21
00:00:55,700 --> 00:00:57,942
就是原来type c be的整个工具链

22
00:00:58,660 --> 00:01:00,718
包括在开发当中

23
00:01:00,720 --> 00:01:06,198
在项目管理当中以及在运行时都会用到的一组工具

24
00:01:06,650 --> 00:01:13,706
实际上是本身就用jasp be来写的那jasa be的它的性能只能算一般

25
00:01:14,770 --> 00:01:17,331
随着这种项目的规模越来越大

26
00:01:17,340 --> 00:01:19,716
那它这个性能就成为一个比较大的问题了

27
00:01:20,200 --> 00:01:28,122
所以微软的工程团队就准备用一个更具有效率的语言来重新写这部分的工具链

28
00:01:28,780 --> 00:01:30,441
最后他们经过一系列比较

29
00:01:30,870 --> 00:01:32,410
就选用了go浪

30
00:01:34,790 --> 00:01:36,605
然后很快速就重写了一遍

31
00:01:36,610 --> 00:01:40,796
据说是不到一年九个月的时间就重新写了这个工具链

32
00:01:41,900 --> 00:01:44,168
然后速度确实提升了一个数量级

33
00:01:44,520 --> 00:01:45,310
大家很开心

34
00:01:47,240 --> 00:01:48,760
结果有一些人就不开心

35
00:01:50,290 --> 00:01:52,342
这批人的观点就是咦奇怪了

36
00:01:52,680 --> 00:01:57,490
你一个全新的类似这样追求性能的项目怎么不用rush呢

37
00:01:58,080 --> 00:01:59,907
这是这个新闻的起源

38
00:02:00,090 --> 00:02:01,637
关于这个事情你们两位怎么看

39
00:02:02,130 --> 00:02:07,190
但是为什么要用rust的第一反应就是笑点所在

40
00:02:07,200 --> 00:02:08,516
就是关你啥事儿

41
00:02:08,770 --> 00:02:11,290
你为什么电视情上你都要跳出来

42
00:02:12,160 --> 00:02:14,776
他是rest的忠实爱好者

43
00:02:15,250 --> 00:02:16,906
还挺多还挺多

44
00:02:18,040 --> 00:02:20,809
老师说这个是一个合理的问题

45
00:02:20,820 --> 00:02:23,640
因为rust语言出来这么些时间

46
00:02:24,470 --> 00:02:28,103
大家发现它最好的应用就是写一些命令行的工具

47
00:02:29,260 --> 00:02:32,230
那工具运行的效率真的高

48
00:02:32,950 --> 00:02:37,880
比如我最近已经彻底的抛弃了原来的python的那一套工具链

49
00:02:38,360 --> 00:02:40,790
什么PIP那一套东西

50
00:02:41,330 --> 00:02:43,200
开始用一个叫UV的工具

51
00:02:43,210 --> 00:02:45,240
这工具就是用rust重新写的

52
00:02:46,090 --> 00:02:47,828
完全替代了PIP的作用

53
00:02:47,830 --> 00:02:52,744
然后还提供了一些项目的管理的

54
00:02:52,750 --> 00:02:54,775
比如依赖包的管理这样的一些功能

55
00:02:54,940 --> 00:02:58,527
以前PIP是我非常缺乏的一部分东西

56
00:02:59,110 --> 00:02:59,870
确实很好用

57
00:03:00,440 --> 00:03:04,598
所以大家就会觉得很不赶时髦的

58
00:03:05,190 --> 00:03:09,202
其实人家微软的团队是做了一些比较的

59
00:03:09,680 --> 00:03:12,553
他们发现用go来重写的时候

60
00:03:13,190 --> 00:03:15,116
基本上就不属于重写

61
00:03:15,120 --> 00:03:16,040
它叫移植

62
00:03:16,580 --> 00:03:18,500
就是可以参照着原来的代码

63
00:03:18,800 --> 00:03:21,050
把它平移到勾浪上面

64
00:03:21,220 --> 00:03:22,244
就差不多就可以了

65
00:03:22,880 --> 00:03:27,204
很多东西它是相应的feature是可以对应上的

66
00:03:27,520 --> 00:03:30,775
其中很重要的一个点就是钩上有自动的垃圾回收

67
00:03:32,300 --> 00:03:34,400
垃圾回收这个东西争议很大

68
00:03:34,410 --> 00:03:38,095
就是有人非常的深恶痛绝

69
00:03:38,100 --> 00:03:41,194
但是有很多事情其实很依赖于垃圾回收

70
00:03:41,580 --> 00:03:43,750
我觉得还是要客观的辩证的来看

71
00:03:44,740 --> 00:03:46,570
原来加spruit具有这个功能

72
00:03:46,580 --> 00:03:47,679
那么改写的时候

73
00:03:47,680 --> 00:03:50,834
你如果工作量希望控制在一定范围之内的话

74
00:03:51,100 --> 00:03:53,634
那么你其实用一个有类似功能的

75
00:03:54,120 --> 00:03:57,660
显然高浪的垃圾回收实现的比GS要更好一些

76
00:03:57,950 --> 00:04:00,160
所以实际上效率什么都会更高

77
00:04:00,660 --> 00:04:02,520
那如果用rust来写可不可以呢

78
00:04:02,600 --> 00:04:03,450
你完全可以

79
00:04:03,800 --> 00:04:08,688
但是工作量可能就不是大半年就能完成的那就是真的重写了

80
00:04:08,690 --> 00:04:10,200
​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌就不是移植

81
00:04:10,710 --> 00:04:19,460
我们技术上讲移植migration它实际上就是参照着一段一段一个函数一个函数的搬过来重写的这重头要写

82
00:04:19,990 --> 00:04:25,640
因为rust整个语言的特征设计理念跟JS差别太大了

83
00:04:26,140 --> 00:04:29,659
所以他们最后为了更快的实现这个移植

84
00:04:29,860 --> 00:04:31,672
选用了高浪而不是rush

85
00:04:31,680 --> 00:04:35,450
这个我觉得是一个非常technical而且很合理的一个原因

86
00:04:35,930 --> 00:04:41,366
但确实有很多rust粉丝非常的受不了

87
00:04:41,380 --> 00:04:42,750
说了一些很酸溜溜的话

88
00:04:43,460 --> 00:04:48,572
比如有人问说你们花了多少时间评估而放弃了rust

89
00:04:48,920 --> 00:04:52,815
下面有人回说大概不超过一个午餐的时间吧

90
00:04:52,830 --> 00:04:55,368
意思就是他们很轻率的就放弃了rest

91
00:04:56,520 --> 00:04:58,056
这个我觉得明显就带有偏见

92
00:04:58,180 --> 00:05:01,796
就是搞得好像用rust是政治正确

93
00:05:02,180 --> 00:05:02,948
有点不好

94
00:05:03,060 --> 00:05:06,860
我觉得把这个风气带到技术团队实在不是我们喜欢的东西

95
00:05:07,670 --> 00:05:10,064
上次我们也点评了一下rust

96
00:05:10,530 --> 00:05:15,003
确实我仍然觉得他现在的发展还没有完全的突破

97
00:05:16,270 --> 00:05:18,450
它的主流应用还是偏小

98
00:05:19,390 --> 00:05:20,720
缺乏大型的应用

99
00:05:20,880 --> 00:05:23,175
你整一个类似docker这种级别的

100
00:05:23,810 --> 00:05:27,380
或者整一个大型的应用office这种级别的

101
00:05:27,580 --> 00:05:30,200
那可能你真的就起来了

102
00:05:30,390 --> 00:05:31,787
但是现在好像真的还没有

103
00:05:32,750 --> 00:05:34,970
好这个我们就简单的点评一下

104
00:05:35,180 --> 00:05:38,465
第二个也是我们想点评的一个新闻

105
00:05:38,580 --> 00:05:43,116
就是我们突然发现在最近的一周左右的时间里面

106
00:05:43,470 --> 00:05:46,480
MCP这个东西突然特别的火热

107
00:05:47,000 --> 00:05:48,057
而且很奇怪的是

108
00:05:48,060 --> 00:05:53,910
就是在中文和英文两边的社区里面都出现了很多跟MCP有关的内容

109
00:05:54,890 --> 00:05:57,814
我们知道MCP是anthropic

110
00:05:57,940 --> 00:06:00,640
就是cloud模型的厂商

111
00:06:01,200 --> 00:06:09,320
他所提出的一个框架是帮助M跟其他的程序之间通信的一个框架

112
00:06:09,850 --> 00:06:12,382
这个框架其实类似东西很多

113
00:06:13,330 --> 00:06:18,055
就所有的agents system智能体系统的开发框架

114
00:06:18,080 --> 00:06:19,750
其实都要提供这个能力

115
00:06:20,310 --> 00:06:23,775
就你怎么把L的能力跟其他的软件能够对应起来

116
00:06:24,280 --> 00:06:26,645
M缺省它只能跟人去对应

117
00:06:27,350 --> 00:06:29,663
人给它输入一段文本

118
00:06:29,900 --> 00:06:33,860
他在后面续一段文本永远是跟人之间互动

119
00:06:34,140 --> 00:06:36,450
但是加上类似MCPI的框架之后

120
00:06:36,830 --> 00:06:39,305
M可以调用别的程序

121
00:06:39,690 --> 00:06:44,188
然后别的程序反过来也能调用M别的程序调用M其实不难了

122
00:06:44,200 --> 00:06:45,560
因为M都有API

123
00:06:46,070 --> 00:06:49,750
但反过来M调用别的程序是要借助一些能力的

124
00:06:49,940 --> 00:06:51,710
那么lcp实际上提供这样的能力

125
00:06:53,020 --> 00:07:01,900
之前我们聊menus的时候也提到manual s大概率它核心就是使用了大量的MCP这个技术来做的

126
00:07:02,700 --> 00:07:09,140
因为他当时缺省的主要的后端M应该就是cloud

127
00:07:10,240 --> 00:07:11,462
一开始用cloud 3．5

128
00:07:11,470 --> 00:07:13,048
后来用3．7

129
00:07:13,700 --> 00:07:15,640
所以这个东西突然火了

130
00:07:15,900 --> 00:07:18,860
我实话说不是特别的理解它是为什么

131
00:07:19,220 --> 00:07:20,390
你们怎么看这个事儿呢

132
00:07:22,410 --> 00:07:23,280
应该这么说

133
00:07:24,820 --> 00:07:29,755
我确实也因为一直自己在写一个AI相关的框架

134
00:07:29,760 --> 00:07:32,280
然后当然我是从底往上一层层写的

135
00:07:33,700 --> 00:07:35,550
之前一段时间还聊到过

136
00:07:35,840 --> 00:07:38,756
属于这种叫做提示词的功能

137
00:07:39,790 --> 00:07:43,440
就是用一套框架可以对

138
00:07:43,440 --> 00:07:45,888
然后可以给不同的单元模型发提示词

139
00:07:46,230 --> 00:07:47,030
再往上一层

140
00:07:47,260 --> 00:07:49,445
当然就到了那个function calling

141
00:07:50,200 --> 00:07:53,034
再往上一层就是基于functions calling

142
00:07:53,050 --> 00:07:56,270
然后去调各种各样的外部的工具

143
00:07:56,270 --> 00:07:57,870
那自然会接触到MCP

144
00:07:59,130 --> 00:08:02,826
我的理解就是说这个反正就用呗

145
00:08:03,290 --> 00:08:05,282
其实因为也是在小群里交流

146
00:08:05,490 --> 00:08:10,544
然后就会觉得这个MCP这东西要去理解他

147
00:08:11,500 --> 00:08:15,280
最后我是花什么用个什么手段来理解的呢

148
00:08:15,280 --> 00:08:20,410
其实是我直接把anthropic的那个demo的代码下载下来

149
00:08:21,732 --> 00:08:27,552
用一个ID的那种AI插件说你帮我解读一下

150
00:08:28,080 --> 00:08:29,990
这是最简单的理解方法

151
00:08:29,990 --> 00:08:33,695
他就帮我把那个代码给读读了一遍

152
00:08:33,700 --> 00:08:35,457
然后帮我写注释

153
00:08:35,460 --> 00:08:39,744
写这个他甚至还画出了整个的调用流程图

154
00:08:40,090 --> 00:08:41,458
我一下子就全搞懂了

155
00:08:42,040 --> 00:08:46,286
然后就理解了之后的反应就是为什么要搞这么复杂

156
00:08:48,810 --> 00:08:49,580
就这么理解

157
00:08:49,580 --> 00:08:55,601
就是说我现在的描述就是我理解的这个MCP的版本是这样的

158
00:08:56,510 --> 00:09:02,516
就是你在给这个大语言模型发一段提示词的同时

159
00:09:02,840 --> 00:09:08,990
其实你在多一个地方有一个字段告诉他说有哪些工具可用

160
00:09:09,440 --> 00:09:13,268
这是需要有一个描述的这是functional coding

161
00:09:13,780 --> 00:09:17,660
他返回给你的内容就是他觉得他想调哪些工具

162
00:09:17,950 --> 00:09:19,150
就是他返回的部分

163
00:09:19,400 --> 00:09:28,168
接下来你再把他返回的内容基于某种格式去调你之前已经告诉过他的工具

164
00:09:29,690 --> 00:09:31,013
本质上这样就结束了

165
00:09:31,020 --> 00:09:32,040
你就调工具呗

166
00:09:32,330 --> 00:09:34,728
但是接下来MCP的部分

167
00:09:34,730 --> 00:09:39,690
就是他把调工具的这一部分还搞了一个clean server架构

168
00:09:40,300 --> 00:09:46,570
对再用本地的client去调一个什么什么的server

169
00:09:46,650 --> 00:09:51,850
然后再通过server再调用真正的他想调用的那些功能

170
00:09:53,650 --> 00:09:57,199
最后完成了一个一个功能的调

171
00:09:57,210 --> 00:09:58,563
然后再返回给大语言模型

172
00:09:58,570 --> 00:10:01,408
然后再调一次这个提示词

173
00:10:01,410 --> 00:10:03,181
可能再追加一段的提示词

174
00:10:03,190 --> 00:10:04,125
最后怎么样

175
00:10:04,440 --> 00:10:06,180
这就是我理解的MCP当中

176
00:10:06,250 --> 00:10:10,814
其实我最不能够明白的就是为什么它非要在当中加一个CS结构

177
00:10:10,990 --> 00:10:13,204
而且还是双向的调用

178
00:10:13,730 --> 00:10:17,871
对反正我自己现在在写一个框架

179
00:10:17,880 --> 00:10:19,704
就是我准备把这部分简化掉

180
00:10:20,450 --> 00:10:23,645
前两天还在群里面跟大家在在讨论

181
00:10:24,200 --> 00:10:26,098
我准备写成这个样子看行不行

182
00:10:26,610 --> 00:10:27,870
可能这样会简化很多

183
00:10:27,870 --> 00:10:30,366
反正正在写写出来以后再跟大家讨论

184
00:10:30,850 --> 00:10:32,390
反正我的理解到这个程度

185
00:10:32,390 --> 00:10:37,982
目前其实最早实现这个功能

186
00:10:37,990 --> 00:10:40,982
所谓的tour calling或者叫function calling

187
00:10:41,410 --> 00:10:43,357
它实际上都是我刚才说的

188
00:10:43,360 --> 00:10:48,560
就是让M可以主动的去调另外一个程序模块来获取一些数据

189
00:10:48,950 --> 00:10:52,722
这个能力最早在open I的API里面有所体现

190
00:10:53,140 --> 00:10:56,065
它的模式其实是一个最简化的模式

191
00:10:56,070 --> 00:11:00,592
就是刚才老张提到的那个流程里面的前一半

192
00:11:00,670 --> 00:11:02,425
基本上大家现在都是这么干的

193
00:11:03,090 --> 00:11:06,180
就是在交给LM的那个API里面

194
00:11:06,190 --> 00:11:08,660
除了正常的系统提示词

195
00:11:08,660 --> 00:11:10,044
用户的提示词以外

196
00:11:10,140 --> 00:11:11,876
增加了一个参数就是tours

197
00:11:12,600 --> 00:11:15,960
那to参数里面要根据一定的格式去定义一些tour

198
00:11:16,400 --> 00:11:19,568
这些tour里面包括了这个工具的名称

199
00:11:19,740 --> 00:11:21,600
它是干什么的一段描述

200
00:11:22,120 --> 00:11:24,628
然后当然你在系统提示词里面也要有所说明

201
00:11:24,970 --> 00:11:29,834
比如说你写了一个get weather info取天气信息的函数

202
00:11:30,060 --> 00:11:33,180
然后你写了一个去某个城市的

203
00:11:33,300 --> 00:11:35,226
比如说经纬度的函数

204
00:11:35,470 --> 00:11:38,134
那么你可以在这个系统提示词里面告诉他

205
00:11:38,610 --> 00:11:42,386
就是你如果想了解某个地点的经纬度

206
00:11:42,400 --> 00:11:43,488
你可以调这个函数

207
00:11:43,660 --> 00:11:46,468
你如果想了解某个地点的天气

208
00:11:46,470 --> 00:11:47,390
你可以调这个函数

209
00:11:47,560 --> 00:11:49,024
就在系统提示词里面告诉他

210
00:11:49,390 --> 00:11:51,310
然后把这个托尔斯的定义也告诉他

211
00:11:52,050 --> 00:11:52,866
在这种情况下

212
00:11:52,870 --> 00:11:55,220
M会根据你用户的问题

213
00:11:55,220 --> 00:11:56,520
比如用户的问题跟地点

214
00:11:56,520 --> 00:11:57,850
跟天气一点关系都没有

215
00:11:57,850 --> 00:11:59,002
他就不理这个事情了

216
00:11:59,440 --> 00:12:02,980
如果他发现他理解这个用户的问题

217
00:12:02,980 --> 00:12:05,780
就是在问比如说上海浦东新区的天气

218
00:12:06,720 --> 00:12:11,360
那么它就不会返回正常的那些文字生成内容了

219
00:12:11,470 --> 00:12:13,150
而是会生成一个Jason串

220
00:12:13,610 --> 00:12:15,230
这些串里会告诉你说

221
00:12:15,410 --> 00:12:17,438
我建议去调用这样一个函数

222
00:12:17,440 --> 00:12:18,840
使用这样的参数

223
00:12:19,260 --> 00:12:21,879
那就比如说我要调get Better in for参数

224
00:12:21,900 --> 00:12:23,116
就是上海浦东新区

225
00:12:23,830 --> 00:12:27,070
这个是M根据你的指令它会生成的

226
00:12:27,500 --> 00:12:28,540
而为了实现这一点

227
00:12:28,670 --> 00:12:30,309
M本身是要有一些能力的

228
00:12:30,310 --> 00:12:31,948
训练的时候就要给他一些能力

229
00:12:31,950 --> 00:12:32,998
他才会做到这一点

230
00:12:33,490 --> 00:12:36,634
好那我们收到它返回的teasin串之后

231
00:12:36,650 --> 00:12:39,653
我们的程序要把taster串里面的函数名字

232
00:12:39,760 --> 00:12:41,264
函数的参数拿出来

233
00:12:41,270 --> 00:12:44,313
然后在我们的程序里面去完成这个调用

234
00:12:45,180 --> 00:12:46,714
完成调用之后会返回一个结果

235
00:12:47,400 --> 00:12:50,712
然后我们又会再提交一个LM的请求

236
00:12:50,910 --> 00:12:56,994
把这个函数的返回结果和之前的对话内容打包到上下文里面

237
00:12:57,000 --> 00:12:58,806
再交给大模型

238
00:12:59,280 --> 00:13:00,240
大模型会跟这个说

239
00:13:01,400 --> 00:13:04,919
函数调用的结果是这样的那我就把上下文加上函数量

240
00:13:04,920 --> 00:13:07,895
结果拼成一个有意义的自然语言的东西

241
00:13:09,020 --> 00:13:13,684
这样就完成了一次托儿考虑这里面有人提交的问题

242
00:13:13,910 --> 00:13:15,910
有M主动去调函数

243
00:13:15,910 --> 00:13:17,974
调函数的过程其实要我们程序实现的

244
00:13:18,270 --> 00:13:19,850
这个不是M自己能做的

245
00:13:19,850 --> 00:13:23,060
M并不不具备运行一段程序的能力

246
00:13:23,880 --> 00:13:24,648
最后就结束了

247
00:13:25,020 --> 00:13:26,580
所以这个是正常的做法

248
00:13:26,980 --> 00:13:30,400
最原始的open I的API就这么定义的

249
00:13:30,550 --> 00:13:35,599
然后后续的比较规范的M的服务商也都是按照这个模式去做的

250
00:13:35,600 --> 00:13:37,206
比如说千问遵循的非常好

251
00:13:37,530 --> 00:13:42,518
我写的测试代码在open API跟在千万上运行是完全无缝的

252
00:13:42,700 --> 00:13:45,235
他们整个都是流程都是完全一样的

253
00:13:45,660 --> 00:13:46,938
这个就相对比较规范

254
00:13:47,260 --> 00:13:48,767
然后有一些会有点小问题

255
00:13:48,770 --> 00:13:49,441
比如deep sick

256
00:13:49,950 --> 00:13:56,180
Deep sick的一个问题是他的r one一直对这个支持的不是很好啊

257
00:13:56,210 --> 00:13:58,641
因为推理模型重点不在这上面

258
00:13:58,760 --> 00:14:00,814
他深度思考也不是做这种事情

259
00:14:01,000 --> 00:14:02,800
但如果他能做到其实挺好的

260
00:14:02,810 --> 00:14:05,290
因为现在很多大模型的思维能力不足

261
00:14:05,700 --> 00:14:08,094
导致他在做tor coding的时候会误判

262
00:14:08,300 --> 00:14:09,196
该掉的时候不掉

263
00:14:09,200 --> 00:14:10,187
不该掉的时候掉

264
00:14:10,280 --> 00:14:11,459
或者掉的方式有问题

265
00:14:11,460 --> 00:14:15,852
这都是很常见的问题第二个问题就是V三也有一些问题

266
00:14:15,870 --> 00:14:19,538
V3它对参数有一些特殊的要求

267
00:14:19,790 --> 00:14:23,088
跟我刚才说的通用的事实标准不太一样

268
00:14:23,360 --> 00:14:23,878
但anyway

269
00:14:23,880 --> 00:14:24,972
反正大家都是按这个去做的

270
00:14:25,860 --> 00:14:26,100
好

271
00:14:26,280 --> 00:14:27,700
MCP是完全不一样的

272
00:14:27,860 --> 00:14:29,380
它的基本流程也是这样

273
00:14:29,690 --> 00:14:34,570
但是他把工具的实现做了很细的定义

274
00:14:35,000 --> 00:14:40,181
它不仅在这个里面有刚才老张提到的一个clean server的模型

275
00:14:40,340 --> 00:14:43,893
它不是说你随便写一段代码去实现这个函数

276
00:14:44,180 --> 00:14:49,146
他要求你另外实现一个叫MCP server的东西来取

277
00:14:49,150 --> 00:14:50,389
比如说天气信息

278
00:14:50,810 --> 00:14:54,968
然后你在大模型的这个交互当中只能够去调那个server

279
00:14:55,530 --> 00:14:57,043
然后这个server和这个卡岸之间

280
00:14:57,480 --> 00:15:00,769
它是会有一些协议上的标准的

281
00:15:01,020 --> 00:15:05,760
实际上我听说他们是主要参考了微软的LSP语言服务器的那个协议

282
00:15:06,510 --> 00:15:07,494
他按照这个来做的

283
00:15:07,500 --> 00:15:11,280
他其实是希望这个东西以后能像LSP1样成为一个通用的东西

284
00:15:11,780 --> 00:15:14,030
很多人提供LCP的server

285
00:15:14,100 --> 00:15:17,024
然后你可以用在不同的IDE编程环境

286
00:15:17,410 --> 00:15:18,256
MCP也一样

287
00:15:18,260 --> 00:15:21,557
他希望很多人提供通用的MCP server

288
00:15:21,840 --> 00:15:24,300
然后大家可以用在各种各样的智能体环境里面

289
00:15:24,520 --> 00:15:25,885
这个想法是挺好

290
00:15:25,890 --> 00:15:28,050
但是他忽略了这个事情带来的代价

291
00:15:28,900 --> 00:15:32,708
另一个问题是他整个工具的协议里面

292
00:15:32,940 --> 00:15:38,345
不仅仅是函数去调用获取数据或者提交数据这么简单

293
00:15:38,355 --> 00:15:45,414
它还强制要求你这个class server之间通信要带上跟LLM有关的一些参数

294
00:15:45,450 --> 00:15:50,922
比如提示词大模型相关的一些那些所谓的assistance message

295
00:15:50,990 --> 00:15:53,454
那些返回的一些信息等等

296
00:15:53,810 --> 00:15:55,334
反正就是不必要的一些麻烦

297
00:15:56,000 --> 00:15:56,936
另外还有一个问题

298
00:15:56,940 --> 00:16:00,570
就是他的MCP server就是他需要长连接

299
00:16:00,590 --> 00:16:06,086
简单的说这个懂技术的听友可能就理解他的问题在哪里

300
00:16:06,290 --> 00:16:08,375
他这个工具去调这个server

301
00:16:08,380 --> 00:16:10,124
去处理数据的时候

302
00:16:10,390 --> 00:16:11,820
它需要一个稳定的长连接

303
00:16:12,630 --> 00:16:17,726
那就意味着MCP必须跟你的IM的应用要部署在一个地方

304
00:16:18,320 --> 00:16:22,576
他没有办法把MCP的server部署在一个集中的服务器上

305
00:16:23,590 --> 00:16:24,769
这样会带来很多问题

306
00:16:24,770 --> 00:16:25,764
所以就类似这样

307
00:16:25,770 --> 00:16:26,526
技术问题有一堆

308
00:16:27,400 --> 00:16:27,760
好

309
00:16:28,250 --> 00:16:29,042
回到我们刚才的问题

310
00:16:29,050 --> 00:16:30,402
他为什么突然一下现在这么火

311
00:16:31,510 --> 00:16:38,071
我的一个猜想就是说他是不是数量已经积累到一个很高的程度

312
00:16:38,990 --> 00:16:42,486
已经就是大家虽然有些他说这些问题大家还是很喜欢

313
00:16:42,660 --> 00:16:43,920
做了大量的这种实践

314
00:16:44,390 --> 00:16:46,505
但是我后面看到一篇文章很有意思

315
00:16:47,080 --> 00:16:50,776
是老牌的LM应用开发框架厂商

316
00:16:50,780 --> 00:16:51,459
就是lunch

317
00:16:52,430 --> 00:16:57,680
浪天的创始人是MCP的狂热粉丝

318
00:16:58,610 --> 00:17:03,128
他认为MCP已经到了一定的关键节点了

319
00:17:03,140 --> 00:17:04,470
很可能会成为事实标准

320
00:17:04,970 --> 00:17:09,270
然后他就跟浪欠的另外一个创始人是搞技术的

321
00:17:09,280 --> 00:17:15,520
现在是他核心那个产品叫long graph的负责人叫noodle

322
00:17:15,710 --> 00:17:17,217
他们两个人就有一个对话

323
00:17:17,430 --> 00:17:20,430
发在他们lang chain的官方的blog上了

324
00:17:21,990 --> 00:17:24,570
这个model他做技术很长时间

325
00:17:24,580 --> 00:17:28,990
而且一直在做agents system智能体系统的框架的开发

326
00:17:29,460 --> 00:17:31,008
他就非常熟悉这里面的东西

327
00:17:31,010 --> 00:17:32,036
他总结了几点

328
00:17:32,560 --> 00:17:36,539
他说首先我去搜了一下MCP的server也不多

329
00:17:37,610 --> 00:17:38,910
大几百不到1000个

330
00:17:39,540 --> 00:17:46,470
就是在某个目录里能看到的那现在增加的好像不是MCP server的数量

331
00:17:46,500 --> 00:17:49,713
而是提到MCP的twitter的推文的数量

332
00:17:51,120 --> 00:17:52,218
他到底构建多少东西

333
00:17:52,220 --> 00:17:53,444
可能没有你想那么多

334
00:17:53,450 --> 00:17:54,266
这第一个问题

335
00:17:54,650 --> 00:17:58,368
第二个他觉得如果FCP真的要被广泛采用

336
00:17:58,370 --> 00:17:59,921
要大幅的降低它的复杂性

337
00:18:00,400 --> 00:18:01,604
降低实现的门槛

338
00:18:01,980 --> 00:18:04,170
比如说这个勘测为什么要双向通行

339
00:18:05,140 --> 00:18:07,550
你为什么上面很麻烦的

340
00:18:07,550 --> 00:18:10,550
就是它里面既要实现一个pool又要实现一个push

341
00:18:10,790 --> 00:18:12,340
会有很多毛病需要处理

342
00:18:13,230 --> 00:18:15,362
所以这个我们还得再观察一下

343
00:18:15,370 --> 00:18:15,900
说句实在话

344
00:18:15,900 --> 00:18:18,308
我也不知道他为什么突然就火了

345
00:18:19,080 --> 00:18:20,200
国内我可以理解

346
00:18:20,200 --> 00:18:22,204
因为manual声量很大

347
00:18:22,610 --> 00:18:23,288
然后大家一看

348
00:18:23,450 --> 00:18:24,696
他是用的MCP

349
00:18:24,700 --> 00:18:25,883
大家就开始注意到这个东西了

350
00:18:25,890 --> 00:18:27,024
这个我稍微可以理解

351
00:18:27,530 --> 00:18:29,090
但是国外说老实话真不知道

352
00:18:29,940 --> 00:18:35,790
我的一个理解可能是因为现在在这种大模型应用的井喷以后

353
00:18:36,830 --> 00:18:41,990
大模型的可编程以及大模型和其他工具之间的互联互通

354
00:18:42,760 --> 00:18:44,764
成为越来越重要的一个东西

355
00:18:45,500 --> 00:18:46,040
那这个东西

356
00:18:46,340 --> 00:18:49,126
它实际上是提供了一套标准协议

357
00:18:49,440 --> 00:18:53,350
我们刚才其实两位老师也解释了一些里面的一些技术

358
00:18:53,590 --> 00:18:55,363
但是我想很多的一些

359
00:18:55,370 --> 00:18:58,970
特别是开发者应该是非常乐见其成

360
00:18:58,970 --> 00:19:02,625
有一个大家都能够去用的一套开放标准

361
00:19:02,640 --> 00:19:05,775
然后来构建大模型里面一些更多的一些能力

362
00:19:05,930 --> 00:19:09,804
其实我们现在在用像deep seek的这些工具的时候

363
00:19:09,810 --> 00:19:16,434
你会发现越来越多的这些大模型都有一些标准化的一些能力的一些配置了

364
00:19:16,440 --> 00:19:18,810
比如说像这种深度思考

365
00:19:18,930 --> 00:19:19,950
联网搜索

366
00:19:20,210 --> 00:19:21,218
上传附件

367
00:19:21,570 --> 00:19:29,413
对这些东西某种程度上如果有这样的一套标准协议来支持后续各种应用

368
00:19:29,440 --> 00:19:31,290
去开发相关的一些功能

369
00:19:31,290 --> 00:19:33,210
甚至是一些默认的一些标配

370
00:19:33,550 --> 00:19:35,086
应该会越来越容易

371
00:19:35,420 --> 00:19:41,842
我感觉就是以后这种像deep seek的这种工具下面的那些按钮可能会越来越多

372
00:19:42,110 --> 00:19:48,385
甚至后面可能会出现一些我们常用的一些工具的一些按钮

373
00:19:48,720 --> 00:19:53,420
这样的话在一些相互融通联合调用的过程当中

374
00:19:53,430 --> 00:19:55,586
应该会有很多的一些玩法

375
00:19:55,840 --> 00:19:58,038
这是我看到这个东西的一个感想

376
00:20:00,120 --> 00:20:04,190
实际上千问那个界面下面已经有一个托尔斯的按钮

377
00:20:04,200 --> 00:20:05,068
只不过现在灰着

378
00:20:05,780 --> 00:20:06,716
他说coming soon

379
00:20:08,000 --> 00:20:08,972
我不知道他会干什么

380
00:20:08,980 --> 00:20:09,570
在这上面

381
00:20:12,160 --> 00:20:13,392
王老师刚才说这个没错了

382
00:20:13,400 --> 00:20:15,008
我们之前也预言过

383
00:20:15,010 --> 00:20:17,818
就是今年a jetting system应智能体的开发

384
00:20:17,830 --> 00:20:20,365
应用的开发会成为一个巨大的热点

385
00:20:20,560 --> 00:20:25,420
因为基座模型的进步一定不会那么的大了

386
00:20:25,420 --> 00:20:28,030
大家会把注意力转到应用的开发上

387
00:20:28,410 --> 00:20:32,220
现在的现状在应用开发的标准接口

388
00:20:32,220 --> 00:20:33,489
其实我们节目里提过

389
00:20:33,570 --> 00:20:36,000
我一直认为这是一个很重要的领域

390
00:20:36,460 --> 00:20:42,722
就是大家非常需要有一个好的标准化的统一的一个接口或者兼容的框架

391
00:20:43,650 --> 00:20:46,367
但现在的现状是框架很多

392
00:20:46,950 --> 00:20:48,050
起码有上百

393
00:20:48,740 --> 00:20:51,778
但是真正好用的

394
00:20:52,280 --> 00:20:56,288
又强壮又灵活通用

395
00:20:56,480 --> 00:20:58,280
然后大家都愿意去使用

396
00:20:58,460 --> 00:21:01,164
能成为事实标准的还真没看到

397
00:21:02,660 --> 00:21:04,984
我已经玩了不少这方面的框架了

398
00:21:05,630 --> 00:21:07,030
所以我有一个联想

399
00:21:07,790 --> 00:21:10,505
就是为什么国内没有出这样的框架

400
00:21:11,550 --> 00:21:16,368
然后现在主流的我在我们听友群里面已经推荐过的一个five data

401
00:21:16,940 --> 00:21:18,420
现在改名了叫acne

402
00:21:19,130 --> 00:21:22,570
它的优势是它预制了大量的写好的agent

403
00:21:22,830 --> 00:21:24,055
你可以去串联它

404
00:21:24,060 --> 00:21:24,848
去调用它

405
00:21:25,430 --> 00:21:28,325
然后它的整个API也非常的简洁

406
00:21:28,980 --> 00:21:31,988
就是你写程序的话代码会非常的干净

407
00:21:32,520 --> 00:21:33,668
但是他也有问题

408
00:21:33,850 --> 00:21:36,073
他最近第一改了名字非常麻烦

409
00:21:36,360 --> 00:21:38,664
他改了名字整个包名全变了

410
00:21:38,670 --> 00:21:40,390
你就所有的地方都要改

411
00:21:41,120 --> 00:21:42,280
第二他改名之后

412
00:21:42,280 --> 00:21:44,380
给我的感觉好像代码质量下降了

413
00:21:44,690 --> 00:21:46,934
修bug的速度也下降了

414
00:21:46,940 --> 00:21:47,708
不知道他干嘛

415
00:21:47,710 --> 00:21:49,811
可能现在是不是融到钱了

416
00:21:49,820 --> 00:21:51,910
开始要往盈利的方向走了

417
00:21:52,250 --> 00:21:53,335
所以这个很麻烦

418
00:21:53,960 --> 00:21:57,190
然后另一个是一个叫panic AI

419
00:21:57,870 --> 00:22:00,912
这个也是最近我玩的比较舒服的一个框架

420
00:22:01,350 --> 00:22:03,649
它是一个叫plastic的一个团队做的

421
00:22:03,650 --> 00:22:04,646
Plastic其实很出名

422
00:22:05,230 --> 00:22:09,807
它本身是python的一个数据类型检查的一个库

423
00:22:10,180 --> 00:22:12,462
就是你可以定义一些原数据类型

424
00:22:12,840 --> 00:22:17,264
然后你在程序里它自动的会加入对这种类型的类型检查规则检查

425
00:22:17,630 --> 00:22:18,680
原来是干这个的

426
00:22:18,870 --> 00:22:22,408
这个模块叫python tic实际上open I一开始在用

427
00:22:22,890 --> 00:22:24,186
所以它其实很流行

428
00:22:24,610 --> 00:22:27,508
然后这个团队有另外一个产品叫lock fire

429
00:22:28,020 --> 00:22:31,166
是一个非常通用的instrument logging

430
00:22:31,630 --> 00:22:34,030
就是监控和日志的这样的一个系统

431
00:22:34,270 --> 00:22:35,310
非常的强大

432
00:22:35,310 --> 00:22:37,065
这个系统其实是它最有价值的东西

433
00:22:37,670 --> 00:22:40,226
就是你基本上你写的程序里面用到数据库

434
00:22:40,830 --> 00:22:42,860
用到一些常规性的服务

435
00:22:42,860 --> 00:22:45,212
比如说发CPI这样的服务

436
00:22:45,510 --> 00:22:48,406
然后用到M的调用

437
00:22:48,410 --> 00:22:51,470
它可以在里面做大量的监控

438
00:22:51,730 --> 00:22:54,910
然后在一个集中的地方去展示非常详细的日志

439
00:22:55,580 --> 00:22:56,150
很方便

440
00:22:56,150 --> 00:22:58,610
这个东西其实最吸引我的这个东西

441
00:22:59,100 --> 00:23:04,300
然后这个团队也自己做了一个叫parenting AI的这样的一个agent的框架

442
00:23:04,850 --> 00:23:05,720
也挺好用的

443
00:23:07,330 --> 00:23:08,776
他非常轻量级

444
00:23:08,780 --> 00:23:10,808
就是没有做任何额外的东西

445
00:23:11,120 --> 00:23:13,976
他做的就是一些比较常规的

446
00:23:13,980 --> 00:23:16,860
让你可以更方便的去写tools

447
00:23:17,190 --> 00:23:18,378
然后去调这些tours

448
00:23:18,380 --> 00:23:20,414
然后去做agent编排这样的一些功能

449
00:23:20,700 --> 00:23:25,980
然后整合了他的刚才说的类型校验日志这样的一些功能

450
00:23:26,090 --> 00:23:28,070
所以总体来说也比较舒服

451
00:23:28,070 --> 00:23:31,502
但是也有很多不成熟的地方

452
00:23:31,660 --> 00:23:33,480
时不时会碰到一些很奇怪的问题

453
00:23:34,550 --> 00:23:35,078
坦率的讲

454
00:23:35,080 --> 00:23:40,080
现在没有任何一个开发的框架是让人非常放心

455
00:23:40,090 --> 00:23:43,765
能去在真正的生产环境里面去用的

456
00:23:44,110 --> 00:23:44,650
一个都没有

457
00:23:45,590 --> 00:23:47,196
所以现在其实挺好的时机

458
00:23:47,200 --> 00:23:49,188
为什么国内没有人做这个事儿呢

459
00:23:49,670 --> 00:23:51,506
比如我认为千问就非常适合

460
00:23:53,120 --> 00:23:55,280
他怎么没有去挑头做这样的一个事情

461
00:23:55,520 --> 00:23:56,220
你们咋理解

462
00:23:56,220 --> 00:23:58,794
这是千万不一定合适

463
00:23:59,640 --> 00:24:00,219
为啥呢

464
00:24:00,400 --> 00:24:02,040
因为他是做基座的

465
00:24:02,340 --> 00:24:05,912
但是现在这个标准应该是一个应用层的标准

466
00:24:06,510 --> 00:24:10,758
最好的还是有一个大火的应用层框架出来

467
00:24:11,230 --> 00:24:14,745
然后大家都用它就会变成一个事实上的标准

468
00:24:14,940 --> 00:24:19,538
就是现在MCP说实话也不过就是有很多的

469
00:24:19,920 --> 00:24:21,900
在在大家看来可能还不算多

470
00:24:22,050 --> 00:24:25,650
有很多的框架和这个应用开始在用了

471
00:24:26,550 --> 00:24:28,425
就很多的MCP的counter

472
00:24:28,430 --> 00:24:29,977
很多的MCP的server

473
00:24:29,980 --> 00:24:33,648
很多的相关的这种讨论都会出来

474
00:24:34,050 --> 00:24:38,838
但是如果有一个大家统一的都在用的东西

475
00:24:39,300 --> 00:24:40,427
大家都去对接他

476
00:24:40,430 --> 00:24:41,676
我觉得就简单了

477
00:24:41,930 --> 00:24:47,249
现在没有我觉得很可能你说的这个大家都去用的应用开发框架

478
00:24:47,270 --> 00:24:50,180
还得是一个IM厂商做是最合适的

479
00:24:50,600 --> 00:24:51,328
为什么呢

480
00:24:51,730 --> 00:24:53,890
因为这玩意儿跟M的能力是有关系的

481
00:24:54,470 --> 00:24:57,455
他那我觉得应该由硅基流动来推出

482
00:24:58,620 --> 00:24:59,789
我没没这个能力

483
00:24:59,790 --> 00:25:02,750
我就他们没有这个

484
00:25:02,750 --> 00:25:04,279
他们只是一个部署的厂商

485
00:25:04,710 --> 00:25:12,626
对或者是一个手握非常流行的智能体平台这样的一个厂商

486
00:25:13,260 --> 00:25:14,289
比如像狼圈这种

487
00:25:14,290 --> 00:25:16,270
但狼圈自己那个框架做的实在不好

488
00:25:17,380 --> 00:25:19,612
假设manual这类东西有一个成功了

489
00:25:20,070 --> 00:25:21,510
有大量的海量的用户

490
00:25:21,510 --> 00:25:22,406
然后他来搞一个

491
00:25:22,410 --> 00:25:23,546
那这可能会有价值

492
00:25:24,380 --> 00:25:26,468
然后就是M的厂商比较适合

493
00:25:26,930 --> 00:25:27,206
Anyway

494
00:25:27,210 --> 00:25:28,246
反正不管谁做吧

495
00:25:28,570 --> 00:25:29,929
为什么国内就没人做

496
00:25:30,350 --> 00:25:31,874
这个是我觉得很奇怪的事情

497
00:25:31,880 --> 00:25:32,708
这其实很重要

498
00:25:32,710 --> 00:25:34,825
这个事情也是制高点

499
00:25:35,270 --> 00:25:37,899
是我把它类比一个什么呢

500
00:25:38,150 --> 00:25:43,847
就是我们已经错过了一批移动市场上的SDKIOS的SDK

501
00:25:43,860 --> 00:25:47,218
安卓的SDK然后进而IOS的APP store

502
00:25:47,528 --> 00:25:49,607
安卓的这个market

503
00:25:49,910 --> 00:25:55,202
现在眼看着马上就会有一堆的agent会出现

504
00:25:55,410 --> 00:25:58,038
然后会有agent开发的SDK的需求

505
00:25:58,240 --> 00:26:01,860
然后会有agent相关的商电和平台的需求

506
00:26:02,170 --> 00:26:08,960
这些东西的底下其实都需要有这样一个它跟M之间的通信的协议或者标准的接口

507
00:26:09,450 --> 00:26:11,078
这个真的是生态级的东西

508
00:26:11,530 --> 00:26:15,270
国内好像对这种生态级的东西一直就没有那么重视

509
00:26:15,440 --> 00:26:18,032
他们更喜欢很实体的能赚到钱的平台

510
00:26:18,640 --> 00:26:19,720
这是一个很遗憾的事情

511
00:26:19,790 --> 00:26:20,924
我们会继续观察

512
00:26:21,570 --> 00:26:27,086
在我看来现在比如说我现在在也在做一个类似的框架整合的工作

513
00:26:27,280 --> 00:26:28,567
那我的选择就很简单

514
00:26:28,780 --> 00:26:32,751
我会努力去同时兼容identic的AI

515
00:26:32,759 --> 00:26:35,819
同时兼容fi data这种框架

516
00:26:35,850 --> 00:26:38,216
甚至以后也会兼容MCP的东西

517
00:26:38,220 --> 00:26:40,560
这个是现在最合理的一个选择

518
00:26:40,560 --> 00:26:41,550
但这个选择就很麻烦

519
00:26:42,010 --> 00:26:43,700
你要同时支持一堆东西

520
00:26:44,920 --> 00:26:46,876
好这个我们也就先点评到这儿

521
00:26:48,510 --> 00:26:50,946
下一个话题我们来简单的聊一下

522
00:26:51,350 --> 00:26:54,158
因为懂王上任已经就50天了

523
00:26:54,630 --> 00:26:57,044
你们是不是觉得这50天过得好像很长

524
00:26:57,680 --> 00:27:01,586
制造的新闻数量比拜登四年还要多花太多

525
00:27:01,600 --> 00:27:02,548
根本来不及吃

526
00:27:02,830 --> 00:27:05,118
人家50天50个成就不得了

527
00:27:05,120 --> 00:27:06,340
要细细数来

528
00:27:07,900 --> 00:27:11,920
这个白宫网站的整个面貌焕然一新

529
00:27:13,330 --> 00:27:20,590
比如说有一篇文章说创在国会发表的大师级的指导

530
00:27:20,840 --> 00:27:22,064
看看官员们怎么说

531
00:27:22,070 --> 00:27:23,350
下面是一堆的官员

532
00:27:23,350 --> 00:27:24,370
每人一句话

533
00:27:24,560 --> 00:27:25,856
就像那种清表

534
00:27:27,270 --> 00:27:31,036
臣子上表去赞扬皇帝的那种文字

535
00:27:32,260 --> 00:27:33,240
看的真的是

536
00:27:33,950 --> 00:27:37,856
然后最近有一篇就是fifty days fifty wings

537
00:27:38,660 --> 00:27:40,088
50天5十大胜

538
00:27:41,760 --> 00:27:42,750
你们咋看呢

539
00:27:42,750 --> 00:27:44,486
这个到底干了些啥

540
00:27:44,490 --> 00:27:45,588
有什么影响吗

541
00:27:46,450 --> 00:27:47,800
就觉得事情多

542
00:27:47,800 --> 00:27:51,182
然后就​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌一个最大的印象是各种各样的加关税

543
00:27:51,550 --> 00:27:55,156
对就是各种各样的这里也要加

544
00:27:55,160 --> 00:27:55,950
那里也要加

545
00:27:55,950 --> 00:27:58,524
然后还有一方面就是反制

546
00:27:59,200 --> 00:28:01,126
就是加拿大也说要加

547
00:28:01,130 --> 00:28:02,690
然后欧盟也说要加

548
00:28:02,690 --> 00:28:04,650
中国当然也没有停

549
00:28:04,650 --> 00:28:04,870
对吧

550
00:28:04,870 --> 00:28:05,629
也在加

551
00:28:05,860 --> 00:28:10,355
然后还有就是我看到最厉害的应该算是加拿大说要把美国的电停了

552
00:28:13,420 --> 00:28:15,366
然后这是一大类

553
00:28:15,370 --> 00:28:17,890
就是所谓从贸易角度来说的

554
00:28:18,670 --> 00:28:19,950
还有就是领土要求

555
00:28:20,550 --> 00:28:22,368
就是加拿大51周了

556
00:28:22,370 --> 00:28:23,338
又是冰岛

557
00:28:24,280 --> 00:28:25,855
希望冰岛加入了

558
00:28:25,860 --> 00:28:26,949
反正对

559
00:28:26,950 --> 00:28:31,666
还有一个事情是逼着香港的那个和记黄埔

560
00:28:32,300 --> 00:28:35,938
对把那个巴拿马运河的权益给卖了

561
00:28:36,320 --> 00:28:39,716
对这个算是他们干成了一桩事情

562
00:28:40,270 --> 00:28:43,766
对这是他们极少数真正干成的事情

563
00:28:45,970 --> 00:28:49,948
主要还是我们香港的李某人贵的太快了

564
00:28:50,330 --> 00:28:53,210
哼哼都来不及拦就贵了

565
00:28:53,790 --> 00:28:56,790
对斑马这个事情还有后续

566
00:28:56,950 --> 00:28:58,396
就昨天的新闻

567
00:28:58,840 --> 00:29:02,690
有消息人士向美国的媒体透露说

568
00:29:02,700 --> 00:29:06,210
总统已经指示国防部制定各种各样的计划

569
00:29:06,730 --> 00:29:10,280
在巴拿马增兵以及在必要的时候进行军事干预

570
00:29:12,770 --> 00:29:14,102
这个斑马真的没办法

571
00:29:14,110 --> 00:29:15,542
这个是他的后花园

572
00:29:16,420 --> 00:29:18,578
他随时可能入侵的那种级别的

573
00:29:18,680 --> 00:29:20,800
而且周边也没有谁能管得住他

574
00:29:22,880 --> 00:29:23,498
太小了

575
00:29:23,920 --> 00:29:25,570
打加拿大的概率没那么高

576
00:29:26,250 --> 00:29:27,778
所以他跟加大也好

577
00:29:27,780 --> 00:29:28,548
欧盟也好

578
00:29:28,550 --> 00:29:32,438
我觉得更像是玩那个扑克游戏里面的

579
00:29:32,440 --> 00:29:33,400
我们叫blazing

580
00:29:34,490 --> 00:29:35,738
就是虚张声势

581
00:29:36,380 --> 00:29:37,268
我有一对好牌

582
00:29:37,620 --> 00:29:38,070
你投降

583
00:29:38,670 --> 00:29:39,490
投降输一半

584
00:29:39,630 --> 00:29:40,570
就类似这种

585
00:29:41,430 --> 00:29:42,599
但是对方不投降

586
00:29:42,650 --> 00:29:43,856
对方也玩blush

587
00:29:43,930 --> 00:29:46,514
比如说加拿大说我给你断电真的会断吗

588
00:29:46,530 --> 00:29:47,493
我觉得可能性非常小

589
00:29:48,600 --> 00:29:49,626
大家互相blast

590
00:29:49,630 --> 00:29:51,016
然后最后就僵在那里

591
00:29:52,690 --> 00:29:56,164
搞得最后好像就对中国的加税是实际加了

592
00:29:56,790 --> 00:29:58,260
但中国又不鸟他

593
00:29:58,260 --> 00:29:59,366
就是你加我也加

594
00:29:59,540 --> 00:30:00,476
你怎么加我怎么加

595
00:30:01,770 --> 00:30:03,066
所以现在这个事情

596
00:30:03,070 --> 00:30:05,270
他的关税政策还得继续看

597
00:30:06,070 --> 00:30:09,398
但实质上我觉得实际效果不会太明显

598
00:30:10,180 --> 00:30:11,146
要么加了没用

599
00:30:11,150 --> 00:30:13,850
要么实际上对他自己有很大的威胁

600
00:30:14,440 --> 00:30:17,260
比如他对中国的税加了之后

601
00:30:17,550 --> 00:30:22,091
那很明显的会影响他的普通生活用品的价格

602
00:30:22,610 --> 00:30:23,610
这个就有一个插曲

603
00:30:23,610 --> 00:30:25,850
就说美国的沃尔玛

604
00:30:25,850 --> 00:30:29,327
那就是美国的中低端的超市的最大的巨头了

605
00:30:29,840 --> 00:30:34,130
那沃尔玛就找中国的供应商说

606
00:30:34,710 --> 00:30:35,930
这个加税了

607
00:30:36,200 --> 00:30:38,818
你们要不把这个税就扛住

608
00:30:39,840 --> 00:30:40,668
你们降价

609
00:30:42,160 --> 00:30:43,889
那中国的供应商肯定承受不了

610
00:30:44,310 --> 00:30:47,154
很多日常用品的利润就5%

611
00:30:47,940 --> 00:30:48,976
你让我扛10%

612
00:30:48,980 --> 00:30:49,958
20%的关税

613
00:30:49,960 --> 00:30:51,885
这个几乎不可能

614
00:30:52,280 --> 00:30:54,644
所以中国的商务部也出手了

615
00:30:54,650 --> 00:30:56,459
就直接找沃尔玛约谈

616
00:30:56,460 --> 00:30:59,080
他说你说你不能这么干

617
00:30:59,960 --> 00:31:00,737
你如果要这么干

618
00:31:00,740 --> 00:31:03,684
那可能接下来也会有相应的反制措施

619
00:31:05,120 --> 00:31:06,693
所以贸易战这个事情会继续打

620
00:31:06,910 --> 00:31:08,107
尤其是中美之间

621
00:31:08,110 --> 00:31:09,238
这个是真的贸易战

622
00:31:09,490 --> 00:31:11,580
其他的很像是我刚才说的blasting

623
00:31:12,820 --> 00:31:14,380
就是中美之间的贸易战

624
00:31:14,920 --> 00:31:15,768
大家可以设想一下

625
00:31:15,770 --> 00:31:17,066
2018年开始搞

626
00:31:17,270 --> 00:31:19,265
那个时候其实我们不是那么有经验

627
00:31:19,650 --> 00:31:22,485
那个时候没有正儿八经的打过关税和这种贸易战

628
00:31:23,100 --> 00:31:24,849
但是现在已经七年过去了

629
00:31:26,230 --> 00:31:28,495
我们很多数据上比那个时候更强了

630
00:31:28,500 --> 00:31:30,203
然后经验也比那个时候好一些

631
00:31:30,580 --> 00:31:31,764
所以这个还有的打

632
00:31:31,770 --> 00:31:33,178
就要看具体的情况

633
00:31:33,280 --> 00:31:36,707
当然这个必然会带来我们的出口外贸企业的一些困难

634
00:31:36,940 --> 00:31:37,966
尤其是短期的

635
00:31:38,160 --> 00:31:39,984
这个是不可否认的

636
00:31:40,660 --> 00:31:41,927
但是从长远来看

637
00:31:42,120 --> 00:31:43,872
我觉得美国会更扛不住一些

638
00:31:44,880 --> 00:31:45,928
这个可以拭目以待

639
00:31:47,490 --> 00:31:50,670
还有一条线索也是我比较想了解的

640
00:31:50,670 --> 00:31:54,324
就是马斯克现在在美国应该是被全面的攻击是吧

641
00:31:56,500 --> 00:31:57,787
支持他的肯定有一批

642
00:31:57,790 --> 00:31:58,978
但是那种出不了新闻

643
00:32:00,020 --> 00:32:03,635
出新闻的就是对他深恶痛绝的两类

644
00:32:04,170 --> 00:32:06,174
一类是民主党那边的自由派

645
00:32:06,880 --> 00:32:08,860
因为musk它代表的什么

646
00:32:08,870 --> 00:32:11,570
它代表的是硅谷技术圈里的

647
00:32:11,930 --> 00:32:14,218
我们称之为叫技术无政府主义

648
00:32:15,770 --> 00:32:18,058
马克这个人绝对是一个无政府主义者

649
00:32:19,320 --> 00:32:21,348
他认为政府的东西都是多余的

650
00:32:21,910 --> 00:32:23,177
企业效率高得多

651
00:32:24,250 --> 00:32:27,338
所以他干的很多事情都是把政府砍掉

652
00:32:28,040 --> 00:32:30,458
极度的自由市场主义这种风格

653
00:32:31,110 --> 00:32:33,510
所以这个会导致原来政府的

654
00:32:33,510 --> 00:32:35,958
尤其联邦政府的雇员会对他非常的痛恨

655
00:32:36,200 --> 00:32:38,408
这个就是让人失业了让人没事情做了

656
00:32:38,540 --> 00:32:40,570
甚至会连带着一些羞辱

657
00:32:40,860 --> 00:32:42,758
我听到了一个美媒报道的新闻

658
00:32:42,760 --> 00:32:43,796
真的把我惊呆了

659
00:32:44,140 --> 00:32:46,468
就是他们的部的一些小年轻

660
00:32:46,590 --> 00:32:51,240
二十几岁的人去对那些强力部门的

661
00:32:51,250 --> 00:32:54,638
比如说国防部的FBI的去给人家做review

662
00:32:55,240 --> 00:32:56,080
价值是啥

663
00:32:56,080 --> 00:32:56,790
说给我听听

664
00:32:57,450 --> 00:32:59,370
你试想一下什么CIA的人

665
00:32:59,370 --> 00:33:03,690
什么FBI的人听你几个年轻的技术极客

666
00:33:04,160 --> 00:33:05,942
要我跟你说我的工作价值

667
00:33:06,570 --> 00:33:08,759
这个不是简单的职业问题

668
00:33:08,870 --> 00:33:10,610
这是就是羞辱

669
00:33:11,230 --> 00:33:14,270
对所以这是另外一类

670
00:33:15,560 --> 00:33:17,576
可能还有一些别的就是不喜欢他的人

671
00:33:18,000 --> 00:33:23,856
现在很集中的一个事就是打砸抢特斯拉对这个很难理解

672
00:33:26,490 --> 00:33:27,634
他真的产生效果了

673
00:33:27,640 --> 00:33:31,227
特斯拉就在过去的几个月里面股价腰斩

674
00:33:31,920 --> 00:33:35,245
从两百四五10跌到现在差不多一百多一点

675
00:33:35,720 --> 00:33:36,650
这个有点吓人

676
00:33:36,810 --> 00:33:38,428
说实话这个真的很恐怖

677
00:33:38,930 --> 00:33:40,536
而且这个事情不仅是北美

678
00:33:41,160 --> 00:33:45,112
我看一个新西兰的一个华人的电视台的节目

679
00:33:45,130 --> 00:33:49,828
那个主持人就说我们新西兰这边也发生了几起这种砸特斯拉的现象

680
00:33:51,800 --> 00:33:53,368
已经变成全球公敌

681
00:33:53,370 --> 00:33:54,805
还不是全民公敌

682
00:33:54,810 --> 00:33:56,090
是全球公敌

683
00:33:56,520 --> 00:33:59,040
对我觉得是所有白左的敌人

684
00:34:00,220 --> 00:34:02,474
现在对特斯拉最好的还是中国人

685
00:34:04,870 --> 00:34:07,360
是啊一以后他申请政治避难

686
00:34:07,370 --> 00:34:08,250
可以来我们这

687
00:34:10,280 --> 00:34:13,744
对最好把space x的什么技术带过来

688
00:34:14,630 --> 00:34:16,778
对我们现在就只看得上这个了

689
00:34:17,020 --> 00:34:18,592
什么特斯拉我们都不需要了

690
00:34:20,120 --> 00:34:25,900
确实我个人比较关注的懂王的另外的一个趋势

691
00:34:26,630 --> 00:34:27,806
就是全球收缩

692
00:34:28,240 --> 00:34:29,278
这个全球收缩

693
00:34:29,450 --> 00:34:30,998
以前包括白左

694
00:34:31,000 --> 00:34:33,390
包括民进党那边的腔调

695
00:34:33,730 --> 00:34:39,790
他们的讲法是说从欧洲从中东一定程度的收缩

696
00:34:39,790 --> 00:34:43,326
为了更好的在西太平洋跟中国去对抗

697
00:34:43,740 --> 00:34:45,521
把更多的力量部署在西太平洋

698
00:34:46,040 --> 00:34:47,304
但是懂王上来之后

699
00:34:47,920 --> 00:34:49,889
比这个甚至还要再进一步

700
00:34:49,890 --> 00:34:50,910
虽然没有明说

701
00:34:51,010 --> 00:34:52,973
但是很多迹象已经非常明显了

702
00:34:53,470 --> 00:34:57,441
就是连西太平洋这边他也会相对的有所收缩

703
00:34:58,140 --> 00:34:59,324
这个原理是什么呢

704
00:34:59,330 --> 00:35:05,995
最近有一个文章登在非常专业的他们的叫外交政策这样的一个季刊上面

705
00:35:06,670 --> 00:35:11,026
写这个文章是美国非常老资格的两个智库

706
00:35:11,830 --> 00:35:13,780
这个文章大意是什么呢

707
00:35:13,780 --> 00:35:17,932
就是我们真的要保卫台湾吗

708
00:35:18,600 --> 00:35:19,770
大概是这么一个命题

709
00:35:21,240 --> 00:35:23,186
挺好它的主题是什么呢

710
00:35:23,190 --> 00:35:24,960
他说我们以前经常渲染

711
00:35:25,470 --> 00:35:28,000
就好像失去台湾的控制权

712
00:35:28,200 --> 00:35:32,180
对美国的总体战略来讲是一个无法承受的事情

713
00:35:32,570 --> 00:35:33,794
但是真的是这样吗

714
00:35:34,370 --> 00:35:35,550
他提出了这么一个命题

715
00:35:35,820 --> 00:35:37,261
然后他最后的结论是什么

716
00:35:37,360 --> 00:35:40,039
他最后结论是说支持台湾可能没有那么重要

717
00:35:40,710 --> 00:35:41,496
中国要拿就拿

718
00:35:42,120 --> 00:35:44,160
我们只要守住低岛链就行了

719
00:35:44,170 --> 00:35:45,418
低岛链上还有日本

720
00:35:45,420 --> 00:35:50,779
菲律宾这样一些传统的没有台湾那么麻烦的美国盟友

721
00:35:51,320 --> 00:35:54,356
正儿八经的盟友可以堂而皇之说的盟友台湾不能说

722
00:35:55,100 --> 00:35:57,934
站不住脚的这是他的一个观点

723
00:35:57,940 --> 00:35:58,430
另一个观点

724
00:35:58,430 --> 00:36:00,740
他就是问了另外一个问题也很牛逼

725
00:36:00,740 --> 00:36:05,889
他说我们真的能在西太平洋打赢这场战争吗

726
00:36:05,900 --> 00:36:07,142
如果真的要开战的话

727
00:36:07,580 --> 00:36:11,329
如果我们打不赢跟中国的这样在他家门口的战争的话

728
00:36:11,470 --> 00:36:14,759
我们为什么要把美国的战略局限在这么一场战斗上呢

729
00:36:15,690 --> 00:36:21,198
就是说它的原文叫rely on the unwinnable fight

730
00:36:22,860 --> 00:36:27,414
我们为什么要让美国的战略依赖于一个打不赢的战争

731
00:36:28,760 --> 00:36:32,104
他说我们的技术部门要诚实的面对这个问题

732
00:36:32,120 --> 00:36:33,038
我们到底能不能打赢

733
00:36:33,340 --> 00:36:34,060
如果打不赢

734
00:36:34,060 --> 00:36:37,732
我们就不要把它放在我们的必须的选项

735
00:36:39,540 --> 00:36:42,114
这个东西其实说老实话啊

736
00:36:42,120 --> 00:36:43,768
就是有这样思维的

737
00:36:43,770 --> 00:36:46,331
美国的战略学者和专家早就有

738
00:36:46,720 --> 00:36:50,501
但从来没有人敢这么公开的去讨论这个问题

739
00:36:50,510 --> 00:36:52,000
还给出这么明确的答复

740
00:36:54,470 --> 00:37:01,694
另外一个参照就是有一个美国的国防部的副部长刚刚提名通过了

741
00:37:02,030 --> 00:37:02,888
这个人叫科比

742
00:37:03,640 --> 00:37:10,060
他被认为是创团队里面最重要的国防的理论家

743
00:37:11,100 --> 00:37:16,620
他是maga派的战略和安全理论的重要的懂王的智囊

744
00:37:17,960 --> 00:37:19,499
这个人也是明确的讲

745
00:37:19,500 --> 00:37:20,940
台湾不代表第一岛链

746
00:37:21,620 --> 00:37:24,335
我们并不想在这个问题上过于纠结

747
00:37:24,830 --> 00:37:26,336
这些讨论很快

748
00:37:26,590 --> 00:37:28,910
最敏锐的肯定是东南岛上面的那批人

749
00:37:29,500 --> 00:37:31,177
他们很快就捕捉到这个信息了

750
00:37:31,180 --> 00:37:32,056
讨论了非常多

751
00:37:32,610 --> 00:37:36,819
当然我相信我们的学者肯定也体会到这里面的问题了

752
00:37:38,090 --> 00:37:41,330
包括最近他们对台积电

753
00:37:42,670 --> 00:37:48,167
台积电之前是同意到美国追加1000亿美金的投资

754
00:37:48,650 --> 00:37:52,070
加快在美国的厂房这些东西的建设

755
00:37:52,300 --> 00:37:53,160
加快投产

756
00:37:54,000 --> 00:37:54,908
这是一个

757
00:37:54,910 --> 00:37:59,394
但最近又有另外一个传闻说正在撮合台积电

758
00:37:59,400 --> 00:38:05,787
高通NVIDIA等等一堆的厂商成立一家新的公司

759
00:38:05,808 --> 00:38:08,136
然后去控股英特尔

760
00:38:08,610 --> 00:38:13,530
来拯救英特尔这个事情

761
00:38:13,910 --> 00:38:17,398
岛上的所谓的学者们也是非常的紧张

762
00:38:17,410 --> 00:38:20,374
之前说台电去投资1000亿

763
00:38:20,380 --> 00:38:21,616
他们觉得还好

764
00:38:22,050 --> 00:38:22,770
但这个呢

765
00:38:22,770 --> 00:38:23,638
他们觉得完蛋了

766
00:38:23,640 --> 00:38:25,538
这个是真的要把台积电挖空了

767
00:38:26,430 --> 00:38:27,814
彻底成为美积电了

768
00:38:29,220 --> 00:38:33,595
那这样的话就实际上这几件事情最终的结果都是一个结果

769
00:38:33,610 --> 00:38:35,194
就是美国不再依赖于台湾

770
00:38:35,930 --> 00:38:39,027
因为台湾在以前对美国来讲有两方面的作用

771
00:38:39,040 --> 00:38:42,694
一个是很多人讲的所谓的不沉的航空母舰

772
00:38:42,840 --> 00:38:45,915
守着大陆的这个出海口的关键位置

773
00:38:46,040 --> 00:38:47,700
第一岛链上的关键枢纽

774
00:38:47,850 --> 00:38:49,720
这是军事上的一个作用

775
00:38:49,830 --> 00:38:51,006
这个作用现在已经不存在了

776
00:38:51,010 --> 00:38:55,594
因为解放军海军和空军的力量已经完全突破第一岛链了

777
00:38:55,880 --> 00:38:57,717
都去澳大利亚转了一圈了

778
00:38:57,720 --> 00:38:59,460
你想想看你一个台湾能干啥

779
00:38:59,460 --> 00:38:59,930
啥也干不了

780
00:39:00,970 --> 00:39:05,777
第二个作用其实就是半导体供应链上面的关键的节点

781
00:39:06,840 --> 00:39:11,292
这个节点现在实际上美国人就正在把它抽到美国

782
00:39:11,310 --> 00:39:12,810
日本和欧洲

783
00:39:13,320 --> 00:39:16,692
再联想最近几天岛上的匪首

784
00:39:16,860 --> 00:39:18,204
有一些非常冲动的

785
00:39:18,210 --> 00:39:18,798
不叫冲动

786
00:39:19,430 --> 00:39:20,718
非常嚣张的言论

787
00:39:21,170 --> 00:39:26,270
所以我觉得我们现在可能是在正儿八经的做现实层面的统一的准备了

788
00:39:26,710 --> 00:39:28,126
至于什么时候动手

789
00:39:28,790 --> 00:39:29,945
其实要看外部了

790
00:39:30,320 --> 00:39:34,899
你们看现在美国所谓的撮合俄乌之间的和谈

791
00:39:34,910 --> 00:39:36,670
你就知道那真是一片混乱

792
00:39:37,260 --> 00:39:40,158
甚至我觉得美国人很可能就被乌克兰玩了

793
00:39:40,160 --> 00:39:42,524
就是很多事情被他们玩弄了

794
00:39:42,660 --> 00:39:43,440
被他们利用了

795
00:39:44,380 --> 00:39:45,505
所以这个会非常混乱

796
00:39:45,740 --> 00:39:48,140
到时候很难讲他们会在这个事情上

797
00:39:48,600 --> 00:39:51,660
在我们的这个事情上面扯多大的旗出来

798
00:39:51,670 --> 00:39:52,965
所以会挺动荡的

799
00:39:52,970 --> 00:39:53,828
未来的一两年

800
00:39:55,250 --> 00:39:56,839
这个能讲一讲吗

801
00:39:56,840 --> 00:39:59,479
就是被乌克兰玩弄是什么情况

802
00:39:59,490 --> 00:40:05,600
我看看到的消息还是说之前美国停掉了对乌克兰的军事援助

803
00:40:05,620 --> 00:40:07,945
后来又恢复了对乌克兰的军事援助

804
00:40:07,950 --> 00:40:11,214
感觉好像是威胁起效了还是什么什么的

805
00:40:11,840 --> 00:40:12,776
实际上没有吗

806
00:40:13,840 --> 00:40:15,136
实际上现在的问题是

807
00:40:15,140 --> 00:40:17,090
第一那个矿产协议还没有签

808
00:40:17,090 --> 00:40:17,480
对吧

809
00:40:18,180 --> 00:40:21,570
第二乌克兰跟美国谈完之后

810
00:40:22,100 --> 00:40:27,203
设法让美国支持他提出的那个停火30天的倡议

811
00:40:27,660 --> 00:40:31,764
这个停火30天实际上完全就是乌克兰单方面的想法了

812
00:40:32,150 --> 00:40:33,954
就是双方立刻停火30天

813
00:40:33,960 --> 00:40:34,628
无条件的

814
00:40:35,860 --> 00:40:36,708
停火之后

815
00:40:36,710 --> 00:40:38,624
美国恢复对乌克兰的援助

816
00:40:39,180 --> 00:40:40,356
那这个有什么意义

817
00:40:40,440 --> 00:40:42,273
对于俄罗斯来讲不可能接受的

818
00:40:42,410 --> 00:40:43,763
就相当于就是说我停下来

819
00:40:43,770 --> 00:40:44,898
我打的正好的时候

820
00:40:44,900 --> 00:40:45,789
突然让我停下来

821
00:40:45,850 --> 00:40:47,511
然后你补充你那边的力量

822
00:40:47,900 --> 00:40:48,428
这什么鬼

823
00:40:49,130 --> 00:40:54,408
好那这个协议居然美国的国务卿还有谈判的代表居然就接受了

824
00:40:55,250 --> 00:40:55,880
然后说

825
00:40:56,000 --> 00:40:59,240
我们再去说服俄罗斯接受这个东西

826
00:40:59,810 --> 00:41:01,640
那这个时候乌克兰就不断的在说说

827
00:41:01,760 --> 00:41:03,818
我们已经接受这个无条件停火了

828
00:41:03,980 --> 00:41:04,900
如果俄罗斯不接受

829
00:41:04,900 --> 00:41:08,218
他就是坏人回到这么一个状态了

830
00:41:08,310 --> 00:41:11,254
这个其实就第一俄罗斯绝对不会接受

831
00:41:11,260 --> 00:41:13,180
第二乌克兰是最大的受益者

832
00:41:13,450 --> 00:41:15,463
而美国他想得到的是什么

833
00:41:15,880 --> 00:41:18,129
川普想得到的是一个外交胜利

834
00:41:18,620 --> 00:41:19,830
就是别人都做不到的事情

835
00:41:19,830 --> 00:41:20,550
我做到了

836
00:41:20,630 --> 00:41:21,400
俄乌停火了

837
00:41:21,710 --> 00:41:22,627
实际上就不可能

838
00:41:22,910 --> 00:41:27,492
因为那个条件俄罗斯是不可能接受的那你说创会得到啥啥也得不到

839
00:41:28,280 --> 00:41:30,366
当然他可以继续写50天50胜

840
00:41:30,720 --> 00:41:32,088
60天6十胜没问题

841
00:41:32,090 --> 00:41:33,346
这个总是可以写的

842
00:41:33,850 --> 00:41:35,599
所以懂王的这个外交团队

843
00:41:35,600 --> 00:41:37,940
我觉得缺乏外交实务的经验

844
00:41:38,250 --> 00:41:42,432
那个国务卿也是非常的在这方面很稚嫩

845
00:41:42,440 --> 00:41:47,840
我觉得很可能会被欧洲那帮人玩了也挺好

846
00:41:48,300 --> 00:41:50,900
也让他们尝一下人世间的险恶

847
00:41:51,920 --> 00:41:54,304
创现在会挺麻烦的

848
00:41:54,520 --> 00:41:58,216
他所渴求的胜利其实非常难

849
00:41:58,760 --> 00:42:05,915
好关于懂王的这个我们就简单点评这么多下面是我们今天两个主要的话题

850
00:42:06,740 --> 00:42:13,474
第一个我们要来聊一聊最近一个非常时髦的名词web coding就是VIDE

851
00:42:14,040 --> 00:42:15,280
这个​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌词儿咋翻译呢

852
00:42:15,280 --> 00:42:16,358
就是挺难翻译的

853
00:42:16,360 --> 00:42:21,512
它在英文里面大致上就是氛围周围的气氛的那个意思

854
00:42:21,530 --> 00:42:24,965
Web就有点像日本人讲的读空气

855
00:42:26,490 --> 00:42:29,922
web coding就是一种氛围编程这个实际上是谁呢

856
00:42:30,240 --> 00:42:31,644
是capacity

857
00:42:32,310 --> 00:42:32,600
可怕

858
00:42:32,600 --> 00:42:33,398
这个人很有意思

859
00:42:33,490 --> 00:42:35,468
他原来是open I的一个researcher

860
00:42:35,900 --> 00:42:39,440
但是他这个人语言比较流畅

861
00:42:39,440 --> 00:42:40,400
比较风趣

862
00:42:40,600 --> 00:42:42,569
具有很强的网络造梗能力

863
00:42:42,748 --> 00:42:45,250
现在他已经不在OpenAI已经出来了

864
00:42:45,254 --> 00:42:47,760
但是他经常会在网络上造一些耿

865
00:42:47,910 --> 00:42:50,220
他今年大概二月份二月初的时候

866
00:42:50,230 --> 00:42:51,526
就我们过春节的时候

867
00:42:51,760 --> 00:42:52,840
他发了一条推

868
00:42:53,640 --> 00:42:56,224
第一次提出了web coding这个词

869
00:42:57,000 --> 00:43:00,780
他说现在有一种新的编程的感觉

870
00:43:00,870 --> 00:43:02,310
我称之为叫web coding

871
00:43:02,820 --> 00:43:08,098
就是你完全屈从于周围的氛围

872
00:43:08,110 --> 00:43:09,353
他用这样一个很奇怪的词

873
00:43:09,360 --> 00:43:12,400
意思就是说他不是真的在思考和编程

874
00:43:12,910 --> 00:43:15,775
而是进入到一种编程的节奏和感觉

875
00:43:15,780 --> 00:43:18,188
但实际上他并没有在思考和编程

876
00:43:18,410 --> 00:43:19,970
他只是在说话

877
00:43:20,230 --> 00:43:22,401
然后把它交给一些工具去编程

878
00:43:22,800 --> 00:43:26,310
然后看到代码蹭蹭蹭的往外冒

879
00:43:26,530 --> 00:43:27,867
体会到这种氛围

880
00:43:28,100 --> 00:43:31,444
于是就进入了一种全新的

881
00:43:31,450 --> 00:43:33,517
以前没有经历过的编程的体验

882
00:43:36,940 --> 00:43:38,188
他其实没有在编程

883
00:43:38,190 --> 00:43:40,690
他只是说看

884
00:43:41,160 --> 00:43:43,560
然后就copy pace

885
00:43:44,000 --> 00:43:47,735
然后就看着这些代码跑起来结束了

886
00:43:49,000 --> 00:43:57,480
这个就跟我们节目里面一直在聊的代码编程的AI辅助工具有很大的关系

887
00:43:57,530 --> 00:44:02,522
这些工具在过去的半年左右的时间里面发展真的非常快

888
00:44:02,860 --> 00:44:08,098
涌现了一批大家都挺热门去用的一些工具

889
00:44:08,110 --> 00:44:11,218
比如说最早的像github的copilot

890
00:44:11,380 --> 00:44:13,690
然后独立的ID叫cursor

891
00:44:14,170 --> 00:44:16,486
然后另外的一些开源的工具

892
00:44:16,490 --> 00:44:17,660
比如说c line

893
00:44:18,400 --> 00:44:20,816
CN的一个folk叫入coder

894
00:44:21,320 --> 00:44:24,720
还有我个人比较喜欢的一个纯命令行的工具叫adder

895
00:44:25,360 --> 00:44:28,714
这些其实都有非常多的粉丝群

896
00:44:29,080 --> 00:44:32,200
然后大家在广泛的使用

897
00:44:32,290 --> 00:44:41,600
使用的这个量还挺大的那这种编程的模式已经成为一个不容忽视的一个新东西了

898
00:44:42,600 --> 00:44:46,760
我反而觉得翻译成氛围编程有点拗口

899
00:44:46,770 --> 00:44:48,037
而且不太好理解

900
00:44:48,540 --> 00:44:50,960
我给他另外一个词儿叫随缘编程

901
00:44:53,930 --> 00:44:55,020
就是我说了

902
00:44:55,020 --> 00:44:55,569
你就干

903
00:44:55,890 --> 00:44:56,490
你​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌看着办

904
00:44:57,890 --> 00:44:58,820
成不成随缘

905
00:44:58,820 --> 00:45:00,380
反正我就是他能乱

906
00:45:00,580 --> 00:45:00,979
就过了

907
00:45:00,980 --> 00:45:02,108
我就继续

908
00:45:03,040 --> 00:45:04,240
大概就是这么一种心态

909
00:45:04,900 --> 00:45:06,300
我们要澄清一下

910
00:45:06,300 --> 00:45:07,428
就是另外一种模式

911
00:45:07,430 --> 00:45:08,926
比如我现在在使用的模式

912
00:45:09,430 --> 00:45:12,216
就是我会提交一些问题给到工具

913
00:45:12,220 --> 00:45:13,650
然后他会给我解决方案

914
00:45:13,960 --> 00:45:16,714
然后我会很仔细的去审视这些解决方案

915
00:45:16,900 --> 00:45:18,902
采纳其中我认可的一部分

916
00:45:19,130 --> 00:45:20,345
另外一部分要么丢弃

917
00:45:20,350 --> 00:45:21,286
要么我会修改

918
00:45:21,870 --> 00:45:23,410
这种不叫web coding

919
00:45:24,060 --> 00:45:26,540
这种就是很正常的AI assistant

920
00:45:27,260 --> 00:45:28,430
就是我是主体

921
00:45:28,760 --> 00:45:29,750
它是一个工具

922
00:45:29,750 --> 00:45:31,560
它在辅助我写一些程序

923
00:45:32,100 --> 00:45:34,396
我甚至经常会嫌弃他品味不够好

924
00:45:34,400 --> 00:45:35,688
写的代码不够好看

925
00:45:36,230 --> 00:45:39,112
这种我觉得就完全跟web coding不一样

926
00:45:39,330 --> 00:45:45,034
Web coding是我真的说白了就是他们美国人嗑高了那种感觉

927
00:45:45,310 --> 00:45:47,180
就是我进入一种状态了

928
00:45:47,360 --> 00:45:49,568
然后就这个编程就开始自动流淌起来

929
00:45:49,780 --> 00:45:50,670
像幻觉一样

930
00:45:51,980 --> 00:45:53,358
所以今天我们想聊聊这个话题

931
00:45:53,370 --> 00:45:54,866
你们怎么看这个web coding

932
00:45:56,920 --> 00:45:57,520
我先说一下

933
00:45:57,520 --> 00:46:01,552
我最近一段时间就在用其中的一个个插件叫入code

934
00:46:02,890 --> 00:46:04,248
我用在几个场景

935
00:46:05,010 --> 00:46:08,550
第一个场景其实还是用来阅读代码

936
00:46:08,710 --> 00:46:09,795
就是刚才我说的

937
00:46:09,800 --> 00:46:11,400
我想读懂MCP的时候

938
00:46:11,400 --> 00:46:13,547
我就去找MCP的那些demo code

939
00:46:13,950 --> 00:46:15,070
你帮我解释

940
00:46:15,070 --> 00:46:18,328
效果非常好比我自己看看代码快很多很多

941
00:46:19,850 --> 00:46:22,890
第二种的话是我让他帮我写read me

942
00:46:25,710 --> 00:46:27,800
就是我我我我要做个框架

943
00:46:28,280 --> 00:46:31,970
我打算做一个ruby的一个LM的框架

944
00:46:32,600 --> 00:46:34,680
我就大概模模糊糊有一些想法

945
00:46:34,690 --> 00:46:35,358
几个要点

946
00:46:36,180 --> 00:46:37,423
他帮我写read me

947
00:46:37,570 --> 00:46:41,733
甚至他会帮我把read me里面的那些事例代码

948
00:46:41,750 --> 00:46:44,625
因为read DM里面也会要有这个框架怎么用的代码

949
00:46:45,170 --> 00:46:46,717
对他都写在里面

950
00:46:46,720 --> 00:46:49,518
对我就一时兴起

951
00:46:49,520 --> 00:46:50,040
我就说好

952
00:46:50,120 --> 00:46:52,250
你就按照这个reading帮我把框架做了

953
00:46:54,380 --> 00:46:57,250
他就噗噜噗噜帮我生成了一大堆

954
00:46:58,920 --> 00:47:00,088
然后我就非常高兴

955
00:47:00,090 --> 00:47:01,098
我就看看能不能跑

956
00:47:01,920 --> 00:47:02,640
发现不能跑

957
00:47:04,260 --> 00:47:06,042
甚至都不能正常运行

958
00:47:08,960 --> 00:47:10,850
接下来就开始缩小期待

959
00:47:11,010 --> 00:47:13,566
缩小期待就是说你先帮我把这个函数写了

960
00:47:13,570 --> 00:47:14,875
帮我把那个函数写了

961
00:47:15,500 --> 00:47:17,614
这个时候其实我没有李军那么挑

962
00:47:18,430 --> 00:47:20,626
我还确实是能跑就先用起来

963
00:47:22,290 --> 00:47:23,820
不能跑那么再想办法

964
00:47:24,910 --> 00:47:26,974
但是真正苦恼的是在下一步

965
00:47:26,980 --> 00:47:27,946
就是他有bug

966
00:47:29,820 --> 00:47:32,668
有bug我最开始的时候是这么想的

967
00:47:32,680 --> 00:47:34,588
我就直接把错误信息提给他

968
00:47:36,020 --> 00:47:37,964
然后我就说你看你的代码出了这个bug

969
00:47:37,980 --> 00:47:40,416
你帮我改改不动

970
00:47:41,530 --> 00:47:42,898
有很多时候他改不动

971
00:47:43,680 --> 00:47:48,119
尤其是涉及到多个文件交互形成的一个bug的时候

972
00:47:48,120 --> 00:47:50,685
就是因为我的函数是分布在不同的文件里的

973
00:47:51,770 --> 00:47:52,370
这个改不动

974
00:47:53,540 --> 00:47:56,108
你用的是后端的M是哪一个

975
00:47:57,580 --> 00:47:59,470
我大多数时候用的是deep seek

976
00:47:59,770 --> 00:48:00,580
有时候用RE

977
00:48:00,580 --> 00:48:04,420
有时候用V3OK也试过千问都试过

978
00:48:04,420 --> 00:48:10,468
千问有没有试过cloud 3．5或者3．7

979
00:48:11,560 --> 00:48:13,774
没有其实应该可以试一下

980
00:48:13,970 --> 00:48:18,175
估计那个效果是因为从现在community从社区的反馈来讲

981
00:48:18,190 --> 00:48:19,885
cloud在这方面应该是最强的

982
00:48:20,740 --> 00:48:21,804
就代码辅助这块

983
00:48:22,060 --> 00:48:25,955
我因为是github pilot的用户

984
00:48:26,210 --> 00:48:27,365
我是付费的用户

985
00:48:28,470 --> 00:48:29,350
给可怕了

986
00:48:29,350 --> 00:48:33,328
它是带一个cloud的那个cota的

987
00:48:33,530 --> 00:48:36,698
它每天有固定的一些token可以用的

988
00:48:37,070 --> 00:48:40,553
然后入code和c line都是可以用到这个quota

989
00:48:40,660 --> 00:48:46,286
它可以直接用你的给他copilot的那个订阅来作为它的后端

990
00:48:47,720 --> 00:48:49,036
所以这个都可以

991
00:48:49,040 --> 00:48:50,730
当然我还没有深入的试

992
00:48:50,730 --> 00:48:52,938
因为我现在主要在用ader那A的

993
00:48:52,950 --> 00:48:56,022
我后端就用千问和跟你一样

994
00:48:57,220 --> 00:48:59,920
然后接下来就是在改bug的时候

995
00:49:00,210 --> 00:49:05,535
我发现最难的不是说像我刚才说的那种改法那个搞不定的

996
00:49:05,690 --> 00:49:10,506
就是越是复杂的bug我越是不可能让AI自己的帮我改bug

997
00:49:10,830 --> 00:49:12,642
最后其实我是怎么搞定的呢

998
00:49:12,650 --> 00:49:17,879
其实我我很多时候我都没有在我都没有在电脑前

999
00:49:18,320 --> 00:49:20,360
我就在脑子里想想

1000
00:49:20,360 --> 00:49:21,206
最后想清楚了

1001
00:49:21,390 --> 00:49:23,028
原来大概是这个原因出了bug

1002
00:49:24,270 --> 00:49:29,144
对然后我会很明确的一个指令告诉他说你帮我把这个函数改了

1003
00:49:29,160 --> 00:49:32,162
这个函数在什么什么情况下他会出什么问题

1004
00:49:32,170 --> 00:49:33,410
你帮我把这个情况修掉

1005
00:49:35,010 --> 00:49:35,938
然后他会修的很好

1006
00:49:36,940 --> 00:49:38,326
当然这个比较具体了

1007
00:49:38,670 --> 00:49:43,928
对也就是说你越是想他帮你他帮你干个大活的时候

1008
00:49:44,210 --> 00:49:45,694
越很很可能失望

1009
00:49:46,020 --> 00:49:48,084
但是你想的越清楚

1010
00:49:48,090 --> 00:49:48,920
他干的越好

1011
00:49:49,740 --> 00:49:51,630
但你都没想清楚的时候

1012
00:49:51,630 --> 00:49:52,390
他干不好的

1013
00:49:53,550 --> 00:49:55,485
如果你都不知道这个错是怎么错的

1014
00:49:55,490 --> 00:49:56,910
你光拿出错信息贴给他

1015
00:49:56,910 --> 00:49:57,666
他是搞不定的

1016
00:50:00,050 --> 00:50:06,706
所以我的理解就是这个AI的驱动的或者说AI辅助的编程

1017
00:50:06,720 --> 00:50:13,020
本质上还是要看开发人员自身的有没有想清楚自身的能力

1018
00:50:13,030 --> 00:50:14,535
自身的架构思维

1019
00:50:15,990 --> 00:50:18,080
就是我必须自己在想清楚

1020
00:50:18,510 --> 00:50:20,283
我必须自己先想清楚

1021
00:50:20,470 --> 00:50:22,940
然后他才能够帮我工作的很好

1022
00:50:23,080 --> 00:50:24,547
如果我自己都没想好

1023
00:50:24,550 --> 00:50:25,950
自己都糊里糊涂的

1024
00:50:25,950 --> 00:50:28,491
自己都还在犹豫中的时候

1025
00:50:28,500 --> 00:50:29,346
他是做不好的

1026
00:50:30,700 --> 00:50:33,846
就是你这个跟我一样都不算web coding

1027
00:50:35,020 --> 00:50:36,537
对所以我不能理解web coding

1028
00:50:36,540 --> 00:50:38,553
说实话我觉得那帮人在看

1029
00:50:39,520 --> 00:50:42,736
或者说你刚才说的那个人写这篇文章

1030
00:50:42,740 --> 00:50:45,340
它是一篇类似于反讽吗

1031
00:50:45,340 --> 00:50:46,910
还是在推崇这种事情呢

1032
00:50:47,740 --> 00:50:48,958
我觉得不是反讽

1033
00:50:49,730 --> 00:50:51,395
我觉得他是一个感悟

1034
00:50:51,400 --> 00:50:52,720
或者叫做一个发现

1035
00:50:54,170 --> 00:50:56,234
他发现这个事情突然出现了

1036
00:50:56,240 --> 00:50:58,508
而且不是完全瞎扯的

1037
00:51:00,030 --> 00:51:01,335
他的文字是这个感觉

1038
00:51:02,000 --> 00:51:03,738
当然下面马上就有人回复

1039
00:51:03,800 --> 00:51:07,128
我看他下面的回复里就有人说web coding is happy

1040
00:51:07,190 --> 00:51:08,240
那就是很开心的

1041
00:51:08,540 --> 00:51:11,736
但是当你开始web digging

1042
00:51:12,940 --> 00:51:15,269
这个web integration

1043
00:51:15,730 --> 00:51:16,752
web deployment

1044
00:51:17,180 --> 00:51:18,962
你就会非常的痛苦了

1045
00:51:19,260 --> 00:51:21,290
是下面就马上就会回答这个问题

1046
00:51:21,300 --> 00:51:25,620
就是一旦进入到比如说复杂的系统的调错排错

1047
00:51:26,330 --> 00:51:27,639
然后你要去部署

1048
00:51:27,910 --> 00:51:28,820
你要去测试

1049
00:51:28,820 --> 00:51:30,107
你要持续集成的时候

1050
00:51:30,350 --> 00:51:31,560
那很多事情就做不了

1051
00:51:33,740 --> 00:51:34,860
那个感受是一样的

1052
00:51:36,140 --> 00:51:38,028
所以有两个可能性

1053
00:51:38,370 --> 00:51:42,654
第一个可能性的那种真的沉浸在web coding的人里面

1054
00:51:42,660 --> 00:51:46,422
他主要面对的是一些特定的一些类型的问题

1055
00:51:46,430 --> 00:51:48,030
比如说构造前端的页面

1056
00:51:48,090 --> 00:51:52,320
类似这种好像真的还很多情况下是OK的

1057
00:51:52,320 --> 00:51:57,564
然后或者他们很多的方法是相对稳定具体的

1058
00:51:57,880 --> 00:52:00,787
比如很多人喜欢用的一个测试是这样的

1059
00:52:01,170 --> 00:52:03,380
说你给我写一个某某某小游戏

1060
00:52:03,380 --> 00:52:07,004
比如说那种上下跳的那个鸟

1061
00:52:07,010 --> 00:52:10,960
那个小游戏叫什么flappy bird不知道什么的

1062
00:52:11,680 --> 00:52:13,470
这种测试就没什么意义

1063
00:52:13,940 --> 00:52:15,065
因为它已经套路化了

1064
00:52:15,230 --> 00:52:16,494
而且不具备实用性

1065
00:52:16,830 --> 00:52:20,030
实用性的程序它的问题是多种多样的

1066
00:52:20,030 --> 00:52:21,950
是非常的差异化的

1067
00:52:22,400 --> 00:52:23,687
是很具体的一些问题

1068
00:52:24,030 --> 00:52:25,533
就像刚才老张提到的

1069
00:52:25,770 --> 00:52:26,498
我出了错

1070
00:52:26,500 --> 00:52:29,440
我把出的信息丢给他他会乱试一通

1071
00:52:29,840 --> 00:52:31,256
对他真的会改

1072
00:52:31,260 --> 00:52:32,340
会跟你瞎改

1073
00:52:32,720 --> 00:52:36,045
然后他经常是针对你那个问题做了一些调整

1074
00:52:36,270 --> 00:52:37,040
能不能改好

1075
00:52:37,040 --> 00:52:38,069
这个问题先不说

1076
00:52:38,520 --> 00:52:39,168
别的部分

1077
00:52:39,170 --> 00:52:40,205
他原来做的对的部分

1078
00:52:40,210 --> 00:52:41,120
他就把它改掉了

1079
00:52:42,120 --> 00:52:43,671
经常会有类似这样的东西

1080
00:52:44,170 --> 00:52:44,770
就很麻烦

1081
00:52:44,770 --> 00:52:45,178
非常麻烦

1082
00:52:45,180 --> 00:52:46,410
除非就是刚才老庄说的

1083
00:52:46,410 --> 00:52:48,570
我们很具体告诉他某某函数

1084
00:52:48,570 --> 00:52:49,578
你就把这里面改掉

1085
00:52:49,580 --> 00:52:51,180
if else里面某个分支有问题

1086
00:52:51,190 --> 00:52:51,740
你把它改了

1087
00:52:53,070 --> 00:52:54,670
这种它成功率会高很多

1088
00:52:56,590 --> 00:53:00,494
所以这种我为什么把它称为随猿编程

1089
00:53:01,620 --> 00:53:04,350
就是一个很随缘的一个运气问题

1090
00:53:04,830 --> 00:53:07,590
是不是也有一些故意的夸大的效果

1091
00:53:07,890 --> 00:53:10,690
因为现在有好多厂商在做类似的工具

1092
00:53:11,220 --> 00:53:13,035
无论是从推广IM的使用

1093
00:53:13,040 --> 00:53:14,810
还是推广这个工具本身

1094
00:53:15,370 --> 00:53:16,864
有一个著名的排行榜

1095
00:53:17,150 --> 00:53:22,110
使用各大LM的token数最大的一些工具

1096
00:53:22,360 --> 00:53:24,728
常年就是那几个编程工具排在最前面

1097
00:53:25,120 --> 00:53:28,197
所以程序员群体真的消费力还是可以的

1098
00:53:28,710 --> 00:53:31,807
而且对这种能偷懒的工具也是非常敢于上的

1099
00:53:32,630 --> 00:53:32,990
好

1100
00:53:33,740 --> 00:53:34,598
围绕这个问题

1101
00:53:34,600 --> 00:53:38,495
我觉得有一个适当我们可以升华一点的问题

1102
00:53:38,500 --> 00:53:41,992
就是我们认为计算机或者AI辅助的编程

1103
00:53:42,006 --> 00:53:45,096
它比较理想的是能做到什么程度呢

1104
00:53:46,320 --> 00:53:47,670
刚才我们提到的现状

1105
00:53:47,670 --> 00:53:49,947
现状就是你自己想明白了

1106
00:53:49,950 --> 00:53:53,877
然后他做具体的事可以省你写代码的一些工作量

1107
00:53:53,890 --> 00:53:55,500
这个是现实真的有效的

1108
00:53:55,810 --> 00:53:57,490
还有一些像刚才老赵说到的

1109
00:53:57,490 --> 00:53:58,885
我个人也非常有感触

1110
00:53:58,890 --> 00:54:00,900
就是读代码真的相当好

1111
00:54:01,420 --> 00:54:04,268
这个比你自己去啃帧的速度会快很多

1112
00:54:04,560 --> 00:54:07,122
但是真的去构建一些有点复杂的

1113
00:54:07,130 --> 00:54:10,070
而且有一点设计心思在里面的框架

1114
00:54:10,310 --> 00:54:11,910
他真的还是挺难理解的

1115
00:54:12,270 --> 00:54:14,920
比如我要做一个框架的框架就是为了实现某个特定的目的

1116
00:54:15,290 --> 00:54:16,568
我让他去做这个事情

1117
00:54:16,570 --> 00:54:19,090
他很难短时间之内理解我的设想

1118
00:54:20,120 --> 00:54:21,299
哪怕我写的很清楚了

1119
00:54:21,300 --> 00:54:22,428
他也会有很多误解

1120
00:54:22,880 --> 00:54:27,122
所以到底我们认为在可预见的未来能做到啥程度

1121
00:54:27,130 --> 00:54:28,770
是一个尽可能实现

1122
00:54:28,980 --> 00:54:30,800
我们也觉得挺实用的一个状态了

1123
00:54:31,200 --> 00:54:32,264
有没有什么期许

1124
00:54:32,820 --> 00:54:44,220
其实有一类就正好我昨天在跟另外一个朋友在聊低代码的事情OK当然传统的程序员都会认为低代码肯定没有意义

1125
00:54:44,240 --> 00:54:47,684
而且这个是个乱七八糟从来没成功过的一个设想

1126
00:54:49,970 --> 00:54:51,790
这是一个我们长期以来的思维

1127
00:54:51,960 --> 00:54:56,031
就是低代码low的很low的都不是啥正经玩意儿

1128
00:54:56,540 --> 00:54:58,919
但是我上次在重庆遇到何小洁

1129
00:55:00,390 --> 00:55:03,180
他其实在说到了一个场景是什么呢

1130
00:55:03,180 --> 00:55:07,758
就是一些常见的工作流类的应用

1131
00:55:09,130 --> 00:55:10,194
就是第一步做什么

1132
00:55:10,200 --> 00:55:10,878
第二步做什么

1133
00:55:10,880 --> 00:55:11,648
第三步做什么

1134
00:55:13,250 --> 00:55:16,565
每一步真正要去做的事情又很简单

1135
00:55:16,570 --> 00:55:19,830
就可能是一个很短的几十行十几行代码的函数

1136
00:55:21,850 --> 00:55:24,320
这种东西特别适合用AI来生成

1137
00:55:26,920 --> 00:55:29,032
你是说生成那个小的函数

1138
00:55:29,041 --> 00:55:30,577
还是生成小的函数

1139
00:55:30,583 --> 00:55:36,733
OK生成小的函数流程很多时候就是说我们我们说你是一个业务人员

1140
00:55:36,754 --> 00:55:37,714
你不懂代码

1141
00:55:37,718 --> 00:55:39,830
但是那个流程你是清楚的

1142
00:55:40,580 --> 00:55:41,350
第一步第二步

1143
00:55:41,350 --> 00:55:42,790
第三步你是讲的清楚的

1144
00:55:42,790 --> 00:55:44,571
甚至你还能在板上把它画出来

1145
00:55:44,580 --> 00:55:45,420
给你一个鼠标

1146
00:55:45,420 --> 00:55:47,136
你拖拉拽也可以把它拽出来

1147
00:55:49,350 --> 00:55:52,470
然后接下来说每一段让AI帮你生成

1148
00:55:52,800 --> 00:55:53,700
它就这点功能

1149
00:55:54,240 --> 00:55:56,100
你输入输出你也知道它应该怎么弄

1150
00:55:56,940 --> 00:56:03,596
那么他应该可以极大程度的帮助某一个特定领域的人去干活

1151
00:56:04,270 --> 00:56:08,410
但是其实这个已经可以去现在绝大部分的应用场景了

1152
00:56:08,770 --> 00:56:10,519
就是像我们现在做的这种

1153
00:56:10,990 --> 00:56:12,718
我称之为探索性框架

1154
00:56:14,180 --> 00:56:16,430
它不是一个成熟的领域

1155
00:56:16,660 --> 00:56:19,740
比如说MCP或者是fn function calling

1156
00:56:19,900 --> 00:56:23,212
或者是相关的这个大语言的模型和外部的工具怎么调用

1157
00:56:23,560 --> 00:56:25,122
这是一个非常前沿的探索

1158
00:56:25,130 --> 00:56:28,705
连我们自己人类都还没想清楚它该怎么样去使实现的时候

1159
00:56:29,350 --> 00:56:31,930
那确实你用AI来帮你是帮不了的

1160
00:56:32,310 --> 00:56:33,526
你必须自己想清楚

1161
00:56:33,730 --> 00:56:35,370
但是有太多的领域

1162
00:56:35,370 --> 00:56:36,440
业务类型的

1163
00:56:36,530 --> 00:56:37,630
工业上的

1164
00:56:37,630 --> 00:56:38,698
办公类的

1165
00:56:39,130 --> 00:56:41,410
各种各样的这种操作场景的

1166
00:56:41,560 --> 00:56:42,610
工作流程的

1167
00:56:42,610 --> 00:56:44,690
有太多这种其实已经是成熟的

1168
00:56:44,880 --> 00:56:46,370
就算你没编过这个代码

1169
00:56:46,490 --> 00:56:49,370
一定有在地球上某个地方某人已经写过代码了

1170
00:56:49,830 --> 00:56:50,964
而且是差不多的代码

1171
00:56:50,970 --> 00:56:51,698
甚至java的

1172
00:56:51,700 --> 00:56:52,316
python的

1173
00:56:52,320 --> 00:56:52,980
ruby的

1174
00:56:53,330 --> 00:56:54,977
go的都有人写过了

1175
00:56:56,960 --> 00:56:58,430
这种东西用AI来生成

1176
00:56:58,430 --> 00:56:59,798
我认为是很合理的

1177
00:57:00,720 --> 00:57:03,770
就是某些成熟场景下的

1178
00:57:03,950 --> 00:57:07,238
在低代码辅助下的AI开发

1179
00:57:07,246 --> 00:57:09,415
我觉得会非常有价值

1180
00:57:09,422 --> 00:57:11,348
OK探索类的没办法

1181
00:57:11,597 --> 00:57:14,007
所以可不可以这么理解

1182
00:57:14,256 --> 00:57:21,680
就假设在一个领域内已​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌经有一些模块化不错的基础的代码可以用的情况下

1183
00:57:21,980 --> 00:57:25,480
那么去写一些胶水似的黏合代码

1184
00:57:27,020 --> 00:57:29,806
这种其实我觉得A​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌I还应该还行

1185
00:57:31,020 --> 00:57:34,212
比如说我告诉他我已经有代码可以访问用户

1186
00:57:34,220 --> 00:57:36,368
系统访问订单

1187
00:57:36,370 --> 00:57:37,354
系统访问什么东西

1188
00:57:37,360 --> 00:57:42,568
它的接口都是确定的那现在它做一个简单的复合型操作

1189
00:57:42,930 --> 00:57:43,994
实际上是一种胶水

1190
00:57:44,370 --> 00:57:48,165
比如说从用户名去访问用户的ID

1191
00:57:48,170 --> 00:57:50,380
然后通过ID去检索他的订单

1192
00:57:50,560 --> 00:57:52,732
那这个是如果人类来写的话

1193
00:57:52,740 --> 00:57:54,084
可能就是一个SQL的查询

1194
00:57:54,190 --> 00:57:55,216
或者类似这样的东西

1195
00:57:55,550 --> 00:58:00,310
那么这种事情AI是不是能很快的实现

1196
00:58:00,320 --> 00:58:03,533
我只要告诉他我的标准的访问数据的规范是什么

1197
00:58:03,540 --> 00:58:04,468
它其实是可以做的

1198
00:58:05,290 --> 00:58:06,626
尤其是只读的访问

1199
00:58:06,630 --> 00:58:07,953
那简直就没什么风险

1200
00:58:09,090 --> 00:58:09,420
是的

1201
00:58:09,650 --> 00:58:12,320
那现在的问题是怎么区分这些场景

1202
00:58:12,330 --> 00:58:14,094
就是有些场景它是很适合的

1203
00:58:14,100 --> 00:58:15,252
有些场景是不适合的

1204
00:58:16,210 --> 00:58:18,080
我倒觉得不用区分场景了

1205
00:58:18,430 --> 00:58:21,128
我觉得直接可以用程序员薪水来判断就行了

1206
00:58:23,140 --> 00:58:24,508
如果你的薪水是在

1207
00:58:24,510 --> 00:58:26,886
比如说1万块钱以下的月薪

1208
00:58:27,150 --> 00:58:30,133
你干的工作绝大多数可以用AI来大面积付

1209
00:58:30,930 --> 00:58:32,560
老张厉害了

1210
00:58:32,560 --> 00:58:37,392
这个相当于初级程序员立马就地失业

1211
00:58:38,480 --> 00:58:40,426
不就地提升效率

1212
00:58:40,880 --> 00:58:44,314
嗯嗯嗯嗯嗯当然也可能失业一大部分了

1213
00:58:44,330 --> 00:58:45,198
就是那些

1214
00:58:45,420 --> 00:58:46,648
对按你这个设想

1215
00:58:46,650 --> 00:58:48,600
我假设有十个初级程序员的话

1216
00:58:48,600 --> 00:58:49,180
我留下俩

1217
00:58:49,180 --> 00:58:50,209
其他全可以砍了

1218
00:58:50,510 --> 00:58:52,970
对对对差不多可以砍掉80%

1219
00:58:53,670 --> 00:58:54,426
这个太可怕了

1220
00:58:56,630 --> 00:58:58,520
但是你说判断标准是不是很简单

1221
00:58:59,910 --> 00:59:00,888
听上去很残酷

1222
00:59:00,890 --> 00:59:02,240
但是好像真的有点道理

1223
00:59:03,170 --> 00:59:04,260
对就这种感觉

1224
00:59:05,540 --> 00:59:09,622
而且这种工作到最后可能真的就成web coding了

1225
00:59:09,990 --> 00:59:12,630
他不是很需要深入的思考

1226
00:59:13,040 --> 00:59:14,006
他就依葫芦画瓢

1227
00:59:14,010 --> 00:59:15,750
然后通过测试用力就可以了

1228
00:59:16,800 --> 00:59:17,913
所以还是那句话

1229
00:59:18,050 --> 00:59:21,690
需要人类投入大量的智力的思考

1230
00:59:22,410 --> 00:59:23,518
架构型的

1231
00:59:23,520 --> 00:59:24,400
规划型的

1232
00:59:24,400 --> 00:59:25,540
探索型的任务

1233
00:59:25,540 --> 00:59:27,339
可能人还是为主

1234
00:59:27,780 --> 00:59:28,160
对

1235
00:59:28,740 --> 00:59:34,194
但一些重复性的或者是比较粘合型的代码

1236
00:59:34,210 --> 00:59:36,866
它不是那种独特的功能型的代码的话

1237
00:59:37,250 --> 00:59:39,993
那可能现在就已经比较危险了

1238
00:59:40,430 --> 00:59:44,104
所以我觉得从事这一行的小伙伴们可以去对照一下

1239
00:59:44,110 --> 00:59:45,424
要勇于面对这个现实

1240
00:59:45,520 --> 00:59:49,944
你平常写的代码是不是都是把别人写的核心功能联合起来的代码

1241
00:59:50,350 --> 00:59:53,546
如果这样的话就处于很高的危险的状态

1242
00:59:54,760 --> 00:59:57,415
如果你经常要去写一些很独创性的

1243
00:59:57,420 --> 00:59:59,201
没有人能告诉你只有一个需求

1244
00:59:59,210 --> 01:00:00,450
你要从头开始分析

1245
01:00:00,750 --> 01:00:01,458
做规划

1246
01:00:01,460 --> 01:00:02,159
做设计

1247
01:00:02,640 --> 01:00:07,257
然后很重视这个设计所带来的比如说扩展性

1248
01:00:07,810 --> 01:00:09,088
抗变动的能力

1249
01:00:09,090 --> 01:00:10,290
就应变的能力

1250
01:00:10,980 --> 01:00:13,710
然后在性能上追求很高等等这样的一些问题的话

1251
01:00:13,840 --> 01:00:16,141
那可能一段时间里面危险不高

1252
01:00:16,800 --> 01:00:18,120
你还可以继续

1253
01:00:18,710 --> 01:00:21,167
否则真的有可能就被这些web coding

1254
01:00:21,660 --> 01:00:25,164
我甚至可以预期会出现一批web coding一代

1255
01:00:26,110 --> 01:00:28,390
现在有人就在chAllenge这个事情

1256
01:00:28,390 --> 01:00:32,170
他说这个如果真的实现或者推广下去的话

1257
01:00:32,180 --> 01:00:36,037
有很大的问题就是会降低程序员的平均素养

1258
01:00:36,360 --> 01:00:38,362
当然我认为这个有点杞人忧天了

1259
01:00:38,660 --> 01:00:40,845
因为会进入web coding的这一批

1260
01:00:40,860 --> 01:00:42,030
本来素质就那样了

1261
01:00:44,570 --> 01:00:50,536
当然也会有少量的非常资深的工程师架构师

1262
01:00:50,900 --> 01:00:53,560
他突然陶醉于这个web coding当中

1263
01:00:53,570 --> 01:00:56,469
导致了长期的不用脑子锈掉了

1264
01:00:56,480 --> 01:00:57,408
这种会有

1265
01:00:57,410 --> 01:00:58,250
但我觉得不多的

1266
01:00:58,760 --> 01:01:00,476
以我自己的经验来看的话

1267
01:01:00,480 --> 01:01:02,792
我真的现在看不上大部分AI写的代码

1268
01:01:04,170 --> 01:01:05,720
我觉得明显可以更简洁

1269
01:01:05,720 --> 01:01:10,021
或者结构上更抽象程度更高一些等等这样的一些问题

1270
01:01:10,670 --> 01:01:13,109
但这个智能体的应用

1271
01:01:13,590 --> 01:01:16,735
显然第一个冲击的就是我们这批开发者

1272
01:01:16,950 --> 01:01:19,170
这个真的是叫搬起石头砸自己的脚

1273
01:01:19,930 --> 01:01:22,510
其他行业受影响都会晚一点

1274
01:01:22,520 --> 01:01:23,738
就没就这么快

1275
01:01:24,110 --> 01:01:28,835
第一个首当其冲的就是程序员群体这个事儿我们反正继续观察

1276
01:01:29,430 --> 01:01:30,834
我反正自己试了一下

1277
01:01:30,840 --> 01:01:35,390
我觉得哪怕是cloud 3．7这种完成一些复杂的问题

1278
01:01:35,390 --> 01:01:37,154
仍然现在是有难度的

1279
01:01:37,560 --> 01:01:39,126
但是确实有一些工作

1280
01:01:39,130 --> 01:01:40,786
像我们刚才分析的一些场景

1281
01:01:41,350 --> 01:01:44,331
可能真的是越来越可行了

1282
01:01:44,760 --> 01:01:47,080
越来越可以随缘去做了

1283
01:01:47,720 --> 01:01:52,273
对我觉得这里面可能还有一个学习路径或者是教育路径的一个问题

1284
01:01:52,280 --> 01:01:52,950
什么意思呢

1285
01:01:52,950 --> 01:01:59,330
就是很多特别是一些初学者学好学了一些编程

1286
01:01:59,550 --> 01:02:02,343
甚至是一些软工的一些基础的一些工作以后

1287
01:02:02,610 --> 01:02:04,874
马上就用这些工具

1288
01:02:05,140 --> 01:02:10,390
很容易让他们去有一定的一些局限性和一些锁使

1289
01:02:10,940 --> 01:02:12,773
特别是刚才李老师其实提到的

1290
01:02:12,780 --> 01:02:17,004
就是在学习和教育过程里面

1291
01:02:17,010 --> 01:02:21,798
一定要植入一些好的经典的一些作品案例

1292
01:02:22,400 --> 01:02:26,768
就是好的东西要让学生或者是我们要去学的时候要知道

1293
01:02:27,970 --> 01:02:31,455
有了这样一个好的或者是你的一些品味

1294
01:02:31,460 --> 01:02:35,548
你的一些对厉害项目的认知以后

1295
01:02:35,730 --> 01:02:38,034
你再再去用这些工具

1296
01:02:38,270 --> 01:02:40,779
可能和他去做一些配合的时候

1297
01:02:40,790 --> 01:02:43,358
才会有更好的一些主动力量

1298
01:02:43,510 --> 01:02:47,074
否则的话就是现在很多就是你有那些皮毛

1299
01:02:47,090 --> 01:02:48,560
你就跟着他去弄

1300
01:02:48,730 --> 01:02:51,914
很容易被他往前带

1301
01:02:52,200 --> 01:02:55,126
你的上颚线基本上就是他就是你的上腭线的

1302
01:02:55,470 --> 01:03:01,696
而且还可能还在乐不思乐不知疲的去等待新的升级

1303
01:03:01,700 --> 01:03:02,780
等待新的更新

1304
01:03:02,780 --> 01:03:03,460
跟着他走

1305
01:03:03,750 --> 01:03:06,830
这我感觉就是一个现在一个非常大的一种误区

1306
01:03:08,900 --> 01:03:11,300
其实我们节目里以前提过这个话题

1307
01:03:11,380 --> 01:03:13,902
就是我们认为在人工智能时代

1308
01:03:14,250 --> 01:03:17,246
可能两个能力会变得非常的关键

1309
01:03:17,250 --> 01:03:19,065
一个是正确的提问的能力

1310
01:03:19,530 --> 01:03:22,070
一个是判别优劣的能力

1311
01:03:24,520 --> 01:03:29,616
就是我们现在很多时候并不需要去自己检索知识或者运用知识了

1312
01:03:29,890 --> 01:03:32,398
但是我得把问题提的很到位

1313
01:03:32,830 --> 01:03:36,262
同时当AI给出了答案的时候

1314
01:03:36,330 --> 01:03:38,442
我得能够去识别哪个更好

1315
01:03:39,550 --> 01:03:42,030
这个里面两个能力

1316
01:03:42,030 --> 01:03:43,263
尤其是后面这个能力

1317
01:03:43,270 --> 01:03:46,888
其实都要求你在这个领域的积累非常深厚

1318
01:03:46,900 --> 01:03:50,530
你才能够做得到所谓的web编程

1319
01:03:50,536 --> 01:03:55,912
我觉得很大程度上他们是真的求助于AI因为他做不好这件事情

1320
01:03:55,932 --> 01:04:00,924
他请AI来帮他解决一个他自己本身能力所不及的任务

1321
01:04:01,930 --> 01:04:03,555
当这个任务AI给出答案之后

1322
01:04:03,560 --> 01:04:06,530
他其实要么是不能判断

1323
01:04:06,530 --> 01:04:09,106
要么是他懒得去判断他到底好与不好

1324
01:04:09,110 --> 01:04:10,226
只要能跑他就继续了

1325
01:04:10,570 --> 01:04:13,951
这样才构成我们刚才说的外coding的要件

1326
01:04:14,610 --> 01:04:15,650
如果像我刚才说的

1327
01:04:15,650 --> 01:04:19,430
他很严肃的去审视AI提出的结果

1328
01:04:19,440 --> 01:04:20,388
进行筛选

1329
01:04:20,390 --> 01:04:22,190
甚至对它进行优化

1330
01:04:22,190 --> 01:04:24,740
然后再放到自己的系统里面去的话

1331
01:04:24,750 --> 01:04:25,940
这个不叫web coding

1332
01:04:26,150 --> 01:04:26,990
这就是很正常的

1333
01:04:26,990 --> 01:04:27,678
你在编程

1334
01:04:27,680 --> 01:04:29,090
然后有个工具帮一下你

1335
01:04:30,590 --> 01:04:33,047
但是人都是怎么说呢

1336
01:04:33,050 --> 01:04:34,345
能偷懒尽量偷懒

1337
01:04:34,350 --> 01:04:35,430
对非常容易

1338
01:04:35,430 --> 01:04:37,230
能走捷径就尽量走捷径

1339
01:04:38,520 --> 01:04:40,530
确实很难克服

1340
01:04:41,850 --> 01:04:43,570
所以好像没有别的办法

1341
01:04:44,090 --> 01:04:46,004
一个是得对自己有些要求

1342
01:04:46,650 --> 01:04:48,690
因为如果你真的一直跟着他走的话

1343
01:04:48,930 --> 01:04:51,548
那换个别的人来做有什么区别呢

1344
01:04:52,600 --> 01:04:53,976
你的价值在哪里呢

1345
01:04:55,090 --> 01:04:56,443
所以这是一个沉重的问题

1346
01:04:57,430 --> 01:04:59,040
我还想再提一下

1347
01:04:59,040 --> 01:05:02,650
还是说到刚才王老师说的编程教育的问问题

1348
01:05:03,500 --> 01:05:05,897
因为刚才我一直在想我们怎么定义ai

1349
01:05:06,600 --> 01:05:08,088
至少目前来说

1350
01:05:08,090 --> 01:05:12,630
AI依然只能解决我们人类解决过的类似问题

1351
01:05:14,390 --> 01:05:20,683
对他还解决不了我们人类都没办法快速或者说很简单的解决的问题

1352
01:05:22,050 --> 01:05:23,886
就有一些我们有思路

1353
01:05:23,890 --> 01:05:26,310
但是我们走的不够深入的

1354
01:05:26,520 --> 01:05:27,800
他可以走的更深入

1355
01:05:28,110 --> 01:05:29,377
比如说下棋这种

1356
01:05:29,660 --> 01:05:32,180
对他思路跟我们会

1357
01:05:32,180 --> 01:05:33,753
他甚至会青出于蓝胜于蓝

1358
01:05:33,760 --> 01:05:35,956
但总体思路其实是差不多的

1359
01:05:37,420 --> 01:05:41,764
然后我就想就是学校里面教学生学计算机编程这件事情

1360
01:05:42,470 --> 01:05:45,126
我们通常会拿一个已经解决过的问题

1361
01:05:45,140 --> 01:05:47,285
由老师教给学生你来解决一遍

1362
01:05:49,310 --> 01:05:50,270
但这就有问题

1363
01:05:50,270 --> 01:05:54,404
就我们怎么才能够教学生解决那些我们还没有解决过的问题

1364
01:05:55,520 --> 01:05:56,360
好问题

1365
01:05:56,540 --> 01:05:57,990
我现在的方案是这样的

1366
01:05:58,490 --> 01:06:00,580
我让学生自己提他想做啥

1367
01:06:02,100 --> 01:06:06,194
让他们在自己的日常学习生活里面找一个需求出来做

1368
01:06:07,460 --> 01:06:09,710
如果这个需求过于的tree vi​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌ew

1369
01:06:09,720 --> 01:06:11,800
就是无数人做过的

1370
01:06:11,960 --> 01:06:12,947
我就会把它干掉

1371
01:06:12,950 --> 01:06:14,720
让他从小好

1372
01:06:18,960 --> 01:06:22,740
当然配套的我并不追求他一定做出多么好的东西

1373
01:06:23,390 --> 01:06:26,549
我更关注他思维和实践的过程

1374
01:06:27,700 --> 01:06:28,812
所以这是个双刃剑

1375
01:06:28,970 --> 01:06:32,255
这是一方面会给学生提更高的要求

1376
01:06:32,260 --> 01:06:34,068
另一方面其实也给老师提更高的要求

1377
01:06:34,070 --> 01:06:37,555
就是一般的老师他很难驾驭这样的问题

1378
01:06:37,560 --> 01:06:40,042
所以这个其实也是一个难以推广的方案

1379
01:06:40,420 --> 01:06:40,750
对

1380
01:06:42,170 --> 01:06:42,700
男的

1381
01:06:43,430 --> 01:06:46,682
昨天我去一所学校参观访问

1382
01:06:46,690 --> 01:06:47,570
跟他们交流

1383
01:06:48,060 --> 01:06:50,888
他们现在就在想用AI做什么好

1384
01:06:50,891 --> 01:06:53,929
我给他们想的一个主题是这样的

1385
01:06:53,941 --> 01:06:58,064
叫AI驱动下的跨学科课程及教学法的实践

1386
01:06:58,370 --> 01:07:00,177
就通过AI来帮他们设计课程

1387
01:07:00,180 --> 01:07:06,690
这课程比如他们想设计一个跨学科的语文和历史这样的那可以怎么做呢

1388
01:07:07,070 --> 01:07:08,906
把语文的教案扔进去

1389
01:07:08,910 --> 01:07:10,350
把历史的教案扔进去

1390
01:07:10,350 --> 01:07:15,686
然后让他出一个能够融合两个内容的一个课程的大纲

1391
01:07:15,700 --> 01:07:18,040
然后出一两个课程的sample

1392
01:07:18,450 --> 01:07:20,662
这个反复调试多少能出点东西的

1393
01:07:21,100 --> 01:07:22,540
就算不是最后可用

1394
01:07:22,540 --> 01:07:24,150
至少可以帮人开拓思维

1395
01:07:24,800 --> 01:07:27,363
这个程度总是能做的对对

1396
01:07:27,373 --> 01:07:29,110
这是一个挺好的案例

1397
01:07:29,118 --> 01:07:34,923
对所以类似这种的探索会非常有趣那么在计算机的教育的领域

1398
01:07:34,935 --> 01:07:36,865
其实也会有类似的问题

1399
01:07:36,874 --> 01:07:41,129
我们是不是以后也可以用AI来帮我们设计一些题目

1400
01:07:41,300 --> 01:07:42,704
就是AI你帮我设一个题目

1401
01:07:42,710 --> 01:07:45,440
是你自己轻易答不出来标准答案的

1402
01:07:45,580 --> 01:07:50,311
是开放性的这我怎么觉得像在考验什么上帝

1403
01:07:50,320 --> 01:07:51,300
全能的上帝

1404
01:07:51,300 --> 01:07:54,836
造一个自己也举不起来的石头一样的

1405
01:07:54,840 --> 01:07:58,560
我真是AI会觉得人类好坏

1406
01:07:59,100 --> 01:08:03,530
是的狡猾的人类

1407
01:08:04,430 --> 01:08:04,770
好

1408
01:08:04,770 --> 01:08:06,210
关于这个我们就先说到这儿

1409
01:08:06,970 --> 01:08:08,470
我们抓紧时间最后一个话题

1410
01:08:08,640 --> 01:08:13,280
这个话题也是我们之前周年庆的时候

1411
01:08:13,810 --> 01:08:16,778
有挺多的听友都提到的一个问题

1412
01:08:17,370 --> 01:08:19,180
就是关于开源这件事情

1413
01:08:20,770 --> 01:08:25,360
听友相关的一个环节就是开源社区

1414
01:08:25,450 --> 01:08:26,650
我们怎么融合进去

1415
01:08:26,650 --> 01:08:28,078
尤其是普通人

1416
01:08:28,830 --> 01:08:31,338
然后跟开源生态有关的事情

1417
01:08:31,850 --> 01:08:33,722
一般的小公司能做吗

1418
01:08:34,180 --> 01:08:37,620
对一般的人或者一般的小团队来讲有什么价值

1419
01:08:38,360 --> 01:08:41,090
类似这样的话题我觉得还挺多的

1420
01:08:41,310 --> 01:08:45,048
所以我们今天花点时间就是聊一聊开源和普通人

1421
01:08:45,060 --> 01:08:47,700
就是你作为一个本来对这个了解有限

1422
01:08:47,700 --> 01:08:50,420
但听了我们节目可能我们老老聊开源这事对吧

1423
01:08:50,960 --> 01:08:52,364
大家听的耳朵起茧了

1424
01:08:52,370 --> 01:08:54,257
你想知道你啥玩意儿我要去试一试的话

1425
01:08:54,260 --> 01:08:55,058
我可以怎么试呢

1426
01:08:55,630 --> 01:08:57,430
作为一个个人或者作为一个小团队

1427
01:08:57,570 --> 01:08:59,156
今天我们稍微的聊聊这个话题

1428
01:08:59,490 --> 01:09:00,550
我开个头

1429
01:09:00,550 --> 01:09:04,330
就是我认为对绝大部分的人和小团队来讲

1430
01:09:04,600 --> 01:09:09,088
他们首先感受到开源的东西其实就一句话叫开源即免费

1431
01:09:10,420 --> 01:09:12,004
就开源东西我可以免费用

1432
01:09:12,940 --> 01:09:15,348
只要不违反他的license

1433
01:09:15,350 --> 01:09:16,808
以前甚至也不care license

1434
01:09:16,810 --> 01:09:17,686
我先用了再说

1435
01:09:18,140 --> 01:09:20,340
反正license来​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌找我打官司的几率很小

1436
01:09:21,500 --> 01:09:22,330
最近这些年

1437
01:09:22,820 --> 01:09:24,035
这种事情稍微多一点

1438
01:09:24,040 --> 01:09:25,034
大家会认真一点

1439
01:09:25,040 --> 01:09:26,392
这个lesson才会看一看

1440
01:09:26,890 --> 01:09:28,274
不会有太大的偏差

1441
01:09:29,020 --> 01:09:30,604
总而言之就是我先免费用了

1442
01:09:31,020 --> 01:09:35,604
就是以前像face office的那个运动的时候

1443
01:09:36,290 --> 01:09:39,800
大佬们反复强调我们说的free不是free beer

1444
01:09:40,710 --> 01:09:42,320
不是免费的意思

1445
01:09:42,320 --> 01:09:44,504
而是自由的使用

1446
01:09:44,870 --> 01:09:46,550
但是对大数人来讲

1447
01:09:46,550 --> 01:09:48,080
其实分不清这个差异

1448
01:09:48,440 --> 01:09:50,680
对我来说就是可以无代价的使用

1449
01:09:50,690 --> 01:09:52,114
这是最吸引我的点

1450
01:09:52,370 --> 01:09:53,434
90%都是这样

1451
01:09:54,200 --> 01:09:55,700
这就是一个很好的起点

1452
01:09:55,840 --> 01:09:56,656
我觉得没什么

1453
01:09:56,720 --> 01:09:58,943
你先以这个心态去用

1454
01:09:59,500 --> 01:10:00,676
然后可以干什么呢

1455
01:10:01,510 --> 01:10:03,050
这个我们可以畅所欲言

1456
01:10:03,060 --> 01:10:03,879
你们两位怎么看

1457
01:10:04,540 --> 01:10:09,820
其实我们说回到最开始的自由软件的四个定义

1458
01:10:10,610 --> 01:10:12,680
第一个是自由的使用

1459
01:10:13,020 --> 01:10:14,892
第二个是自由的修改

1460
01:10:14,900 --> 01:10:17,168
第三个是自由的分发

1461
01:10:17,580 --> 01:10:20,300
最后一个其实是把第二第三合在一起

1462
01:10:20,300 --> 01:10:22,580
是自由的修改以后分发

1463
01:10:25,060 --> 01:10:27,576
其他的其实他从头到尾就没谈钱的事情

1464
01:10:28,350 --> 01:10:28,550
对

1465
01:10:29,450 --> 01:10:33,330
但是之所以钱荟澄澄当中成为一个重要的因素

1466
01:10:33,330 --> 01:10:35,595
是因为对于绝大多数最终用户来说

1467
01:10:36,360 --> 01:10:38,450
所谓的这个能不能拿来用

1468
01:10:38,620 --> 01:10:39,475
两种可能性

1469
01:10:39,480 --> 01:10:41,040
一个我直接可以拿来用

1470
01:10:41,040 --> 01:10:43,245
第二个是我必须花了钱才能拿来用

1471
01:10:45,400 --> 01:10:49,495
那事实上自由比那个免费本身更大

1472
01:10:50,090 --> 01:10:53,960
其实就意味着你除了可以完全不受限制的

1473
01:10:53,960 --> 01:10:56,956
不需要任何阻碍的就可以拿来用

1474
01:10:57,270 --> 01:11:00,338
就其中约等于价钱等于零之外

1475
01:11:00,350 --> 01:11:01,484
你还能够拿来改

1476
01:11:01,880 --> 01:11:04,328
还能够拿来再给别人

1477
01:11:04,580 --> 01:11:07,085
还能够修改完了拿你的版本给别人

1478
01:11:08,880 --> 01:11:11,106
这个其实是给了用户极大的自由

1479
01:11:11,790 --> 01:11:13,758
这个进一步的延伸

1480
01:11:13,760 --> 01:11:16,700
其实社区为什么会形成

1481
01:11:17,940 --> 01:11:20,306
就是如果大家每个人都默默的用

1482
01:11:20,310 --> 01:11:21,912
用完了以后我就用呗

1483
01:11:22,200 --> 01:11:23,536
那么他就没有社区

1484
01:11:23,800 --> 01:11:28,216
但是恰恰是因为有了这个自由的获取

1485
01:11:28,230 --> 01:11:29,938
修改和分发之后

1486
01:11:29,940 --> 01:11:31,908
那么自然的这些所有的用户

1487
01:11:31,910 --> 01:11:34,318
所有的有可能有能力修改的用户

1488
01:11:34,330 --> 01:11:35,881
他自然就会形成一个社区

1489
01:11:36,570 --> 01:11:37,893
大家会来讨论怎么改

1490
01:11:39,400 --> 01:11:44,440
而且最好希望的是有这个后面有一个概念叫上游和下游

1491
01:11:44,840 --> 01:11:47,310
上游就是最开始开发代码的人

1492
01:11:48,200 --> 01:11:49,418
下游就是下面用

1493
01:11:49,420 --> 01:11:50,676
甚至下面会改的人

1494
01:11:51,870 --> 01:11:54,470
有一个词叫做upstream first

1495
01:11:54,920 --> 01:11:58,820
就是最好你别自己改完了以后分发

1496
01:11:58,820 --> 01:12:02,068
最好是你把你的改动也汇入到上游去

1497
01:12:02,650 --> 01:12:04,966
所有下游的用户都能够受益

1498
01:12:06,800 --> 01:12:10,172
这就会成为一个更大的社区

1499
01:12:10,850 --> 01:12:12,270
我们我们说有两种情况

1500
01:12:12,270 --> 01:12:15,570
一种情况是每个人都自己改

1501
01:12:15,580 --> 01:12:16,240
自己分发

1502
01:12:16,240 --> 01:12:19,820
那么他就不断的分叉就是我们常说的folk

1503
01:12:20,450 --> 01:12:21,530
这是一种现象

1504
01:12:21,780 --> 01:12:27,126
而另外一种现象是大家都往主干往这个上游去汇集

1505
01:12:27,410 --> 01:12:30,812
那么他就会变成一个几乎不会分裂的社区

1506
01:12:31,140 --> 01:12:32,400
这当然是最理想的情况

1507
01:12:32,400 --> 01:12:33,960
所有的人都形成了合理

1508
01:12:34,600 --> 01:12:39,575
所以当我们在谈开源或者谈自由软件的背后的社区的时候

1509
01:12:39,800 --> 01:12:42,474
其实就是在讲的是所有的开发者

1510
01:12:42,480 --> 01:12:46,316
使用者最终用户会形成一个合力

1511
01:12:46,320 --> 01:12:47,478
变成一个社区

1512
01:12:48,380 --> 01:12:51,236
在这个当中你包括是普通人

1513
01:12:51,240 --> 01:12:52,696
他也能够产生作用

1514
01:12:53,340 --> 01:12:55,196
比如说你反馈问题

1515
01:12:55,430 --> 01:12:56,630
你虽然自己改不了

1516
01:12:56,630 --> 01:12:58,548
你也会说我遇到了什么什么问题

1517
01:12:59,270 --> 01:13:02,978
然后其实有很多的所谓的社区提问的艺术

1518
01:13:04,080 --> 01:13:06,816
我记得我们好多期之前谈过这件事情

1519
01:13:06,820 --> 01:13:08,620
就是还可以提一篇文章

1520
01:13:08,790 --> 01:13:09,200
对

1521
01:13:09,200 --> 01:13:15,258
很古老的在讲说你如果是一个软件有有其实开源软件的用户

1522
01:13:15,270 --> 01:13:16,454
你遇到了问题以后

1523
01:13:16,460 --> 01:13:18,020
你该如何在社区里提问

1524
01:13:18,580 --> 01:13:21,208
这样才能够大家更好的交流

1525
01:13:21,620 --> 01:13:23,456
比如说你最好要带个版本号

1526
01:13:24,350 --> 01:13:25,982
你到底在哪个版本遇到问题

1527
01:13:26,970 --> 01:13:28,490
然后把出错信息讲清楚

1528
01:13:28,490 --> 01:13:29,260
把使用场景

1529
01:13:29,260 --> 01:13:34,434
把你自己的什么操作系统编程语言的版本这些东西都讲清楚

1530
01:13:34,880 --> 01:13:36,136
方便别人定位问题

1531
01:13:36,140 --> 01:13:38,317
这就是最起码的

1532
01:13:38,320 --> 01:13:39,370
也算是规则

1533
01:13:39,370 --> 01:13:40,525
也可以算是礼节

1534
01:13:41,010 --> 01:13:41,986
就你遵守这些东西

1535
01:13:41,990 --> 01:13:43,439
大家会更有效的交流

1536
01:13:43,620 --> 01:13:46,753
他其实在更好的在约束一个人

1537
01:13:46,860 --> 01:13:49,148
当你在开始用开源软件的时候

1538
01:13:49,150 --> 01:13:52,475
你能够如何更有效的帮助这个软件变得更好

1539
01:13:53,370 --> 01:13:57,458
对它就会形成一个最初级的社区

1540
01:13:57,460 --> 01:13:58,828
就是我虽然改不了

1541
01:13:58,830 --> 01:14:00,601
我虽然不知道背或者原理

1542
01:14:00,610 --> 01:14:02,939
但是我至少可以把我这边的情况讲清楚

1543
01:14:02,940 --> 01:14:03,798
方便你来不改

1544
01:14:05,340 --> 01:14:07,684
那下一步当然是说

1545
01:14:07,690 --> 01:14:09,646
因为源代码已经在你那儿了

1546
01:14:10,100 --> 01:14:12,739
因为你已经能够自己去修改了

1547
01:14:12,930 --> 01:14:16,530
那么在这个软件已经出了bug的情况下

1548
01:14:16,540 --> 01:14:18,805
你自己可以在你的本地试着改一改

1549
01:14:19,600 --> 01:14:21,265
改好了你再告诉大家

1550
01:14:21,540 --> 01:14:23,789
甚至把你改的内容也告诉大家

1551
01:14:25,030 --> 01:14:27,700
或者你虽然不是在我的软件上改的

1552
01:14:27,700 --> 01:14:30,220
你也可以告诉大家你是怎么把这个问题规避掉的

1553
01:14:31,190 --> 01:14:33,974
或者是你真的把这个问题解决了以后

1554
01:14:33,980 --> 01:14:35,278
所有人都不会遇到问题了

1555
01:14:35,280 --> 01:14:35,920
那更厉害

1556
01:14:36,740 --> 01:14:41,179
那么你就可以有更好的贡献到这个社区里的一点东西

1557
01:14:42,840 --> 01:14:47,040
当然还有一种情况是啊别人在社区里遇到了类似的问题

1558
01:14:47,040 --> 01:14:51,330
当然我们通常会希望这个社区里最好不要有任何重复的问题

1559
01:14:52,460 --> 01:14:54,490
最好是每一个问题只出现过一次

1560
01:14:54,490 --> 01:14:56,660
而且是那一次在下面就有人回答

1561
01:14:56,660 --> 01:14:57,788
回答完了下面以后

1562
01:14:57,790 --> 01:14:58,966
所有的人都只搜索

1563
01:14:59,830 --> 01:15:02,079
搜索发现没问题了以后再提问

1564
01:15:02,080 --> 01:15:03,736
但是很多人其实还是做不到

1565
01:15:04,720 --> 01:15:06,527
他没有耐心去搜其他人的提问

1566
01:15:06,970 --> 01:15:09,103
对他他也会再提一遍

1567
01:15:09,260 --> 01:15:12,770
这个时候曾经遇到过类似问题的人

1568
01:15:13,410 --> 01:15:15,756
虽然他不是这个开源软件的核心开发者

1569
01:15:15,760 --> 01:15:17,267
他也可以回答别人的问题

1570
01:15:19,480 --> 01:15:23,679
其实他背后不仅仅是我帮你解决了一个问题

1571
01:15:23,980 --> 01:15:26,050
还构成了一种社区氛围

1572
01:15:27,010 --> 01:15:32,050
因为语言和语言之间的交流会让人感受到这个社区里面是什么人

1573
01:15:32,270 --> 01:15:35,170
这些人以什么样的情绪

1574
01:15:35,170 --> 01:15:37,620
以什么样的风格来回答我

1575
01:15:39,630 --> 01:15:41,884
会让人有些社区会让人觉得冰冷

1576
01:15:41,890 --> 01:15:43,661
有些社区会让人觉得热情

1577
01:15:43,880 --> 01:15:46,069
有些社区会让人觉得烦躁

1578
01:15:46,270 --> 01:15:48,322
还有些社区会让人觉得温暖

1579
01:15:48,960 --> 01:15:52,020
这种社区的氛围其实就是在这问答当中产生的

1580
01:15:54,360 --> 01:15:56,350
你作为一个普通的用户

1581
01:15:56,350 --> 01:15:58,352
如果你有能力去回答别人的问题

1582
01:15:58,360 --> 01:16:00,898
其实你也就构成了这个社区氛围的一部分

1583
01:16:02,000 --> 01:16:04,354
如果你也在里面很友善的

1584
01:16:04,360 --> 01:16:05,320
很热情的

1585
01:16:05,320 --> 01:16:08,104
很积极的把你知道的东西清清楚楚的

1586
01:16:08,360 --> 01:16:10,637
干净利落的告诉别人

1587
01:16:10,640 --> 01:16:11,188
回答别人

1588
01:16:11,190 --> 01:16:12,828
其实你也在为这个社区做贡献

1589
01:16:14,840 --> 01:16:16,760
所以我们刚才已经说了3种贡献了

1590
01:16:16,960 --> 01:16:18,238
就是反馈​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌问题

1591
01:16:18,730 --> 01:16:19,658
修复问题

1592
01:16:19,660 --> 01:16:20,400
回答问题

1593
01:16:21,670 --> 01:16:22,050
对

1594
01:16:22,330 --> 01:16:28,960
当然更更厉害的是说你进一步的参与到这个软件后续的发展讨论中来

1595
01:16:29,240 --> 01:16:30,904
我认为应该再加个什么新功能

1596
01:16:31,600 --> 01:16:32,650
我自己试了试

1597
01:16:32,650 --> 01:16:34,030
我觉得这个领域很重要

1598
01:16:34,030 --> 01:16:36,648
我们应该把这个方向发展起来等等等等

1599
01:16:36,860 --> 01:16:40,920
其实你已经开始成为这个社区的某种推动力量

1600
01:16:40,930 --> 01:16:43,875
或者说甚至将来有可能会成为某种主导力量

1601
01:16:44,290 --> 01:16:45,130
那就更厉害了

1602
01:16:45,310 --> 01:16:47,689
反正也是这样一步一步来的对

1603
01:16:48,140 --> 01:16:50,156
我可以提供一个最近的案例

1604
01:16:50,250 --> 01:16:54,658
就是我参与到某个开源的项目里面去的经历

1605
01:16:55,110 --> 01:16:56,980
大家老听友可能都知道

1606
01:16:56,980 --> 01:17:05,324
我提到过我主要的编辑器是用e max的这是一个比较怎么讲

1607
01:17:05,340 --> 01:17:09,010
就是以老们是还在用的

1608
01:17:09,900 --> 01:17:11,220
但是他这个很固定

1609
01:17:11,300 --> 01:17:11,990
就是喜欢的人

1610
01:17:11,990 --> 01:17:12,630
就真喜欢

1611
01:17:12,630 --> 01:17:13,434
就一直离不开

1612
01:17:14,192 --> 01:17:16,524
我用了一个还算比较流行

1613
01:17:16,529 --> 01:17:20,133
但是因为这个社区本身就人没有那么多

1614
01:17:20,140 --> 01:17:23,956
所以也不是那么的有名气的一个配置框架

1615
01:17:23,963 --> 01:17:30,371
因为大家知道IMAX最核心的优势就是它整个体系构建在一种lisp语言之上

1616
01:17:30,820 --> 01:17:37,860
它整个编辑器所有东西都可以通过非常简单的lisp的函数调用来使用

1617
01:17:37,860 --> 01:17:39,462
或者定制或者修改它

1618
01:17:39,900 --> 01:17:42,467
所以它的配置其实是个相当麻烦的事情

1619
01:17:42,780 --> 01:17:47,019
你可以理解为e max里面很多的功能都是你自己写出来的

1620
01:17:47,040 --> 01:17:49,984
或者你调用一些成熟的框架写出来的

1621
01:17:49,990 --> 01:17:53,710
它那个配置文件等于你写了一个自己定制的IDE出来

1622
01:17:53,760 --> 01:17:55,482
所以我为了偷懒

1623
01:17:55,485 --> 01:17:58,929
我就用了一个定制的框架叫doom IMAX

1624
01:17:59,676 --> 01:18:06,558
我最近一直在用一个流行的IMAX上面的大语言模型的插件叫伊拉玛

1625
01:18:06,930 --> 01:18:08,300
它非常好用

1626
01:18:08,630 --> 01:18:12,742
它可以指定一个后端的大元模型之后

1627
01:18:13,050 --> 01:18:15,098
在e max里完成各种各样的功能

1628
01:18:15,100 --> 01:18:16,980
比如说你选中一段文字

1629
01:18:17,190 --> 01:18:18,522
把它翻译成别的语言

1630
01:18:18,790 --> 01:18:20,909
或者选中一段文字提一些要求

1631
01:18:20,920 --> 01:18:23,351
让他帮你改写或者写摘要

1632
01:18:23,360 --> 01:18:27,685
还有对程序代码的一些review或者改进或者怎么样

1633
01:18:27,820 --> 01:18:29,488
各种功能就直接集成在里面

1634
01:18:29,490 --> 01:18:30,118
非常方便

1635
01:18:31,160 --> 01:18:35,104
结果前两天我做了一次所有的包的升级

1636
01:18:35,440 --> 01:18:36,280
这个包胜利之后

1637
01:18:36,970 --> 01:18:37,957
意外就起不来了

1638
01:18:38,320 --> 01:18:39,808
从出错信息上来看

1639
01:18:39,810 --> 01:18:41,728
就是我刚才说这个伊拉玛这个库

1640
01:18:42,150 --> 01:18:46,336
它初始化loading的时候会遇到一个错误信息

1641
01:18:46,340 --> 01:18:48,230
这错误信息我一看我就非常不熟悉

1642
01:18:48,660 --> 01:18:51,312
我对于IMAX用了很多年

1643
01:18:51,570 --> 01:18:55,809
但是他的那个就我刚才说的那个list for语言的东西

1644
01:18:55,990 --> 01:18:57,574
我顶多掌握30%

1645
01:18:57,760 --> 01:18:58,858
就是我属于比较懒的

1646
01:18:59,490 --> 01:19:03,594
所以我只能大概判断它的发生在哪个阶段

1647
01:19:03,610 --> 01:19:05,340
以及它大概是什么问题

1648
01:19:06,240 --> 01:19:08,640
但是我没有办法去准确定位

1649
01:19:08,650 --> 01:19:09,665
更谈不上修改了

1650
01:19:09,670 --> 01:19:13,390
所以我就去以拉玛的那个社区里提了这个英雄

1651
01:19:13,620 --> 01:19:14,440
但很不巧

1652
01:19:14,649 --> 01:19:18,544
伊拉瓦的那个开发者他不用我说的那个框架

1653
01:19:18,768 --> 01:19:21,238
他对dum I IMAX是完全不了解的

1654
01:19:21,450 --> 01:19:23,100
所以我跟他交流了半天

1655
01:19:23,100 --> 01:19:26,090
他也没法判断到底是什么问题

1656
01:19:26,350 --> 01:19:31,102
他又好像懒得为这个事情专门去装一个DMIMAX来试一试

1657
01:19:31,270 --> 01:19:32,554
其实他只要装一个doom

1658
01:19:32,560 --> 01:19:33,964
他就马上能够试出来

1659
01:19:34,530 --> 01:19:36,010
但是他可能懒得试

1660
01:19:36,010 --> 01:19:37,165
或者他也不熟悉这个东西

1661
01:19:37,740 --> 01:19:38,856
然后我就想了个办法

1662
01:19:39,740 --> 01:19:43,220
我就在你max的那个社区里把这个问题同样提了一遍

1663
01:19:43,740 --> 01:19:46,691
然后那边的主开发他就很熟悉

1664
01:19:46,928 --> 01:19:49,198
他因为做这个配置框架

1665
01:19:49,206 --> 01:19:51,936
他对IMAX底层会更加熟悉一些

1666
01:19:52,380 --> 01:19:54,732
他几乎立刻就找到了问题的根源

1667
01:19:55,160 --> 01:19:58,580
然后就循着我这边这个问题

1668
01:19:58,590 --> 01:19:59,643
因为我附了一个链接

1669
01:19:59,650 --> 01:20:02,016
我说我在两边都做了一样的问题

1670
01:20:02,210 --> 01:20:03,434
他就循这个链接过来

1671
01:20:03,440 --> 01:20:05,806
在伊拉瓦的社区的这个艺术下面

1672
01:20:06,110 --> 01:20:10,840
就把他的判断和改这个bug的方法都列在下面了

1673
01:20:11,080 --> 01:20:14,424
前面我跟伊拉瓦的开发者聊了半天都没头绪

1674
01:20:14,540 --> 01:20:16,076
他一个帖子大家就都明白了

1675
01:20:16,380 --> 01:20:20,362
然后下面伊拉玛的两个主要的开发者就说非常感谢

1676
01:20:20,370 --> 01:20:22,990
我们知道了就是说下一个版本会修复这个问题

1677
01:20:23,590 --> 01:20:25,150
所以我相当于干了个啥事儿呢

1678
01:20:25,630 --> 01:20:27,367
干了一个本来陌生的

1679
01:20:27,370 --> 01:20:32,660
完全没有很多交互的两个不同的开源社区之间的连接

1680
01:20:33,040 --> 01:20:36,442
而我其实几乎不需要做很多技术性的工作

1681
01:20:36,650 --> 01:20:38,639
我只要把我遇到的问题说清楚

1682
01:20:39,090 --> 01:20:42,190
然后我只要在两边去提同样的这个issue

1683
01:20:42,450 --> 01:20:43,530
然后附上链接

1684
01:20:43,530 --> 01:20:44,817
他们就自动串起来了

1685
01:20:45,250 --> 01:20:46,279
这种感觉就很好

1686
01:20:46,720 --> 01:20:51,088
所以当你去正确的反馈一个问题

1687
01:20:51,090 --> 01:20:53,010
并且帮助修复它的时候

1688
01:20:53,270 --> 01:20:55,496
实际上你已经为社区做了贡献了

1689
01:20:55,970 --> 01:20:57,098
我个人的理解

1690
01:20:57,220 --> 01:21:02,340
整个开源的核心的精神就是人人为我

1691
01:21:02,350 --> 01:21:03,118
我为人人

1692
01:21:03,440 --> 01:21:06,352
人人为我这件事情本质上就是伸手党

1693
01:21:06,750 --> 01:21:08,962
大家做的事情我去拿来用就好了

1694
01:21:08,970 --> 01:21:09,888
这叫人人为我

1695
01:21:10,960 --> 01:21:14,899
这个是你不用去鼓动和说服的

1696
01:21:16,290 --> 01:21:17,460
任何人都会干这个事

1697
01:21:18,490 --> 01:21:19,750
有那么多人服务于我

1698
01:21:19,750 --> 01:21:23,740
我能够白得好东西就不用去鼓动

1699
01:21:23,750 --> 01:21:25,946
他都会做的好

1700
01:21:25,950 --> 01:21:27,688
难的是我为人人这件事情

1701
01:21:28,280 --> 01:21:29,246
我为人这件事情

1702
01:21:29,400 --> 01:21:32,702
你可以理解为是回馈暴打是吧

1703
01:21:33,200 --> 01:21:36,014
也可以理解为就是证明我的价值

1704
01:21:37,770 --> 01:21:46,050
只要我为人人的这个数量跟人人为我的那个数量差距不要太大就行了

1705
01:21:46,430 --> 01:21:53,369
就是愿意去回馈以及愿意去做贡献的人在整个群体里面的比例

1706
01:21:53,610 --> 01:21:55,370
他只要不低于一个阈值

1707
01:21:55,370 --> 01:21:56,910
整个体系就能run下去

1708
01:21:57,560 --> 01:21:59,298
比如全人类是100的话

1709
01:21:59,790 --> 01:22:02,760
这全人类的100都是人人为我很乐意的

1710
01:22:02,760 --> 01:22:03,440
没问题的

1711
01:22:03,660 --> 01:22:06,814
然后可能只要10%的人愿意去贡献和回馈

1712
01:22:07,070 --> 01:22:08,177
这个体系就能运转了

1713
01:22:10,110 --> 01:22:12,294
但如果我为人人

1714
01:22:12,300 --> 01:22:15,888
愿意去各种方式做一点贡献

1715
01:22:15,890 --> 01:22:19,673
刚才老庄说的任何一种提问题

1716
01:22:19,920 --> 01:22:22,298
回答问题贡献代码

1717
01:22:22,960 --> 01:22:25,480
贡献好好的想法都可以

1718
01:22:26,510 --> 01:22:28,510
这个人群如果太少的话

1719
01:22:28,930 --> 01:22:30,106
少到比如说1%

1720
01:22:30,710 --> 01:22:33,366
那很可能这个体系就会开始慢慢萎缩

1721
01:22:33,910 --> 01:22:36,070
因为做贡献那批人越来越少

1722
01:22:36,500 --> 01:22:41,725
而且他越来越得不到回馈和那种成就感或者是其他的回报

1723
01:22:42,410 --> 01:22:44,290
那么整个社区可能就会collapsing

1724
01:22:44,300 --> 01:22:47,020
就是慢慢的萎缩和崩溃

1725
01:22:48,370 --> 01:22:49,150
很幸运的是

1726
01:22:49,150 --> 01:22:50,140
到今天为止

1727
01:22:51,120 --> 01:22:53,280
这个愿意贡献的人

1728
01:22:53,370 --> 01:22:54,336
哪怕是自发的

1729
01:22:54,340 --> 01:22:57,166
没有任何的利益收获

1730
01:22:57,170 --> 01:23:00,098
他只是为了成就感和顺手的做件好事

1731
01:23:00,310 --> 01:23:04,370
而这个人群的比例一直都还没有低于那个阈值

1732
01:23:05,370 --> 01:23:07,138
所以这个体系就一直转到现在

1733
01:23:08,520 --> 01:23:09,944
作为普通的人来讲

1734
01:23:09,950 --> 01:23:12,065
刚才我说的你用的过程当中有问题

1735
01:23:12,070 --> 01:23:13,888
你就勇敢的去提问题

1736
01:23:14,730 --> 01:23:17,082
这个唯一的能力就是把问题提好

1737
01:23:17,610 --> 01:23:19,554
以前还会要求你英语好一点

1738
01:23:19,560 --> 01:23:22,200
因为毕竟绝大部分的科研社区还是用英语交互的多

1739
01:23:22,210 --> 01:23:26,333
哪怕是中国人做的那现在这个问题也不大了

1740
01:23:26,340 --> 01:23:27,942
你可以用M帮你翻译

1741
01:23:28,560 --> 01:23:30,384
翻译的再差别人能看懂就行

1742
01:23:31,130 --> 01:23:32,880
所以就是勇敢的走出去说就完了

1743
01:23:33,400 --> 01:23:34,810
然后刚才老庄说的那种

1744
01:23:35,000 --> 01:23:38,973
你偶尔浏览的时候或者查询的时候发现一个问题是你以前遇到过的

1745
01:23:39,170 --> 01:23:40,699
甚至你以前提过这个问题

1746
01:23:41,020 --> 01:23:42,430
那你直接把链接贴过来

1747
01:23:43,140 --> 01:23:44,260
马上就能解决问题

1748
01:23:44,260 --> 01:23:46,120
这个会有很多的人都会受益

1749
01:23:46,720 --> 01:23:52,410
好然后有的时候你会提一些代码的修改或者增强

1750
01:23:52,410 --> 01:24:00,754
我以前做过的最轻量级的代码的修改就是有一个挺流行的一个库

1751
01:24:01,040 --> 01:24:02,714
它有一次更新的时候

1752
01:24:03,030 --> 01:24:04,530
有一个版本会发生冲突

1753
01:24:04,690 --> 01:24:07,498
我为这个事情提了一个pull request被合入了

1754
01:24:08,640 --> 01:24:10,850
就一行把版本号改一下

1755
01:24:11,070 --> 01:24:12,190
然后提了个for request

1756
01:24:12,620 --> 01:24:15,014
像这种事情我称之为叫举手之劳

1757
01:24:15,020 --> 01:24:16,931
就是大家只要乐意都可以去做

1758
01:24:17,960 --> 01:24:22,685
所以这个是没什么问题的这过程当中你会对开源理解越来越深

1759
01:24:22,920 --> 01:24:25,856
会慢慢的融入进去

1760
01:24:27,040 --> 01:24:27,410
好

1761
01:24:27,920 --> 01:24:29,875
我们之前听友里面有提到另外一个问题

1762
01:24:29,890 --> 01:24:33,330
就是如果一个小公司我们会怎么面对这件事情

1763
01:24:33,860 --> 01:24:35,169
一个小公司这是什么态度

1764
01:24:35,680 --> 01:24:39,537
我觉得其实没有必要太过于的执着这个事情

1765
01:24:39,800 --> 01:24:43,526
除非你找到了一个开源的很好的商业模式

1766
01:24:44,420 --> 01:24:47,456
像deep sick那样sk t开的商业模式

1767
01:24:47,470 --> 01:24:48,618
我们之前解释过

1768
01:24:49,160 --> 01:24:53,648
就是它要避免少数的厂商垄断一些东西

1769
01:24:54,140 --> 01:24:58,386
他要把这个M的应用变成一种尽可能普及化的事情

1770
01:24:58,960 --> 01:25:01,540
让尽可能多的厂商和个人都进来用

1771
01:25:01,540 --> 01:25:02,464
这就是他的模式

1772
01:25:02,890 --> 01:25:04,010
这个模式很特殊

1773
01:25:04,010 --> 01:25:05,198
但是确实成立

1774
01:25:07,250 --> 01:25:09,408
还有其他的很多的开源的模式

1775
01:25:09,410 --> 01:25:11,129
像千问它也是类似的

1776
01:25:11,490 --> 01:25:13,371
它是为了增加它的知名度

1777
01:25:13,830 --> 01:25:18,758
增加它的使用和遵循一些标准的生态

1778
01:25:19,120 --> 01:25:21,044
他应该努力去扩展这块的生态

1779
01:25:22,820 --> 01:25:26,948
另外的一个模式是比如说WGS这种

1780
01:25:27,910 --> 01:25:29,118
这是一个个人项目

1781
01:25:29,360 --> 01:25:31,329
一个挺优秀的前端工程师

1782
01:25:31,710 --> 01:25:34,635
他去构建了这样的一个前端的框架

1783
01:25:34,940 --> 01:25:35,750
然后把它开源

1784
01:25:35,840 --> 01:25:37,000
开源的目的很简单

1785
01:25:37,000 --> 01:25:40,905
就是去推广它的这个模块

1786
01:25:41,360 --> 01:25:44,996
因为前端的框架实在太多了

1787
01:25:45,770 --> 01:25:49,088
你必须有开源而且非常好的支持

1788
01:25:49,450 --> 01:25:50,619
非常快速的迭代

1789
01:25:50,950 --> 01:25:53,254
然后吸引足够多的人跟你一起来贡献代码

1790
01:25:53,450 --> 01:25:55,478
你才能比较快的占据一个位置

1791
01:25:56,280 --> 01:25:57,728
所以这些就是模式

1792
01:25:58,100 --> 01:25:59,456
如果你没有发现这样的模式

1793
01:25:59,460 --> 01:26:01,500
仅仅只是为了一个好听的名字的话

1794
01:26:01,510 --> 01:26:04,744
那倒没有必要你就把自己当一个普通的个人做好

1795
01:26:04,750 --> 01:26:06,128
我们前面说的我觉得就可以了

1796
01:26:06,130 --> 01:26:07,230
这是我个人的一个态度

1797
01:26:07,840 --> 01:26:09,254
我可以补充一下

1798
01:26:09,380 --> 01:26:11,756
开源项目其实类别也挺多

1799
01:26:12,420 --> 01:26:14,970
参与的一些目的目标其实也挺多的

1800
01:26:15,630 --> 01:26:16,946
从个人来说的话

1801
01:26:16,950 --> 01:26:19,878
参与开源我觉得一个挺好的一个做法

1802
01:26:19,890 --> 01:26:24,948
就是和自己平时学习生活相关的一些事情

1803
01:26:25,260 --> 01:26:30,300
如果能够让他和开源有更多的连接

1804
01:26:30,300 --> 01:26:32,214
其实也是一种挺好的方式

1805
01:26:32,930 --> 01:26:36,130
比如说我是知道还是挺多人去写博客

1806
01:26:36,600 --> 01:26:39,754
对那现在有的写博客他就会有一个开源项目

1807
01:26:39,770 --> 01:26:40,670
有一个

1808
01:26:40,950 --> 01:26:42,654
Get up类似这种仓库

1809
01:26:43,100 --> 01:26:45,026
去做这种联动

1810
01:26:45,990 --> 01:26:49,070
有人会在这上面去做评论

1811
01:26:49,080 --> 01:26:50,010
去留言

1812
01:26:50,680 --> 01:26:54,560
甚至帮你去提出一些文章里面内容的一些修复

1813
01:26:55,120 --> 01:26:57,733
第二种就是像我们现在实验室

1814
01:26:58,500 --> 01:27:02,686
我们参与开源的一种方式就是把我们平时的一些工作

1815
01:27:02,690 --> 01:27:03,710
比如说主会

1816
01:27:04,380 --> 01:27:06,426
再比如说我们的一些课程

1817
01:27:06,950 --> 01:27:09,540
再比如说我们同学们的一些开题

1818
01:27:09,770 --> 01:27:13,746
也用一些小的仓库去做一些运营

1819
01:27:14,830 --> 01:27:18,468
比如说最近我和李老师不是有一门课程

1820
01:27:18,920 --> 01:27:22,992
对那李老师最近的一期就是让大家分组

1821
01:27:23,570 --> 01:27:27,875
我们的助教就是在仓库下面去建一些issue

1822
01:27:28,250 --> 01:27:29,970
大家去做一些报名

1823
01:27:30,970 --> 01:27:36,640
当然这个和传统我们的那种软件的这种开源项目还有点不一样

1824
01:27:36,940 --> 01:27:38,356
但是它是一个开头

1825
01:27:39,060 --> 01:27:41,764
接下来按照李老师的一个规划

1826
01:27:41,770 --> 01:27:46,579
其实就是希望他们理想情况下就希望能够组好队

1827
01:27:46,790 --> 01:27:52,425
在一个自己开设的开源项目下面去做一些分工和协作

1828
01:27:53,080 --> 01:27:55,960
通过这种模式大家可以去参与起来

1829
01:27:56,180 --> 01:27:59,204
同时里面还会形成一些分工

1830
01:27:59,510 --> 01:28:02,348
比如说就是有带头的对吧

1831
01:28:02,350 --> 01:28:04,396
有做架构的对

1832
01:28:04,760 --> 01:28:07,210
有做一些测试的

1833
01:28:07,210 --> 01:28:08,770
有做一些前后端的

1834
01:28:09,500 --> 01:28:12,441
这个其实就是一些非常具体的一些事情

1835
01:28:12,450 --> 01:28:14,322
让大家能够参与进去

1836
01:28:15,170 --> 01:28:17,289
我们其实平时像除了课程以外

1837
01:28:17,300 --> 01:28:18,546
还有一些写论文

1838
01:28:18,750 --> 01:28:25,386
我们很多时候也喜欢在仓库里面先做一些头脑风暴式的一些交流

1839
01:28:26,150 --> 01:28:27,830
甚至去搭一些框架

1840
01:28:28,190 --> 01:28:30,476
然后再去做分工写作

1841
01:28:30,480 --> 01:28:32,330
投稿包括返修

1842
01:28:32,550 --> 01:28:34,258
最后到论文录用

1843
01:28:34,450 --> 01:28:35,298
包括宣传

1844
01:28:35,650 --> 01:28:37,522
其实也都是可以的对

1845
01:28:37,530 --> 01:28:38,594
就是开源这个东西

1846
01:28:38,690 --> 01:28:44,714
其实就是除了一开始那种自由软件传承下来的东西之外

1847
01:28:44,800 --> 01:28:45,020
对

1848
01:28:45,020 --> 01:28:47,638
其实现在这种开放式协作的模式

1849
01:28:47,920 --> 01:28:51,938
它的这种形式其实会越来越普遍

1850
01:28:52,130 --> 01:28:56,498
对就是嗯刚才李老师提到的一个就是人人为我

1851
01:28:56,500 --> 01:28:57,220
我为人人

1852
01:28:57,540 --> 01:29:03,152
对就是你如果你能够更好的在一个公开场合能够去提问

1853
01:29:03,160 --> 01:29:04,129
去表达

1854
01:29:04,310 --> 01:29:05,630
去做一些创造

1855
01:29:05,630 --> 01:29:06,438
去做贡献

1856
01:29:06,850 --> 01:29:07,050
对

1857
01:29:07,050 --> 01:29:08,274
就是这样的一个模式

1858
01:29:08,280 --> 01:29:13,280
其实对你和对他人都是一个非常好的一种方式

1859
01:29:13,980 --> 01:29:21,130
反正在我包括我们的同学参与到这些其中的一些方面里面

1860
01:29:21,150 --> 01:29:23,660
还是会非常受益很深的

1861
01:29:23,920 --> 01:29:31,949
这个是我觉得和现在的一些传统的课堂教学里面会有非常大的一些不一样的一些地方

1862
01:29:32,330 --> 01:29:32,610
对

1863
01:29:32,610 --> 01:29:38,898
如果把这样的一个方式后续能够带到职业企业里面当中

1864
01:29:39,080 --> 01:29:42,228
这个也是我们现在看到的就是挺多的一些

1865
01:29:42,840 --> 01:29:44,824
我们的一些工程师

1866
01:29:44,830 --> 01:29:46,210
程序员对吧

1867
01:29:46,390 --> 01:29:50,110
包括今天其实还是在其他的一些地方有很多的一些​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌活动

1868
01:29:50,130 --> 01:29:52,154
特别是像一些开源的活动

1869
01:29:53,230 --> 01:29:58,585
就非常好的能够去和你以前在网上连接到那些人

1870
01:29:58,600 --> 01:29:59,928
能够在线下去见面

1871
01:30:00,700 --> 01:30:02,020
当然活动这些事情

1872
01:30:02,140 --> 01:30:06,613
那那我们其实在节目里面也有好多期也都讨论过

1873
01:30:06,620 --> 01:30:10,724
也是开源爱好者的一个非常重要的一件事情

1874
01:30:10,900 --> 01:30:13,262
对也是一个非常开心的一个东西

1875
01:30:13,530 --> 01:30:21,114
对这些其实都是能够给你的学习工作至于能够带来非常有乐趣的一些事儿

1876
01:30:21,390 --> 01:30:22,654
我也补充一下这些

1877
01:30:23,790 --> 01:30:28,998
对我要提到这个实际上就是我们讲的开放协同了

1878
01:30:30,680 --> 01:30:32,016
这个范围就扩大了

1879
01:30:32,180 --> 01:30:36,340
不仅仅只是开源源代码的开放和分享

1880
01:30:36,810 --> 01:30:37,878
而是一种协作

1881
01:30:38,370 --> 01:30:39,498
在线协作怎么做呢

1882
01:30:39,590 --> 01:30:44,474
其实开源社区就是一种非常百搭的开源协同的方式

1883
01:30:44,800 --> 01:30:46,067
可以一起写东西

1884
01:30:46,250 --> 01:30:47,650
可以一起完成作业

1885
01:30:47,840 --> 01:30:48,918
可以一起怎么样

1886
01:30:48,920 --> 01:30:52,110
其实你在平台上开个仓库

1887
01:30:52,120 --> 01:30:53,800
很多事情就可以在后续开展起来了

1888
01:30:55,280 --> 01:30:58,190
所以这个也是一种很有意思的用法

1889
01:30:58,300 --> 01:31:01,160
尤其适合那种比较开放的

1890
01:31:01,170 --> 01:31:03,830
不是特别紧密的团队之间的协作

1891
01:31:04,720 --> 01:31:06,820
我认识的有不少人用这个来写书的

1892
01:31:08,280 --> 01:31:11,850
我们现在在尝试就是在我们那个课程里面来分组

1893
01:31:11,850 --> 01:31:12,788
让大家做大作业

1894
01:31:13,620 --> 01:31:14,448
这个有个好处

1895
01:31:15,380 --> 01:31:20,975
就是以前我们一个大学里面的课程

1896
01:31:20,980 --> 01:31:23,788
这种大作业如果分组来做的话

1897
01:31:23,800 --> 01:31:26,897
很容易出现的问题是少数的人干的所有的活

1898
01:31:26,900 --> 01:31:27,758
其他人都蹭的

1899
01:31:28,320 --> 01:31:30,166
这个是经常会碰到的一个问题

1900
01:31:31,300 --> 01:31:33,559
我这次会这么去尝试

1901
01:31:34,290 --> 01:31:35,610
我说不管你这个组多少人

1902
01:31:35,880 --> 01:31:37,440
你们每个组有一个仓库

1903
01:31:38,050 --> 01:31:41,438
然后你们这个组分工之后

1904
01:31:42,290 --> 01:31:43,740
每个人干什么都很清楚

1905
01:31:43,740 --> 01:31:44,150
对吧

1906
01:31:44,440 --> 01:31:46,299
那你这个人到底干了还是没干

1907
01:31:46,560 --> 01:31:49,535
他应该体现在这个仓库的某些提交里面

1908
01:31:50,380 --> 01:31:52,240
我们最后根据提交量来评估

1909
01:31:54,330 --> 01:31:56,274
比如说有些人说我负责设计

1910
01:31:56,470 --> 01:31:58,326
我不写代码那也行

1911
01:31:58,410 --> 01:31:59,730
你设计文档你要提交上去

1912
01:32:01,060 --> 01:32:04,987
我们可以看你提交的设计文档还是说我负责测试

1913
01:32:05,060 --> 01:32:05,690
我负责什么

1914
01:32:05,690 --> 01:32:10,313
那你测试代码写上去持续进行的流程你负责部署起来

1915
01:32:11,880 --> 01:32:17,336
所以这个实际上就很像以前那个笑来

1916
01:32:17,340 --> 01:32:19,236
他跟我合作一个项目的时候

1917
01:32:19,400 --> 01:32:20,696
他发明了一个概念

1918
01:32:21,070 --> 01:32:23,662
就是把比特币里面的那个proof of work

1919
01:32:24,020 --> 01:32:27,380
就是比特币原来不就是你去做计算

1920
01:32:27,390 --> 01:32:30,932
一些无谓的计算来表达你的算力

1921
01:32:31,180 --> 01:32:34,326
然后你的算力最后会变成你持有的比特币的一个量

1922
01:32:34,520 --> 01:32:35,677
这个叫proof work

1923
01:32:36,240 --> 01:32:38,333
当然这个现在逐渐在被更迭掉

1924
01:32:39,230 --> 01:32:43,725
他就说其实学习和项目里面也有proof of for work

1925
01:32:44,240 --> 01:32:45,290
Proof work是什么呢

1926
01:32:45,470 --> 01:32:47,346
其实就是你在仓库里提交的东西

1927
01:32:47,790 --> 01:32:49,285
这个概念我觉得也挺有意思的

1928
01:32:49,450 --> 01:32:50,792
我们可以这一次来试一下

1929
01:32:51,230 --> 01:32:54,670
所以开源的社区是有很多这类玩法的

1930
01:32:54,760 --> 01:32:56,929
大家可以去开开脑洞

1931
01:32:57,670 --> 01:32:59,299
确实好

1932
01:32:59,580 --> 01:33:01,650
这几个问题大家还有什么要补充吗

1933
01:33:02,000 --> 01:33:04,910
我是觉得开源可以讨论的话题太多

1934
01:33:04,910 --> 01:33:08,492
所以我们很欢迎亲友们再提更具体的问题

1935
01:33:08,500 --> 01:33:09,764
我们以后可以再聊

1936
01:33:10,300 --> 01:33:13,704
对的就是听友们如果觉得不过瘾

1937
01:33:13,710 --> 01:33:15,720
或者觉得自己的问题没有得到解答

1938
01:33:16,000 --> 01:33:16,924
可以给我们留言

1939
01:33:17,140 --> 01:33:21,478
我们随时都可以在展开这方面的一些话题

1940
01:33:21,731 --> 01:33:21,973
好

1941
01:33:22,215 --> 01:33:25,830
下面就开始我们本月的借書的环节

1942
01:33:26,010 --> 01:33:27,840
今天的顺序是先王老师

1943
01:33:27,840 --> 01:33:28,348
然后老庄

1944
01:33:28,350 --> 01:33:30,387
最后是我王老师

1945
01:33:30,390 --> 01:33:30,790
来吧

1946
01:33:31,370 --> 01:33:35,225
好我今天先来介绍我今天的推荐的书

1947
01:33:35,800 --> 01:33:38,140
今天推荐书还是比较硬核的

1948
01:33:38,850 --> 01:33:43,330
从名字大家就应该知道叫做机器学习系统设计

1949
01:33:44,660 --> 01:33:45,380
按道理来说

1950
01:33:45,700 --> 01:33:47,758
这是一本专业书

1951
01:33:47,850 --> 01:33:54,225
对可能在我们这个节目里面去推荐可能会有一定的难度

1952
01:33:54,240 --> 01:33:56,589
对因为我们的听众其实还是比较多样性的

1953
01:33:57,040 --> 01:34:01,590
但是我为什么要去推荐这样一本机器学习系统设计这件事情

1954
01:34:02,230 --> 01:34:05,184
其实也是我最近学习的一个心得

1955
01:34:05,860 --> 01:34:07,840
因为现在在大模型来了以后

1956
01:34:08,120 --> 01:34:10,730
包括我们节目里面其实也是在不断的讨论

1957
01:34:11,030 --> 01:34:15,918
包括我们也会讨论很多的一些编程软件工程相关的一些事情

1958
01:34:17,030 --> 01:34:19,070
我们也碰到了一些东西

1959
01:34:19,070 --> 01:34:20,390
就是机器学习来了以后

1960
01:34:20,600 --> 01:34:22,550
对我们现在的软件工程

1961
01:34:22,550 --> 01:34:24,246
你去开发一个系统

1962
01:34:24,250 --> 01:34:26,014
特别是一个AI系统的时候

1963
01:34:26,350 --> 01:34:29,430
你的关注的重点究竟有没有变化

1964
01:34:30,200 --> 01:34:34,915
实际上变化还是挺大的对那机器学习系统设计这本书

1965
01:34:35,060 --> 01:34:39,108
其实就解释了或者是说明了里面的很多的一些变化

1966
01:34:39,830 --> 01:34:40,270
怎么说呢

1967
01:34:40,270 --> 01:34:42,170
我会从几个方面来介绍

1968
01:34:42,490 --> 01:34:45,226
对我不会去介绍里面非常硬核的东西

1969
01:34:45,710 --> 01:34:46,340
因为这么说

1970
01:34:46,680 --> 01:34:48,654
按照作者的设计

1971
01:34:48,660 --> 01:34:51,924
其实还是对读者有一定的要求的对对

1972
01:34:51,930 --> 01:34:56,418
就是因为它不是一个我们像人工智能机器学习入门的书

1973
01:34:56,620 --> 01:34:59,920
这个其实我们在以前的建筑里面其实有介绍过

1974
01:35:00,520 --> 01:35:03,250
它其实是需要你有一定的编程经验

1975
01:35:03,440 --> 01:35:06,500
甚至有一定的软件开发的一些基础

1976
01:35:06,950 --> 01:35:13,511
如果现在你对做一套AI系统或者是机器学习系统感兴趣的话

1977
01:35:13,640 --> 01:35:15,720
这本书就是一个非常适合你的

1978
01:35:15,940 --> 01:35:16,155
对

1979
01:35:16,155 --> 01:35:19,392
因为我认为接下来的一些应用

1980
01:35:19,393 --> 01:35:21,543
包括我们也提了好几次

1981
01:35:21,551 --> 01:35:27,069
像最近一定会有非常多的一些AI应用agent相关的一些事情出来

1982
01:35:27,400 --> 01:35:30,152
对就是你要去做这样的事情的时候

1983
01:35:30,260 --> 01:35:37,024
对你应该具备或者是关注什么样的一些技能和一些点对这本书的作者其实也挺有意思的

1984
01:35:37,030 --> 01:35:38,947
他其实是一名越南人

1985
01:35:39,710 --> 01:35:42,150
从小就生长在越南

1986
01:35:42,150 --> 01:35:44,210
后来去了美国念书工作

1987
01:35:44,660 --> 01:35:50,120
也是一个人工智能还有数据科学的一个研究学者

1988
01:35:50,120 --> 01:35:51,940
对沉浸在像NVIDIA

1989
01:35:52,200 --> 01:35:56,095
还有netflix这些企业里面都工作过

1990
01:35:57,160 --> 01:35:57,980
他的这本书

1991
01:35:58,100 --> 01:36:01,874
实际上他还在斯坦福大学教授一门课程

1992
01:36:01,940 --> 01:36:04,172
这个课程就是这本书的名字

1993
01:36:04,770 --> 01:36:06,720
他在教授这门课程的过程当中

1994
01:36:06,720 --> 01:36:09,528
也把他教授的内容写了一本书

1995
01:36:10,730 --> 01:36:13,858
其实他最近应该就是在去年年底的时候

1996
01:36:13,860 --> 01:36:16,896
还有另外一本书叫做AI engineering

1997
01:36:17,280 --> 01:36:18,985
这本书目前还没有中文版

1998
01:36:19,130 --> 01:36:22,262
对我想应该是在翻译的路上

1999
01:36:23,510 --> 01:36:27,095
其实他是非常关注人工智能大模型

2000
01:36:27,100 --> 01:36:35,045
还有机器学习系统的构建这件事情的对这本书其实是一个实践和实战性比较强的

2001
01:36:35,370 --> 01:36:41,994
就是告诉你如果你要去做一个面向AI或者是机器学习的一个系统的时候

2002
01:36:42,270 --> 01:36:43,180
你应该关注什么

2003
01:36:43,790 --> 01:36:46,166
对这本书里面的结构

2004
01:36:46,320 --> 01:36:48,784
对我把它的一些大的章节说一下

2005
01:36:48,790 --> 01:36:50,734
大家可能就非常清楚

2006
01:36:51,040 --> 01:36:52,306
就是AI系统

2007
01:36:52,310 --> 01:36:54,767
机器学习系统它会关注些啥了

2008
01:36:55,520 --> 01:36:58,964
第一个其实就是机器学习的机器学习系统的概述

2009
01:36:59,690 --> 01:37:04,668
主要就是讲了要去做开发一个积极学习系统

2010
01:37:04,980 --> 01:37:06,645
它的整个流程是什么

2011
01:37:06,930 --> 01:37:09,141
对你需要怎么样去做数据

2012
01:37:09,370 --> 01:37:10,847
怎么样去做模型

2013
01:37:10,850 --> 01:37:12,158
怎么样去部署

2014
01:37:12,350 --> 01:37:13,898
怎么样去评测

2015
01:37:13,900 --> 01:37:15,448
怎么样去调优

2016
01:37:15,450 --> 01:37:20,847
怎么样去上线后的观测维护以及后续的一些迭代

2017
01:37:21,610 --> 01:37:28,280
这个实际上是和我们以前以往的软件工程有非常不一样的一些地方

2018
01:37:29,360 --> 01:37:33,408
第二张其实就对整个的一些机器学习

2019
01:37:33,410 --> 01:37:37,810
它的一些需要满足的一些性能特征也做了一些解释

2020
01:37:37,810 --> 01:37:39,266
比如说像可扩展性

2021
01:37:39,700 --> 01:37:40,710
像可维护性

2022
01:37:41,070 --> 01:37:41,998
像适应性

2023
01:37:42,770 --> 01:37:46,004
甚至后面还有一些机器学习的一些任务的一些分类

2024
01:37:46,530 --> 01:37:48,810
其实也是一些比较基础的一些概念

2025
01:37:49,630 --> 01:37:52,520
从第三章它的中间开始

2026
01:37:52,520 --> 01:37:55,040
其实就是它的一个主体

2027
01:37:55,390 --> 01:37:58,289
对包括重点就开始来了

2028
01:37:58,980 --> 01:38:02,125
第三章其实就是介绍的数据工程的基础

2029
01:38:02,810 --> 01:38:05,762
第四章就介绍的是训练数据

2030
01:38:06,190 --> 01:38:08,460
第五章就介绍特征工程

2031
01:38:08,670 --> 01:38:11,726
第六章开始​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌全部都是以模型为主导的

2032
01:38:12,020 --> 01:38:13,329
比如说模型开发

2033
01:38:13,700 --> 01:38:15,368
模型评估

2034
01:38:15,480 --> 01:38:16,608
模型部署

2035
01:38:16,960 --> 01:38:19,048
还有模型的一些预测

2036
01:38:19,720 --> 01:38:21,865
包括一些数据的一些分离

2037
01:38:22,160 --> 01:38:26,465
第九章开始是生产环境中的这种持续学习和测试

2038
01:38:26,950 --> 01:38:30,978
第十章就是ML ops的一些技术和工具

2039
01:38:31,600 --> 01:38:35,434
最后一章还讨论了人与机器学习这件事情

2040
01:38:35,740 --> 01:38:40,092
包括一些像一些可信AI的一些伦理

2041
01:38:40,680 --> 01:38:44,064
还有AI的一些价值对齐相关的这些东西

2042
01:38:45,120 --> 01:38:46,206
那什么意思呢

2043
01:38:46,210 --> 01:38:50,034
其实就是像我们都是有计算机专业的

2044
01:38:50,040 --> 01:38:52,669
都是学习过软件工程的对

2045
01:38:52,670 --> 01:38:55,286
就是软件工程有一套非常对

2046
01:38:55,290 --> 01:38:57,006
包括我们这学期的这门课里面

2047
01:38:57,010 --> 01:38:59,926
其实我也讲了软件工程的几个不同的时代

2048
01:39:00,090 --> 01:39:03,710
包括最新的从需求设计

2049
01:39:03,710 --> 01:39:04,640
开发测试

2050
01:39:04,640 --> 01:39:07,526
编码以及带box的这些东西

2051
01:39:08,250 --> 01:39:13,686
那AI应用AI系统对在大模型这个时代

2052
01:39:13,690 --> 01:39:22,630
对他关注的重点从我们以往的代码和软件其实开始变成了数据和模型

2053
01:39:23,580 --> 01:39:28,340
就是一个系统对你的性能上的一些好坏

2054
01:39:28,350 --> 01:39:35,262
或者是它的重点就不会是以往我们的一些代码算法和软件流程这些东西了

2055
01:39:35,620 --> 01:39:40,086
对他可能决定的越来越多的是你的数据做的好不好

2056
01:39:40,520 --> 01:39:42,275
你的模型调的好不好

2057
01:39:43,220 --> 01:39:47,224
而且这件事情对我们今天其实有非常大的一个意义

2058
01:39:47,470 --> 01:39:48,320
什么意义呢

2059
01:39:48,320 --> 01:39:50,649
就是我们前面的节目其实也讨论了多次

2060
01:39:51,420 --> 01:39:54,444
就是当大模型开源出来以后

2061
01:39:55,280 --> 01:39:59,912
我们的开发者能够基于大模型能够做的事情会越来越多

2062
01:40:00,830 --> 01:40:09,228
最近其实我和向庄老师还在去尝试去做像那个大模型开源的一些分级还有分类

2063
01:40:09,850 --> 01:40:11,540
其实大模型可以做的生意很多

2064
01:40:11,860 --> 01:40:14,346
不光是可以去做一些调优

2065
01:40:14,610 --> 01:40:16,130
还可以做一些量化

2066
01:40:16,590 --> 01:40:21,042
蒸馏还有一些其他的一些越来越多的一些用法

2067
01:40:21,600 --> 01:40:24,848
当然这些用法在现在的实际过程当中

2068
01:40:24,860 --> 01:40:27,800
还有很多的一些技术上的一些门槛

2069
01:40:27,800 --> 01:40:30,810
或者是一些更新的地方

2070
01:40:31,270 --> 01:40:32,090
比如说算力

2071
01:40:32,370 --> 01:40:33,896
但是我们相信对

2072
01:40:33,900 --> 01:40:36,683
就是随着技术的这种发展

2073
01:40:36,840 --> 01:40:41,844
对你看我们我们这个节目的李老师庄老师

2074
01:40:41,860 --> 01:40:45,209
对本身就是本地大模型部署的爱好专家

2075
01:40:45,550 --> 01:40:48,668
对就是这种事情会越来越门槛低

2076
01:40:49,030 --> 01:40:49,280
对

2077
01:40:49,280 --> 01:40:50,963
有了这种开源大模型

2078
01:40:50,970 --> 01:40:52,550
你自己本地去部署以后

2079
01:40:52,550 --> 01:40:54,290
可以做的事情其实非常多了

2080
01:40:54,650 --> 01:40:57,240
这个时候那就会有一个新的问题

2081
01:40:57,400 --> 01:41:02,512
你怎么样去基于这些开源的或者是已有的这种工程框架

2082
01:41:02,720 --> 01:41:04,196
可以自己去开发应用

2083
01:41:04,550 --> 01:41:13,950
对这件事情其实我相信我们几个都是会非常感兴趣的对这本书里面其实就写了一个非常完整的一个框架和一个套路

2084
01:41:14,500 --> 01:41:17,005
这里面其实会给我挺多的一些启发

2085
01:41:17,640 --> 01:41:19,620
最近其实也是在和一些

2086
01:41:20,160 --> 01:41:23,184
像飞猪云这些开源项目的一些开发者

2087
01:41:23,190 --> 01:41:25,276
我们讨论过程当中其实有些心得

2088
01:41:25,650 --> 01:41:30,370
比如说我现在希望去做一个知识问答系统对吧

2089
01:41:30,370 --> 01:41:31,610
我有一些领域数据

2090
01:41:31,610 --> 01:41:35,195
比如说我有一个我们学校的教务处

2091
01:41:35,200 --> 01:41:37,904
我们的教务处的一些招生的信息网站

2092
01:41:38,080 --> 01:41:38,370
对吧

2093
01:41:38,370 --> 01:41:39,354
他们做了一个案例

2094
01:41:39,830 --> 01:41:42,448
那怎么样去基于一些大模型和一些框架

2095
01:41:42,450 --> 01:41:45,826
快速的去把这个系统应用开发出来呢

2096
01:41:46,270 --> 01:41:48,838
其实现在借助一些开源工具

2097
01:41:48,840 --> 01:41:50,358
包括一些大模型的API

2098
01:41:50,500 --> 01:41:52,093
其实还是非常容易的

2099
01:41:52,340 --> 01:41:54,020
但是他的思路不太一样

2100
01:41:54,490 --> 01:41:56,258
对他更多的会关注

2101
01:41:56,460 --> 01:41:58,852
你基于这个大模型

2102
01:41:58,860 --> 01:42:01,239
你外挂的那知识库应该怎么做

2103
01:42:01,570 --> 01:42:04,202
对你在做那个知识库的过程当中

2104
01:42:04,210 --> 01:42:07,798
你的数据工程应该怎么做对你的数据格式应该怎么做

2105
01:42:07,800 --> 01:42:09,880
你应该选择什么样的存储方式

2106
01:42:10,490 --> 01:42:13,166
这是我们以往去做软件工程

2107
01:42:13,170 --> 01:42:15,714
特别是我们以往这种前端后端数据库

2108
01:42:15,870 --> 01:42:19,200
它的这种关注点非常不一样的地方

2109
01:42:19,880 --> 01:42:20,540
有了这个以后

2110
01:42:20,960 --> 01:42:21,880
就会引出来

2111
01:42:21,880 --> 01:42:25,432
包括我们今天节目里面也会提到你对大模型的一些调用

2112
01:42:25,450 --> 01:42:27,466
大模型能够提供什么样一些能力

2113
01:42:28,130 --> 01:42:30,418
以及这个模型它的能力有哪些

2114
01:42:31,030 --> 01:42:36,850
如果这个模型还是你自己基于开源的模型的基础之上去做了一些调整

2115
01:42:37,430 --> 01:42:38,710
你的一些生成的话

2116
01:42:39,080 --> 01:42:40,763
那你模型应该怎么去维护

2117
01:42:41,040 --> 01:42:41,980
怎么去上线

2118
01:42:41,980 --> 01:42:42,880
怎么去观测

2119
01:42:43,390 --> 01:42:47,150
这里面其实就会有非常多的一些一系列的问题

2120
01:42:47,970 --> 01:42:48,458
这些问题

2121
01:42:48,610 --> 01:42:54,439
其实在这本书里面其实能够找到非常多的一些系统的一些解决方案

2122
01:42:54,740 --> 01:42:58,174
至少他把整个流程和谐框架都拉出来了

2123
01:42:58,960 --> 01:43:01,936
当然我相信随着时间的发展

2124
01:43:02,040 --> 01:43:04,020
这里面的很多的一些工具

2125
01:43:04,250 --> 01:43:06,890
很多的一些内容还会不断的去更新

2126
01:43:07,460 --> 01:43:13,610
但是他已经给我们指出了一种就是全新的在人工智能和机器学习时代

2127
01:43:13,630 --> 01:43:16,920
你去做一个AI系统它的一些路线

2128
01:43:17,190 --> 01:43:20,864
对这是我觉得去推荐这本书里面的一个非常重要的点

2129
01:43:21,070 --> 01:43:22,339
而且我还有一个感受

2130
01:43:22,340 --> 01:43:27,170
就是现在你去做一个成功的一些AI系统的时候

2131
01:43:27,480 --> 01:43:34,305
你可能需要考虑更多的是一个AI友好的这种工程怎么做

2132
01:43:34,680 --> 01:43:36,880
对你应该怎么样去做数据

2133
01:43:36,890 --> 01:43:39,475
怎么样去写你的一些模块

2134
01:43:39,720 --> 01:43:43,860
使得当你和大模型的能力去做结合的时候

2135
01:43:43,980 --> 01:43:45,275
能够更加去友好

2136
01:43:46,020 --> 01:43:47,724
比如说你怎么样去做知识库

2137
01:43:47,730 --> 01:43:49,914
怎么样去用reg这种东西

2138
01:43:49,920 --> 01:43:52,640
你应该怎么样把你的已有的一些文档

2139
01:43:52,650 --> 01:43:55,110
你的知识放到那些库里面去

2140
01:43:55,580 --> 01:43:59,600
这是现在的一些公司里面的一些新的一些思路

2141
01:44:00,320 --> 01:44:01,058
当然这些东西

2142
01:44:01,200 --> 01:44:02,955
其实在我们现在传统学校里面

2143
01:44:02,960 --> 01:44:07,748
其实都还是没有有系统的这种课程上的一些建设

2144
01:44:08,170 --> 01:44:09,234
但是在数据里面

2145
01:44:09,240 --> 01:44:13,508
其实还是特别是一些走的比较前的一些工程师里面

2146
01:44:13,520 --> 01:44:19,007
其实还是挺多的对这个其实是我今天分享这本书的一个最大的一个目的

2147
01:44:19,210 --> 01:44:20,418
可能门槛会有点高

2148
01:44:20,750 --> 01:44:24,278
但是如果恰好你从事这一行

2149
01:44:24,280 --> 01:44:27,430
如果希望去做设计AI的一些系统

2150
01:44:27,440 --> 01:44:28,574
积极学习的系统的话

2151
01:44:28,580 --> 01:44:31,460
我相信是一个非常不错的一个一本书

2152
01:44:31,760 --> 01:44:33,456
好我就先介绍到这里

2153
01:44:34,100 --> 01:44:34,490
好好

2154
01:44:35,900 --> 01:44:39,456
我开始今天推荐的又是一本小说

2155
01:44:40,520 --> 01:44:46,277
而且是之前推荐过的同一个作家叫三浦紫焰

2156
01:44:46,540 --> 01:44:49,060
我推荐过他另外一本书叫强风吹拂

2157
01:44:50,360 --> 01:44:54,386
然后那天正好是走过哪里

2158
01:44:54,420 --> 01:44:56,708
反正就是顺手就翻到了一本书

2159
01:44:56,720 --> 01:44:58,575
叫名字叫编舟记

2160
01:44:58,750 --> 01:45:00,411
然后这个书名就很难理解

2161
01:45:00,660 --> 01:45:01,920
什么叫编舟记

2162
01:45:02,410 --> 01:45:06,400
是编写的编然后一条船的那个周

2163
01:45:06,870 --> 01:45:08,564
你说编写一条船

2164
01:45:08,570 --> 01:45:10,514
还是说编织一条船

2165
01:45:10,520 --> 01:45:13,608
还是拿草编一个专一个一个什么粥吗

2166
01:45:14,440 --> 01:45:15,718
然后就开始翻开来看

2167
01:45:16,070 --> 01:45:17,720
其实这本书是讲什么呢

2168
01:45:17,720 --> 01:45:23,624
是讲的是一群编辑在编写一本词典的故事

2169
01:45:25,370 --> 01:45:26,855
然后我在豆瓣上一搜

2170
01:45:26,960 --> 01:45:29,890
就编舟记这个名字进去

2171
01:45:29,890 --> 01:45:31,314
能够收到5个词条

2172
01:45:31,790 --> 01:45:34,658
分别是电影豆瓣评分8．6

2173
01:45:35,620 --> 01:45:38,388
电视剧是一部动画片豆瓣评分9．0

2174
01:45:38,570 --> 01:45:40,730
书的豆瓣评分是8．5

2175
01:45:41,160 --> 01:45:47,040
然后还有一个是一部电视剧是豆瓣评分是7．7

2176
01:45:47,050 --> 01:45:47,824
这个要差一点

2177
01:45:47,830 --> 01:45:48,754
我就不打算看了

2178
01:45:48,760 --> 01:45:51,136
我现在看过了电影还有原著

2179
01:45:52,220 --> 01:45:53,700
这今天当然会推荐原作

2180
01:45:53,700 --> 01:45:55,141
但是电影其实也非常好看

2181
01:45:58,500 --> 01:46:00,854
很多人会在第一时间反映

2182
01:46:00,860 --> 01:46:04,528
就是说这是一件非常枯燥的事情

2183
01:46:05,790 --> 01:46:09,738
就是一帮人就在一个编辑部里面编写一部大词典

2184
01:46:10,480 --> 01:46:12,253
而且按照原著的描述

2185
01:46:12,260 --> 01:46:15,541
这本词典从一开始立项到最后编程出版

2186
01:46:15,550 --> 01:46:16,290
花了15年

2187
01:46:18,720 --> 01:46:20,820
怎么就能一帮人就能做这件事情

2188
01:46:20,830 --> 01:46:22,076
能够做15年的

2189
01:46:22,080 --> 01:46:23,150
做这么夸张

2190
01:46:23,260 --> 01:46:24,530
然后这么累

2191
01:46:24,530 --> 01:46:27,752
这么没没趣味的事情

2192
01:46:28,230 --> 01:46:32,598
其实就我们在豆瓣上可以看到有一个很高赞的一个书评

2193
01:46:33,840 --> 01:46:38,376
就是一个编辑写他就是说作为编辑的枯燥

2194
01:46:38,880 --> 01:46:40,590
虔诚与荣耀

2195
01:46:40,880 --> 01:46:45,610
其实他就在读这本书读反正越是编辑干这一行的人

2196
01:46:45,970 --> 01:46:47,506
越是读这本书

2197
01:46:47,510 --> 01:46:49,270
很有有很多很多的感触

2198
01:46:50,500 --> 01:46:55,626
比如说为什么要校对校对

2199
01:46:55,630 --> 01:46:59,285
而且其实校对是要有一个担心出错率的

2200
01:46:59,290 --> 01:47:02,129
就是说你校对完了以后应该是减少错误

2201
01:47:02,590 --> 01:47:06,124
所以很多做编辑在出版社里面做校对的时候

2202
01:47:06,130 --> 01:47:08,240
不是说我看的这个东西有问题

2203
01:47:08,470 --> 01:47:09,860
还是我看的东西没问题

2204
01:47:10,160 --> 01:47:11,378
还需要查字典

2205
01:47:12,750 --> 01:47:16,383
查字典完了以后到底来判断这件事情是对还是错

2206
01:47:16,390 --> 01:47:18,491
因为无论是汉语还是日语

2207
01:47:18,500 --> 01:47:19,960
还是其他任何一门语言

2208
01:47:20,190 --> 01:47:22,914
其实都需要有很高的准确率

2209
01:47:23,050 --> 01:47:24,778
而到了词典的

2210
01:47:25,270 --> 01:47:28,299
词典是被其他的​‌​‌​​‌‌​​‌‌​​‌‌‌‌‌‌​​‌‌‌‌‌​​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌‌‌​‌​‌‌‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌‌‌​‌‌​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌​​‌‌‌‌‌​​​‌‌‌‌​‌​​‌‌​​‌‌​​‌‌​​‌‌‌‌​‌‌‌​‌​​‌‌‌‌‌​​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌‌​‌‌‌​‌‌‌‌‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​‌‌‌​​‌‌​​‌‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌​‌‌​​​‌‌​​​‌​​‌‌‌​​‌‌‌​‌‌‌‌​​​‌‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌‌‌‌‌​‌‌‌​‌​​‌‌‌‌​‌‌‌​‌‌​‌‌​​‌‌​‌​‌‌‌​‌​‌​‌‌‌​‌​‌​‌​​‌‌‌‌​‌​​‌‌‌‌​‌​​‌‌​​‌‌‌‌​‌​‌​‌‌‌​‌‌‌​‌‌‌​‌​‌‌​​​‌‌‌​‌‌‌‌​‌​​​‌​​‌‌​‌​‌‌‌​‌​​‌‌​​‌‌​‌‌‌‌‌​‌‌​‌‌​​‌‌​‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​‌‌‌‌​‌​​‌‌‌​​‌‌‌​‌​​‌‌​​‌‌‌​​‌​​‌‌‌‌​‌​​‌‌​‌​‌‌‌​‌‌​​‌​​‌‌​‌‌‌‌‌​‌​​‌‌‌‌​‌‌‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌​​​‌​​‌‌​​‌‌​​‌‌​‌‌‌​​‌‌​​‌‌‌‌​‌​‌‌‌​​‌‌​‌​‌‌‌​‌‌​‌‌‌‌​‌​‌‌‌​​‌‌​‌‌‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌‌‌​‌​​‌‌​‌​‌​​‌‌​​​‌​​‌‌‌‌‌​​​‌‌‌​‌‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌‌​‌‌​​‌​​‌‌​‌​‌‌‌​‌​‌‌‌​​‌‌​‌‌​​​‌‌‌‌​‌‌‌​‌​‌‌‌​​‌‌‌‌‌​​​‌‌​‌​‌​​‌‌‌‌​‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌‌‌​‌​‌‌‌‌‌​‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌‌‌‌​​‌‌‌‌‌‌​​‌‌​‌‌‌​​‌‌‌​‌‌‌‌​‌‌​‌‌‌‌​‌‌​​‌​​‌‌​​‌‌​​‌‌‌​​‌​​‌‌‌​​‌​​‌‌​‌​‌‌‌​‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌‌编辑用的东西

2211
01:47:29,400 --> 01:47:31,146
他要求更高的校对率

2212
01:47:31,560 --> 01:47:37,704
一般的杂志出版的校对通常就是不校对或者是校对一次

2213
01:47:38,220 --> 01:47:40,443
但是在书里面就写了

2214
01:47:40,450 --> 01:47:42,838
就是说词典的出版至少五校

2215
01:47:43,750 --> 01:47:44,510
就是第一觉

2216
01:47:44,510 --> 01:47:44,960
第二叫

2217
01:47:44,960 --> 01:47:45,410
第三叫

2218
01:47:45,410 --> 01:47:47,020
一直到午觉最后再出来

2219
01:47:47,830 --> 01:47:50,228
这是一件非常惊人的工作

2220
01:47:50,230 --> 01:47:55,678
而且他们那个词典15年编词典收录的词条是24万个

2221
01:47:55,690 --> 01:47:58,288
词条校对五遍

2222
01:47:59,160 --> 01:48:02,196
这个就非常的惊人的工作量

2223
01:48:02,460 --> 01:48:05,138
当然如果要做这么枯燥的事情

2224
01:48:05,140 --> 01:48:08,140
背后一定要有的是某种虔诚

2225
01:48:09,460 --> 01:48:11,370
就是我们在干这件事情

2226
01:48:11,370 --> 01:48:12,420
我们到底在为啥

2227
01:48:13,100 --> 01:48:17,717
我们在为了所有将来有可能查这个词条的人

2228
01:48:17,790 --> 01:48:20,949
我们要为他的准确性简洁明白

2229
01:48:21,350 --> 01:48:23,483
但是又要足够的全面

2230
01:48:23,810 --> 01:48:26,730
又要足够的清晰去负责

2231
01:48:27,440 --> 01:48:32,156
这个背后是一定要有很深的热爱才有可能

2232
01:48:33,800 --> 01:48:34,840
所以要虔诚

2233
01:48:35,190 --> 01:48:38,550
当然最后一旦这个东西做出来之后

2234
01:48:38,980 --> 01:48:40,160
一本书也好

2235
01:48:40,160 --> 01:48:41,210
一本杂志也好

2236
01:48:41,210 --> 01:48:42,230
一本词典也好

2237
01:48:42,230 --> 01:48:43,805
当它被印出来的时候

2238
01:48:44,090 --> 01:48:49,547
那种荣耀就是是支撑他们的职业的动力

2239
01:48:50,890 --> 01:48:53,410
这个是一个编辑在写的

2240
01:48:53,610 --> 01:48:56,385
当然这只是这个书的好看的一部分

2241
01:48:56,910 --> 01:48:59,318
其实这个书里面有非常多的金句

2242
01:49:00,080 --> 01:49:01,988
我有时候会引用一下

2243
01:49:01,990 --> 01:49:03,678
就比如说在讲这个

2244
01:49:03,880 --> 01:49:12,952
其实词典我们想象当中的跟一般的图书出版最大的区别就是词典它在收录的是磁条

2245
01:49:13,670 --> 01:49:16,010
词条一定是在不断的变化的

2246
01:49:16,550 --> 01:49:18,440
所以这个书里面有一段话这么写的

2247
01:49:18,450 --> 01:49:20,551
叫追求完美是人类的本性

2248
01:49:20,810 --> 01:49:24,140
但是词汇如同生物一样不断的变化

2249
01:49:24,470 --> 01:49:28,268
词典这种书籍永远不会有真正的完成状态

2250
01:49:29,790 --> 01:49:32,925
投入过多的感情只会让人难以割舍

2251
01:49:33,840 --> 01:49:35,009
这个就很有意思

2252
01:49:35,010 --> 01:49:37,124
就是做词典的人

2253
01:49:37,270 --> 01:49:39,613
他们其实有一种工作习惯

2254
01:49:39,620 --> 01:49:42,524
就是手上一直拿了一叠卡片

2255
01:49:43,490 --> 01:49:49,970
然后在日常生活当中不断的要做新词的收集和词汇的新的用法的收集

2256
01:49:49,990 --> 01:49:51,278
他们叫用力采集

2257
01:49:52,360 --> 01:49:53,855
就是听着听着别人说了一句话

2258
01:49:53,860 --> 01:49:54,810
他会说等等

2259
01:49:54,920 --> 01:49:56,576
我要把这句话记下来

2260
01:49:56,720 --> 01:49:57,819
把这个词记下来

2261
01:49:58,050 --> 01:49:59,409
你为什么要说这个词

2262
01:49:59,660 --> 01:50:01,155
你在这个地方为什么要这么用

2263
01:50:01,540 --> 01:50:02,596
然后就把它记下来

2264
01:50:03,460 --> 01:50:07,574
这是他们一直以来不管他们有没有在编某一部词典

2265
01:50:07,680 --> 01:50:09,929
还是在修订过去的某一部词典

2266
01:50:09,930 --> 01:50:11,180
这个工作永远都不会停

2267
01:50:11,820 --> 01:50:13,390
就像在那个编辑部里面

2268
01:50:13,620 --> 01:50:15,000
就是这个书里面讲到的

2269
01:50:15,000 --> 01:50:18,145
这个编辑部其实他们有一个很大的库房

2270
01:50:18,880 --> 01:50:22,078
这个库房里面有上百万的词条

2271
01:50:23,390 --> 01:50:26,230
每一个词条一张卡片就在那里排的满满当当的

2272
01:50:26,930 --> 01:50:30,638
然后他们要编一个24万字的词典的时候

2273
01:50:31,290 --> 01:50:33,886
要从里面采集很多很多的

2274
01:50:34,290 --> 01:50:35,496
有过去用过的

2275
01:50:35,770 --> 01:50:37,128
已经解释过的词

2276
01:50:37,440 --> 01:50:39,104
有一些新出现的词

2277
01:50:39,230 --> 01:50:40,520
等到下一次修订的时候

2278
01:50:40,520 --> 01:50:41,888
又要加哪些词进去

2279
01:50:41,890 --> 01:50:43,087
又要去掉哪些词

2280
01:50:43,470 --> 01:50:45,571
这是一个很有意思的过程

2281
01:50:46,780 --> 01:50:48,625
这是编词典这件事情

2282
01:50:49,120 --> 01:50:53,110
其实在这本书里面还有一个很有意思的东西

2283
01:50:53,119 --> 01:50:56,819
就是说像我们这个节目经常会做的一个小栏目

2284
01:50:56,827 --> 01:50:57,937
叫名词建委吧

2285
01:50:57,940 --> 01:51:00,527
因为我们也对此很感兴趣兴趣

2286
01:51:00,670 --> 01:51:04,615
但是我们其实对于词的较真和钻研

2287
01:51:04,620 --> 01:51:07,110
远远没有到里面的这些编辑的程度

2288
01:51:07,810 --> 01:51:11,320
比如说它里面就讲到了有一个面试

2289
01:51:11,330 --> 01:51:13,565
就是有一个新人要加入这个编辑部

2290
01:51:13,570 --> 01:51:14,940
他们想把这个人挖过来

2291
01:51:15,790 --> 01:51:16,510
怎么挖呢

2292
01:51:16,770 --> 01:51:17,490
上来就问

2293
01:51:17,660 --> 01:51:21,398
有一个词你解释一下什么叫做右

2294
01:51:21,540 --> 01:51:22,938
就是左右的右

2295
01:51:24,730 --> 01:51:31,516
然后那个面试被面试的那个人第一句就是你是问的是作为方向的右

2296
01:51:32,100 --> 01:51:35,866
还是思想上的又这已经不一样了

2297
01:51:35,870 --> 01:51:37,366
他首先区分两种釉

2298
01:51:37,870 --> 01:51:40,918
然后说是前者是方向上的有

2299
01:51:41,350 --> 01:51:42,166
他就让我想想

2300
01:51:43,180 --> 01:51:49,988
这个人说我说如果解释为握笔或者是拿筷子的那只手

2301
01:51:51,130 --> 01:51:53,033
那么其实就忽略了左撇子

2302
01:51:53,880 --> 01:51:58,680
但是也没也不能够解释成为没有心脏的那一侧

2303
01:51:59,560 --> 01:52:02,854
因为据说有人的心脏天生就是生在右边的

2304
01:52:05,510 --> 01:52:07,347
然后他说我们可以这么想

2305
01:52:07,350 --> 01:52:10,230
就是说面向北方的时候

2306
01:52:10,400 --> 01:52:14,786
东方所在的那一侧这个解释会比较妥当

2307
01:52:15,560 --> 01:52:20,422
但是后面这个就我还同因为同时在看小说和看电影

2308
01:52:21,130 --> 01:52:23,470
因为小说里面就这样讲完就结束了

2309
01:52:23,470 --> 01:52:28,033
但其实电影里面后面又在讲说这个词典还有一个很麻烦的地方

2310
01:52:28,050 --> 01:52:30,626
因为它有很多的词互相之间会参照的

2311
01:52:31,240 --> 01:52:34,283
一个读者他不仅仅是会读一个词的解释

2312
01:52:35,380 --> 01:52:36,200
现在问你

2313
01:52:38,980 --> 01:52:41,050
东方怎么定义

2314
01:52:42,280 --> 01:52:44,100
在那个词典里面是这么定义的

2315
01:52:44,290 --> 01:52:46,180
叫做面向北方的时候

2316
01:52:46,180 --> 01:52:48,300
你的右手所指的就是东方

2317
01:52:50,310 --> 01:52:52,208
然后有人就抓到这个bug了

2318
01:52:53,150 --> 01:52:55,490
就说你又拿东方来定义

2319
01:52:55,490 --> 01:52:57,686
又又用又来定义都对

2320
01:52:57,690 --> 01:52:58,320
这肯定不对

2321
01:52:58,420 --> 01:52:59,750
你你这你这不能这样搞

2322
01:53:00,030 --> 01:53:03,440
你必须要把它拆解开好

2323
01:53:03,940 --> 01:53:07,284
最后在电影里面其实解决了这个问题更巧妙

2324
01:53:08,990 --> 01:53:11,707
就是当你在写数字的时候

2325
01:53:11,940 --> 01:53:15,944
当你在写11 2 3 4 5 6 7 8 9 10的时候

2326
01:53:16,230 --> 01:53:17,856
一会写在左边

2327
01:53:17,860 --> 01:53:19,360
而零会写在右边

2328
01:53:21,870 --> 01:53:23,610
就他们是这样来定义左右的

2329
01:53:25,740 --> 01:53:28,836
反正就是我我不是说这是一个完美的定义

2330
01:53:28,930 --> 01:53:32,878
但是我们会去就突然沉浸到这样一种场景里面去

2331
01:53:32,880 --> 01:53:36,960
我们我们去去琢磨一个词究竟该如何去定义它

2332
01:53:38,070 --> 01:53:42,402
有有一些词是必须要首先你要防止循环定义

2333
01:53:42,650 --> 01:53:44,678
但是你在定义一个词的时候

2334
01:53:44,680 --> 01:53:47,077
你又不可避免的会用到一大堆其他的词

2335
01:53:48,010 --> 01:53:50,614
那么怎么才是更合理的又简洁的

2336
01:53:50,950 --> 01:53:53,186
但是又能够让所有人都会理解

2337
01:53:53,190 --> 01:53:57,564
而不产生歧义的理解一个词和定义一个词

2338
01:53:57,940 --> 01:53:58,940
这就很有趣

2339
01:53:59,430 --> 01:54:03,970
再比如说其实这个电影很就是我看的那个电影

2340
01:54:04,620 --> 01:54:07,112
很多人都会说它是一部恋爱电影

2341
01:54:07,690 --> 01:54:10,112
里面讲了很多很多的一段的爱情

2342
01:54:10,800 --> 01:54:13,230
然后它是用磁来串联的

2343
01:54:13,720 --> 01:54:16,645
就比如说要求你来定义什么叫恋爱

2344
01:54:17,940 --> 01:54:21,600
然后在电影里面和在书里面都有同样的一段话

2345
01:54:21,910 --> 01:54:26,590
就是叫做对于特定异性的深深爱慕

2346
01:54:26,600 --> 01:54:28,256
让人跌宕起伏

2347
01:54:28,260 --> 01:54:29,440
心情激昂

2348
01:54:29,820 --> 01:54:31,908
渴望与对方共享一切

2349
01:54:31,910 --> 01:54:33,998
却又常常难以如愿

2350
01:54:34,000 --> 01:54:36,904
那种无奈和期待交织在一起

2351
01:54:37,110 --> 01:54:39,530
构成了恋爱的复杂情感

2352
01:54:40,080 --> 01:54:42,240
这就是词典里面的一个定义

2353
01:54:43,090 --> 01:54:49,543
而小说和电影好玩的地方就是它会表现出来人与人之间的情感

2354
01:54:50,360 --> 01:54:52,640
男女之间的感情什么什么的

2355
01:54:52,980 --> 01:54:55,318
这种故事就会发生在这个企业中

2356
01:54:55,320 --> 01:54:57,766
跌宕起伏心情激荡等等等等

2357
01:54:58,160 --> 01:54:59,168
这就很有意思

2358
01:55:00,030 --> 01:55:03,750
但是更有意思的是书里面还在讨论

2359
01:55:04,970 --> 01:55:10,289
就是后面这个编辑部又来了一个更年轻的小姑娘新加入编辑部

2360
01:55:10,720 --> 01:55:14,560
然后他就对这个定义产生了一个疑问

2361
01:55:15,390 --> 01:55:20,197
说恋爱这个定义一定得是对特定异性打引号

2362
01:55:20,210 --> 01:55:22,026
异性的深深爱慕吗

2363
01:55:22,250 --> 01:55:23,426
一定得是异性吗

2364
01:55:24,360 --> 01:55:26,760
但如果是同性行不行呢

2365
01:55:28,340 --> 01:55:30,606
然后他们就有很大的讨论

2366
01:55:30,610 --> 01:55:31,768
非常多的讨论

2367
01:55:32,690 --> 01:55:37,218
最后改成为叫对特定对象的深深爱慕

2368
01:55:37,710 --> 01:55:40,674
但不特别说明什么什么异性

2369
01:55:40,920 --> 01:55:44,700
因为否则的话他对于同性的恋爱就不公平

2370
01:55:45,330 --> 01:55:46,716
其实就很有意思

2371
01:55:46,720 --> 01:55:49,600
就是说当我们在定义一个词的时候

2372
01:55:49,740 --> 01:55:52,589
其实有很深的对于时代的

2373
01:55:52,590 --> 01:55:55,208
对于观念的变化会在里面

2374
01:55:56,680 --> 01:56:01,145
他这个书里面会反映这些东西就很值得琢磨

2375
01:56:01,430 --> 01:56:03,744
就是有很多的这种词汇的变化

2376
01:56:03,750 --> 01:56:05,895
其实书里面还讨论了很多很多的词

2377
01:56:06,080 --> 01:56:08,370
有些词现在是这个用法

2378
01:56:08,370 --> 01:56:09,658
过去不是这样的用

2379
01:56:09,820 --> 01:56:12,316
或者有些词现在再也没有人这么用了

2380
01:56:12,620 --> 01:56:16,932
为什么会变成现在这个样这样子他对于时代的讨论

2381
01:56:17,130 --> 01:56:18,090
对于历史的

2382
01:56:18,090 --> 01:56:19,008
人文的

2383
01:56:19,220 --> 01:56:20,991
对于一些著名人物的讨论

2384
01:56:21,000 --> 01:56:24,818
其实这个书读起来就会有很多的这种值得琢磨的东西

2385
01:56:25,960 --> 01:56:29,650
而且整个书里面其实讲了三对爱情

2386
01:56:29,660 --> 01:56:32,476
不每一对爱情其实都有它好玩的地方

2387
01:56:32,820 --> 01:56:35,778
在这个故事当中会剖析这是一个什么人

2388
01:56:35,920 --> 01:56:37,168
对方是一个什么人

2389
01:56:37,410 --> 01:56:39,140
他们是怎么样互相吸引

2390
01:56:39,140 --> 01:56:40,436
互相接纳对方

2391
01:56:40,620 --> 01:56:43,404
最后觉得能够和对方在一起

2392
01:56:43,810 --> 01:56:47,021
最后确立了他们的恋爱关系或者是婚姻关系

2393
01:56:47,640 --> 01:56:49,356
就非常有意思

2394
01:56:50,080 --> 01:56:51,368
我这里就不再剧透

2395
01:56:51,450 --> 01:56:53,130
只谈其中的一对

2396
01:56:53,130 --> 01:56:55,470
叫做一个小姑娘名字叫岸边绿

2397
01:56:55,620 --> 01:56:57,087
另外一个男的叫宫本

2398
01:56:58,070 --> 01:56:59,465
他们是怎么恋爱的呢

2399
01:57:00,070 --> 01:57:02,670
其实就是一开始就是工作关系

2400
01:57:02,880 --> 01:57:05,955
就是那一本词典在印刷的过程当中

2401
01:57:06,120 --> 01:57:09,468
要非常的强调用特定的纸张

2402
01:57:09,870 --> 01:57:14,385
因为一本词典印就24万个词在里面的一本词典

2403
01:57:14,600 --> 01:57:16,310
那个词典就非常的厚

2404
01:57:16,310 --> 01:57:17,498
2700多页

2405
01:57:18,990 --> 01:57:21,690
如果这个纸张太厚太重的话

2406
01:57:21,690 --> 01:57:23,050
那个词典就根本没法拿

2407
01:57:23,050 --> 01:57:23,670
重的要死

2408
01:57:24,050 --> 01:57:27,272
所以他们就必须开发出一种特别薄的纸张

2409
01:57:27,590 --> 01:57:29,669
而且的话要特别的轻

2410
01:57:30,000 --> 01:57:31,548
又轻又薄的纸

2411
01:57:31,770 --> 01:57:34,590
它印上去之后还得不能透光

2412
01:57:34,870 --> 01:57:38,326
不能说正面和背面的字就互相能看见

2413
01:57:38,340 --> 01:57:39,100
那肯定不行

2414
01:57:39,810 --> 01:57:40,630
不能透光

2415
01:57:40,780 --> 01:57:43,252
而且那个纸张不能是纯白的

2416
01:57:43,260 --> 01:57:45,020
它要有一定的温暖的感觉

2417
01:57:45,030 --> 01:57:48,294
要有一种淡黄透着微红的温暖的感觉

2418
01:57:48,580 --> 01:57:52,847
这些造纸公司的宫本已经非常自豪的说

2419
01:57:52,860 --> 01:57:53,910
我们都已经开发出来了

2420
01:57:54,320 --> 01:57:55,544
然后到送到了编辑部

2421
01:57:55,550 --> 01:57:58,267
编辑部的那个就是就是马缔光

2422
01:57:58,270 --> 01:58:02,536
也就是那个男主人公手里一搓就觉得不对

2423
01:58:03,170 --> 01:58:05,096
它缺少了一种吸附感

2424
01:58:06,810 --> 01:58:10,365
当你去翻那个词典的一张纸的时候

2425
01:58:10,450 --> 01:58:13,778
他能够非常轻松的被你拿起来

2426
01:58:13,790 --> 01:58:15,758
而且不会一下子拿起很多页

2427
01:58:16,510 --> 01:58:18,265
但同时当你翻的时候

2428
01:58:18,390 --> 01:58:20,778
它又不会一直粘在你的手上

2429
01:58:21,220 --> 01:58:26,869
然后其中还有一个编辑对这个现象做了一个定义

2430
01:58:27,180 --> 01:58:30,180
说这就好像是一种什么样的好女人

2431
01:58:30,570 --> 01:58:33,202
跟你在一起的时候对你非常依恋

2432
01:58:33,600 --> 01:58:35,862
离开你的时候也绝不拖泥带水

2433
01:58:37,270 --> 01:58:40,377
用这样的说法来形容一种纸张

2434
01:58:41,790 --> 01:58:43,998
这个造纸公司的人就很困扰

2435
01:58:44,170 --> 01:58:45,276
就是说这个不行

2436
01:58:45,280 --> 01:58:47,576
我们还得回去继续研发新的纸张

2437
01:58:48,420 --> 01:58:53,280
这个岸边律和这个宫本两个人就为了这种纸张的事情反复探讨

2438
01:58:53,280 --> 01:58:54,000
反复切磋

2439
01:58:54,000 --> 01:58:55,270
最后两个人就成了一对

2440
01:58:56,470 --> 01:58:58,228
这个也是一种

2441
01:58:58,740 --> 01:58:59,930
一方面是匠人精

2442
01:59:00,350 --> 01:59:03,584
一方面也是一种很有意思的情节

2443
01:59:04,150 --> 01:59:06,346
所以从头到尾

2444
01:59:06,630 --> 01:59:10,240
我其实没有完整的介绍这本书的内容什么的

2445
01:59:10,240 --> 01:59:12,008
我只是在讲里面有意思的东西

2446
01:59:12,010 --> 01:59:13,970
所以非常推荐大家去读原著小说

2447
01:59:14,380 --> 01:59:16,300
但是电影也很值得一看

2448
01:59:16,300 --> 01:59:17,396
因为看完电影以后

2449
01:59:17,400 --> 01:59:19,002
会对里面的很多人物

2450
01:59:19,460 --> 01:59:23,320
对于他们的那种神态神情会产生很直观的感受

2451
01:59:23,930 --> 01:59:27,815
最后对还有一个其实我一直没说的

2452
01:59:27,820 --> 01:59:29,920
是他们编的这个词典的名字

2453
01:59:29,930 --> 01:59:31,888
这个词典的名字叫大渡海

2454
01:59:32,660 --> 01:59:34,150
为什么会叫这个名字呢

2455
01:59:34,150 --> 01:59:36,950
因为有一段话是词典里

2456
01:59:36,950 --> 01:59:37,990
就是这个书里面的

2457
01:59:37,990 --> 01:59:43,556
有一段话叫生命有限的人类在浩瀚深邃的语言之海上

2458
01:59:43,560 --> 01:59:45,864
齐心协力划桨前行

2459
01:59:46,150 --> 01:59:47,338
虽然忐忑不安

2460
01:59:47,340 --> 01:59:48,708
却也十分快乐

2461
01:59:48,890 --> 01:59:49,998
不想停下

2462
01:59:50,000 --> 01:59:52,120
为了更加迫近真理

2463
01:59:52,120 --> 01:59:55,901
希望希望一直乘着这艘船航行下去

2464
01:59:57,190 --> 02:00:00,310
这句话就仿佛是这本书的灵魂

2465
02:00:00,930 --> 02:00:03,595
让人在读完之后依然回味无穷

2466
02:00:04,330 --> 02:00:06,574
以上就是我对编舟记的推荐

2467
02:00:06,580 --> 02:00:09,235
也希望大家有空的话去翻一翻OK

2468
02:00:09,545 --> 02:00:13,169
好今天最后我来推荐一本书

2469
02:00:13,477 --> 02:00:18,309
我又来推荐跟推理小说有关的东西了

2470
02:00:18,317 --> 02:00:21,140
好啊这次是一本推理小说的

2471
02:00:21,410 --> 02:00:23,209
相当于学术作品

2472
02:00:23,620 --> 02:00:27,569
是评论类的是江户川乱歩

2473
02:00:28,310 --> 02:00:31,770
日本的早期的代表人物

2474
02:00:32,250 --> 02:00:35,693
他写的一本书叫诡计集成

2475
02:00:36,410 --> 02:00:39,154
副标题是江湖川乱步的推理笔记

2476
02:00:39,770 --> 02:00:43,076
我们知道日本推理小说的所谓古典黄金时代

2477
02:00:43,080 --> 02:00:46,956
上个世纪的三四十年代有所谓的两巨头

2478
02:00:47,190 --> 02:00:49,290
就是江湖川乱步和横沟正史

2479
02:00:50,100 --> 02:00:52,176
横沟正史相对比较单纯一些

2480
02:00:52,180 --> 02:00:58,004
他的作品主要就是围绕名侦探金田一耕柱的一系列本格推理作品

2481
02:00:58,450 --> 02:01:02,110
他很擅长去营造一个很魔幻的开局

2482
02:01:02,300 --> 02:01:06,472
然后再把它变成一个解谜的过程

2483
02:01:06,480 --> 02:01:08,720
是非常本格的一个风格

2484
02:01:10,060 --> 02:01:12,830
乱步就涉猎会更广一些

2485
02:01:13,260 --> 02:01:16,410
它的标志性的名侦探叫明治小五郎

2486
02:01:16,700 --> 02:01:18,270
这个系列是它的主系列

2487
02:01:18,620 --> 02:01:21,170
但他其实写了非常多跟鸣蜩螂没关系的

2488
02:01:21,170 --> 02:01:24,110
比如他有专门一个给儿童写的系列

2489
02:01:24,110 --> 02:01:25,670
叫少年侦探团系列

2490
02:01:26,180 --> 02:01:31,500
这个是模仿柯兰道尔当年写贝克街少年小队

2491
02:01:32,220 --> 02:01:36,268
帮福尔摩斯干活的那帮小孩从这个灵感里面出来的

2492
02:01:36,280 --> 02:01:38,080
专门写了一个系列给小孩看

2493
02:01:38,860 --> 02:01:41,996
说明乱步真的很关心推理小说的推广

2494
02:01:42,170 --> 02:01:43,210
从娃娃抓起

2495
02:01:43,580 --> 02:01:44,556
专门写了一个系列

2496
02:01:45,030 --> 02:01:48,852
另外还有他有一堆不成系列的各种探索性的作品

2497
02:01:49,260 --> 02:01:55,526
里面有一些甚至属于后来新本格很喜欢的一些变革派作品了

2498
02:01:56,460 --> 02:01:58,630
所以大家听刚才我说这几个词儿

2499
02:01:58,970 --> 02:02:09,149
这几个名字就可以发现著名的长寿的日漫名侦探柯南这个作者青山刚常侍乱步的铁杆粉丝

2500
02:02:10,060 --> 02:02:13,399
名侦探柯南里面有大量的致敬江湖川乱步的内容

2501
02:02:13,830 --> 02:02:15,876
像上面说的江湖川这个姓

2502
02:02:16,600 --> 02:02:17,776
小五郎这个名字

2503
02:02:17,870 --> 02:02:19,200
毛利小五郎对吧

2504
02:02:19,420 --> 02:02:23,410
还有少年侦探团原字不变的就移植到柯南里面了

2505
02:02:23,420 --> 02:02:25,630
都是制定的这个一部分

2506
02:02:26,900 --> 02:02:30,538
我们都知道柯南的那个主角江户川柯南

2507
02:02:30,540 --> 02:02:33,858
这个名字是工藤新一变小了之后

2508
02:02:34,420 --> 02:02:35,788
这个毛利兰就逼问他

2509
02:02:35,790 --> 02:02:36,850
你是谁啊

2510
02:02:36,940 --> 02:02:39,205
在这个时候临时想出来的一个名字

2511
02:02:39,570 --> 02:02:45,954
他是把江湖上乱部的信和柯南道尔的名字拼成了一个自己的名字

2512
02:02:46,800 --> 02:02:48,912
这个青山刚肠曾经解释过

2513
02:02:49,020 --> 02:02:54,060
他说这两个人分别是日语和英语的推理小说的代表人物

2514
02:02:54,400 --> 02:02:56,220
所以用了他们的名字拼在一起

2515
02:02:56,590 --> 02:02:59,230
但是可能很多朋友不一定知道的是

2516
02:02:59,230 --> 02:03:02,758
江湖说乱步这个名字也是类似的文字游戏

2517
02:03:03,500 --> 02:03:07,388
乱步这个人他本名其实是叫平井太郎

2518
02:03:08,120 --> 02:03:09,560
然后他想自己的笔名的时候

2519
02:03:10,120 --> 02:03:12,082
就用了另外一个作家

2520
02:03:12,780 --> 02:03:14,991
就是美国的神秘小说大师

2521
02:03:15,000 --> 02:03:16,379
叫埃德加艾伦坡

2522
02:03:16,550 --> 02:03:20,678
艾伦坡他的英文名字是ega Allen poll

2523
02:03:21,120 --> 02:03:23,320
那江湖川乱步的这个名字

2524
02:03:23,630 --> 02:03:26,374
如果你用日语的假名拼出来的话

2525
02:03:26,730 --> 02:03:29,722
就是叫a dog a lambo

2526
02:03:31,060 --> 02:03:34,924
这个名字跟艾伦坡的名字如果用假名拼出来的话

2527
02:03:34,930 --> 02:03:37,618
叫adiga alone

2528
02:03:38,290 --> 02:03:41,033
所以实际上拼写是完全一样的

2529
02:03:41,280 --> 02:03:44,890
只是他把艾伦坡那个三段的名字从中间劈开

2530
02:03:45,040 --> 02:03:45,988
劈成两段

2531
02:03:46,460 --> 02:03:48,755
前面一段叫ido ga后面叫lap

2532
02:03:49,280 --> 02:03:52,643
Idola a这个词正好是日本有一条河

2533
02:03:52,880 --> 02:03:54,168
就在东京附近的

2534
02:03:54,170 --> 02:03:54,958
叫江湖川

2535
02:03:55,620 --> 02:03:56,719
就是爱dog瓦

2536
02:03:57,480 --> 02:04:00,990
然后他找了另外两个汉字就是乱步

2537
02:04:01,140 --> 02:04:06,177
对应后面的那个lap实际上是跟艾伦坡一模一样的

2538
02:04:06,950 --> 02:04:08,490
乱步也非常喜欢艾伦坡

2539
02:04:08,640 --> 02:04:11,090
所以他经常有一种冲动

2540
02:04:11,090 --> 02:04:13,690
就是写那种神秘气息很浓厚的

2541
02:04:13,700 --> 02:04:17,775
因为我们知道艾伦坡其实不是一个纯粹的推理小说的作者

2542
02:04:18,010 --> 02:04:19,108
他是神秘主义

2543
02:04:19,110 --> 02:04:20,270
他是写神秘小说的

2544
02:04:20,530 --> 02:04:22,774
有很多都是那种氛围诡异

2545
02:04:22,780 --> 02:04:24,595
其实超自然的一些东西的

2546
02:04:25,110 --> 02:04:26,209
他其实非常喜欢

2547
02:04:26,210 --> 02:04:30,994
所以乱步自己也写过一些很风格多样的很奇怪的作品

2548
02:04:32,030 --> 02:04:35,260
除了这些风格多样的各种推理作品以外

2549
02:04:35,270 --> 02:04:37,896
乱步还是一个推理历史爱好者

2550
02:04:38,410 --> 02:04:40,789
他写了不少跟推理历史有关的

2551
02:04:40,790 --> 02:04:44,950
还有推理体系的归纳整理的偏文艺评论的作品

2552
02:04:45,780 --> 02:04:50,815
他自己我感触很深的就是他真的是博览群书

2553
02:04:51,560 --> 02:04:57,860
基本上对上个世纪50年代以前的世界各国的所有的推理

2554
02:04:57,870 --> 02:05:02,842
乃至于悬疑类的的神秘类的文学作品都非常的熟悉

2555
02:05:03,660 --> 02:05:05,520
我今天推荐这本书轨迹集成

2556
02:05:05,670 --> 02:05:14,009
就是他自己历年发表的很多文艺评论中间选出来跟轨迹有关的一个系列

2557
02:05:14,010 --> 02:05:14,760
他自己

2558
02:05:15,230 --> 02:05:17,038
摘出来的一本册子

2559
02:05:17,830 --> 02:05:18,510
这位老兄

2560
02:05:18,720 --> 02:05:22,580
我一直非常尊敬他就是他不仅自己的著述等身

2561
02:05:22,590 --> 02:05:26,789
而且非常关注日本推理小说的生态建设

2562
02:05:27,170 --> 02:05:28,770
前面说的专门给儿童写

2563
02:05:29,120 --> 02:05:32,084
然后他还创立了一个叫做日本推理作家协会

2564
02:05:32,400 --> 02:05:36,240
这个在今天都是非常重要的一个组织

2565
02:05:37,040 --> 02:05:38,176
他还设立了两个奖

2566
02:05:38,370 --> 02:05:39,756
一个叫江户川乱步奖

2567
02:05:39,760 --> 02:05:41,932
一个叫日本推理作家协会奖

2568
02:05:42,540 --> 02:05:45,390
这两个都是专门给推理小说新人的

2569
02:05:45,390 --> 02:05:49,548
就是提携这些写推理小说的一些新人作家

2570
02:05:49,960 --> 02:05:53,323
所以现在大家都认为它是日本推理小说之父

2571
02:05:53,440 --> 02:05:54,777
这个是实至名归

2572
02:05:55,230 --> 02:05:58,194
很多人的作品不一定比他差

2573
02:05:58,201 --> 02:06:00,471
但是论整个领域的建设

2574
02:06:00,697 --> 02:06:02,961
他是非常了不起的

2575
02:06:02,967 --> 02:06:04,325
OK说回这本书

2576
02:06:04,782 --> 02:06:07,960
这本书它其实有几个主要的看点

2577
02:06:08,290 --> 02:06:09,910
它分成上下两个部分

2578
02:06:10,400 --> 02:06:15,530
上半部分主要是分门别类的总结了本格推理的各种各样的轨迹

2579
02:06:16,360 --> 02:06:17,340
他做了一些分类

2580
02:06:17,450 --> 02:06:19,250
比如说有关罪犯的轨迹

2581
02:06:19,250 --> 02:06:20,475
这个里面有很多

2582
02:06:20,480 --> 02:06:22,244
比如说一人分饰两角

2583
02:06:22,470 --> 02:06:24,072
这是一个经典的轨迹

2584
02:06:24,230 --> 02:06:27,500
还有比如说犯罪现场和痕迹的轨迹

2585
02:06:27,500 --> 02:06:29,385
这里面最著名的当然就是密室

2586
02:06:30,140 --> 02:06:31,508
还有其他的比如脚印

2587
02:06:31,790 --> 02:06:32,200
指纹

2588
02:06:33,490 --> 02:06:37,090
其实关于这个鬼迹之王所谓的密室的轨迹

2589
02:06:37,210 --> 02:06:39,368
这个乱步其实没有太详细展开

2590
02:06:39,380 --> 02:06:41,129
可能他也觉得写的太多了

2591
02:06:41,530 --> 02:06:45,324
所以如果有兴趣研究密室轨迹的

2592
02:06:45,330 --> 02:06:46,996
反而我觉得可以参考另外一本书

2593
02:06:47,710 --> 02:06:52,821
就是有一位美国的推敲作家叫约翰丁森卡尔

2594
02:06:53,920 --> 02:06:57,088
这个作家他跟乱步活跃的年份其实差不多

2595
02:06:57,100 --> 02:06:58,729
都是上个世纪的中期

2596
02:06:59,500 --> 02:07:01,579
他对称为叫密室之王

2597
02:07:01,580 --> 02:07:04,929
因为这个人是专门热衷于写密室轨迹的

2598
02:07:05,740 --> 02:07:07,819
而且让他可以名垂青史的

2599
02:07:07,820 --> 02:07:11,506
就是他在其中的一部小说里面藏了一篇论文

2600
02:07:12,700 --> 02:07:15,836
这个就是著名的小说叫三口棺材

2601
02:07:16,120 --> 02:07:21,101
里面的第17章标题是戏论上锁的房间

2602
02:07:21,980 --> 02:07:25,564
这一章他就借这个主角侦探的口

2603
02:07:26,060 --> 02:07:28,700
相当于是写了一篇密室轨迹的论文

2604
02:07:29,380 --> 02:07:32,702
详细的分类法就是密室轨迹就可以分成这么一些类

2605
02:07:32,720 --> 02:07:34,196
不可能超出这些类型

2606
02:07:34,640 --> 02:07:36,305
然后这些类型里面会有哪些可能性

2607
02:07:36,310 --> 02:07:37,710
你只要分门别类去分析

2608
02:07:37,710 --> 02:07:38,557
排除掉不可能的

2609
02:07:38,560 --> 02:07:39,310
剩下就是对的

2610
02:07:40,980 --> 02:07:47,746
就是这篇论文基本上让后续的想写密室的作家都痛恨至极但其实这个有点夸张

2611
02:07:47,840 --> 02:07:51,778
因为作者你主要的工作其实不仅仅是写密室轨迹了

2612
02:07:52,440 --> 02:07:56,012
也没有哪个读者会按照这个论文去解你的谜

2613
02:07:56,020 --> 02:07:59,760
一般不会好说回这个乱步

2614
02:07:59,760 --> 02:08:01,515
那除了刚才说的密室

2615
02:08:01,520 --> 02:08:03,470
后面还有关于犯罪时间的轨迹

2616
02:08:04,100 --> 02:08:07,970
这个其实就是关于各种各样的不在场证明

2617
02:08:08,720 --> 02:08:14,982
包括比如日本人特别喜欢的什么列车时刻表轨迹这个类别其实非常常见

2618
02:08:15,270 --> 02:08:18,090
尤其日系很喜欢写这个不在场证明

2619
02:08:18,780 --> 02:08:21,211
但是这本书里就只列这个分类

2620
02:08:21,220 --> 02:08:22,018
没有写

2621
02:08:22,620 --> 02:08:27,070
因为乱步给了个原因说我找不到简单的描述这一类的方法

2622
02:08:27,480 --> 02:08:27,988
比较遗憾

2623
02:08:28,130 --> 02:08:29,246
这一类其实挺重要的

2624
02:08:30,120 --> 02:08:33,384
后面还有一些就是比如关于凶器的轨迹

2625
02:08:33,940 --> 02:08:35,326
比如消失的凶器

2626
02:08:35,490 --> 02:08:37,650
明明是被刀捅死的这刀就是找不到

2627
02:08:37,990 --> 02:08:38,767
不知道去哪儿了

2628
02:08:39,510 --> 02:08:43,063
还有另外一大类就是隐藏人和物的轨迹等等

2629
02:08:43,230 --> 02:08:48,819
整个上半部分其实就是可以看做各种轨迹的分类展示

2630
02:08:49,650 --> 02:08:51,820
有人可能会担心说这个全是透底

2631
02:08:51,830 --> 02:08:54,620
是不是看完这本书以后推小说都不用看了

2632
02:08:54,920 --> 02:08:56,350
其实我感觉没这个问题

2633
02:08:57,100 --> 02:09:00,859
首先是这么多轨迹密集的堆在一起给你讲了一遍

2634
02:09:01,220 --> 02:09:02,179
你看完也记不住

2635
02:09:03,720 --> 02:09:05,450
而且乱步自己也解释了

2636
02:09:05,450 --> 02:09:09,797
他说推理小说作家并不是写个精心设计的轨迹就完了

2637
02:09:10,260 --> 02:09:12,004
他真正的好的作品

2638
02:09:12,010 --> 02:09:14,206
这个作者要通过人物的塑造

2639
02:09:14,210 --> 02:09:18,392
剧情的铺陈来让这个轨迹合理并且升华

2640
02:09:18,550 --> 02:09:19,336
这才是好作品

2641
02:09:19,600 --> 02:09:21,796
所以其实至少我看推理小说

2642
02:09:21,800 --> 02:09:25,640
我不是很在意他的轨迹有多么精巧

2643
02:09:25,640 --> 02:09:26,972
当然我很喜欢本格派

2644
02:09:27,340 --> 02:09:28,861
我不喜欢那种太过于社会派的

2645
02:09:29,090 --> 02:09:31,904
但是其实关键还是刚才乱步说的

2646
02:09:31,910 --> 02:09:35,142
就是你整个人物的塑造和剧情的铺陈

2647
02:09:35,150 --> 02:09:37,620
是不是让整个设定非常的合理

2648
02:09:37,980 --> 02:09:39,564
并且能够最终升华

2649
02:09:39,850 --> 02:09:43,156
这方面典型的例子就是像东野圭吾的白夜行

2650
02:09:44,130 --> 02:09:46,066
白日行其实是非本格派的

2651
02:09:46,440 --> 02:09:47,766
它是偏社会的

2652
02:09:48,040 --> 02:09:50,289
它里面用到的轨迹都非常浅显

2653
02:09:50,820 --> 02:09:52,764
但是这本书的优秀之处在于

2654
02:09:52,770 --> 02:09:55,490
就是说东野圭吾通过两个人物的塑造

2655
02:09:55,780 --> 02:09:58,079
然后非常老练的叙事手法

2656
02:09:58,350 --> 02:09:59,838
那种埋伏笔的方法

2657
02:10:00,170 --> 02:10:02,855
让所有的这些看上去很浅显的轨迹

2658
02:10:02,860 --> 02:10:03,976
它融入了叙事

2659
02:10:04,220 --> 02:10:06,010
服务于这个叙事和人物

2660
02:10:06,410 --> 02:10:09,146
最终升华了整个作品的这种悲剧光环

2661
02:10:09,320 --> 02:10:10,384
这是我非常喜欢的

2662
02:10:10,590 --> 02:10:15,608
他应该是我最喜欢的东野圭吾的两部作品之一另一部是恶意

2663
02:10:17,220 --> 02:10:17,520
好

2664
02:10:17,880 --> 02:10:23,472
这本书的下半部分是乱步探索推理小说边界的一些尝试

2665
02:10:24,080 --> 02:10:27,040
记录了推销历史上各种最奇特的构思

2666
02:10:27,040 --> 02:10:29,245
就是很非常规的

2667
02:10:29,250 --> 02:10:30,670
比较怪异的

2668
02:10:30,670 --> 02:10:32,209
比较离谱的一些设定

2669
02:10:32,870 --> 02:10:34,278
其中有个别的例子

2670
02:10:34,280 --> 02:10:36,755
我觉得甚至已经模糊了本格和变革

2671
02:10:36,760 --> 02:10:39,854
就出现了一些非自然设定的主题

2672
02:10:39,860 --> 02:10:43,010
包括比如说罪犯的变身

2673
02:10:44,220 --> 02:10:45,270
他有一个例子

2674
02:10:45,490 --> 02:10:47,382
他自己写过一个人间椅子

2675
02:10:48,130 --> 02:10:48,830
我就不剧透

2676
02:10:48,830 --> 02:10:50,062
大家有兴趣可以去搜来看

2677
02:10:50,200 --> 02:10:51,960
真的非常离谱的一个设定

2678
02:10:53,420 --> 02:10:55,461
还有心理犯罪或者犯罪的心理

2679
02:10:56,150 --> 02:10:57,842
还有魔术和推理小说

2680
02:10:57,850 --> 02:10:59,470
它这个魔术不只是表演魔术

2681
02:10:59,870 --> 02:11:01,970
包括真正意义上的魔法

2682
02:11:02,270 --> 02:11:06,165
比如说古埃及的那些所谓的一些神奇的现象

2683
02:11:06,700 --> 02:11:08,220
把这些跟推荐结合起来

2684
02:11:09,380 --> 02:11:12,950
这部分反正我的感想就是他真的看了非常多的书

2685
02:11:13,390 --> 02:11:16,480
很多其实不算推理小说

2686
02:11:16,480 --> 02:11:17,397
但是他都有兴趣

2687
02:11:17,400 --> 02:11:21,306
他也写过一些很突破的一些东西

2688
02:11:22,000 --> 02:11:26,704
最后一个看点是附录里有一个叫做轨迹类别集成

2689
02:11:28,040 --> 02:11:31,055
他仔细的研究了八百多本推理小说

2690
02:11:31,370 --> 02:11:34,100
然后把里面的轨迹分类做了统计

2691
02:11:34,390 --> 02:11:35,608
分成若干个大类

2692
02:11:35,610 --> 02:11:36,915
每个大类有一些小类

2693
02:11:37,180 --> 02:11:39,208
然后每个类别里有多少部作品

2694
02:11:39,720 --> 02:11:41,359
就每个作品用到哪些轨迹

2695
02:11:41,360 --> 02:11:43,292
每个轨迹的类型有多少作品

2696
02:11:44,100 --> 02:11:48,388
我觉得这个可以当做一个点子的目录

2697
02:11:49,300 --> 02:11:51,049
有志于自己写推理小说的

2698
02:11:51,050 --> 02:11:52,085
我觉得是把它当素材

2699
02:11:53,030 --> 02:11:53,968
这本书简单的说

2700
02:11:54,390 --> 02:11:55,846
还是感想的多一些

2701
02:11:56,330 --> 02:11:58,850
并不是作为非常严肃的研究论文

2702
02:11:58,860 --> 02:12:03,254
不像我刚才说的那个约翰迪斯卡尔的那个密室论文那么严谨

2703
02:12:03,820 --> 02:12:09,760
所以看着也不会太累我觉得比较推荐给看了足够多的推理小说

2704
02:12:09,780 --> 02:12:13,724
希望能找找规律或者见识一下它的边界

2705
02:12:13,730 --> 02:12:19,130
有哪些我看过了都还没有触及到的很奇怪的构想的朋友

2706
02:12:19,136 --> 02:12:21,644
我觉得可以看一下这本书

2707
02:12:21,645 --> 02:12:21,873
OK

2708
02:12:21,874 --> 02:12:24,610
这个是我今天推荐的这个书

2709
02:12:25,240 --> 02:12:25,896
很有意思

2710
02:12:26,070 --> 02:12:27,970
看看啥时候可以看起来

2711
02:12:28,210 --> 02:12:29,309
我是很有兴趣的

2712
02:12:29,530 --> 02:12:31,910
我也对推理小说什么的看了不少

2713
02:12:32,380 --> 02:12:33,976
这个有可能可以找来看一下

2714
02:12:34,710 --> 02:12:35,256
这个时候很简单

2715
02:12:35,260 --> 02:12:38,679
就是你你微信读书有下了之后

2716
02:12:38,680 --> 02:12:40,108
你就没事看几篇

2717
02:12:40,110 --> 02:12:41,930
他完全不要求你连续看

2718
02:12:42,050 --> 02:12:43,088
随时点那些翻

2719
02:12:43,090 --> 02:12:43,860
然后扔下来

2720
02:12:43,860 --> 02:12:44,728
我就是这么看的

2721
02:12:45,020 --> 02:12:45,630
是无压力了

2722
02:12:46,280 --> 02:12:47,680
对好

2723
02:12:48,120 --> 02:12:51,242
今天我们的话题和建书就是这些

2724
02:12:51,960 --> 02:12:53,563
OK谢谢大家

2725
02:12:53,833 --> 02:12:54,901
谢谢大家

2726
02:12:54,904 --> 02:12:55,440
拜拜
