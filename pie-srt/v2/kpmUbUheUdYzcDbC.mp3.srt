1
00:00:00,000 --> 00:00:05,960
那过去的这一周显然这个最热门的事儿啊就是世界杯

2
00:00:05,960 --> 00:00:13,240
这个世界杯足球赛啊不论在什么样的行情下都横向对比是这个大热门啊

3
00:00:13,240 --> 00:00:17,160
他这个号召力和这个影响力就越来越大了

4
00:00:17,160 --> 00:00:21,960
那现在世界杯足球赛的发展状态就越来越丰厚了

5
00:00:21,960 --> 00:00:25,960
那现在世界杯足球赛的发展状态就越来越丰厚了

6
00:00:25,960 --> 00:00:35,400
这个大热门啊他这个号召力和这个影响力就就任何其他的人类活动行都没有跟他相提并论啊

7
00:00:35,400 --> 00:00:47,400
那这届世界杯啊这个当然我们不是聊体育聊足球的哈就我个人的一个感想啊就是想聊一聊这次世界杯的一些技术性变革

8
00:00:47,400 --> 00:00:53,520
我帮大家这个就这次看球赛有什么样的感想啊我作为一个这个老球迷啊这个每每届世界杯都看的

9
00:00:53,520 --> 00:01:03,320
这个这届游游很很新的感受后来我想了一下这个感受好像很大程度上是来源于一些新的技术手段

10
00:01:04,320 --> 00:01:06,400
比如说这个视频助理裁判

11
00:01:07,920 --> 00:01:14,760
我帮大家有个看到啊这个注意到了啊实际上这个视频助理裁判呢前几年就已经开始有了

12
00:01:16,040 --> 00:01:22,520
最早在比如说像英超啊然后面到这个欧洲杯啊什么都使用了这个视频助理裁判就微压

13
00:01:23,560 --> 00:01:33,480
嗯就是当出现一些这个裁判不太有把握的这个情况的时候那么这个主裁判就跑到场边去看一下这个高速录像回放

14
00:01:34,480 --> 00:01:42,200
我们知道这个足球场上啊这个场地很大啊然后人又多二级号上跑这个主裁判必须要

15
00:01:42,840 --> 00:01:48,920
这个离球足够近那球他到处乱飞的速度很快经常这个主裁判他跟不上

16
00:01:49,520 --> 00:01:56,600
可能就距离有点远或者是这个被人挡住了或者是那个角度正好看不清楚很正常

17
00:01:57,760 --> 00:02:03,160
以前历史上这个足球上出现各种各样的这个误判或者是这种

18
00:02:03,760 --> 00:02:14,760
呃悬案有几个经典的这个场景一个是门线球啊这个这个球打在门门上弹下来到底过了那个球门线没有啊这个历史上有很多著名冤案的

19
00:02:15,160 --> 00:02:21,400
然后另一个很著名的就是越位啊主要是越位规则这是这是足球里面最麻烦的一个规则

20
00:02:22,240 --> 00:02:25,680
专门配了两个编材这两个编材其实别的事干的都很少

21
00:02:26,240 --> 00:02:32,240
主要任务就是看越位他始终要跟着最后一名这个防守队员的这个平行线

22
00:02:32,880 --> 00:02:39,240
然后看这个对方传球的那一瞬间啊攻方队员有没有越过这个最后一名防守队员

23
00:02:40,240 --> 00:02:42,360
就算这样他也经常会看走眼

24
00:02:42,920 --> 00:02:50,800
嗯但至少安排俩人嘛那那专门看这个越位还有就是一些距离或者角度不太合适的犯规比如说手球

25
00:02:51,200 --> 00:02:54,360
啊进区里面手球了正好被挡住了这个从来看不清楚

26
00:02:54,800 --> 00:02:59,880
那以前也出现过这样的误判也不少其实那现在有这个威尔就可以去看一下

27
00:03:00,240 --> 00:03:06,720
但以前呢这个威尔呢他是辅助手段就是这个主裁判他需要的时候觉得我没看清楚我去瞅瞅

28
00:03:07,520 --> 00:03:13,200
除了这种情况以外那主裁判就以自己看到的为准他就吹了那个反应速度是比较快的

29
00:03:13,600 --> 00:03:24,120
但这件事也被大家有没有注意到哈经常发生的一个事情是这个攻方队员就冲过去啊这个过人射门进了然后再回头来吹一个越位

30
00:03:26,400 --> 00:03:31,840
这个在以前的比赛里非常少见就这个给我的一个观感是非常奇怪的

31
00:03:31,840 --> 00:03:39,080
其实我都已经情绪上去了球都进了或者领先了或者扳平了的都很很很激动的事情突然又吹掉了

32
00:03:39,840 --> 00:03:44,840
那这个是因为这一届的世界杯有一个新更新的一个尝试

33
00:03:45,440 --> 00:03:55,000
就是有主动安排了比以前更多的高速的摄影有点像年初冬奥会我们国家用的那个

34
00:03:55,480 --> 00:03:59,600
呃短到速滑那那种那种智能裁判

35
00:04:00,200 --> 00:04:07,400
那就是非常高速的设定然后多角度然后合成之后的三级图像那这一次做了一个什么比较激进的事呢就是

36
00:04:07,920 --> 00:04:15,560
当这个系统他判定认为是越位或者有犯规出现的时候他会主动提醒主裁判

37
00:04:16,680 --> 00:04:23,920
就总裁判戴着耳机啊他在场上跑他已经认为这球没越位冲过去进了啊甚至已经吹了激进球了

38
00:04:24,200 --> 00:04:27,680
然后这个耳机里面传来声音说这可能是个越位呵呵

39
00:04:29,080 --> 00:04:36,920
然后然后这主裁判他他就就得去场边看啊仔细的看看看几遍之后完蛋了这确实是越位那回头就把吹掉

40
00:04:38,160 --> 00:04:45,520
嗯这个是一个呃我觉得是新科技带来的一个观赛新体验啊以前我从来没有种感受

41
00:04:46,520 --> 00:04:54,400
也像前天呃前天周五的时候我我不确定那是不是视频裁判啊就是呃威尔士对伊朗的那一场

42
00:04:54,840 --> 00:05:00,360
嗯就是已经快到结束了大概还有结束前十分钟左右吧

43
00:05:00,960 --> 00:05:08,000
然后就是那个门将冲出来就是嗯一大脚就踢在了伊朗队的队员脸上对

44
00:05:08,720 --> 00:05:12,080
对然后其实一开始的时候主裁判只给了一张黄牌

45
00:05:12,080 --> 00:05:19,840
对但是那个时候视频就在反复播放然后下面还显示了一一串文字叫做帕斯波瑞德卡

46
00:05:20,360 --> 00:05:24,480
可能这就是红牌这就是的是的裁判做的事情是吧啊就这玩意儿

47
00:05:24,920 --> 00:05:31,360
哦可厉害了他已经不光是能判越位了对对他是整套系统都输入进去了

48
00:05:32,080 --> 00:05:37,280
啊我我估计是拿历史上很多很多的这个视频则要去去训练过的

49
00:05:38,280 --> 00:05:44,640
啊那个是的嗯嗯就是就是裁判一开始认为这只是一个一般性的犯规就吹了一个黄牌嘛

50
00:05:45,040 --> 00:05:52,560
然后这个视频这个这个未未来系统就就告诉裁判说哎这有可能更恶脸的回头看看这个看这个

51
00:05:53,760 --> 00:05:55,960
视频之后回过头来又改判一个红牌啊

52
00:05:57,080 --> 00:05:59,440
还有更戏剧性的就是之前这个

53
00:06:00,440 --> 00:06:10,040
嗯阿根廷对沙哈博内场上半场阿根廷三个进球被吹了越位其中有两个是比较明显的有一个啊那个是

54
00:06:10,920 --> 00:06:18,600
怎么说呢就是那个进进攻队员啊他就只有肩膀和外肘部的一层

55
00:06:19,240 --> 00:06:21,800
就是一小片皮肤越位了

56
00:06:23,320 --> 00:06:29,240
就这个三体图片上看特别明显他用那个加亮的颜色给你突突显出来就这个他已经过了这个切面

57
00:06:29,720 --> 00:06:37,840
啊就这一小层衣服啊过了这个切面啊那个球吹了越位这种球啊就我以前在大学的时候我也干过裁判

58
00:06:38,760 --> 00:06:45,240
这种球在场上最优秀的裁判组啊包括俩编材跟主材是绝对判不出来的

59
00:06:46,120 --> 00:06:48,600
他一眼看上去就是平行嘛

60
00:06:49,400 --> 00:06:51,640
而按照这个规则平行是不算越位的

61
00:06:52,160 --> 00:06:59,880
啊那那这就鼓励攻方的情况下也就这样就就进了那如果那个球算进的话二比零那后面不一定啥都能搬回来

62
00:07:00,480 --> 00:07:08,040
但那个球吹掉了那那后面就他的整场影响是很大的而那个球也是进了之后过了半天才有把它吹回来的

63
00:07:09,200 --> 00:07:12,720
所以怎么说呢就是这个实际上我觉得可能如果

64
00:07:13,640 --> 00:07:22,640
这届世界杯上的这一整套系统啊以后他呃继续就是成为常规的这个操作的话那可能对以后这个

65
00:07:23,440 --> 00:07:29,080
嗯足球比赛的这个影响啊会是挺大的

66
00:07:29,800 --> 00:07:34,760
就是我们看篮球比赛经常暂停对不对就是那个比赛他

67
00:07:35,440 --> 00:07:42,360
随时都可能暂停然后那个美式足球也是这样的他也美式足球是最早用这个视频裁判很久就来用的

68
00:07:42,720 --> 00:07:48,400
那就这些他都是那种高对抗很短的时间里面高速对抗但是他随时也可以停下来

69
00:07:48,760 --> 00:07:53,920
足球其实以前不是这个哲学足球以前是延续性连贯性是很看重的

70
00:07:54,320 --> 00:07:58,640
就一个优秀的裁判他尽量少去中断比赛是好裁判

71
00:07:59,320 --> 00:08:04,680
但这个引入威压之后他不得不会经常的中断而带来个副作用就是

72
00:08:04,680 --> 00:08:13,560
整体比赛时间会延长你们看前几日另一个很明显的变化就是每一次的那个就所谓商停补时阶段以前都是两三分钟

73
00:08:14,120 --> 00:08:15,920
现在动不动十分钟嗯

74
00:08:16,960 --> 00:08:22,400
越来越美式足球化就有这种感觉啊然后现在还可以这个换五个人

75
00:08:23,520 --> 00:08:27,440
嗯你想这个这个足球场上一共十一个人吗

76
00:08:27,880 --> 00:08:33,800
小人员一般很少主动会换他对吧除非是受伤了不得不下来那剩下十个人你可以换一半

77
00:08:34,200 --> 00:08:35,840
来这个战术上变化也很大

78
00:08:36,840 --> 00:08:43,560
所以可能这个影响还真的挺深远的啊对虽然我现在想一个问题了里军啊有没有可能

79
00:08:44,200 --> 00:08:48,320
未来这些足球运动员尤其是前锋都得戴耳机

80
00:08:49,840 --> 00:08:56,520
叫你跑你在跑你否则的话不越位每次足球就是的嘛啊已经开始戴了是吧

81
00:08:58,080 --> 00:08:58,560
好吧

82
00:08:59,480 --> 00:09:06,840
啊戴着那么大头盔啊然后里边里边装装上这个耳机啊大家可以通过耳机因为你喊的话就听不太清了嘛那场地很大

83
00:09:08,960 --> 00:09:16,040
你像我刚才说那个那个胳膊出去一层瓶的那个那个越位那就是零点零几秒的事

84
00:09:17,600 --> 00:09:24,960
那哥们玩启动零点零五秒可能就不越位了他早启动零点零五秒就正好越为了一层皮就这样

85
00:09:24,960 --> 00:09:30,840
哼那以前对人来说这这没有那么大的那个影响那现在这个变成是一个

86
00:09:31,800 --> 00:09:37,560
对吧好秒级的这个差异了以后就得人机配合打球了

87
00:09:38,680 --> 00:09:42,360
对的就是你裁判是ai对吧我这边也是ai

88
00:09:44,160 --> 00:09:54,520
这个传球的一瞬间马上有一个指令告诉那个如果真的有头盔的话不光是判就较越位了我甚至可以说通过ai指挥

89
00:09:54,960 --> 00:10:00,400
谁运动员跑位比教练人在场面讲的还要好突然觉得整个世界都会变

90
00:10:02,040 --> 00:10:02,760
有可能

91
00:10:04,800 --> 00:10:15,880
你像这个你像这个美式足球他是抱着球跑嘛他就没有这个带球过人的这个这个问题就所以他只要决定跑的时间速度和方向就可以了

92
00:10:16,520 --> 00:10:22,960
足球可能麻烦一点你这脚脚控球吧你你面对一个人的时候这个ai说过了他过不了怎么办

93
00:10:23,880 --> 00:10:32,200
不他只需要指挥跑位啊呃说说对说所以这里边就是战术的这个这个系统啊可能还会稍微复杂一点嗯

94
00:10:33,240 --> 00:10:41,480
所以新科技啊改变人生啊这个世界杯我我不知道这届之后啊这个第一规则会不会圆样的延续下去啊第二个就是

95
00:10:41,920 --> 00:10:50,840
会不会促使各国的这个尤其最优秀的那些足球国家啊他们的战术体系啊包括这个不然觉得中国队出现有望

96
00:10:53,800 --> 00:10:56,920
利用某种人工智能技术辅助教练

97
00:10:58,280 --> 00:11:03,400
哎这没准真是这样我最近我最近看了一篇文章啊就说这个因为

98
00:11:04,400 --> 00:11:09,400
这个美国人他对足球就那么回事了他不可能非常喜欢他的自己的那三大运动啊

99
00:11:10,000 --> 00:11:12,240
然后南美是喜欢但这个市场不够大

100
00:11:13,240 --> 00:11:18,840
非洲也这种情况喜欢但是这市场不够大欧洲呢已经充分开发了

101
00:11:19,440 --> 00:11:22,960
啊已经开发的不能再继续开发了而且接下来欧洲经济肯定走下坡路了

102
00:11:23,480 --> 00:11:29,400
所以对于国际足联来讲足球的热土这俩地方一个是中东啊一个是中国

103
00:11:30,840 --> 00:11:36,080
然后中东嘛这次在卡塔尔办了一届那其实在这之前王爷们就已经很喜欢了

104
00:11:36,600 --> 00:11:41,480
那中国咋办啊这死活也服不上去啊不得不采取一些技术手段

105
00:11:42,320 --> 00:11:49,320
让中国的科技上对有机会确保二六年中国能打进世界杯三零年能争取在世界杯营运场

106
00:11:50,320 --> 00:11:56,320
然后三零年以后争取让中国办一届世界杯就是国际足联应该定这么一个三步走啊

107
00:11:57,320 --> 00:12:00,320
行四步以待好足以好足以

108
00:12:02,320 --> 00:12:07,320
好那这个关于世界杯我们就这个简单的说到这儿啊这个

109
00:12:07,320 --> 00:12:12,520
这个嗯然后我们来讲一讲这个最近又有新的这个

110
00:12:13,240 --> 00:12:16,520
嗯互联网大厂的这个跟进裁员了啊最近的这个是谷歌

111
00:12:17,840 --> 00:12:22,320
我之前曾经提过一嘴我说谷歌可能相对好一点可能不一定那么的

112
00:12:23,280 --> 00:12:28,640
压力大但这一次呢也不行了这次主要是来源于他的这个投资人的这个压力

113
00:12:29,360 --> 00:12:37,040
啊就他的一个比较大的股东吧这个专门发一封公开信啊我们有有朋友发在我们那个啊挺有群里面了

114
00:12:37,320 --> 00:12:45,560
就是很严肃很这个严厉的说啊你们得赶紧控制成本啊削减这个不必要的这个呃员工啊

115
00:12:46,200 --> 00:12:54,480
嗯那那果然谷歌现在就准备开始裁了但谷歌全球的人非常多十几万人那他可能会裁一个

116
00:12:55,280 --> 00:12:59,880
不到一万人啊号称百分之六左右啊就是大概来一万人左右

117
00:13:00,400 --> 00:13:06,800
对他们来说呢这个可能还好但这里边也有一些热点啊据说他们上了一个

118
00:13:07,320 --> 00:13:12,640
新的绩效系统啊前两年就上了本来是说要提升效率的那现在变成这个

119
00:13:13,200 --> 00:13:17,960
嗯用来抓莫为淘汰了啊这个也是资本加厉一模啊这个

120
00:13:18,920 --> 00:13:24,160
这个事你们怎么看我的看法就是这风险投资人向来是这样的

121
00:13:24,800 --> 00:13:35,480
嗯就是我我不是以前就写过一篇文章吗就是说你你你要是创业当然是大公司不说就本来就只是说你创业你就不要听投资人的

122
00:13:35,960 --> 00:13:42,480
他们他们只是你的一个合作伙伴他们不是你的老师不是你的人参导师

123
00:13:42,960 --> 00:13:52,280
就是在在中国的很多投资人都把自己打扮成人参导师的样子似乎能给你指点未来一样的经常他们会做这种打扮

124
00:13:52,960 --> 00:13:59,200
这个是一个很常见的现象然后就是我我觉得他们是比所有人

125
00:13:59,960 --> 00:14:05,200
都贪婪等到风险来的时候又比所有人都恐惧是这样的一种心态

126
00:14:06,000 --> 00:14:14,040
就是投的时候非常的贪婪然后觉得让来了要跑的时候又比谁都恐惧所以才会有这样的事情发生

127
00:14:14,840 --> 00:14:24,440
对就其实行情比较好的时候催着你赶紧扩大啊扩充你的人员扩大你的业务赶紧抓市场不惜成本

128
00:14:25,040 --> 00:14:29,840
哪怕亏钱要抓市场这也是投资人会去不惜你做的一般的这个

129
00:14:30,280 --> 00:14:36,000
嗯创业者在他还没有被蛊惑之前一般的不会这么干是吧

130
00:14:36,600 --> 00:14:41,280
那当然尝到甜头之后跟投资人这个拿钱拿得舒服了之后

131
00:14:41,800 --> 00:14:48,080
可能就会经常被蛊惑了去做这样的激进的扩充嗯那行情不好了那

132
00:14:49,240 --> 00:14:52,920
最早开始让你砍人的也也是这拨人啊他的

133
00:14:53,520 --> 00:15:01,680
这股东们投资人们他不会自己动手去砍砍人的都是这个企业的管理层啊创始人啊这创始团队啊这样的一些

134
00:15:02,160 --> 00:15:05,840
我倒是对他的那个绩效挺感兴趣的

135
00:15:06,400 --> 00:15:13,440
因为像谷歌一直一直到号称是比较宽松和灵活的嘛甚至还有一些二八原则嘛

136
00:15:13,800 --> 00:15:19,400
老国远工可以用自己的一些时间去做一些创新的一些事情

137
00:15:19,960 --> 00:15:25,960
我就不知道他们最近这几年搞的这个系统他会重点关注些啥呀

138
00:15:27,160 --> 00:15:29,800
嗯最可以啥时候找狗书来聊聊

139
00:15:30,680 --> 00:15:38,040
嗯从他们的这个亲身体会上面来跟我们交流交流这事儿这我们外面人也说不清楚但我知道的是

140
00:15:38,520 --> 00:15:41,200
像什么八二原则现在谷歌自己也不太提了

141
00:15:42,000 --> 00:15:47,320
已经取消了我记得对他他据说是换了一种说法哈但实际上我觉得就是

142
00:15:47,880 --> 00:15:57,080
嗯实际上就是本质上不再鼓吹这个事儿了这个公司都是这样他就是呃相对规模没有那么大而且这个

143
00:15:57,720 --> 00:16:02,400
嗯业务发展的也在争争日上啊快速提升的这个阶段

144
00:16:03,040 --> 00:16:08,920
嗯然后对资本市场的依赖也没有那么重的时候他往往会做一些比较

145
00:16:09,720 --> 00:16:15,200
嗯偏理想一些但同时也能做出一些比较创新的一些东西的那个状态

146
00:16:15,880 --> 00:16:24,760
当他足够大他的核心业务比较稳定啊然后他的增长没有那么容易的时候那资本市场对他的渗透和影响就会越来越大

147
00:16:26,040 --> 00:16:31,920
啊然后他就会开始嗯嗯这出心就没那么重要了啊这个也很正常

148
00:16:32,640 --> 00:16:45,040
啊说到这个裁员的事儿啊顺顺便我们我们要要谈这个艾拉马斯克啊这个这一波裁员的始作俑者我最近在网上啊不论是这个推特就像英文的媒体还有

149
00:16:45,200 --> 00:16:54,360
这个国内的媒体都有很多骂这个艾拉马斯克啊比如说嗯说他这个不懂技术在推特下指挥啊

150
00:16:54,720 --> 00:17:02,800
还有说他这个不懂互联网企业的管理啊在推特下指挥就这样的一些评论你你你你们怎么看这个事情

151
00:17:03,720 --> 00:17:07,400
应该应该都还没有他懂吧就批评他的人

152
00:17:08,320 --> 00:17:13,380
啊的马斯克本身是技术出身吗对他写成技术出身的

153
00:17:14,060 --> 00:17:20,960
而且当初是创立一倍时他吧嗯不是陪跑陪跑啊陪跑照配票现在

154
00:17:21,960 --> 00:17:28,540
杨雅是这样的他是这个我们上次不是聊过这个上一波的这个互联网泡沫吗

155
00:17:28,540 --> 00:17:41,180
嗯他其实是那一波的参与者就是他是九零年代开始创业的上个世纪九零年代他创业的时候拿了一笔在当时算很多的一个风头啊

156
00:17:41,180 --> 00:17:58,260
我记得是上上千万美金的这个这个天使投资啊做什么呢做数字黄业就什么线上的这个城市指南啊这个黄叶啊电话本啊这样的东西这个在九零年代的互联网创业里面算很高端的东西了

157
00:17:58,540 --> 00:18:06,220
然后呢他比较牛逼的点在哪里呢他在上一波泡沫爆炸之前就成功的把这般人卖了

158
00:18:06,220 --> 00:18:16,300
然后卖了几千万美金呃非常非常的这个舒服就出来了出来之后拿这个钱来自己投资自己或者跟那几个人合伙就开始做这个配票了

159
00:18:16,300 --> 00:18:28,500
配票做了五年然后他也就从配票撤出来了啊然后就去做这个space X了所以他的经历呀怎么说呢就是首先他是第一代的互联网创业人

160
00:18:28,540 --> 00:18:58,500
自己干软件这个上来了所以他对于互联网的本质不论他的技术本质还是架构还是他的商业逻辑都是非常清楚的第二他因为是最早的一创业者而且他是所谓的叫做既成功又是反复创业者其实美国的风投的行业呀非常喜欢反复创业者而且即使你是多次创业多次失败的也有人会喜欢因为你有经验有经历啊

161
00:18:58,540 --> 00:19:28,500
而他是属于那里面最好的一类就是他反复创业每个都很成功呃所以导致一个结果就是他在湾区是很有影响力的就是湾区的呃这些不论是投资的头头脑脑们还是那些呃各代的创业者们其实跟他都很熟所以他对整个领域是很熟悉的这是第一啊第二呢就是他其实是从最早初创企业做上来的所以你说他如果说我看到一个很可笑的评价

162
00:19:28,540 --> 00:19:58,540
评论啊就是有有有些啊可能也比较年轻啊也也没有经历过这些事情他就说哎这个在推特这个搞的这些啊看上去很粗暴的这个这个做法是不是这个他在这个特斯拉啊这管工厂啊所以比较粗暴和这个互联网公司相对应该柔性一些啊其实也不是啊就是他肯定是几种模式都经历过就是那种很很弯曲的创业文化

163
00:19:58,540 --> 00:20:10,500
经历过然后的spaceX也好特斯拉也好他也做这个智能制造的这一块他也经历过然后又跑到中国来看了中国的这个大的制造业的这个这个底盘

164
00:20:10,500 --> 00:20:23,620
所以他肯定是有些想法的就是他他在考虑这些东西能不能融合起来所以简单的说不会管互联网公司肯定是有问题然后另一个很有趣的争议就是前段时间我看国外也有报道

165
00:20:23,620 --> 00:20:53,620
国内也很多人在吵的一个事儿就是恩爱莫斯科说了一个这个啊说推特这个首页啊这个一塌糊涂啊这个慢得要死为什么慢呢打开着首页有上千次的rpc啊这个随rpc就是叫恩远过程调用啊remote process call指的就是不同的进程之间的这个调用很多时候还是跨机器的调用而这个导致了这个性能的问题然后这个呢就有推特的据说是比较自身的机器

166
00:20:53,620 --> 00:21:23,620
技术人员就反驳啊也不叫反驳就是在嘲讽他说事实上推特主页上没有rpc啊这个推特使用的是graph ql啊graph ql实际上是一个一种接口协议了就类似于rest for使用这个杰森的这个格式那graph ql使用的另外的一套这个像应用协议就有人继效他说他不懂这个系这个新的技术这个你们怎么看这个我相信里面看到这个新闻啊看到了

167
00:21:23,620 --> 00:21:30,220
我觉得这么细节的东西你你真的拿这个东西来说他很很合理吗

168
00:21:30,220 --> 00:21:42,460
嗯比如说比如说我我比较懂开源我跟他说我说gpl和lgpl和agpl的三个区别你知不知道如果他说不知道我就可以嘲笑他吗

169
00:21:42,460 --> 00:22:12,460
有回字的四种写法啊对啊对啊假设回字有四种写法我就可以拿这个去嘲笑他们或者说再再细节一点比如说什么什么socket端口怎么怎么调优这种东西这么你当然可能是那个领域的专家但是拿这个东西来说nmask我总觉得有点不是一个层面的他点上对嗯这个实际上就是新一代的技术人员他其实对历史上已经被过上了

170
00:22:12,460 --> 00:22:42,460
当时的一些技术或者提法他们不是很关注啊所以他们认为他们掌握的是新的并且嗯正确的技术我记得以前有一次我们跟那个单位的有一期讲这个考古科研上的考古的嗯那一期我不知道大家有没有印象其实那期里面我们反复在讲的一个概念就是很多东西他夭折了或者说他没有流传到现在并不是因为他不好嗯而是因为

171
00:22:42,460 --> 00:23:12,460
他可能不合时宜或者有很偶然的因素另外一个技术就赢了这种在科技的历史里面屡见不鲜而且有的时候会螺旋式的就是当年那个被不看好东西后面突然又火了你像最近这个大火的ai这个 machine learning的技术以前就是人工神经网络嘛对的神经网络是吧这个嗯

172
00:23:12,460 --> 00:23:42,460
所谓的机器学习其实就是人工神经网络那换了个词然后重新包装然后由于这个算力和嗯基础数据模型的这个巨大的这个提升他一下子就起来了但是在五五十年代这个达特毛斯会议之后一直到八九十年代这个人工神经网络都是不被看好是吧还有像比如说像这个兰博达算子啊到后面这个函数式编程

173
00:23:42,460 --> 00:24:12,460
那有一段时间也是被这个面向对象干着打的根本没有出头之日但是在九零年代之后一些新兴的语言开始逐步的把函数编程的一些核心理念拿回来装到自己的语言里面让大家发现非常好啊在比如说原编程啊在动态编程啊在很多这些方面它是体现了很强的优势的所以现在几乎所有的新语言里面都一定是多范型的了这这这面向对象的概念这个函数的概念都有所以这种

174
00:24:12,460 --> 00:24:42,460
考古式的科研这种科研的在历史上的轮回循环是很正常的啊你像艾伦马斯他说有一千多个rpc的时候他用的这个rpc的这个词显然是概念上的是广义的rpc就只要你是跨机器跨进程的通信他都把它称之为rpc对吧他可能不熟悉你是用restore的还是用呃什么graph ql还是用什么其他东西他不care这个事情他关心的是你有大量的跨进程的通信

175
00:24:42,460 --> 00:25:12,460
对这种通信是耗时的它比一个应用在本地的处理一定是更加耗时的你在一个主页里面有大量的这种耗时的操作那么显然就是有优化空间的从他角度来就是这么一个简单逻辑逻辑一定成立那好了那呃现在的这个技术人员他就会觉得说哎你说的这个事情很老土啊不够时髦或者说不够的这个这个啊这个现代化

176
00:25:12,460 --> 00:25:42,460
而去这个质疑我觉得这是一种专家病了就是这个专业人士经常会有的一种问题就他没有办法跳开他的那个专业领域在更大的时间和空间维度上去看问题那这个其实就就是很多专业人员要在网上走一步的一个很大的障碍这是我个人的一个感受我倒觉得不不完全是专家病啊我觉得是程序员的一种通病

177
00:25:42,460 --> 00:25:47,140
尤其是年轻程序员的一种通病就是他不学历史的

178
00:25:49,140 --> 00:25:58,420
他就为最新的工艺对他不了解过去的他只管最近学的东西而且觉得最近的东西你看外面融入这么多

179
00:25:58,780 --> 00:26:07,420
新的一定比老的好对对甚至就是呃凡是能够用什么什么a abc重写的就用那个东西重写一遍

180
00:26:07,420 --> 00:26:16,220
而且瞧不起过去的所有的已经有过的实践那你们那东西老土而搞得又不行我还不如重写一遍

181
00:26:16,900 --> 00:26:25,940
勇于重写但是疏于总结这是一个通病还不光是说你说的是科技人员的同病我觉得是

182
00:26:26,660 --> 00:26:28,540
嗯确实

183
00:26:30,460 --> 00:26:36,900
而在有些领域里面特别突出比如前端嘿嘿我本来不想说前端其实我说的就是他们

184
00:26:37,620 --> 00:26:44,140
呵呵这个外面前端是这个领域真的就嗯就特别喜欢干这种事对反复重写

185
00:26:45,140 --> 00:26:55,580
我我最近我我不是最近在在玩一些这个我关心的一些东西然后我就自己搭一些环境然后写写一些这个呃原型啊

186
00:26:56,300 --> 00:27:03,380
嗯我写原型的时候有个习惯就是我每一次做这种事情我就想用一个以前没用过的这个前端的框架

187
00:27:04,100 --> 00:27:08,020
来体会一下到底前端的框架在往哪个方向进展吗

188
00:27:09,220 --> 00:27:11,820
然后我最近一查发现这个前端框架

189
00:27:12,940 --> 00:27:19,860
最近这几年真的是我原来以为就是这个瑞亚或者微微微解释这这选一选吧好了

190
00:27:20,300 --> 00:27:30,060
或者你就两个都不用你就用比较这个原始的哈配合什么更老一点什么借Q瑞之内你就就可以用了这种无非就是几种方案嘛就发现不是

191
00:27:30,060 --> 00:27:37,940
好多方案什么耐克斯什么扫尔里的JS还有什么这个有有一个我单词都不太会拼的什么威奥特什么之类的

192
00:27:39,180 --> 00:27:46,980
然后我要看他们到底差异在哪发现就是差异就有哦但是就那么点

193
00:27:48,180 --> 00:27:51,620
但是这些东西带来了一个影响就是它分散了大家的注意力

194
00:27:51,620 --> 00:27:55,500
比如说我看到有一个叫扫尔里的JS我觉得他有一些设计上的一些理念

195
00:27:55,820 --> 00:27:59,300
他其实有点像瑞亚他跟瑞亚是比较类似的

196
00:27:59,540 --> 00:28:07,860
但是他有一些自己的比较独特的理念我觉得挺有意思的我就试一试但是因为他分散了之后就导致这个问题用他的人就没那么多

197
00:28:09,020 --> 00:28:18,820
那有一些问题你要再搜一些资源或者是啊一些一些为他开发的库就相对没有那么丰富最后你可能觉得

198
00:28:19,140 --> 00:28:25,340
就相对没有那么丰富最后你可能觉得算了这点小小的创新我还是回去react玩那么多人都在用对吧

199
00:28:27,340 --> 00:28:28,300
就变成这么一种情况

200
00:28:30,460 --> 00:28:42,300
我我可以我可以补充一个证据也是最近我在我在做一个前端的编译我本来本来以为这个编译么要么就是嗯NPM对吧要么新出来个东西叫压

201
00:28:43,140 --> 00:29:00,660
嗯现在压也不新了压也算现在又出来一个新的叫批NPM啊对对对对对又又是一个新的东西啊开始学点新的好吧对到底好在哪不知道反正这个还有什么MPX对史达特又数有老多老多了真是嗯他们他们十大数总归是蛮多的

202
00:29:01,220 --> 00:29:04,900
所以现在这个选择困难症啊嗯在前端领域特别明显

203
00:29:05,820 --> 00:29:11,980
后端的呢因为做后端的人呢一般都比较老油条一点那个而且后端东西既会经常改

204
00:29:12,820 --> 00:29:21,460
后端东西比较希望他更stable一点更更稳定不要乱变所以大家一般来讲的都是渐进式改造啊这个能不能动不动

205
00:29:22,300 --> 00:29:25,500
但前端真的是这个超活跃啊超活跃

206
00:29:27,060 --> 00:29:32,340
好说到这个话题啊我们最后就准备聊我们今天主要的这个话题了哈

207
00:29:32,860 --> 00:29:37,140
就是关于软件工程啊这个是从哪里来的正好前段时间啊

208
00:29:37,940 --> 00:29:45,820
嗯软件工程领域的这个怎么讲经典名作啊人曰神话他的作者这个

209
00:29:46,060 --> 00:29:54,100
Fat Brooks啊就是叫弗雷德里克布鲁克斯啊这个是去世了啊九十多岁老爷子啊

210
00:29:55,100 --> 00:30:02,820
这位老爷子呢他是也不能说他是这个软件工程的奠基者但他确实是一个极大成者

211
00:30:03,260 --> 00:30:09,140
他主要的成果呢其实就是七十年代前后啊写了一系列的这个文章

212
00:30:09,700 --> 00:30:14,300
而这些文章最后会编成册就是这本人曰神话啊如果没有看过人曰神话的

213
00:30:14,620 --> 00:30:23,740
朋友如果你想在软件领域干点事的话强烈建议去看这本书非常容易读非常容易懂但是他很多概念呢至今也没有过时

214
00:30:24,780 --> 00:30:25,700
嗯

215
00:30:26,860 --> 00:30:32,380
老爷子本来也是计算机科学出身的啊九九年吧拿了拿过图顶奖

216
00:30:32,940 --> 00:30:36,420
但他主要的贡献呢反而不是在计算机科学而是在软件工程领域

217
00:30:36,940 --> 00:30:41,100
软件工程其实比软件比计算机科学的诞生的要晚不少啊

218
00:30:41,540 --> 00:30:45,780
计算机科学从数学建立了理论计算机就是那个

219
00:30:46,260 --> 00:30:49,780
想象中的理论计算机的模型然后实际把它造出来

220
00:30:49,780 --> 00:30:54,220
然后他开始开发软件最早拿来算炮弹然后面算原子弹

221
00:30:55,500 --> 00:31:03,500
然后等等等等啊然后直到五十年代的历史上第一次软件危机之后软件工程才真正的

222
00:31:04,100 --> 00:31:05,540
进入人们的视野

223
00:31:06,420 --> 00:31:16,260
实际上在第一次软件危机的时候这个软件工程也没有被作为主要的解药那个时候仍然认为说哎软件危机可能主要的问题是程序的结构问题

224
00:31:16,820 --> 00:31:20,420
所以软件危机之后就诞生了结构化编程

225
00:31:21,620 --> 00:31:27,340
啊后面随着这个软件的规模啊逐步提升这个规模包括

226
00:31:27,860 --> 00:31:30,820
系统的复杂度就是你要集成的模块的数量

227
00:31:31,220 --> 00:31:37,780
然后模块里面的这个代码行数以及开发软件的团队人员的规模

228
00:31:38,180 --> 00:31:42,740
都上升到一定程度之后人们才发现哎呀这个软件工程非常非常的重要

229
00:31:42,740 --> 00:31:45,380
啊甚至比编程语言本身还要重要

230
00:31:45,860 --> 00:31:53,860
那那个时候软件工程其实也一从二白啥都没有啊借鉴了很多传统的制造业啊建筑行业啊的一些概念

231
00:31:54,180 --> 00:32:02,260
所以当时有著名的那个比喻嘛就是你做软件啊不同规模的软件差异很大就好比什么呢你自己搭一个小狗窝

232
00:32:02,740 --> 00:32:09,140
跟你建一个摩天大楼啊这个所需要的工程方法是完全不一样的这个著名的一个比喻啊

233
00:32:09,140 --> 00:32:11,860
然后经过了这个八九十年代的

234
00:32:12,660 --> 00:32:18,820
呃大量的这个实践还有一些啊咨询公司的推动软件工程体系总算是建立起来了

235
00:32:19,460 --> 00:32:31,780
嗯那么所有的这些东西其实在fed books就是他这本人员神话里面其实都有涉及到因为他是当时作为ibm的这个自身顾问啊参与了非常多的重大的软件项目

236
00:32:32,180 --> 00:32:42,500
所以他有非常多深刻的体验这些体验帮助大家理解了软件工程跟传统的比如像建筑工程啊还有制造业里面的工程管理啊他是有一些差别的

237
00:32:43,220 --> 00:32:47,620
所以这个话题呢其实我们也牢牢就想聊啊因为我们都挺关注的

238
00:32:47,940 --> 00:32:58,580
所以这次借这个纪念啊我们这个brooks老爷子的这个趋势也来说说我们对于软件工程的一些理解那么两位这个王老师先说说

239
00:32:59,540 --> 00:33:08,660
哦对啊对无线从学校场景说一下我们的软件工程对其实现在在软件工程这一块呢我们其实困惑越来越多

240
00:33:08,660 --> 00:33:38,580
嗯其实我在读书那一回能约神话其实就是当时在我们学校里面其实也是呃非常的盛传对其实就是类似一本哪里啊你学计算机学软件工程一定要去看对但是呢我们那个时候其实对圣经对对那我那时候看的其实不太看懂啊对为什么呢对因为嗯那我相信像李老师其实比我们读书还要早

241
00:33:38,660 --> 00:34:08,660
我们那个时候随着软件工程的就还是非常偏书面的对什么意思呢就是我们的软件工程的课难道我我九零年代读书的时候我进交大的时候交大的计算机系才刚独立出来第二年不到第三年然后读书系的这个里面是没有软件工程这门课的ok ok好的理解了理解了我们有这个课了我们那个时候已经有软件工程课了大概是两千年了

242
00:34:08,660 --> 00:34:10,840
两千年左右吧

243
00:34:10,840 --> 00:34:40,840
那我们那个课呢几乎就是一个理论加卷面考试的一个课程对就是讲很多的一些概念还有一些方法论包括一些什么从瀑布模型到那个软件工程里面的那几个阶段你要去写一些需求写一些测试写那个集成还有最后的一些呃报告对那考试呢也是典型的我我记得最清楚的就是

244
00:34:40,840 --> 00:35:10,840
里面其实是有量化题的量化题算啥呢就算干特图里面的那个时间约束对这是我记得很清楚的否则的话他他更像是一个文科的一个课程呢对他很多都是一些选择问他问问答呀这些东西而且呢我们当时上软件工程里面实际上是没有上机和编码这样的一些内容对所以说呢这个真的是差别是非常非常大啊对但是呢即便是

245
00:35:10,840 --> 00:35:40,840
现在对那那那我先说完就是嗯后来以后呢就是读了研究生以后我们研究生里面也有软件工程那个时候名字换了那个时候呢叫高级软件工程哎但是呢高级软件高级到什么呢就是我们那个时候实际上是有要参与实际的软件项目的对那那个时候呢其实他的课呢反而不正正而罢解正而罢解去上了其实很多都是跟着项目里面

246
00:35:40,840 --> 00:36:10,840
继续做对因为我我那个时候那个读研究生其实是有非常多的一些老师所接的一些软件项目对那个时候正好借责这样一个软件工程课对其实老师也不太多讲对基本就是实际去做软件开发对那做的过程当中实际上你就开始对哎反而对我们在本科期间学的那些软件公司里面的一些概念已经开始有一些感觉了而且呢我们那个时候其实还开始

247
00:36:10,840 --> 00:36:40,840
流行有另外一个东西我相信大家都知道的就是嗯呦买我建模对那个时候呢还有一些半自动化的工具了对那个时候因为我们那时候觉得非常神奇对于我们我们写代码的都是希望自动生成代码嘛那个时候的像rational roads已经可以用呦买的一些图给你生成一些代码框架了对那即便是这样那我当时也是觉得哇这个这个太神奇了对然后就在幻想啊那我们

248
00:36:40,840 --> 00:37:10,840
以后软件工程就是画画图了对你图画完那那什么框架呀到你的测试呀甚至你的实现代码呀那那都写好了对我们那个时候其实就是这么去想对但是呢你会发现嗯实际参与软件工程里面对其实该写的还是写该熬夜的还是要熬夜对这个是没有办法对那等到我后面读完书对吧然后呢留在学校里面去教课的时候

249
00:37:10,840 --> 00:37:22,880
对你就会发现其实还是我感觉是挑战是非常大了为什么呢因为即即便是现在对其实今天这几天那个在上海这边其实也有那个

250
00:37:22,880 --> 00:37:40,800
四四f的软件大会对当然是线上的对里面其实也有大家分享怎么样去上软件工程课这样件事情然后呢我稍微去看一下对我感觉其实还是和我毕业那回的整个状况其实是差不太多的

251
00:37:40,840 --> 00:38:10,840
对是什么意思呢就是我感觉就是现在在学校里面去教软件工程这件事情的挑战越来越大对那即便是因为我们是数学学院嘛其实并没有软件工程课课但是呢是有这个需求对那其他的学院呢我也去看一下包括一些主流的一些教材对教材里面呢其实是把一些新的方法论加进来了但是呢实践上的问题一直是解决不了比如说他加了很多的一些

252
00:38:10,840 --> 00:38:40,840
敏捷对吧这也是我们前面流行的对那最新的可能就会加一些像什么戴布奥布斯啊这些东西但是呢你会去看这些教材的时候对我个人认为即便是国外的一些好的教材对它里面的一些项目的一些实践的部分我觉得还是偏少对那当然我们也也去关注国国内外的一些好的一些软件工程的课怎么上对那好一点的其实就会用一些呃项目特别是一些稍微大型一点的

253
00:38:40,840 --> 00:39:10,840
一些一些一些demo的一些软件然后呢给同学去作为他的一些实践对然后呢大作业我们可以去做这种软件工程项目的分组哎我们几个人一组然后呢一起去做这样一个软件然后呢去做期末的时候去通过作品的形式去打分对但是呢嗯虽然我我没有并没有嗯比较多的参与企业里面的一些软件开发活动对但是因为我们现在也是做一些看缘对

254
00:39:10,840 --> 00:39:40,840
包括在整个嗯嗯吉他上面的一些整个软件开发过程其实我们现在也是看到了越来越多这样的一些内容对那其实我是感觉现在在学校里面的这些软件工程的一些一些教学不仅是模式还是内容和工业界实际的这些软件工程里面的一些内容过程其实还是差距特别大的而且呢特别是我有个感触啊就是软件上了语音以后对它的复杂度和它的

255
00:39:40,840 --> 00:40:10,840
这种模式和开发迭代过程对又有一个新的一个一个一个变化那这些内容我发现几乎现在就没有反映到没有能够反映到目前在学校里面的课程里面还是我本科研究生里面的这些东西对当然我不知道是不是我的一些一些错觉或者是我并没有嗯能够很好的观察的到对但是呢我确实觉得而且呢现在学校里面的学生其实也有一个

256
00:40:10,840 --> 00:40:25,160
趋势是怎么趋势呢就是普遍对软件工程这件事情啊没有那么的感兴趣对了因为你都都变成一个这个被被输的课程了当然就不感兴趣了对吧对对的

257
00:40:25,920 --> 00:40:39,600
还有一个原因是什么呢加大家更加对一些所谓的一些新技术更加感兴趣什么意思啊就是刚才所提到一些前段一些语言呀再比如说就是一些ai或者是深度学习的一些一些新的框架呀

258
00:40:39,600 --> 00:40:51,080
哎普遍对这个东西感兴趣对这个就是我感觉就在学校里面现在还是有挺多的一些困惑的啊对那听听两位老师的一些一些看法

259
00:40:52,520 --> 00:41:08,680
嗯我觉得不光是学校困惑其实真正在企业界也困惑因为没有理没有理论软件工程的那些所谓的理论呃怎么说呢他都不实用

260
00:41:08,680 --> 00:41:34,160
或者说我我进华为对吧我在进华为之前已经工作了多少年工作了十六年就是九七年毕业嘛到一三年到了二零一三年进华为的时候是工作了十六年大大小小也在各种各样的公司干过但是进了华为以后给我最大的震撼就是规模就是一个项目两千人开发什么概念以前从来没想过

261
00:41:34,160 --> 00:41:52,160
然后因为两千个人会同时往一个代码仓库提交代码会发生什么事情没想过嗯然后因为这两千个人不可能向同一个仓库提交代码所以他们要如何分解分开来做事情该怎么分

262
00:41:53,160 --> 00:42:05,880
嗯然后该怎么样又合在一起然后整个的把以这些人全部规划到一起去做事情光是提一个敏捷而我们快速迭代根本不解决问题

263
00:42:07,720 --> 00:42:12,440
所以后面后面敏捷这个领域才提出来叫什么大规模敏捷

264
00:42:14,120 --> 00:42:18,600
其实也是为了适应超大型企业他的特大型项目

265
00:42:18,600 --> 00:42:25,440
然后又想要把敏敏捷这个词给守住了我怎么觉得这个大规模敏捷听上去就好像黑色的白一样

266
00:42:27,280 --> 00:42:34,200
对本来是一个很轻盈的对吧敏捷灵动的东西现在变得全公司协调一致大规模敏捷

267
00:42:34,200 --> 00:42:40,120
那还敏捷头啊对啊对啊呃这个其实有很多很有意思的事情

268
00:42:40,600 --> 00:42:49,760
这个呃我我其实想说的话挺多的先先说刚才对王老师的那个关于学校教学的一个评论其实整个的就是没有理论

269
00:42:50,400 --> 00:42:54,960
所以学校教不好是必然的因为学校没有拿到一个理论的东西

270
00:42:55,320 --> 00:43:03,720
当然学校也没有没有太多的去真的去研究这些嗯软件工程的理论的这样东西因为业界的这种声音太多了

271
00:43:04,200 --> 00:43:10,240
时不动不动就出来一个打引号的大牛就说啊我们应该这么干我们要结对编程啊结对编程好

272
00:43:10,760 --> 00:43:15,560
结对编程我看你啊嗯在软件工程这个领域啊没有理论的只有经验

273
00:43:16,280 --> 00:43:20,360
就是在自然科学这个领域领域称之为理论

274
00:43:20,880 --> 00:43:27,920
他必须是普世的在他约定的这个这个条件下可以在任何场景下实验重重现他的

275
00:43:28,320 --> 00:43:33,360
这才叫理论你现在没有但是软件领域不可能东西的只有经验嗯嗯

276
00:43:34,720 --> 00:43:42,320
所以所以你说拿这种经验的东西去教学其实我觉得如果学校里要做的话最合理的做法就是学图字

277
00:43:42,880 --> 00:43:49,640
就是试图教育可以多少师傅啊没没师傅你教不好的呀你只能够就让让他们去算算工作量什么

278
00:43:51,320 --> 00:43:52,480
就概念这种事情

279
00:43:53,040 --> 00:44:00,120
然后然后其实我可以值得觉得在软件工程这个领域还有很多其他的话题可以聊反正我先开话题咱们到时候

280
00:44:00,400 --> 00:44:05,480
再看王老师李俊两位补充第一个话题就还是从人月神话说起

281
00:44:06,400 --> 00:44:10,080
就是其实人月神话里面提到的一个核心观点

282
00:44:10,920 --> 00:44:21,000
是呃就是叫做博克斯法则嘛大概的意思就是说在一个已经落后的软件项目当中增加人手只会让他更加落后

283
00:44:22,000 --> 00:44:23,840
这个话其实非常经典而且

284
00:44:24,520 --> 00:44:30,360
所有的做软件开发的尤其是项目管理和工程人员都特别喜欢拿这个话去教训老板

285
00:44:31,320 --> 00:44:35,520
因为老板总觉得你都来不及了我给你再加点人你能不能快点给我做完

286
00:44:36,000 --> 00:44:36,800
然后这个

287
00:44:37,560 --> 00:44:44,520
就会项目管理尤其是项目经理就会拿着去跟老板说你听有没有听说过博克斯法则啊家人不能够加快的好吧

288
00:44:45,360 --> 00:44:52,440
这个是常用的一种逻辑哎我问一下你你实践当中有遇到过这样成功说服老板的吗

289
00:44:53,440 --> 00:45:04,200
呃我有另外的经验这个其实这个是在进华进盛大之前的有一家公司那个时候我还是刚刚新当项目经理

290
00:45:05,440 --> 00:45:08,080
然后那个时候我的老板cto

291
00:45:08,920 --> 00:45:17,280
对我们非常的这个他很有经验然后呢就让我估工作量我估估个两个月然后他就说啊你估两个月那就层二吧

292
00:45:18,000 --> 00:45:26,320
他会帮我层二呵呵呵嗯我我对这是非常有经验的这种就是他是干过的他知道我太乐观了

293
00:45:28,760 --> 00:45:34,320
但是反过来很少就是说老板要求加急的时候我们可能也只能够拼命

294
00:45:35,120 --> 00:45:41,120
嗯就熬夜拼命但是但是这个时候加新人手呢其实也很少听说可能华为有

295
00:45:41,120 --> 00:45:48,240
就是华为突然大干快上的时候说我给你调一千个人过来呵呵这个真的有真的有

296
00:45:48,760 --> 00:45:55,560
但但这个对绝对土豪就突然有一个公司级的战略级的项目啊那那家人也是很正常

297
00:45:56,160 --> 00:46:06,640
但是其实嗯在那个布鲁克斯的法则里面其实说得很清楚就是如果加了新人以后会增加三种代价第一个是你工作要重新切分的

298
00:46:07,640 --> 00:46:13,120
对你你本来是五个人干的现在变成十个人干你得把五个人的活分成另外分成十份

299
00:46:13,880 --> 00:46:17,040
这是第一类工作量第二工作量就是新人要训练

300
00:46:18,440 --> 00:46:27,160
你新进来他啥也不懂得不知道你原来干了啥他进来以后先摸索这一段时间新人训练第三个就是相互交流的成本

301
00:46:29,000 --> 00:46:35,280
就是就是你你十个人的交流成本和五个人的交流成本就不是成以二啊可能成以二十都不值

302
00:46:36,120 --> 00:46:44,720
对指数对对是一个指数上升的但是很有意思的是我可以给大家介绍的另外一本书就叫做大家同有其事

303
00:46:46,400 --> 00:46:56,600
就是那个艾瑞克瑞蒙的写的一本关于开源的书开源大佬对他在那个书里面是这么写的他就说布鲁克斯已经

304
00:46:57,160 --> 00:47:03,960
定律啊定律已经被广泛的思维整理了但是呢其实我们看过呃里内克斯的开发以后

305
00:47:04,760 --> 00:47:11,920
我们就发现就是说开源软件的开发过程和这个定律的这个实际情况是违背的

306
00:47:12,840 --> 00:47:21,960
或者或者说从实际上来看如果布鲁克斯定律土是于所有的软件开发项目的话那么里内克斯是不可能完成的

307
00:47:22,480 --> 00:47:27,400
因为里内克斯就是几千人全世界几千人在开发而且没有任何管理

308
00:47:27,400 --> 00:47:34,280
那么这个背后到底怎么回事在在这个艾瑞克瑞蒙的的解释里面就是说

309
00:47:35,080 --> 00:47:39,880
是的你你布洛克斯是对的就是你你只要加人就会增加沟通成本

310
00:47:40,280 --> 00:47:46,040
但是如果有一个大规模的开发群体再加上一个低成本的沟通机制

311
00:47:47,080 --> 00:47:48,920
其实人越多效率会越高

312
00:47:50,040 --> 00:47:52,120
这就是开源软件厉害的地方

313
00:47:52,120 --> 00:47:57,560
所以他才会写叫做大教堂开发模式和集市开发模式

314
00:48:00,280 --> 00:48:07,800
大教堂的开发模式你不能加人因为人家都已经整个工程队整个管理体系一个金字塔都放在那了

315
00:48:08,440 --> 00:48:17,960
然后你往里加人肯定很难但如果你本来就是一个大集市呢呼啦啦再进到一再进十个人进一百个人到这个集市里来也只会让这个集市更热闹

316
00:48:17,960 --> 00:48:23,640
这样开发丽妮克斯或者说开发其他的开源软件的效率就会上去

317
00:48:25,080 --> 00:48:26,840
这是一个很有意思的悖论

318
00:48:27,720 --> 00:48:34,840
李智王老师你们怎么看这个事情我觉得这不是悖论我觉得这是这个叶桑在混淆试听啊嗯

319
00:48:34,840 --> 00:48:43,880
就是并不是因为丽妮克斯开源所以他就具备这种能力嗯不是的嗯我觉得他举的这个问题很容易解释根本就不违反博尔茨定律嗯为什么呢

320
00:48:44,200 --> 00:48:48,280
我觉得两个很大的原因啊第一个原因是unix哲学嗯

321
00:48:49,080 --> 00:48:55,320
就是所有对软件系统有兴趣的朋友都应该去了解一下所谓的unix哲学

322
00:48:55,320 --> 00:49:07,080
有人专门总结过九条十条但我认为里面最重要的有几条啊比如说他强调每一个程序都要高内据低偶核就是你尽量只做你要做的事情并且把它做好

323
00:49:08,920 --> 00:49:11,960
就降低你跟周边的依赖但是你把你要做的事情做好

324
00:49:12,660 --> 00:49:17,240
而且很内据啊这是第一第二就是管道式接口就是每一个程序它可以读各种各样的输入然后把它的结果以标准化的方式输出这种输输出呢在unix里面叫管道

325
00:49:17,240 --> 00:49:20,800
就是你尽量只做你要做的事情并且把它做好

326
00:49:22,600 --> 00:49:24,560
就降低你跟周边的依赖

327
00:49:24,560 --> 00:49:26,160
但是你把你要做的事情做得很好

328
00:49:26,160 --> 00:49:27,520
而且很内据啊

329
00:49:27,520 --> 00:49:28,280
这是第一

330
00:49:28,280 --> 00:49:31,080
第二就是管道式接口

331
00:49:31,560 --> 00:49:34,760
就是每一个程序它可以读各种各样的输入

332
00:49:34,760 --> 00:49:38,240
然后把它的结果以标准化的方式输出

333
00:49:38,560 --> 00:49:41,080
这种输入输出呢在约尼斯里面叫管道

334
00:49:41,360 --> 00:49:45,000
那所用的管道文件读写文件的IO是管道

335
00:49:45,000 --> 00:49:48,320
这个network就是网络是管道

336
00:49:48,320 --> 00:49:50,880
然后另一个程序的输入输出也是管道

337
00:49:50,880 --> 00:49:53,080
这样就很容易可以把不同的工具串起来

338
00:49:53,680 --> 00:49:55,720
就云资学里面有很多很多这样的东西

339
00:49:55,720 --> 00:49:58,840
这都是在六十年代最早他们研发unix的时候

340
00:49:58,840 --> 00:50:01,760
就已经确立下了一些非常有先见之明

341
00:50:01,760 --> 00:50:04,120
而且非常优秀的软件架构风格

342
00:50:05,480 --> 00:50:09,240
因为有这样一些风格就使得各自独立开发软件

343
00:50:09,240 --> 00:50:12,120
并且把它们之间很漂亮地组合起来

344
00:50:12,440 --> 00:50:13,960
比如你如果用惯了windows

345
00:50:13,960 --> 00:50:17,120
你没办法理解在unix下面做那些事情的逻辑

346
00:50:17,520 --> 00:50:23,640
比如在unix下面它可以用发影的这个命令来搜索你想找的一些文件

347
00:50:24,360 --> 00:50:30,480
然后把它的结果交给grip这个命令来去在里在这个文件里面去搜索你要的自负串

348
00:50:31,200 --> 00:50:34,000
然后把结果输出到一个文件里面去

349
00:50:34,000 --> 00:50:37,760
这是几个不同的东西然后通过管道把它串起来

350
00:50:38,480 --> 00:50:41,640
那彼此这几个东西之间互相需要了解吗一点都不需要

351
00:50:41,640 --> 00:50:45,600
你比如说写发行的这个人就把搜文件这件事情做到极致就可以了

352
00:50:46,480 --> 00:50:52,080
而做grip的这个就是把大量的文本里面去查找一个子串这件事情做到极致就行了

353
00:50:53,400 --> 00:50:58,600
然后文件系统只需要解决文件io读写词盘的问题就行了

354
00:50:59,000 --> 00:51:03,800
所以它是一种非常朴素但是非常优秀的组件化的概念

355
00:51:04,440 --> 00:51:09,040
因为有unix这样的哲学所以在unix基础之上所产生的linux

356
00:51:09,600 --> 00:51:18,240
它的分层和它的构建化就先天的建立了一种架构风格这种风格有利于分布式的大规模协作

357
00:51:19,240 --> 00:51:24,560
这是我觉得第一个非常重要的原因它实际上恰恰是站在brooks的很重要的一个理论上

358
00:51:24,880 --> 00:51:32,400
不想没有银蛋他说软件的核心困难在哪里其实是理解需求和做好架构设计

359
00:51:33,400 --> 00:51:37,320
而恰恰这件事情呢在linux的这个核心团队它已经做好了

360
00:51:37,720 --> 00:51:45,080
然后通过之前unix几十年的耕耘这批人他脑子里面已经印入了unix哲学所以它可以做到这件事情

361
00:51:46,000 --> 00:51:56,120
第二个很多很多的复杂的辛苦的脏活累活谁在干呢是linux的那个包馆里的那部分人他们在做这事

362
00:51:56,120 --> 00:52:05,840
这个工作量是非常大的你像那个达比就是金优的那个丽妮丝的那个发布包嗯啊包括什么五帮头啊都是在他技术车上做的吗

363
00:52:06,360 --> 00:52:11,760
那他们的社区的参与人员是非常多的就是维护那些包的

364
00:52:12,440 --> 00:52:18,720
然后他还有在这个人人里面才有一个几百人的团队做这个包之间的依赖关系啊还有这东西的管理

365
00:52:19,240 --> 00:52:24,520
这帮人的工作是挺辛苦的就我经常看到那个约定列表里面有人吐槽有人发牢槽

366
00:52:24,520 --> 00:52:33,240
说什么什么这个搞的什么鬼啊害得我们几十个包都要重构啊等等等等就是这部分工作其实仍然逃不掉的

367
00:52:34,560 --> 00:52:43,480
就是他并不是说这个大家就各干各的就没事了不是的就是有一批人在专门做dissole的这批人在很辛苦的去做那个捏合起来的事情嗯

368
00:52:43,480 --> 00:52:49,480
哼哼所以就是软件开发的核心困难至今为止仍然没有太大的解决

369
00:52:50,480 --> 00:53:01,680
他解决他的方案仍然是要有非常良好的设计思想和非常良好的架构这个就是我我我对这个所谓极致开发模式他他这个当然他里面也有一东西是有价值的

370
00:53:02,480 --> 00:53:10,480
你比如说开人软件里面比如像git本身就提供了一些呃大规模协作开发里面很便利的工具

371
00:53:10,480 --> 00:53:18,480
但这些东西也是要有人正确的去使用他的比如git同时提供了rebase和用不好的人太多了

372
00:53:19,480 --> 00:53:37,480
rebase用不好的人简直就是一个团队里面的炸弹对不对对他一炸就能把你整个这个对report都炸掉这种非常有破坏性的好他但是完全可能你完全不用rebase所有的这些事情都用分岔都用bronx来解决嗯

373
00:53:37,480 --> 00:53:53,480
你可以一点都不用rebase你发现你之前的某个不行了你就分岔了然后后面再去默计嘛这是两种不同的这个风格但这种风格各有利弊了就是如果你不掌握他的方法你掌握的不正确的话你都可以把他整死嗯

374
00:53:54,480 --> 00:54:06,480
比如说git跟以前svn相比有一个非常大的前进一个进步啊就是他把bronx的那个成本啊降到非常非常低了对以前svn领的成本非常非常低了

375
00:54:07,480 --> 00:54:13,480
然后里面你bronx一下相当于整个report要克隆啊就你的那个磁盘的占用量就要double啊

376
00:54:14,480 --> 00:54:16,480
然后你默计一次就是大量的磁盘读写操作啊

377
00:54:17,480 --> 00:54:25,480
但是在git里面通过一个很巧妙的这个存储结构的设计这些事情都被解决了bronx非常轻量级默计非常快速

378
00:54:26,480 --> 00:54:30,480
但是贴工具很方便很好用但不会用的话仍然可以干坏事

379
00:54:31,480 --> 00:54:38,480
所以所以最终我觉得可能是这个而克瑞蒙他周围的人素质都还是比较好的

380
00:54:39,480 --> 00:54:45,480
就好像那批搞敏捷开发的人他们会觉得敏捷开发是唯一正确的这个软件工程方法

381
00:54:46,480 --> 00:54:54,480
但是实际上我认为这个世界上现存的百分之七八十的软件工程师是没有能力去真正实践敏捷开发的

382
00:54:54,480 --> 00:54:56,480
嗯他受能力限制的

383
00:54:57,480 --> 00:55:06,480
我我说一下我对我即使开发模式我觉得挺好但他对人确实有要求的而且有些工作仍然逃不掉这是我的结论啊好

384
00:55:06,480 --> 00:55:20,480
我说下我对即使开发模式的看法其实那个而克瑞蒙的在讲丽尼克斯的所有好处讲开源软件开发的所有好处的时候他漏掉了一个重点

385
00:55:21,480 --> 00:55:35,480
这个重点是跟企业软件开发最大的区别企业软件开发老板不可能容忍说啊我这个项目绝大多数的工作是一个程序员做的

386
00:55:36,480 --> 00:55:41,480
然后呢剩下的人呢只是做百分之五甚至百分之一的工作

387
00:55:43,480 --> 00:55:48,480
嗯他他既然花了钱把这些人请到公司里来这些人他都得用足的

388
00:55:48,480 --> 00:55:59,480
嗯但是开源软件之所以还能那么呃轻松愉快的把它做出来有一个很重要的原因是因为其实大家都不着急

389
00:56:00,480 --> 00:56:10,480
而且但很多人就是说我不负责这些东西我只管把代码提交上去有人有人没解有人有人这个去帮我扣的review

390
00:56:10,480 --> 00:56:22,480
就结束了而且的话呢工作量就百分之八十的工作可能只百分之二十甚至还不仅仅不是二八原则甚甚至是一个更极端的原则

391
00:56:23,480 --> 00:56:36,480
一个比例把所有的活给干了看上去是一个几千人的大团队但是这几千人当中真正每天都提交代码的人可能也就几十个

392
00:56:36,480 --> 00:56:47,480
对但是对于一家公司来说我我养个两千人的团队这两千人当中有有有一千五百个人甚至有一千五百八十个人

393
00:56:48,480 --> 00:56:55,480
每天都只只提交一行代码甚至不提交代码怎么可能老板怎么可能给他们发工资

394
00:56:55,480 --> 00:57:06,480
对这个这个恰恰是企业开发模式和极致开发模式最大的区别老板不可能养闲人

395
00:57:07,480 --> 00:57:27,480
嗯而且还有一个我觉得也挺重要的就是开园软件啊大部分都是每一个成功的开园软件背后都有一个灵魂人物这个灵魂人物是真的爱这个软件或者他真的有有强烈的责任感要把它维护好

396
00:57:27,480 --> 00:57:43,480
就是它是底线啊支撑啊嗯那么其他的这个协作反而就更容易做了因为反正有人保底了嘛那么那些就是紧张天花就是永远它是正向的它它不会对这个有太大的这个负面危害

397
00:57:44,480 --> 00:57:54,480
企业软件开发确实而且时间要求上也高高太多了就是开园软件里面动不动一个bug如果不是特别critical的话放置几年很正常的

398
00:57:57,480 --> 00:58:07,480
就是一个比较少的场景碰到的那是几年都不动我我我前一时看因为我我在我我我用的那个emacs上面有一个包

399
00:58:08,480 --> 00:58:14,480
也是很古老的包了大概有十五年以上的一个bug被我碰到了

400
00:58:15,480 --> 00:58:22,480
然后我就去盯着那个维护者发医术催了他好多次然后修了十五年了

401
00:58:22,480 --> 00:58:31,480
他肯定很郁闷为啥你不把你不把它修掉还要盯着他来修没有我跟他说我如果可以的话我我也可以发一个PR给他

402
00:58:32,480 --> 00:58:40,480
但是我说肯定他来修会更快一些嗯嗯这后面他就修了嘛就本身不大那个问题这不是特别麻烦的一个问题

403
00:58:41,480 --> 00:58:45,480
我接着讨论下一个话题这个其实也是老话题因为刚才其实我们

404
00:58:45,480 --> 00:58:51,480
其实我们不自觉地就会就会绕不开的就会提到他就是关于敏捷的问题

405
00:58:52,480 --> 00:58:59,480
在在我们呃做程序员的这么多年来其实一直以来是生活在这样一个场域里面的

406
00:58:59,480 --> 00:59:06,480
甚至到现在为止都还是如此就是敏捷就是好就是好然后cmm就是坏就是坏

407
00:59:07,480 --> 00:59:15,480
嗯谁没有代表了瀑布式啊对就是就是其实先没不等于瀑布式啊这个其实是一个很大的误解

408
00:59:16,480 --> 00:59:25,480
对而且先没就等于啊这个沉重的流程就等于官僚体系就等于这个浪费时间

409
00:59:25,480 --> 00:59:31,480
就等于愚蠢甚至等于愚蠢了这是一个很有意思的一个

410
00:59:31,480 --> 00:59:39,880
嗯什么说呢这个这个这个行业已经被敏捷的一堆朋友一堆一我跟他们都很熟嘛

411
00:59:39,880 --> 00:59:49,240
就他们做敏捷有就肯早成的对对他们就会传递这样的信念而在我看来就是其实我后来

412
00:59:49,240 --> 00:59:57,880
真而八经的去了解了一下CMM我觉得人家讲的挺好的他的那个所谓的能力成熟度模型啊

413
00:59:57,880 --> 01:00:08,560
他他其实在讲的是一个组织一个研发团队是怎么进化的从一开始的时候你要你要把你的这个工作给规范起来

414
01:00:08,560 --> 01:00:21,280
你要变得严格的能够去执行正确的过程然后呢这个过程有标准可定义最后还要能够持续改善具体的每一集我不说啊

415
01:00:21,600 --> 01:00:51,240
他他是一个我我觉得是一个很好的一个实践模型嗯不管你做任何的工作甚至不是说软件开发你只要是有一堆的第一步第二步和第三步这样的定义有一个过程的其实就一定会存在一个叫做过程的成熟度而且一定会回过头来你要去看我怎么样持续的改善这个过程所以所以我其实很好奇这个CMM是如何

416
01:00:51,240 --> 01:01:21,200
被黑化的我跟你说啊嗯我可能是国内最早参与这个的人之一了我我当年创我们那个创业公司是零几年零零四八零五年因为那个时候我们做政府的项目比较多啊嗯然后政府招标那个时候开始刚刚开始实行把三个作为附加条件之一放进去嗯所以我们当时是广州市最早一批拿到CMM三级

417
01:01:21,240 --> 01:01:51,240
认证的那时候还没有CMI啊是以CMM为主啊就是三级四级就很高很高了当时国内有四级的就那么几家东软啊什么之类的嗯所以我们当时拿三级挺早的好我的理解我分两部分来来回答刚才老庄说这种问题第一个就是三到底是什么三其实跟具体流程没关系的它可以兼容不同的流程三更多的是对组织的能力提出的一个要求

418
01:01:51,240 --> 01:01:53,400
比如说他要求你一定要建立一个委员会

419
01:01:53,400 --> 01:01:56,600
这个委员会专门关注组织内的流程改进

420
01:01:56,600 --> 01:02:01,400
至于这个流程应该怎么做改进成啥样这不是他关注的领域

421
01:02:01,400 --> 01:02:06,040
当然他有一些参考模型了但是他不会说你一定要走这个流程才是正确的

422
01:02:06,040 --> 01:02:10,600
他强调的是你要从哪几个指标上去分析你的流程好还是不好

423
01:02:10,600 --> 01:02:14,200
啊然后这些指标如果不好的话你要持续改进

424
01:02:14,200 --> 01:02:19,000
当你要改进的时候你这个委员会跟生产部门应该如何协调

425
01:02:19,000 --> 01:02:23,720
所以他会要求你必须是你的你的组织里面必须得有一个人

426
01:02:23,720 --> 01:02:28,840
这个人相当于我们经常说的叫做工程副总就是Engineering VP

427
01:02:29,720 --> 01:02:34,360
他得是公司的高管层级然后他是负责所有跟工程有关的管理的

428
01:02:34,360 --> 01:02:38,120
很多公司里不够大的公司这个可能跟技术的副总是一个人了

429
01:02:38,120 --> 01:02:42,840
但大点的公司可能cto跟这个工程的副总就会分开但不管怎么样得有这么一个人

430
01:02:42,840 --> 01:02:47,560
他跟技术的那个老大得是评级的然后由这个人来做

431
01:02:47,560 --> 01:02:50,440
他一定要是工程改进委员会里面的重要角色

432
01:02:51,000 --> 01:02:56,840
理想情况下最好ceo来做这个工过程改进的老大如果实在不行的话至少得有一个有公信力的人

433
01:02:56,840 --> 01:03:05,800
他规定是这样的一些东西就他是要关注的是你的过程长期处于有问题的情况下没人关注或者有人关注了难以改进

434
01:03:06,520 --> 01:03:15,400
他其实重点是要解决这种问题好还有一些问题是跟过程无关的是跟结果有关的就是你的结果的可信度

435
01:03:16,200 --> 01:03:20,120
就是你怎么验证你的软件产品它的结果是好的

436
01:03:21,640 --> 01:03:26,520
你实现功能就够了吗不是他还必须提供相应的过程文档

437
01:03:27,320 --> 01:03:32,760
这些过程文档才是也是你的软件交付物和品质的一部分

438
01:03:33,800 --> 01:03:34,920
这些都是对的对不对

439
01:03:36,040 --> 01:03:41,320
所以而这东西几乎不可能错就是跟你什么这个瀑布式跟什么敏捷关系不大

440
01:03:42,280 --> 01:03:49,400
他其实关注的是你整个管理体系以及你这个体系里面的员工他的能力是不是能逐步逐步的提升

441
01:03:50,040 --> 01:03:55,560
并且不断的越来越成熟这是一个很好的东西没有问题好然后是第二个

442
01:03:56,360 --> 01:03:59,880
方面的回答就是他是怎么成为现在这个德性的

443
01:04:03,160 --> 01:04:05,400
嗯很简单啊就是咨询公司要赚钱

444
01:04:05,800 --> 01:04:14,600
嗯而咨询公司赚钱的方法他就要你说的是呃县门的咨询公司还是敏捷的咨询公司

445
01:04:15,480 --> 01:04:26,760
哎其实不一定是敏那个时候还没有敏捷我做的事还没有敏捷啊对对对我做的时候他们贩卖的就是二一批的那一套吗嗯嗯比约法扩设统一过程

446
01:04:27,960 --> 01:04:30,760
统一过程是建立在库部模型之上的

447
01:04:30,760 --> 01:04:42,680
但其实他里面的主要部分你搬到敏捷也没问题因为他强调的是呃比如需求的管理啊比如这个呃质量的评估

448
01:04:43,160 --> 01:04:47,720
然后以及这个过程当中分解成若干子过程之后每个过程要交付哪些文档

449
01:04:48,280 --> 01:04:59,400
那敏捷他也有这一套东西只不过他他的文档交付他的流程他是另外一套体系比如敏捷可能会有人跟你说啊你不需要交付这个详细设计文档因为

450
01:04:59,800 --> 01:05:09,720
你可以用代码来代替他是吧嗯但是敏捷会告诉你说你不需要任何需求文档会吗不会的敏捷要求有非常好的需求文档

451
01:05:10,040 --> 01:05:22,600
所以他实际上只是在这种层面上有一些改进那么核心的部分其实都是那些好那这些咨询公司当他们要去做这件事情的时候

452
01:05:23,000 --> 01:05:33,080
他们就非因为他们很难参与到公司的深刻的组织架构的里面去那你整个组织的优化只能交给公司自己去做

453
01:05:33,480 --> 01:05:40,760
那他能做什么呢就是给你很多很多的文档模板是吧给你一套对他就要求你

454
01:05:41,720 --> 01:05:48,840
执行一个很相对比较固定的流程然后这流程里面去产出相应的文档

455
01:05:48,840 --> 01:05:54,280
然后拿这个文档去做认证认证通过了再给甲方看你看我们认证通过了

456
01:05:54,680 --> 01:06:00,920
我们做你的项目会给你提供这么多漂亮的文档他成了一个这样的商业的逻辑

457
01:06:01,800 --> 01:06:10,440
但其实这些东西在我看来他是本末倒置了嘛就是呃你这种文档的格式其实是相对灵活的

458
01:06:11,480 --> 01:06:16,040
而你这个流程里面也有相当一些节点是可以简化或者跳过的

459
01:06:16,040 --> 01:06:21,160
但是你要抓重点嘛怎么抓重点那还是要回到你这个公司做的主业业务是什么

460
01:06:21,400 --> 01:06:28,360
你的员工的能力水平怎么样你在现有技术之上主要的改进目标是啥比如说我们当时的问题是

461
01:06:28,760 --> 01:06:32,120
嗯我我们认为这个需求变更是我们最大的问题

462
01:06:32,440 --> 01:06:38,120
那我们就要在需求变更上做更多的事情尤其跟甲方之间交互的一些东西要做得更严格一些

463
01:06:38,440 --> 01:06:42,600
这是所有做突逼的生意的人都会去面临的一个问题

464
01:06:43,400 --> 01:06:46,680
那这些就要重点去做了但有些东西可能就没有那么重要

465
01:06:47,400 --> 01:06:53,480
所以这里面就涉及到很多灵活东西那这些都是嗯咨询公司他没办法参与也不关注的

466
01:06:54,760 --> 01:07:01,800
好最后就给大家一个感觉就是啊做些万就是拿认证拿认证的方法就是大量的文读工作

467
01:07:03,560 --> 01:07:05,320
他变成了这么一个逻辑了嗯

468
01:07:06,280 --> 01:07:11,320
所以等到敏捷宣言出来的时候能够工作的软件要比

469
01:07:12,120 --> 01:07:19,320
详尽的文档重要那么做程序员的朋友们一听到那当然对这有点像什么呢

470
01:07:20,120 --> 01:07:23,240
就点像我们现在这个防疫面临的情况

471
01:07:25,240 --> 01:07:27,800
就是我上次看到一个哥们讲这句话笑死我了他说

472
01:07:28,720 --> 01:07:34,840
过去两年多大家都受尽了防疫的苦接下来该受一受疫情本身的苦了平衡一下嗯

473
01:07:36,280 --> 01:07:43,080
就是之前大家都觉得软件工程是一个很枯燥的大量文读工作的这个东西然后当敏捷出来大家就认为哦

474
01:07:43,800 --> 01:07:47,000
就把他心目中痛恨的东西的反面就

475
01:07:47,800 --> 01:07:53,040
人为的就立刻就跟敏捷挂钩了比如说敏捷就是不用开会不写文档

476
01:07:54,160 --> 01:07:58,840
啊流程自由哼是吧就是他他因为这个之前

477
01:07:58,840 --> 01:08:02,640
嗯工程里面的东西让他觉得不舒服的地方麻烦的地方

478
01:08:03,040 --> 01:08:09,680
他就把它抛弃掉然后都认为这是敏捷带来的其实其实敏捷他的本质也不完全是这些东西

479
01:08:10,000 --> 01:08:12,680
敏捷不开会么敏捷要经常开会每天晨会

480
01:08:13,480 --> 01:08:15,680
站在一站站一个小时很正常是吧

481
01:08:16,800 --> 01:08:21,120
嗯敏捷不需要文档吗是很多文档可以不用写但你代码要写得特别好呀

482
01:08:22,360 --> 01:08:28,080
你的代码要特别可读然后它里面就蕴含了很多设计的结构在里面这样的代码才能省掉文档

483
01:08:28,080 --> 01:08:35,800
但很多人写不出这样的代码嗯咋办呢还比如说呃这个敏捷他强调这个自测室

484
01:08:36,320 --> 01:08:39,840
很多人就故意把敏捷的自测室这块就选择性无视了

485
01:08:40,960 --> 01:08:44,440
我要敏捷的那些东西但是我不愿意写自己的拥立泰斯的

486
01:08:45,560 --> 01:08:52,200
那就没有意义嘛对啊如果你不写自己的拥立泰斯的话敏捷很多前提条件就不存在了就你很可能

487
01:08:52,760 --> 01:08:57,080
敏捷是通过写拥立泰斯的来证明你懂了那个需求吗嗯

488
01:08:57,920 --> 01:09:04,160
你如果拥立泰斯没写对的话除非你对需求理解就不对嘛而拥立泰斯就是你跟需求方之间的一个接口嘛

489
01:09:05,200 --> 01:09:09,160
但结果他觉得我不写拥立泰斯或者我直接就是一个空的拥就能够

490
01:09:09,920 --> 01:09:18,000
瞒过集成系统的一个假的拥立泰斯的我就认为他OK了很多人这么干的对那你还敏捷个头啊你

491
01:09:20,120 --> 01:09:22,280
所以这个就我觉得是人性问题

492
01:09:22,280 --> 01:09:23,280
哈哈

493
01:09:24,840 --> 01:09:37,360
其实我我自己感觉啊就是敏捷跟这个先门一个很大的区别就是敏捷更关注于呃开发技术本身

494
01:09:40,280 --> 01:09:48,640
就是就是比如说持续集成对测试机动开发然后这个重构工程工程那些工具他们很很强调

495
01:09:49,200 --> 01:09:58,200
对对这些东西呢确实会更加的对程序员的胃口就是就是CMM这种东西吧比较对老板的胃口

496
01:10:00,000 --> 01:10:02,880
但是但是敏捷的东西呢比较对程序员的胃口

497
01:10:04,360 --> 01:10:13,600
嗯对自动测试呃持续集成这些东西呃怎么说呢就是在今天这个时代啊

498
01:10:14,280 --> 01:10:23,520
对于一个有一点技术背景或者说嗯在管理团队里有比较强技术背景的人存在的情况下老板们也会很喜欢

499
01:10:25,000 --> 01:10:28,880
是吧就假设嗯你这个持续形做得很好

500
01:10:29,760 --> 01:10:36,320
每天或者是隔天能够有持续集成报告能够看到你软件的各个模块的健康状态

501
01:10:37,160 --> 01:10:45,280
那那个老板如果他是技术技术出身的这种创意其实挺多啊嗯嗯他肯定会很喜欢如果他不是技术出身的但他的partner是

502
01:10:45,760 --> 01:10:56,600
跟他解释清楚之后他也会很很开心的这种我觉得嗯问题不大嗯问题主要出现在哪里就是如果出了问题到底在哪里出问题了

503
01:10:58,040 --> 01:11:06,040
比如说你今天都做的挺好好ok那程序还是出了问题比如说在线上出现了呃事故或者怎么样的这个时候大家就会

504
01:11:06,320 --> 01:11:13,080
那那老板他技术不熟他就会很恐慌吗他就会觉得说哎这到底是啥情况啊平常不是都测得好好的吗

505
01:11:13,520 --> 01:11:17,880
啊这个时候你必须得有一个合理的体系去说明然后去纠正他

506
01:11:19,240 --> 01:11:27,080
否则那就会对这个产生一些疑惑啊所以所以我觉得在哎今天这个时代呢其实更多的这个

507
01:11:27,920 --> 01:11:35,280
差异已经不是说嗯工具层面的就工具有好的工具大家都会乐意去用嗯

508
01:11:36,200 --> 01:11:46,600
而是关键就是你怎么让你的这个软件的可信可信赖成熟度能够可视化的啊这个比较直观的能够展现出来

509
01:11:48,000 --> 01:11:56,680
嗯对吧嗯反而现在我觉得很多老板也未必学尤其是创业公司尤其是互联网领域的创业公司他也不喜欢开很多会其实

510
01:11:57,520 --> 01:12:06,080
你看现在还有哪个这个互联网的公司热衷于搞三万这种认证的他除非要去接政府的单否则他也不开二件事

511
01:12:08,000 --> 01:12:13,240
他希望的是哎我怎么能以尽可能少的人尽快尽快的把东西做出来呵呵

512
01:12:13,760 --> 01:12:16,400
所以很多老板反过来很喜欢敏捷这种提法

513
01:12:17,200 --> 01:12:25,680
如果这个呃呃技技术的里德告诉老板说哎呀敏捷是很好但我我们现在这个呃资金有限招的人素质一般

514
01:12:26,480 --> 01:12:32,200
做敏捷还真的有点困难那老板会觉得很不开心你这怎么回事嗯嗯

515
01:12:33,400 --> 01:12:41,480
我自己从这个角度来说我觉得敏捷的这个舆论宣传能力还是更强大一些是是

516
01:12:42,480 --> 01:12:52,400
这个词是真好就跟机械学习一样嘛这个就是这个自带这个市场光环啊对嗯要道理

517
01:12:56,640 --> 01:13:07,640
哎说说了半天那那大家觉得像学校里面软件工程那应该做一些什么样的准备呢对吧即便我们可能很难真的

518
01:13:08,720 --> 01:13:15,080
锻炼也好领悟也好那学校可以做些啥呢两位有没有建议我提一个不成熟的想法

519
01:13:16,040 --> 01:13:22,760
好呀好呀就是我觉得学校里面教软件工程确实挺难的但是也不是完全不能做

520
01:13:23,760 --> 01:13:30,680
嗯我觉得于高年级尤其是研究生的学生来讲还是完全有可能的

521
01:13:32,320 --> 01:13:34,400
首先他必须是项目驱动的

522
01:13:35,480 --> 01:13:43,360
嗯然后呢他必须有足够数量的这个项目的教练

523
01:13:44,960 --> 01:13:49,760
那就像敏捷里面敏捷里面也很讲究就是那种师父带徒弟的那种那种体系

524
01:13:50,760 --> 01:13:57,920
所以敏捷里面有很多那个馒头的啊就是嗯一般来讲如果一个大的组织要推敏捷的

525
01:13:58,480 --> 01:14:04,520
这个流程的话一定会有若干个经过认证的啊敏捷开发的梅安特

526
01:14:05,160 --> 01:14:09,280
然后一个人负责几个项目去辅导那个小的那个敏捷团队

527
01:14:10,280 --> 01:14:13,040
带着他们去跑那种循环把他跑顺

528
01:14:14,040 --> 01:14:21,200
那学校里也类似就必须得培养一批有足够工程经验的人去带他们这是两个前提

529
01:14:22,000 --> 01:14:24,760
但是两个前提我个人的认为是很值得去做的

530
01:14:26,080 --> 01:14:33,440
好这是第一个方面第二个方面的就是仅仅用项目智来培训大家的话

531
01:14:34,120 --> 01:14:39,520
还不太够就是你要这个项目要经过进行设计就是你这个项目到底培养大家啥

532
01:14:40,520 --> 01:14:42,880
那你软件工程里面的三方面面太多了

533
01:14:43,560 --> 01:14:51,240
那这个我我们在业界做时间比较长的人就知道一个项目里可能遇到的问题是非常各种各样的奇奇怪怪都有

534
01:14:51,760 --> 01:15:01,880
但是可能归纳一下呢也就那么些比如说我刚才临时写了几个案一个是项目的环境的配置

535
01:15:02,720 --> 01:15:05,200
这个是很多学校里不太会去讲的东西

536
01:15:05,200 --> 01:15:09,960
但这个在实际的实操层面是非常重要的一个东西

537
01:15:11,200 --> 01:15:14,640
就是你一个项目人加进来怎么统一大家的开发环境

538
01:15:15,720 --> 01:15:19,880
然后进一步的在这个技术之上搭建一个简单的配置管理系统

539
01:15:20,960 --> 01:15:26,600
那什么相应的自动测试啊集成啊就可以做起来了这个事其实一个人就可以做

540
01:15:27,880 --> 01:15:29,360
然后它可以复制给多个人

541
01:15:30,360 --> 01:15:35,840
那么这个需要花点时间去准备比如说我们这个项目啊是拍攝的那么这个环境要怎么搭配呢

542
01:15:36,360 --> 01:15:39,040
现在其实有很多很好的方案了一个

543
01:15:39,760 --> 01:15:45,280
地铁的这个耳朵啊你去克隆下来整个环境就已经在里面了啊等等这些都是可以做的

544
01:15:45,880 --> 01:15:50,520
啊然后再有一个中心的服务器去作为你的这个地铁的一个托管然后托管这个

545
01:15:50,880 --> 01:15:57,440
因为你用地铁托管的情况下那它后端所有的事情都可以做了以前不是这个老庄还做做过这方面的产品吗

546
01:15:58,160 --> 01:16:04,320
就是这套东西呢是很多学生他在进入公司之前接触不到的

547
01:16:05,200 --> 01:16:09,640
但这个其实是很重要的好这是一方面第二方面就是怎么管理需求

548
01:16:11,480 --> 01:16:15,320
那需求就涉及到几块了啊任务的分解资源的管理

549
01:16:15,960 --> 01:16:23,480
这个你只要是一个项目那么就要有人去把这套东西能够模板化然后让大家可以去不管你选用什么样的

550
01:16:23,960 --> 01:16:31,760
嗯流程体系啊敏捷的也好瀑布式的也好其实没什么它本质都是做这些事情只是它的工具方法会有些区别

551
01:16:33,760 --> 01:16:41,960
然后在这个项目比如说为期假设一学期的这个项目实践当中的话那么必然会出现很多人与人之间的问题

552
01:16:42,880 --> 01:16:49,520
那这个要鼓励大家定期的去分享去讨论开这种项目的小组会去做人员方面的一些

553
01:16:50,000 --> 01:16:58,120
这种事情这种事情呃对学生来讲他不需要去解决他只需要意识到这是一个问题这个问题是软件工程的一部分就可以了

554
01:16:59,080 --> 01:17:05,560
那类似这样我们可以提炼出那个点这样的点的话就可以把它放到这些试点项目里去

555
01:17:08,320 --> 01:17:13,800
然后这个学校可以建立一个内部的类似于啊get lab这样的一个系统

556
01:17:13,800 --> 01:17:22,840
然后专门来host的所有的这些学生的这些呃实验项目这项目也说不定会出现一些值得复划的以后有价值的开学项目都有可能

557
01:17:23,160 --> 01:17:28,440
所以这个体系我觉得对于呃有条件的学校来讲还是挺值得去考虑的

558
01:17:29,040 --> 01:17:30,040
不知道老庄怎么看

559
01:17:30,720 --> 01:17:36,360
我都完全同意啊我只能够再进一步的就直接说王老师他们的情况

560
01:17:36,840 --> 01:17:41,240
王老师其实你们现在有一个非常好的基础因为你们就在做真实的项目

561
01:17:41,240 --> 01:17:46,000
对的对的那个项目是可以一直做下去的而且它已经来自于真实的需求了

562
01:17:47,840 --> 01:17:56,880
而且你们那个项目里我觉得可以拆出几十个小项目给大家去玩对好无困难一定可以

563
01:17:57,720 --> 01:17:59,440
这这就是我我想说的

564
01:17:59,960 --> 01:18:08,280
嗯就是说呃因为它是一个项目生态了所以呢你们会由此产生更多的复杂现象

565
01:18:10,000 --> 01:18:13,120
比如说不一致啊嗯比如说沟通不到位啊

566
01:18:13,720 --> 01:18:20,560
比如说需求理解出现了偏差呀这种情况都会有其实刚才刚才李俊说的最核心的就是

567
01:18:21,560 --> 01:18:28,400
我我理解啊就是你得让这些学生在学校期间就尝到软件工程的苦头没错没错就得有机会吃那些苦

568
01:18:29,400 --> 01:18:37,960
那么这些苦头就真的就是很多时候就只会来自于真实的项目甚至来自于真实的假方的奇奇怪怪的需求

569
01:18:39,240 --> 01:18:49,240
嗯然后我补充一点就是要有一些人一些男子能够在他们尝到苦头的时候告诉他们正途人的苦头

570
01:18:50,560 --> 01:18:55,840
就是什么嗯一苦一甜的比较他就能够学会东西了对嗯

571
01:18:57,120 --> 01:19:06,640
要道理好的好的别人我们管不着对吧但是王老师你的学生我认为是很有机会的因为因为现在你们开开局已经把这个

572
01:19:07,240 --> 01:19:13,720
项目的底子打在这了而且是整个实验室是可以传承下去的我觉得这是一个非常非常好的基础

573
01:19:14,720 --> 01:19:21,760
好的好的对回头持续跟大家来交流这方面的一些心得经验教训嗯

574
01:19:23,560 --> 01:19:33,120
对我觉得软件工程的教学这一块挺挺冷门的就是而且不容易大家大家做都不好所以反而是机遇啊

575
01:19:34,240 --> 01:19:36,120
嗯挺有信心

576
01:19:36,960 --> 01:19:41,840
好呀关于软件工程的话题我这也是有挺多挺多可以聊的东西的

577
01:19:42,320 --> 01:19:47,120
今天可能也就是开了个头啊正好我们这个祖师爷去世了啊我们纪念一下

578
01:19:48,440 --> 01:19:54,920
嗯但确实我一直都是这么认为啊就是软件工程是非常新也非常

579
01:19:55,880 --> 01:20:05,000
怎么讲稚嫩的一个学科还有很多很多事情没解决大家都还是在经验主义的层面上再重复

580
01:20:05,000 --> 01:20:12,800
因为很明显没有任何一家公司站出来说我软件工程上取得了突破我这边就是能以更高的成功率去开挂软件

581
01:20:13,240 --> 01:20:16,640
啊几乎没看到大家都是在同一个数量级上有高有低

582
01:20:17,160 --> 01:20:20,440
这说明在基础理论和工具方法上没有大的突破

583
01:20:20,960 --> 01:20:27,440
但是经验主义也有经验丰富和没有经验的差异但是上下限差别更大

584
01:20:27,720 --> 01:20:33,760
所以可能也更加需要大家去关注啊去思考好看看两位还有什么其他要补充吗

585
01:20:35,680 --> 01:20:43,080
嗯没有没有补充就是下回软件工作还可以接得了还没错同意肯定可以的嗯

586
01:20:44,720 --> 01:20:50,480
好那今天我们就先这样好好谢谢大家谢谢拜拜拜拜

