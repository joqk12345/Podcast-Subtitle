1
00:00:00,000 --> 00:00:03,040
各位朋友大家好欢迎来到后互联网时代的乱谈

2
00:00:03,040 --> 00:00:08,640
那这一期呢因为我们老庄同志偶染微样啊推迟了两天

3
00:00:08,640 --> 00:00:15,480
嗯现在听上去老庄这个声音除了有一点鼻音和磁性以外问题不大啊

4
00:00:15,480 --> 00:00:17,560
老庄来给我们听友打个招呼吧

5
00:00:17,560 --> 00:00:20,280
哎大家好我已经快康复了谢谢大家

6
00:00:20,280 --> 00:00:25,840
呵呵现在听上去我觉得应该没什么问题啊还有王老师啊

7
00:00:25,840 --> 00:00:27,280
哎大家好

8
00:00:27,280 --> 00:00:31,400
所以我们就改到了今天正好是四月一号啊

9
00:00:31,400 --> 00:00:37,120
就顺便也说一个事儿除了大家都知道的愚人节还有一个很重要的事情

10
00:00:37,120 --> 00:00:42,000
就是著名的中美南海撞击事件的二十三周年

11
00:00:42,000 --> 00:00:53,280
这个事儿呢可能我们的听友里面比较年轻的比如现在还是在念大学或者更小的朋友还真不一定很清楚

12
00:00:53,400 --> 00:01:01,320
啊这个事发生在二零零一年的四月一号在当年影响是非常非常大的

13
00:01:01,320 --> 00:01:10,880
而在国内产生的影响类似于九四年的银河号事件以及九九年的驻蓝联盟使馆被炸的事件

14
00:01:10,880 --> 00:01:19,840
这三个事儿在当时被称为叫那个年代的三大恨啊就是我们比较弱嘛被人欺负的事件属于是

15
00:01:19,840 --> 00:01:23,800
那正好这是个什么事儿呢我们就简单地跟大家说一说吧

16
00:01:23,800 --> 00:01:39,120
这事儿是二十三年前零一年的四月一号当时三十三岁的一个我们中国人民解放军海军航空兵的飞行员啊也叫王伟跟王老师的名字一模一样啊

17
00:01:39,160 --> 00:01:49,880
嗯他驾驶的一架我们的歼八二型的截击机啊在海南的南部的南海上空

18
00:01:50,600 --> 00:02:00,160
跟毕竟我们领空做这种情报活动的一架美军的一批三型的侦查机就发生了擦撞

19
00:02:00,400 --> 00:02:09,080
那擦撞之后呢歼八二就失控了那失控之后王伟就跳伞啊但是很遗憾的是跳伞掉到海里面

20
00:02:09,080 --> 00:02:13,200
后面的搜救人员没有及时找到那应该就是牺牲了

21
00:02:13,840 --> 00:02:23,080
那美国的这架侦查机呢这个一批三因为擦撞嘛它也失去控制了那最后呢它就因为附近没有其他地方可以降落了

22
00:02:23,280 --> 00:02:38,360
它就强行地迫降到了我们海南的陵水机场啊这个事儿它实际上是中美这么多年历史上第一次直接的军事性的最严重的一次对碰

23
00:02:38,680 --> 00:02:47,160
啊产生了有人员牺牲然后另外一方的飞机降落在了我们国家境内而且没有经过我们许可

24
00:02:47,960 --> 00:02:53,360
啊当然降下来就肯定就被我们围住然后把人全逼起来了就变成俘虏了

25
00:02:54,040 --> 00:03:03,560
那这个事有几个事儿呢我个人是感觉比较感慨的啊就第一个就那个年代我们对付这些流氓行动啊确实办法不是很多

26
00:03:04,120 --> 00:03:08,040
啊只能用飞机去迫近之后逼迫它远离

27
00:03:09,000 --> 00:03:19,760
那来来回回这样别别苗头啊一般情况下他们也就撤退就走了但这次事件呢对方飞行员不知道是有意还是无意的错误操纵

28
00:03:20,760 --> 00:03:25,080
就进行了一个很危险的激动这个激动直接导致两个飞机相撞

29
00:03:25,680 --> 00:03:32,320
那大家知道一批三这个侦查机啊它是那种螺旋奖啊涡轮螺旋奖是的它是很飞得比较慢的

30
00:03:32,720 --> 00:03:37,360
而我们歼八二那种呢当年的设计是高空高速的捷机机

31
00:03:38,640 --> 00:03:47,960
那这个歼八二要到很低空以很低速去伴飞一个敌人这样的飞机本身难度就很大要保持距离那不容易的

32
00:03:48,280 --> 00:03:53,480
然后对方再稍微有一点什么异常的举动那一被控制好可能就会出现问题

33
00:03:53,800 --> 00:04:01,720
发生这个事情之后我们确实就装备也不怎么样啊甚至也没有设备能够把整个过程录下来

34
00:04:01,720 --> 00:04:08,000
以至于到今天这个事情的真相都没有很硬的物证那中美双方的说法是不一样的

35
00:04:08,400 --> 00:04:16,920
那如果今天可能不一样我们会有更多的手段不论是有人的无人的飞机然后拍摄各方面证据都会非常充分

36
00:04:17,520 --> 00:04:20,200
这是一个感慨其实也就是二多年的事儿啊

37
00:04:20,840 --> 00:04:31,600
第二个呢就是我们那时候在南海啊尤其是远离大陆海南岛以南部分的海域啊虽然是我们的领海但我们的部署也确实很薄弱

38
00:04:32,320 --> 00:04:42,040
所以那个搜救工作啊就展开得很慢如果是今天的话呢王伟立是生还的可能性会大增当时就非常遗憾没找到

39
00:04:42,640 --> 00:04:48,360
第三个非常有意思的就是这个一批三的美国的侦查局迫降之后啊

40
00:04:48,360 --> 00:05:01,800
我们不是把它就围住了吗然后人就都下飞机来了但是他们很有经验啊可能在迫降的过程当中已经落地之后人出来之前就已经把飞机上的所有的电子设备和情报数据全都破坏掉了

41
00:05:02,480 --> 00:05:13,480
那么之后呢一下子我们手上有二十四个美国俘虏啊还有一架完整的飞机啊怎么办后面这个事件定性和飞机本身的处置就引发了长达几个月的一个外交战

42
00:05:14,200 --> 00:05:17,600
首先是关于这件事情本身怎么定性美国人你要不要道歉

43
00:05:17,600 --> 00:05:18,160
这个就吵了整整一个礼拜美国人一开始是死活不肯道歉的最多说表示遗憾但最后呢就是在我们非常强硬的压力之下因为毕竟他人在我们手上啊这个事你不道歉我是不会放这些人的那最后他们正式的提交了一份道歉里面是按照我们能接受的最低标准啊写very sorry啊就没有用那个最正式的apologize啊但是说了一个very sorry那就勉强接受了

44
00:05:47,600 --> 00:05:53,480
于是呢就四月十二号一个多礼拜以后就把他们的二十四个纪录人员就放回去了

45
00:05:54,000 --> 00:05:59,880
那接下来呢美国人又提出来说哎呀我们派专家过来给你修飞机啊把这飞机修好了我们自己开回去

46
00:06:00,140 --> 00:06:03,720
那这个我们是绝对不可能同意的啊这个立刻就拒绝了

47
00:06:03,980 --> 00:06:08,840
因为你是一架军事飞机未经许可降在中国的领土上

48
00:06:09,360 --> 00:06:12,440
你还想好好地飞回去这不可能啊这个

49
00:06:12,680 --> 00:06:14,220
这个脸我们丢不起啊

50
00:06:14,680 --> 00:06:15,960
那美国人说那怎么办呢

51
00:06:16,220 --> 00:06:19,040
我们就跟他说这个飞机我们会把它拆了

52
00:06:19,540 --> 00:06:20,820
拆成碎块

53
00:06:21,080 --> 00:06:23,140
然后你去租一架飞机

54
00:06:23,640 --> 00:06:26,960
飞到我们这里来我们把碎块给你弄上去你把它拿回去

55
00:06:27,220 --> 00:06:29,280
你想这架飞机完整开回去不可能

56
00:06:29,540 --> 00:06:33,120
而且你不要用你自己的军事飞机另外找一架飞机

57
00:06:34,140 --> 00:06:42,340
最后美国人就也只能被迫接受了他就从俄罗斯这里租了一下大的二零二四的那个运输机

58
00:06:42,820 --> 00:06:46,640
把我们拆完的部件运回去了这个事情已经到了大概是六七月份的时候

59
00:06:47,420 --> 00:06:48,960
前后大概两三个月的时间

60
00:06:50,740 --> 00:06:55,340
这里面很有趣的一个点就是当时我们驻美的使馆

61
00:06:56,120 --> 00:07:00,980
包括我们驻美的大使都受到了来自美国政府和民间的很大的压力

62
00:07:01,240 --> 00:07:03,280
因为美国政府也好媒体也好

63
00:07:03,540 --> 00:07:05,840
他就按他的逻辑去编嘛

64
00:07:06,100 --> 00:07:11,220
那就说的好像是我们抓了他们的人啊然后要挟美国政府如何如何

65
00:07:11,460 --> 00:07:18,660
那美国那个时候的民意也很汹涌啊甚至有人说要跟中国开战啊三百战俘灭鳖这个那个时候说过的话

66
00:07:19,260 --> 00:07:26,220
那这个时候呢我们当时的驻美大使就做了一个所有人都没想过的事情

67
00:07:26,740 --> 00:07:31,540
就是上斯恩恩的电视节目来对这个事情做出正式的回忆

68
00:07:31,980 --> 00:07:36,900
那美国人很意外地使这个节目取得了巨大的成功就中国人意义上巨大成功

69
00:07:36,900 --> 00:07:41,500
他就有点像什么就像当年这个宁向如的故事一样

70
00:07:41,760 --> 00:07:47,920
就在敌营之中啊面对对方的气势汹汹但是解释得非常清晰

71
00:07:48,420 --> 00:07:59,940
电视节目播出之后呢就美国的民意有所翻转那美国大部分的老百姓就认为说哎那确实啊我们军事飞机跑到人家家门口晃荡晃荡然后对方还死了人

72
00:08:00,460 --> 00:08:02,500
那我怎么来说我都应该道个歉吧

73
00:08:02,760 --> 00:08:05,580
如果道个歉我们的人能回来那也完全可以接受

74
00:08:06,040 --> 00:08:10,900
这也是为什么后来小布什就在这个事情上让步的一个很重要的因素

75
00:08:11,420 --> 00:08:14,740
那这位大使那就是后来我们的外交部长杨洁篪

76
00:08:15,780 --> 00:08:19,360
啊他也就是那个时候在美国就打下了人气啊

77
00:08:19,860 --> 00:08:26,780
就包括小布什在内非常非常赏识他啊多次的就请他到家里去然后关系也很好私交也很好

78
00:08:27,300 --> 00:08:32,920
那最后有一个点也是这个事传得非常多的一个呃怎么说呢误传

79
00:08:33,560 --> 00:08:38,760
我们都听过那个讲法啊说王伟烈是当时驾驶的那个飞机

80
00:08:39,280 --> 00:08:53,360
编号是八一九二包后面很多我们的纪念性的文字还有那个那年那图那些事里边所写的那个故事啊也是以这个为基础但实际上这个呢是这个是不对的

81
00:08:54,000 --> 00:09:01,440
就当时他驾驶的那个座机的编号其实是八一九四啊八一九二也是他的飞机

82
00:09:01,440 --> 00:09:09,440
就那个时候我们优秀的飞行员真的很少甚至有的时候就有的那个住房的区啊就是飞机可能比人多

83
00:09:10,120 --> 00:09:16,480
那这飞行员他需要执行任务的时候就找他的几个飞机里状况最好的出任务了

84
00:09:16,880 --> 00:09:23,320
所以两飞都是他的但当时执行任务的这个呢是八一九四坠毁的这一架是八一九四

85
00:09:24,040 --> 00:09:34,440
那很巧的是就在出事前几天他还驾驶那个八一九二去执行过跟这几乎一样的任务因为美国人经常跑过来这边捣乱

86
00:09:35,280 --> 00:09:39,480
而那一次呢他是任务很成功把对方驱离了就结束了

87
00:09:39,880 --> 00:09:49,960
而那一次呢美国的侦查机实际上是拍了一些照片和视频的里面有很清晰的网络的驾机的编号是八一九二这个视频后来被曝出来了

88
00:09:50,280 --> 00:10:04,120
所以我们一些宣传口啊包括一些媒体啊就误以为这个就是当时的情景实际上不可能因为当时出事的那个飞机美国的侦查机拍的东西全销毁了它迫降的时候就没有留下任何数据资料

89
00:10:04,720 --> 00:10:14,440
而据说我们的人是在那飞机上翻了一两个月的那这个就不可能是那一次拍下来的实际上后来有人考证过就是前几天执行任务

90
00:10:14,440 --> 00:10:23,760
而这个八一九二这架飞机呢实际上是在我们海军航空兵某部一直服役到二零一几年才退役的一架飞机

91
00:10:24,200 --> 00:10:38,560
所以这个实际上是一个流弊啊一个误传但是现在大家也就算了不去纠正了就就这样了那因为这个事重点不在这上头重点在于这个事这个人以及跟他相同的那一批人

92
00:10:39,280 --> 00:10:44,000
所以我们只要去怀念这些事情纪念这个事就可以了

93
00:10:44,440 --> 00:10:54,640
但是呢我反正觉得就是事实总归是事实了所以还在这里稍微提一下正好是今天所以把这个故事讲一讲你们两个应该都很清楚这个事对吧

94
00:10:55,640 --> 00:11:14,400
编号错掉的这个是第一次听说嗯之前也不知道细节或者说或者说都都没意识到这个两个编号有啥区别嗯毕竟不是军迷啊这个这个就没没感觉或者说可能军迷会比较在意说这个编号怎么会搞错

95
00:11:15,160 --> 00:11:23,760
对因为其实这个部队内部出了这样的情况之后内部是有一些文件的文件里是很清楚的是八二九四这个飞机

96
00:11:24,280 --> 00:11:36,920
但不知道为什么就是在外面宣传的时候呢就给弄错掉了那就一直延续到现在二十几年就错到现在你也没法去纠正了现在包括官媒都是讲八二九二了好那就

97
00:11:37,480 --> 00:11:49,320
反正今天正好是四月一号就把这个事跟大家说一说啊以前听过的就再听一遍没听过的就大概知道一下当初有这么一回事儿啊这是恍若隔世啊就二十几年以前的事情

98
00:11:50,200 --> 00:11:59,680
现在不一样现在我们办法会多很多啊上次就有对这个澳大利亚的飞机我们的飞就从它前面飞过然后撒了一堆的干扰弹

99
00:12:00,280 --> 00:12:08,360
啊就是把他们吓坏了这个据说澳大利亚整个机组回去就一两个月时间在家里面做心理矫正啊

100
00:12:08,960 --> 00:12:24,440
然后这个抗议了半天啊就所以现在可能不太会出这样的问题了好那第二个新闻我们就说另外一个事儿就是最近我们去年大奖特奖的流浪地球二在日本终于公映了

101
00:12:24,440 --> 00:12:53,720
因为日本这个国家很特别啊就是它很多电影它都不是全球同步的我其实不太清楚他们是为了保护国内电影应该也不完全是另一方面是他们也比较习惯于等这个电影在全球播映的差不多了数据啊口碑啊一些暗坑都比较清楚了啊再引进啊他们很多片子都是这样的何况是中国的一部片子所以晚了一年多也很正常但是日本它是一个

102
00:12:54,440 --> 00:13:22,280
科幻大国我们几个人都挺喜欢科幻喜欢悬疑类的推理类东西而这几个都是日本人非常喜欢的所以有的时候他们会有一些共鸣这一次球二在日本公映花了很多精力啊做配音啊然后各方面的宣传整个宣发也比在北美和欧洲要好得多嗯日本很多的名流包括作家动漫游戏的一些制作人等等都出来做了一些宣传

103
00:13:22,280 --> 00:13:52,280
所以这一次反响还可以然后我也看了一些日本那边的一些评论啊就有几个小的感想跟大家分享一下可以顺便聊几句这事儿第一个就是我发现整个电影里面在日本知名度最高的还是刘德华啊刘德华在日本的人气真的还挺厉害啊虽然人家已经火了这么好几十年了但是目前仍然是在日本知名度最高的啊安迪刘一说就是头牌

104
00:13:52,280 --> 00:14:22,280
这是一个我看了比较有感触的第二个就是在国内上映的时候我们当时都有感觉就是一个事先大家没想到的但是后来大火的人物就是那个马兆老师啊后来叫马欧了啊这个看来不是偶然的在日本他人气也非常非常高就很多评论都提到有的人说啊绝对理性主义的一种纯粹的美感啊还有说他怎么就各方面的一些魅力打动大家

105
00:14:22,280 --> 00:14:52,280
所以这个嗯也挺有意思的但是日本人可能还不知道他后来被变成海欧的那个事情因为那个事情是电影以外的事情是有人拿了一个那个海欧的玩具啊说他很像那个马兆然后在国内活下来不知道这个梗啊什么时候传到日本去我觉得日本人应该会很有感触啊他们应该挺习惯这种梗文化第三个感触就是日本人里面对科幻非常非常迷的人还真的是很多

106
00:14:52,280 --> 00:15:22,280
有一个影迷啊他就首映那一天他去看了然后立马就写出了一篇九千多字一万字的影评我看他那个影评我感觉他应该是首先他肯定是科幻的硬核粉丝其次呢他对大流的作品也挺熟悉的看过流浪地球的一那三体就不用说了三体小说肯定是看过的所以他对于整个这个体系相当的了解他只看了一遍的情况下写的那一篇影评里面很多感触

107
00:15:22,280 --> 00:15:52,280
是相当到位的很有共鸣这种现象呢之前在北美和欧洲放映的时候好像没有看到类似所以我就觉得可能同样是在这个东亚这个文明的这个圈子里啊可能有东西还确实是比较好理解一些啊这是我个人的几点感触你们怎么看啊现在这个有票房数据吗哦我还没看到它是上那周开始的对就是说

108
00:15:52,280 --> 00:16:22,280
我会比较关心就是说相对于其他在日本上映的这种欧美的科幻大片它的成绩怎么样嗯这个可以后续去查一下嗯我倾向于是应该不会有那么好日本人还是更宠美一点是但是我觉得它肯定会比比如说在欧洲啊那些毫无宣发的情况下会好一些哎我挺好奇的他们的语音

109
00:16:22,280 --> 00:16:23,580
会有可能配音吗

110
00:16:24,080 --> 00:16:24,980
那全配音的

111
00:16:25,620 --> 00:16:27,820
也全配音的哈对ok

112
00:16:28,480 --> 00:16:32,120
嗯但是就是可能跟我们看到的体验类似

113
00:16:32,280 --> 00:16:34,940
有一些就是外国人讲自己的母语了

114
00:16:35,480 --> 00:16:38,880
但是它们主要人物它会配成日文嗯

115
00:16:39,480 --> 00:16:41,080
啥时候早就会听一听了

116
00:16:41,640 --> 00:16:44,720
对啥时候这个搞一个体验版啊

117
00:16:44,720 --> 00:16:47,440
我们可以看一下就日本人你知道那个日语啊

118
00:16:47,440 --> 00:16:50,480
它先天的具有一种中二的那种特性

119
00:16:50,720 --> 00:16:53,780
嗯是的可能在里面某些场景会很像啊

120
00:16:53,780 --> 00:16:54,740
就很有感

121
00:16:55,020 --> 00:16:57,080
这个配音其实是个挺大的问题

122
00:16:57,080 --> 00:16:59,120
之前在欧洲上映的时候

123
00:16:59,580 --> 00:17:01,680
我妹在德国嘛她专门就去看了

124
00:17:01,680 --> 00:17:02,640
然后回来给我讲

125
00:17:02,980 --> 00:17:05,420
她说德国人无聊到什么程度啊

126
00:17:05,420 --> 00:17:07,520
坚持要求不能有任何字幕

127
00:17:07,520 --> 00:17:09,840
所有地方都必须配音改成德语

128
00:17:09,840 --> 00:17:11,680
所以里面所有的人讲的各国的语言

129
00:17:11,680 --> 00:17:12,880
统统都变成了德语

130
00:17:13,140 --> 00:17:16,680
啊这是一个最离谱的是那电影最后不是

131
00:17:16,680 --> 00:17:19,580
有一个大镜头就地球起航了

132
00:17:19,640 --> 00:17:23,680
然后各国用各国的语言说再见太阳系

133
00:17:23,840 --> 00:17:26,440
而就那一段也所有都翻成德语了

134
00:17:26,440 --> 00:17:27,280
所以会听到

135
00:17:27,280 --> 00:17:29,720
恩变的德语说再见太阳系

136
00:17:29,940 --> 00:17:31,440
这荒唐奇怪的

137
00:17:31,740 --> 00:17:36,880
呵我这个就我之前看过那个郭帆那个访谈啊

138
00:17:36,940 --> 00:17:40,640
郭帆就说我们这个聊起话是第一次搞

139
00:17:40,640 --> 00:17:41,820
国际化发行啊

140
00:17:42,120 --> 00:17:43,940
他说我就有很多经验教训

141
00:17:43,940 --> 00:17:46,840
他觉得这个事比想象的要复杂得多

142
00:17:46,920 --> 00:17:49,120
他就举这个例子他在欧洲发行的时候

143
00:17:49,120 --> 00:17:53,920
有一个当地的发行商说哎呀这个必须都所有的配音成本地语言

144
00:17:54,260 --> 00:17:59,460
那郭帆说我们这里面就是要体现全人类的不同语言不同种族人的合作啊

145
00:17:59,780 --> 00:18:02,120
那这里面各自讲各自的这个语言

146
00:18:02,120 --> 00:18:04,620
并且通过一个自动化的装置来翻译

147
00:18:04,620 --> 00:18:07,360
这也是体现科技设定的一个部分啊

148
00:18:07,480 --> 00:18:09,660
你全翻译成一个语言就没有这个感觉了

149
00:18:09,820 --> 00:18:11,880
那对方说不行我们这里就是这么规定的

150
00:18:12,380 --> 00:18:14,360
对郭帆就觉得非常的郁闷

151
00:18:14,360 --> 00:18:17,120
就很多他的创作呢就没法体现出来了

152
00:18:17,320 --> 00:18:18,560
然后这个事怎么解决

153
00:18:18,560 --> 00:18:20,380
他觉得现在也没有想到很好的办法

154
00:18:20,660 --> 00:18:23,020
我觉得这可能是一个很客观的问题

155
00:18:23,320 --> 00:18:25,280
我认为还是傲慢

156
00:18:25,520 --> 00:18:27,760
对啊呵呵本质当然是了

157
00:18:28,320 --> 00:18:31,580
所以这个没办法就只能慢慢来啊

158
00:18:31,820 --> 00:18:37,460
先找到一些能够捕捉到那个点的地区啊

159
00:18:37,460 --> 00:18:39,820
先我们可以一起先欣赏起来

160
00:18:39,820 --> 00:18:42,080
再逐步扩大这个地区啊慢慢地

161
00:18:42,180 --> 00:18:45,780
说不定最后就是原来大家认为最发达那几个国家

162
00:18:45,780 --> 00:18:49,720
他可能会最晚凝结这一波的潮流

163
00:18:50,220 --> 00:18:51,980
这个也没办法好

164
00:18:52,720 --> 00:18:57,180
那第三个新闻我们来说一说小米的这个SU七啊

165
00:18:57,920 --> 00:19:00,720
这个已经预热了好久好久啊

166
00:19:00,720 --> 00:19:02,520
终于发布会上个礼拜开了

167
00:19:03,120 --> 00:19:06,640
宣布的这个价格呢也很微妙

168
00:19:06,840 --> 00:19:11,240
既没有低到一个让人惊叹的水平但是呢也真的很低

169
00:19:11,620 --> 00:19:13,320
就是以它的配置而言的话

170
00:19:13,480 --> 00:19:15,420
现在我看到很多分析啊

171
00:19:15,420 --> 00:19:18,820
都认为它这一批很有可能是要亏的

172
00:19:19,260 --> 00:19:21,720
但是我其实也不是很确定啊

173
00:19:21,720 --> 00:19:23,920
就是因为这个东西如果它亏的话

174
00:19:23,920 --> 00:19:26,220
其实对它未来的生态是不太好

175
00:19:27,480 --> 00:19:31,620
除非它有办法在很短的时间一两年里面

176
00:19:31,620 --> 00:19:33,280
把它的成本大幅地降下来

177
00:19:33,380 --> 00:19:34,520
这可能性其实不大

178
00:19:34,920 --> 00:19:37,960
因为虽然造车对小米来讲是第一次

179
00:19:37,960 --> 00:19:40,660
但是它在整个供应链里面

180
00:19:40,660 --> 00:19:42,660
它已经莫怕滚打这么长时间了

181
00:19:43,020 --> 00:19:46,900
它这一造车不可能就是说现在它供应链价格很高

182
00:19:46,900 --> 00:19:49,720
以后还有很大的下降空间我觉得应该不至于

183
00:19:50,160 --> 00:19:54,520
所以它如果现在亏的话以后要赚还真有点挑战

184
00:19:55,100 --> 00:19:59,960
啊然后小米的用户还真的是非常的

185
00:20:00,620 --> 00:20:03,160
首先用户群体够大啊其次呢

186
00:20:03,360 --> 00:20:06,960
也真的是有相当大的这个品牌的忠诚度啊

187
00:20:07,260 --> 00:20:11,300
所以这个车出来之后呢整个预订的情况形势是非常好的

188
00:20:11,300 --> 00:20:14,560
啊这个接下来就看它交付的口碑如何了

189
00:20:14,560 --> 00:20:16,900
后续的交付啊这个服务做得怎么样

190
00:20:17,460 --> 00:20:23,000
这也算是中国新能源车或者新概念车的市场里面

191
00:20:23,000 --> 00:20:25,100
又进来一个重磅级的玩家

192
00:20:25,460 --> 00:20:27,600
这个你们两位怎么看尤其是老庄啊

193
00:20:27,600 --> 00:20:30,060
你是我们这里唯一习惯开车的人

194
00:20:30,060 --> 00:20:31,000
你有兴趣吗

195
00:20:31,000 --> 00:20:37,260
呵呵我我说实话其实只在犹豫要不要换车

196
00:20:37,840 --> 00:20:40,200
啊所以我现在还是开油车嘛

197
00:20:40,200 --> 00:20:43,300
还是犹豫要不要换车嗯然后呢

198
00:20:43,700 --> 00:20:47,700
呃之前看了很多这种乱七八糟的这种介绍啊什么的

199
00:20:47,700 --> 00:20:49,040
都还没啥感觉

200
00:20:49,400 --> 00:20:53,140
那这一次好像也觉得也许小米可以试一试

201
00:20:53,760 --> 00:20:56,800
但是呢我又不是那种特别爱钻研的人

202
00:20:57,360 --> 00:21:01,200
就是有人会去钻研各种各样的参数啊质量啊

203
00:21:01,200 --> 00:21:03,040
什么评测啊什么的我也不是

204
00:21:03,440 --> 00:21:06,100
我只是觉得哎说不定哪天可以去试试看

205
00:21:06,900 --> 00:21:10,160
也许可以去试驾呀或者说是去感受一下

206
00:21:11,000 --> 00:21:13,500
然后那天那天看到一个段子

207
00:21:13,500 --> 00:21:15,700
那个段子倒挺深得我心的

208
00:21:16,060 --> 00:21:19,360
就是如果你买其他的国产的电动车

209
00:21:20,000 --> 00:21:23,100
也就买就买了但是如果你买了小米的车

210
00:21:23,440 --> 00:21:25,760
遇了问题的话别人会跟你一起来骂

211
00:21:26,160 --> 00:21:28,400
那效果会比较好嗯

212
00:21:28,700 --> 00:21:31,300
所以我倒觉得哎从知名度来说

213
00:21:31,560 --> 00:21:35,500
买一个比较有知名度的也许是一个选择

214
00:21:35,560 --> 00:21:39,040
但我还没想好啊这只是就是一转一转念的事情

215
00:21:39,580 --> 00:21:42,840
真的要决策我我可能会是一个决策非常拖拉

216
00:21:43,000 --> 00:21:46,000
然后真正要买的时候又是完全没道理的就买了

217
00:21:46,600 --> 00:21:49,240
我上一次家里面换车就是

218
00:21:49,480 --> 00:21:52,440
经过一个卖车的地方进去逛了逛

219
00:21:52,540 --> 00:21:54,080
然后半小时内就买了

220
00:21:54,500 --> 00:21:56,700
这次之前从来没想过会去买那部车

221
00:21:56,900 --> 00:21:59,240
也没想过会去买那个品牌就这种感觉

222
00:21:59,500 --> 00:22:01,780
所以所以我是一个决策很很乱来的人

223
00:22:02,240 --> 00:22:05,480
嗯没什么道理可以可以哼哼

224
00:22:06,040 --> 00:22:08,480
王老师呢身边有人有兴趣吗

225
00:22:08,820 --> 00:22:12,080
有身边其实还挺有人挺有兴趣的

226
00:22:12,280 --> 00:22:14,580
其实我们前面有聊过嘛就是嗯

227
00:22:14,720 --> 00:22:17,120
身边对电车这件事情

228
00:22:17,720 --> 00:22:19,840
高度赞扬的人其实还不少

229
00:22:20,320 --> 00:22:23,380
嗯再加上小米对吧

230
00:22:23,380 --> 00:22:26,940
因为身边本身有嗯小米的一些粉丝

231
00:22:27,080 --> 00:22:30,040
他们家的各类的一些除了手机以外的

232
00:22:30,240 --> 00:22:33,720
这种小电器对也是深得我们

233
00:22:34,080 --> 00:22:37,240
特别是像李功男一些喜爱

234
00:22:38,100 --> 00:22:43,800
嗯我甚至也有听说可能会有直接购车的同事

235
00:22:43,880 --> 00:22:48,300
哎所以这一波我觉得整个宣传还是非常成功的

236
00:22:48,840 --> 00:22:52,180
嗯但是像老庄这种情况我感觉就不着急

237
00:22:52,840 --> 00:22:55,180
嗯我想他我本来也不着急

238
00:22:55,380 --> 00:22:59,640
对就是等他这一波尘埃落定啊

239
00:23:00,080 --> 00:23:01,940
第一波交车的都拿到手了

240
00:23:01,940 --> 00:23:03,940
然后大量的评测出来了

241
00:23:04,080 --> 00:23:06,680
有很真实的市场反馈

242
00:23:06,680 --> 00:23:11,380
而不是现在这种有厂家控制的媒体的反馈

243
00:23:11,480 --> 00:23:14,280
嗯然后再看啊然后如果觉得还不错呢

244
00:23:14,420 --> 00:23:17,620
那到那个时候像上海肯定小米的体验店

245
00:23:17,620 --> 00:23:19,120
四s店应该就一堆了

246
00:23:19,240 --> 00:23:22,820
那随便找一家去试一试啊这个可能感觉不一样

247
00:23:22,920 --> 00:23:25,520
然后我也完全可以理解小米造车这个事儿呢

248
00:23:25,520 --> 00:23:31,420
比我们绝大部分目前国内造智能车的厂商

249
00:23:31,540 --> 00:23:34,980
对我们这些人来讲还是更有亲和力一些

250
00:23:35,520 --> 00:23:38,340
有点感觉就是还是我们自己熟悉的品牌

251
00:23:38,520 --> 00:23:41,380
虽然我其实没用过小米的手机

252
00:23:41,720 --> 00:23:44,640
智能家电我用的也很少包括电视啊什么的

253
00:23:44,720 --> 00:23:48,920
但我知道小米真的是以前多次的颠复了一些

254
00:23:49,020 --> 00:23:51,540
家用的智能电器的市场

255
00:23:52,140 --> 00:23:55,820
我唯一的一个小米的产品是我家里的净水器

256
00:23:56,320 --> 00:23:58,920
就这个净水器的东西我以前是用了一个

257
00:23:58,920 --> 00:24:01,280
给企业做净水解决方案的一个

258
00:24:01,440 --> 00:24:02,480
是原来我们公司的

259
00:24:02,480 --> 00:24:04,240
然后他顺便给我家里装了一个

260
00:24:04,240 --> 00:24:05,600
然后一直用这个

261
00:24:05,900 --> 00:24:08,740
然后突然到有一天这一家的服务感觉有问题了

262
00:24:09,080 --> 00:24:14,180
就是上门给我换滤芯给我更新那个服务卡的那个人

263
00:24:14,340 --> 00:24:18,580
突然私底下微信联系我说哎你这个要换了

264
00:24:18,600 --> 00:24:22,200
我说哎以前不都是你们那个四零零什么的电话打

265
00:24:22,200 --> 00:24:25,640
他说说现在哎呀疫情之后我们这儿没管那么严了

266
00:24:25,640 --> 00:24:27,400
我们就可以做我觉得很奇怪

267
00:24:27,480 --> 00:24:30,080
然后后来我打电话去咨询了一下

268
00:24:30,080 --> 00:24:33,140
然后就听说哦这家出了很大的问题

269
00:24:33,380 --> 00:24:35,240
要么是倒了要么是被人收购了

270
00:24:35,240 --> 00:24:37,080
然后现在正在管理的混乱中

271
00:24:37,080 --> 00:24:39,440
我当时就立马下决定换

272
00:24:40,040 --> 00:24:43,040
用了七八年的一个牌子了啊

273
00:24:43,140 --> 00:24:45,800
然后我换什么上网一搜啊发现已经

274
00:24:45,880 --> 00:24:49,200
这七八年当中这个市场已经天翻地复了

275
00:24:49,200 --> 00:24:50,600
原因就是小米进去了

276
00:24:51,240 --> 00:24:52,900
啊小米做的净水器呢

277
00:24:52,900 --> 00:24:56,440
就首先把价格打了一个对折几乎

278
00:24:57,280 --> 00:24:58,740
就是同等水平的

279
00:24:58,740 --> 00:25:01,280
几乎它的成本价格就是一半左右

280
00:25:01,280 --> 00:25:04,220
第二呢服务的整个体系全变了

281
00:25:05,140 --> 00:25:09,840
就包括对c端对我们用户这一端怎么去注册

282
00:25:09,840 --> 00:25:12,680
怎么去自注式的去换利息等等等等

283
00:25:12,680 --> 00:25:13,980
全部都可以自己做了

284
00:25:14,480 --> 00:25:17,720
然后对各个分销商各个服务商的管理

285
00:25:17,720 --> 00:25:20,320
跟以前那套完全不一样就非常互联网化

286
00:25:20,740 --> 00:25:22,380
互联网化特点就很扁平

287
00:25:22,540 --> 00:25:25,940
就管理不会有那么多层级的分包啊什么

288
00:25:25,940 --> 00:25:28,580
其他都它整个服务就更容易去保持它的

289
00:25:28,820 --> 00:25:29,680
一个品质

290
00:25:30,180 --> 00:25:35,220
而这些东西就是很明显是对传统的家电啊

291
00:25:35,220 --> 00:25:37,420
服务行业啊是有很大冲击的

292
00:25:37,580 --> 00:25:43,740
那这次对造车啊这个其他的虽然也号称是互联网

293
00:25:43,740 --> 00:25:44,940
啊智能车等等

294
00:25:44,980 --> 00:25:46,940
但他们其实没有做过互联网产品

295
00:25:46,980 --> 00:25:49,340
也没有做过手机这样的消费电子产品

296
00:25:49,480 --> 00:25:51,480
所以小米这次入局还是很有意义的

297
00:25:51,840 --> 00:25:56,040
我其实原来以为或者希望它会做是更低端一点的

298
00:25:56,040 --> 00:25:59,320
结果这次它一下子就还是摆在一个比较高端的一个配置

299
00:25:59,320 --> 00:26:01,620
然后价格就打在一个比较亲民的

300
00:26:01,820 --> 00:26:03,620
这个其实是蛮需要勇气的

301
00:26:03,620 --> 00:26:08,460
因为二十万到三十万这个市场应该是智能车我觉得

302
00:26:08,780 --> 00:26:10,620
可能是竞争最激烈的一个市场

303
00:26:10,980 --> 00:26:15,420
当然好处是如果你赢了的话这个利润也空间会大一些

304
00:26:15,780 --> 00:26:19,220
不管怎么样吧反正我觉得值得期待一下

305
00:26:19,220 --> 00:26:21,980
等它第一批交车了看看反馈如何

306
00:26:22,460 --> 00:26:25,620
前面这几个新闻里面最后一个啊我们来说一说

307
00:26:25,820 --> 00:26:29,280
美国最近发生的那个撞桥的那个事件

308
00:26:29,620 --> 00:26:36,260
这个事儿很巧就是不久前刚刚我们国内也有一个影响比较大的一个撞桥的事儿

309
00:26:36,380 --> 00:26:42,060
就是广东那边有一个桥也是桥墩子被一个大船撞

310
00:26:42,660 --> 00:26:47,220
撞了之后导致那个桥墩上方的那一部分桥面就坍塌下来

311
00:26:47,780 --> 00:26:50,060
然后有一些车落水

312
00:26:50,720 --> 00:26:57,820
而运气比较差的是我们啊我们那个撞桥发生在白天一个桥上还挺多车的一个状态

313
00:26:57,820 --> 00:27:02,160
啊落水的车辆不少不幸遇难的人也不少

314
00:27:02,480 --> 00:27:07,160
那美国的运气比较好啊它这个撞桥发生在凌晨一两点钟

315
00:27:07,620 --> 00:27:09,560
啊所以它桥上几乎没什么人

316
00:27:10,320 --> 00:27:15,760
只有若干个施工的工人可能落水了然后有几辆车可能落水了

317
00:27:16,280 --> 00:27:20,080
但是从我们看到的视频的那个角度啊

318
00:27:21,220 --> 00:27:27,720
非常特别那个点就是它这个桥撞了这个桥墩之后从这个桥墩这里开始像连锁反应像东北楼牌一样

319
00:27:27,880 --> 00:27:30,520
整个桥就崩溃了就塌到水里去了

320
00:27:31,460 --> 00:27:34,360
广东的我们那个桥呢是柱子被撞了

321
00:27:34,480 --> 00:27:40,520
然后这个柱子上面它驮着的那一部分桥面掉下来而已别的部分都还是好的

322
00:27:40,760 --> 00:27:46,160
有人就在说美国人的桥的质量这么差以前他们老说我们质量差

323
00:27:46,480 --> 00:27:50,160
那现在轮到他们质量差了这个事你们怎么看

324
00:27:50,620 --> 00:27:53,620
我看到一些奇奇怪怪的讨论啊

325
00:27:53,860 --> 00:27:58,260
最神奇的一个讨论是说因为这个船上装的是中国的货物

326
00:27:59,060 --> 00:28:03,160
嗯这个这个选取的点也很震惊

327
00:28:03,680 --> 00:28:11,960
嗯就是美国人好像不知道怎么想的就反正都是跟中国有关所以都是怪中国就比较容易推脱自己的责任还是怎么样

328
00:28:12,560 --> 00:28:22,160
这个是一个比较神奇的点嗯还有还有就是看到就是他们在那里有有有专家在讨论怎么修复嘛

329
00:28:22,900 --> 00:28:26,060
感觉好像他们修起来也很难的

330
00:28:27,500 --> 00:28:33,700
行不是不是当年就是或者说不是现在我们这种激进强国说修就修了的那种事情

331
00:28:34,700 --> 00:28:50,700
对他们来说是一个很麻烦的问题都不知道怎么弄嗯之前有一张图在网上流传啊说是斯恩恩的报道上面说装满了中国货物的一艘船冲击了我们的桥

332
00:28:51,240 --> 00:28:56,240
但我后面看了一下那张图很有可能是有人别有用心地批出来的哦

333
00:28:56,880 --> 00:29:04,280
因为我仔细地找了斯恩恩包括美国的一些媒体都没有这样的报道这艘船呢他注册应该是新加坡的船

334
00:29:05,200 --> 00:29:10,920
然后上面的货物有没有中国的货物这个我还真不知道哎不排除啊很可能有啊

335
00:29:11,280 --> 00:29:20,120
然后船员绝大部分都是印度人可能印度的劳工相对便宜些啊这些家国际的这个航运公司的一家一个一个船

336
00:29:20,300 --> 00:29:22,860
确实很大是个巨巨大的一个那个湘船

337
00:29:24,540 --> 00:29:31,060
但那张图就是说中国货物那个我觉得应该是批的啊就是没有看到相关的信用

338
00:29:31,740 --> 00:29:40,740
OK然后这个事有两个点我想简单说一下一个就是这个桥啊本身还是挺有名气的

339
00:29:41,100 --> 00:29:48,820
它是巴爾蒂摩这个市的最主要的一个桥然后这个桥的名字呢叫弗朗西斯卡提

340
00:29:49,600 --> 00:29:59,200
这个弗朗西斯卡提呢是一个美国独立战争时期的一个名人啊也是参加独立战争的领导阶层里面的一个人

341
00:29:59,880 --> 00:30:06,240
然后他这个人写了美国国歌的歌词相当于我们田汉这个地位嗯

342
00:30:06,840 --> 00:30:14,680
然后以他的名字命名的这个桥垮了然后看到我们就国内有一些幸灾乐祸者说啊这个是美国国诈之词啊已经不太行

343
00:30:15,500 --> 00:30:23,860
但为什么这个桥一撞它就整个就垮了呢啊有人就解释为是一些非自然力量实际上呢这个事儿是可以解释的

344
00:30:24,500 --> 00:30:32,340
就是因为受家父的影响啊从小我就比较喜欢看各种各样的建筑和他们的那种力学结构的东西

345
00:30:32,860 --> 00:30:39,220
实际上它这个桥跟我们广东被撞那个桥是典型的两种完全不一样的桥

346
00:30:39,680 --> 00:30:44,800
我们在广东被撞那个桥呢它是混凝土结构的桥墩子

347
00:30:45,200 --> 00:30:52,600
然后上面是钢筋混凝土的那种航架所谓航架就是桥里面桥面的那个结构

348
00:30:53,080 --> 00:31:02,680
它是横着的一个结构嘛但是它必须里面有一些设计使得整个桥面上的承重啊能够传递到那些支撑物上面去

349
00:31:02,680 --> 00:31:09,880
不然的话整个桥面上承重不一样那你没有均匀地放到各个墩子上去的话那么它就很容易出问题

350
00:31:10,280 --> 00:31:14,040
所以那个航架的设计呢是很讲究的桥梁设计里面非常讲究的东西

351
00:31:14,480 --> 00:31:28,680
那我们那个呢就是非常稳定的混凝土每个混凝土的墩子承载自己上面的一个有点像梯子形的那种结构下面是墩子上面是个横梁这个横梁有一些力学设计使得它的那个承重啊是正好在我们需要的范围之内

352
00:31:28,680 --> 00:31:38,680
然后一个一个这样的梯形的结构就拼起来成了一座大桥这样的桥它的好处呢就是说它出任何问题只局限在那个梯形的航架里面

353
00:31:39,340 --> 00:31:48,380
你哪怕整个东西废了那炸弹炸了也只会影响到那一个梯形结构其他部分还是好的那要修你也只用重新修这一部分就可以

354
00:31:48,880 --> 00:31:55,880
但它的坏处呢就是用料会比较多了它因为会钢筋混凝土的结构而且会比较厚重啊等等就是施工难度也会大一点

355
00:31:56,880 --> 00:32:24,680
那美国人呢是特别特别偏爱那种纯钢筋结构的东西的嗯像它这个桥也是它这个桥呢是一个叫连续航架结构它就是说整个桥面啊都是用钢筋把它串在一起的然后整个桥面呢是连成一体的一个连续航架就它整个受力的这个分析是整座桥三百多米跨度的一个桥它是连续的受力

356
00:32:24,680 --> 00:32:54,680
然后整个桥的稳定它是依赖于整个结构的一种巧妙的设计也就是说如果一个点上破坏掉的话它整个桥的受力都会不均衡然后它就会垮掉就得像个多米诺骨牌那它的好处呢就是比较省然后可以比较精简整个结构会很精简但是坏处就是一旦有一个点破坏掉了那么整个都会受到联动的反应它没有把风险隔离开来

357
00:32:54,680 --> 00:33:24,680
我们在那个视频里可以看得非常清楚啊就是当那个支撑的支柱被撞然后出现问题了那么跟它相连的那两部分桥面立刻就塌下来了然后因为它是通过钢筋连着的整个桥面所有东西就被两边也就被拉扯过来然后很快引起一个连锁反应就它像一个扑克牌搭的一个结构一样平时承重什么都很好但是一旦一个地方破坏掉它整个点就破坏掉了所以

358
00:33:24,680 --> 00:33:54,680
我那边也有一些媒体在有一些这个工程方面专家写一些文章啊就说这个东西本身设计上你倒不能说它不好因为他就没想过这事儿他就认为这个应该结构是稳定的但是也有人提出来说既然是这样一种结构的而且你这个能够走那么大的船那你总得防一防它撞吧所以这一块怎么能够去有一些防护就是你明知道你这个东西是有这样的结构上的一个设计的特点

359
00:33:54,680 --> 00:34:24,680
船来来回回地走那么为什么没有做一些防护性的屏障比如说防撞垫啊或者那种遇到撞击就会让它划开的偏移开的那种专门的那种棱角的设计都没有啊所以这个反正就体现了他们那边的一些建筑上的一些特色了但确实就有这样的一个问题这座桥还挺出名的当年是我们有一个什么的一个重工的就是那个港口的那个大吊车

360
00:34:24,680 --> 00:34:54,680
就是巴黎摩港采购了中国的一批那个大车这个大车的高度很高很高它没有办法穿过这座桥当时就认为这是工程化难题后来我们这边的工程员设计了一个结构就是在一个船上面把我们那些很高的吊车怎么把它斜过来放然后把那个什么很长的壁就把它摆平了就正好能够从这个桥下面通过这个当时还引起过一点小的轰动啊我最早看那个新闻就有点联想说

361
00:34:54,680 --> 00:34:55,680
后来一查果然就是这个桥结果很不幸之前运过去的我们那些吊装的机器啊现在还在巴黎摩港还在工作但这座桥就垮了这种桥一旦垮掉啊我的认知啊是不存在修这个问题啊就是没法修它基本上就是清理清理重建的概念了啊所以它这个现象跟我们那个广东那个桥的状不一样是就是因为它设计结构就不一样

362
00:35:24,680 --> 00:35:33,480
会不会是因为当年的那个桥在设计的时候海上开的船都没那么高的

363
00:35:33,480 --> 00:35:45,280
这个桥是七几年建的一九七几年我觉得不是这个问题啊对啊不是这个应该不是因为那个时候早就有了而且巴黎摩港是很著名的港口啊

364
00:35:45,280 --> 00:35:46,280
就是它是一个吞吐量也不小的一个港口它应该是很实现的嗯那想不通这个我觉得美国人有的时候他的设计可能没有考虑极端情况他们那个地方真的太平时间太久了之前有个著名的案例就是九二一嗯九二一撞的两栋大楼为什么会出现那种状况其实也跟那个楼的结构是有关系的两栋楼都是钢筋结构就是说白就是它是用一组钢筋组成的一个钢筋架子然后在那架子外面糊上玻璃

365
00:36:15,280 --> 00:36:45,280
这个钢筋结构它跟钢筋混凝土结构的最大区别就在于钢筋受热之后它就弯曲然后就会导致整个结构就会失衡跟这个桥几乎是一样一样的概念它某个点失衡之后它就会发生扭曲然后就整个钢架结构就垮下来了这个跟我们用钢筋混凝土做的楼是不一样钢筋混凝土即使你那个混凝土里面的钢筋被融了那些剩下的混凝土像一些大的砖块一样还是会有一定的支撑力

366
00:36:45,280 --> 00:37:15,280
硬能力的它不会从上一下子垮下来所以它好看而且省材料而且怎么怎么样它就设计成这样它从来没想过会被撞或者被怎么怎么样就是它确实我我的感觉啊就是还是太平的时间长了啊就是没有这方面的意识没那么强好像嗯好那下面我们来聊我们今天三个主要的话题啊其实有两个都是我们听友群里面问的问题啊第一个是关于国产数据库的

367
00:37:15,280 --> 00:37:45,280
状况我们听友群里不止一次有朋友提过说我们现在国产的关系数据库啊麦西扣这些的替代品到底做的咋样有没有能用的这个问题其实问了不止一次了那我们今天就来简单地说一说吧其实回答这个听友的问题非常容易啊就是有一个网站叫墨天伦啊墨就是墨水的墨天就是天地的天伦就是伦子的伦啊墨天伦

368
00:37:45,280 --> 00:38:15,280
这个网站实际上是我们看到的专门评测和追踪我们国内的数据库的一个网站上面对我们国内的主流的数据库有大量的详细的测评我这些测评有关于纯技术方面的一些数据吞吐量啊数据处理的能力啊功能啊等等等等啊也有一些偏市场偏其他方面的比如说它的商业模式啊专利术啊

369
00:38:15,280 --> 00:38:45,280
案例术啊有没有取得哪些关键资质啊通通都有所以其实如果你想了解国产数据库它现在是什么状况最值得关注有哪些其实上这个网站去看就可以了所以这个问题比较容易回答但是呢这个问题既然我们去聊它呢也顺便可以聊一聊更多一些东西啊就是因为王老师啊我们在学校里面也有一些认识的人也是在国内的数据库这个领域比较长时间比较熟悉的所以这里面我们今天可以稍微的

370
00:38:45,280 --> 00:39:15,280
去说一下就是目前这个大概是个什么样的状态其实在国内排在前列的就那几家是比较确定的那比如欧星贝斯涛拉的币华为的这个欧芬高斯泰的币这些都是国内的一些大厂或者做数据库很长时间的专业的厂商做了挺多年的就事实证明它持续投入也就会有一些回报了包括它在技术上的一些指标包括它在国内的应用案例都会比较领先

371
00:39:15,280 --> 00:39:45,280
一些那关于这方面恩你们两位有什么要说的吧那我现在说一下吧嗯对因为我们不是数据学院嘛对数据学院的其实恩我们的整个班底其实就是数据库领域对所以说呢我们和国家自主的一些数据库的一些厂商包括刚才李老师所提到的对几乎都有一些合作对那他们的一些开发人员和我们的一些老师

372
00:39:45,280 --> 00:40:15,280
还有同学们对其实有非常密切的一些项目上的一些合作对那我相信呢甚至这些数据库里面有一部分的功能可能就是我们老师同学本身也会贡献在里面去的对甚至现在国家还有一个特色软件的一个恩博士生培养项目对像我们和那个泰迪迪其实就是这个项目的一个合作对我们会每年为他们的数据库的工作

373
00:40:15,280 --> 00:40:45,280
居民们去配上我们的博士生对去联合开发对然后呢据我们所知其实这些还在头部的这些主流的数据库啊恩应该还是功能上还有性能上应该还是不错的对因为包括像我们学院其实还有一个那个姓张的老师他是专门做那个数据库评测的就是把一些国际上知名的像TPC啊类似这样的一些恩benchmark

374
00:40:45,280 --> 00:41:15,280
这些恩性能上的一些评测对一方面呢能够因为我们是高校嘛相对是一个中立的对能够有一些恩中立的这种全面的一些评测第二个呢其实评测完了以后呢更重要的是给这些数据库厂商提供一个优化的一些建议对然后呢再比如说刚才提到了像泡沫地币我们学院也有老师专门联合他们去写过一些教材对其实现在在国内这些

375
00:41:15,280 --> 00:41:20,340
数据库其实还恩在高校里面还是挺受关注

376
00:41:20,340 --> 00:41:50,340
并且呢也是比较积极和学校一些数据库的一些课程去做联合对那像我们以前讲数据库的课程可能是会用到像oracle呀sigsurfer呀对现在的很多基本上都会转换成包括欧星贝斯啊泰迪比亚这些厂商的一些数据库对那引导我们的一些老师学生更多地去用我们自己的数据库对然后呢我们在我们的一些科研场景里面我们还会去部署这些

377
00:41:50,340 --> 00:42:20,340
数据库本身也会去用这些数据库来去做一些数据上的一些分析处理的一些嗯事情对比如说我们自己有水冷在线对我们也会用这些数据库去做一些数据上的一些恩处理和必需工作对一方面也是和这些厂商算是恩合作第二个就是恩用我们自己国产的对能够恩为他们去提供一些发展对恩然后我们也知道就是

378
00:42:20,340 --> 00:42:50,340
像这些数据库啊其实在国内的很多的一些场景里面其实还是挺落地的对比如说像阿里的他们自己本身能够职职他们都是恩像创十一呀包括一些恩电商啊一些比较关键的一些恩业务场景都是从这里面跑出来的对然后呢去服务包括政府呀对包括一些恩金融证券呀这些行业里面其实还是挺多的对因为我们也会接受

379
00:42:50,340 --> 00:43:20,340
恩他们带给我们一些培训对因为我是做一些数据库的一些教育对给这些银行呀证券呀去做一些相关数据库的一些培训对这个其实也是可以看得到这样的话我们也知道一些相关的一些用户对总的来说呢我是觉得就是恩现在国产的这个数据化和我们当年上学时候的这种现状差别其实已经非常大了对现在其实即便是国产的其实

380
00:43:20,340 --> 00:43:50,340
它的选择性也挺多而且呢我们现在和他们在交的时候发现恩现在数据库的厂商其实还挺卷的精神非常的激烈对甚至在一些招标的场合里面甚至还会有一些恩竞价呀这方面的一些一些好玩的一些事情对我先分享这些嗯我今天正好还看到一个就我们有一个信息安全测评中心啊

381
00:43:50,340 --> 00:44:20,340
的一个结果公告安全可靠测评的这个事儿说了挺久了它主要是国家信息安全和保密那条线上的一个事儿那我看它出来的这个测评的报告里面主要复盖了三个方面一个是CPU一个操系统一个是集中式数据库实际上它整个这个测评的结果不论CPU操系统还是数据库都只有国内的公司

382
00:44:20,340 --> 00:44:50,340
和国外的公司和产品参与到这个测评里我怀疑是根本测都不测的所以我也在问就你们感觉会不会未来有一个趋势啊就是比如我们国内的至少政府部门和一些国家认为的要害部门这三大劲儿就可能会追求一个完全国产化这是这是一个已经是一个非常明显的趋势了整个的信创安可市场

383
00:44:50,340 --> 00:44:53,340
是一个非常大的蛋糕

384
00:44:53,340 --> 00:45:00,340
然后大家都拼命的往这上面挤我我理解的国家战略就是我们一定要有自己的

385
00:45:00,340 --> 00:45:04,340
一定不能够被什么什么只能够用其他外面的

386
00:45:04,340 --> 00:45:09,340
因为因为这个像光科技啊这种什么那种CAD啊还有那种什么

387
00:45:09,340 --> 00:45:13,340
还有一个是专门做科学计算的那个啥

388
00:45:13,340 --> 00:45:19,340
嗯这是卖CAD吗还卖新媒体啊这些对就被这些东西给吓坏了说

389
00:45:19,340 --> 00:45:23,340
说是任何一个领域如果别人不让我们用我们就没法用的话

390
00:45:23,340 --> 00:45:31,340
这个是很吓人的事情但是我我了解到的另外一个层面的话呢嗯是说泥沙俱下

391
00:45:31,340 --> 00:45:48,340
嗯就是说有很多混子混进来对对就是我我们我们可以想象就是说有一些关键场景没有谁敢用那种混混的东西那么这种关键场景下面锻炼出来的数据库或者说其他的系统

392
00:45:48,340 --> 00:45:56,340
我认为是可信的比如说银行那种高频的交易的场景或者说这种大大容量的海量数据的场景

393
00:45:56,340 --> 00:46:06,340
它要替换成国产数据库一定是嗯经过考验的否则银行数据不可能说业务就中断掉的太吓人了

394
00:46:06,340 --> 00:46:15,340
那另外一方面有很多的政府所谓的替换成国产数据库它其实没那么大的访问量

395
00:46:15,340 --> 00:46:27,340
它那个数据库随便丢个脉携口也能搞定随便丢个脾气也能搞定没区别当然当然就是说换成国产的感觉上从上到下都有一个说法

396
00:46:27,340 --> 00:46:38,340
这其实是一个巨大的市场同时也是一个巨大的一个非常好容易吃下来的一块东西这个地方的这个泥沙俱下就很难避免了

397
00:46:38,340 --> 00:47:05,340
我觉得是要区分两种类型的新创的应用领域一类是真正是吃紧的需要技术实力才能够啃得动的市场另外一类就是那种其实没啥要紧的无所谓随便弄弄也能够撑下来的一个业务场景这两类都是有可能的嗯我觉得可能要看具体它的比如说我举例子啊有一些系统

398
00:47:05,340 --> 00:47:35,340
它在信息安全上是高度敏感的但是它在业务挑战上是几乎没有的那这种就赶紧换呀本身不像银行电信那样的非常高的业务标准但是呢它上面跑的数据本身呢又很敏感举例子比如说我们军队还有我们国家安全系统里面用的一些东西那些东西的终端用户没多少啊嗯所以它不会有很高的要求它只要保证数据安全不要丢

399
00:47:35,340 --> 00:48:05,340
然后访问上面的可信度比较高一些信息安全的角度保障性比较高软件本身的可控比如说它不会有什么后门儿那这些东西的话可能就适合赶紧去换掉它这是一类我觉得是比较适合的那还有一类呢就是它本身非常非常重要比如像我们的什么电力的系统啊交通的系统啊甚至像刚才说的银行电信这样的系统它是本身技术上要求就比较高

400
00:48:05,340 --> 00:48:35,340
它又是国之重器就是根本你不能承受它出问题的那这种的话呢从某种意义上来讲它也得做好相应的准备那么它可以放在后面一部分当前面这些试的没什么问题了那后面可以有选择的挑一些来尝试因为我现在觉得就是像之前的一些软件的禁用啊之类的这样的一些就美国卡我们脖子的事情啊已经不是吓不吓人的问题了

401
00:48:35,340 --> 00:49:05,340
是个很现实的威胁了已经嗯你想美国商务部长也在说这种话他说啊中国人一个牛在美国跑的所有的中国汽车都会停下来那我合理怀疑他们就干过或者打算这么干那如果真的发生这种事情那咋办所以这个后手还真得有但是确实不太可能像运动式的一下子就全换了那怎么换那就得需要一个时间这个时间就可能得分层去做

402
00:49:05,340 --> 00:49:35,340
看了一下现在排在最前面的比如欧芬高斯他是皮基亚波斯格瑞那个发展而来的欧星贝斯这好像是自己从头做的嗯比如说内衡开始存字眼然后泰迪比波拉迪比因为另外两个我实在不熟悉啊但是像泡迪比跟欧芬高斯这两个还真的是在互联网或者是在大的企业应用里面是有一些案例的所以他们并不是完全不能去挑战

403
00:49:35,340 --> 00:50:05,340
刚才说的那样的一些比较有挑战的场景但关键是他得有这个机会去试你像银行的大的系统电信的大的系统如果压根就不给他们机会试的话那他永远答不到所以这里边也有一个信用机还是信用单的问题啊我记得好像是有一些这种关键领域已经早就是被强令要换掉了就虽然换的时候很痛苦但是换完了也扛下来了也就也就OK了我理解是这样的一种情况好像欧星贝斯是比较这个看重金融和银行

404
00:50:05,340 --> 00:50:11,100
的市场的但我不知道他们现在做的咋样就是说是不是已经打进去有一些成果了

405
00:50:11,580 --> 00:50:35,260
嗯对的肯定是有一些成果了对因为我们应该还参与过一些银行的而且呢他们的做法呢其实也是也是循序渐进的就是刚才提到的他不是肯定不是一个马上就替换其实先从一些非关键业务替换起对对银行其实是一个特别保守的一个地方他一定不会去

406
00:50:35,260 --> 00:51:05,260
让你从一些核心业务对你先从非关键业务对运行的好对他就会陆续的来来去看去评估对这个是一个挺重要的对因为我们知道像欧星贝斯呢一开始其实是在阿里那边吧他是后来才那个蚂蚁嗯蚂蚁对蚂蚁后来才那个独立出来的对那也是嗯因为那确实是有了一些实际的案例后大家对欧星贝斯呢

407
00:51:05,260 --> 00:51:35,260
是非常有信心的对那才让他独立出来对独立出来后呢其实就意味着嗯一开始最开始其实还是可以靠蚂蚁的一些金融上的一些嗯资源可以去做对那现在其实完全都是需要自己去做一些业务去打一些单对这个呢其实对一个数据库的历练其实还是挺重要的一个过程嗯因为欧星贝斯是最早支付宝那个体系

408
00:51:35,260 --> 00:52:05,260
来的嘛所以他对金融这一块多少他是有一些近水楼台的感觉啊就关系也比较好所以他们可能是有机会在一些银行相关的系统里面去试的当然一开始就去替换银行的核心系统是不现实的银行真的是所有主要行业里面最保守的一个啊就是银行以前他最核心的系统基本上都是 IBM 的那个封闭体系啊就 IBM 他在很早以前就是从最早发明计算机开始

409
00:52:05,260 --> 00:52:35,260
IBM 就有一个体系是他完全封闭的不公开的从芯片的那个指令集到他的操作系统到他的数据库到他的所有的编程语言包括数据库的包括应用系统的编程语言全都是 IBM独特的一套那样东西学的人都很少成了一个很独特的生态环境啊这个控制了一些核心的领域很长时间然后到八九十年代之后IBM才开始发展两套系统就是一套是这种一套是 IBM

410
00:52:35,260 --> 00:53:05,260
以 Unix为基础搞的一套相对开放的体系最近这些年才开始慢慢的那个体系就相对站的会更优一点零零年代国内的绝大部分的银行的核心系统还全都是 IBM完全垄断的后面最近这些年可能好一点啊很多开始用比如说 Oracle啊就在他们看来 Oracle已经算开放的系统至少不是一个厂家垄断所有的东西了啊他们甚至像 Mexico这种可能都不太会去试啊就

411
00:53:05,260 --> 00:53:35,260
未来怎么去适应对他们来讲可能本身也是一个挑战好那这个关于数据库的话题我们就先说这些吧啊反正有兴趣的话大家可以去看一看摩天轮上的这些评测啊也有一些案例的说明但这案例说明我觉得可能比较多是一些偏广告性质的但是至少有这样一些地方用了这是你可以查得到的

412
00:53:35,260 --> 00:53:38,860
有兴趣的可以去参考一下

413
00:53:38,860 --> 00:53:47,060
好我们来看今天的第二个这是我们一直早就在说想聊的东西就是关于编成语言的东西啊

414
00:53:47,060 --> 00:53:51,340
我们其实经常聊编成语言东西但是东西是属于聊不完的

415
00:53:51,340 --> 00:54:01,580
所以我们决定把它变成一个固定的不叫固定的就是一个随机更新的专栏就跟我们那个民资建委一样编成语言的乱谈

416
00:54:01,580 --> 00:54:07,020
那这一次我们要聊那正好也是挺有群里有同学问了几个问题

417
00:54:07,020 --> 00:54:13,700
哎结果都是跟同一个编成语言有关的这个语言就是这两年非常非常火的RUST啊

418
00:54:14,900 --> 00:54:18,420
所以我们今天花点时间来聊这个语言的一些情况

419
00:54:18,420 --> 00:54:27,140
那关于RUST有两个话题是我们听我们问的比较多的第一个就是它未来的发展和应用的前景

420
00:54:28,060 --> 00:54:37,260
这个典型的表现形式就是啊RUST会不会替代叉叉语言啊啊就是这个格式的问题会特别多

421
00:54:37,260 --> 00:54:46,340
而且前不久不是美国政府也发了一个很奇葩的文件啊当然它不是行政命令啊它是一个号召性的

422
00:54:46,340 --> 00:54:51,460
就是呼吁大家不要再使用私家家了啊私家家场景都去用RUST

423
00:54:51,460 --> 00:54:55,660
从白宫的角度发这么个文件真的蛮奇葩的啊

424
00:54:56,380 --> 00:55:04,700
所以有人就在说啊RUST会不会替代这个替代那个包括替代私家家替代假网啊替代甚至有人问替代加script啊

425
00:55:04,700 --> 00:55:16,460
那因为它现在也在前端这个社区里面被提到的频度越来越高啊所以关于这个我们今天来聊一聊啊对RUST怎么看

426
00:55:16,460 --> 00:55:23,980
我我先报一个八卦吧也挺好玩的就是前两天不是在深圳吗参加奥斯普三米特

427
00:55:24,380 --> 00:55:30,540
嗯然后呢呃其中有一个演讲是我很熟的一个朋友王老师也认认识叫谭中义

428
00:55:30,540 --> 00:55:46,860
谭中义呢在那个演讲里面讲到这个开源软件如何提升研发团队的效率什么什么的但是呢他的意思谭中义的意思就是说啊要注意啊不是说只要用了开源软件就会提高研发团队的效率比如说你要有一些纪律

429
00:55:46,860 --> 00:55:53,420
首先要避免因为研发人员的个人偏好而使用小众的不成熟的开源软件

430
00:55:53,420 --> 00:55:55,260
例如若斯特

431
00:55:55,260 --> 00:56:02,060
呵呵呵嗯然后然后这件事情呢激怒了我的另外一个朋友叫马全毅

432
00:56:02,060 --> 00:56:18,780
呵呵马全毅是国内可能到目前为止推若斯特推得最卖力的一个朋友他还成立了一个若斯特的应该是W三基金W三的基础设施的基金会底层也是用若斯特

433
00:56:18,780 --> 00:56:29,500
而且在他昨天还专门写了篇文章专门来批驳说要不要选择小众的不成熟的若斯特作为公司的技术站什么什么的

434
00:56:29,500 --> 00:56:48,220
但他那篇文章里面呢实在是忍不住他说了一段话又引起了我的反对他的意思就是说啊这个在国内的大多数团队都缺乏一个具有商业意识财务经验技术背景运营经验和大局观良好的产品经理括号VP

435
00:56:48,940 --> 00:56:55,340
对于产品思考的缺乏造成技术决策和产品设计的混乱什么什么什么的

436
00:56:56,300 --> 00:57:00,700
然后我就我就懵了我说这这锅也能甩到产品经理头上吗

437
00:57:01,740 --> 00:57:07,340
对好像有若斯特跟产品经理有啥关系啊对然后我就专门转了一帖我就说

438
00:57:08,300 --> 00:57:12,460
因为我原来也做过产品经理嘛虽然我也做过技术负责人但是我也做过产品经理

439
00:57:13,100 --> 00:57:19,260
说产品经理最怕的就是研发团队跟他拍胸脯啊说这技术很强大能够大幅度提升研发效率

440
00:57:19,820 --> 00:57:24,300
但一会儿又跟产品经理说这个技术太新了什么某某功能没法实现

441
00:57:25,020 --> 00:57:28,780
嗯如果一个产品经理遇到这样的技术团队就肯定懵啊

442
00:57:29,500 --> 00:57:36,860
一会儿又说很强一会儿又说不行这咋办那么这个其实就回到我认同的谭中义的看法

443
00:57:37,500 --> 00:57:45,420
就是小众的不成熟的生态不完善的编程语言虽然很新很强大编译速度超快说那个叫啥

444
00:57:46,460 --> 00:57:51,980
那个像某种那样的语言号称要比拍摄快多少倍九万倍又怎么样呢你敢用

445
00:57:53,020 --> 00:58:01,980
对就不成熟啊对所以所以我我理解马全一马道长之所以写这篇完全就是因为他的立场原因

446
00:58:02,700 --> 00:58:07,260
因为他是若特的推动者他是若特的国内的最重要的推手

447
00:58:07,580 --> 00:58:11,500
就像你跟许思伟说勾勾浪不行许思伟肯定要跳起来一样的道理

448
00:58:12,220 --> 00:58:17,900
就是这个感觉嗯对其实像我们同学们聊这些语言的也挺多的

449
00:58:18,700 --> 00:58:22,300
对我记得也是有一年的中国太原会上面

450
00:58:22,860 --> 00:58:31,420
对也是有一群因为我们当时把那个嗯各个学校的一些开源社团的一些负责的人的同学

451
00:58:31,980 --> 00:58:38,300
请过来了对清华的呀中科院的呀对还有像同济的呀对都有

452
00:58:38,860 --> 00:58:44,060
对那那些小朋友当时碰到一起就也是特别喜欢聊语言

453
00:58:44,700 --> 00:58:53,180
而且呢嗯明显的就是属于那种越是小众的呵呵越是一些新的那聊得可开心了

454
00:58:53,900 --> 00:58:56,940
好玩儿一些对各种各新新的玩法

455
00:58:57,260 --> 00:59:03,260
对然后呢特别派嗯上头的就是那些传统的语言

456
00:59:03,740 --> 00:59:09,740
对那他们可以去炫技对这是我们学校的很多小朋友的一个很重要的点

457
00:59:10,140 --> 00:59:14,780
对然后呢其实刚才也提到了一个数据库厂商就是那个拼开发嘛

458
00:59:15,260 --> 00:59:24,140
嗯他们其实也是嗯当时是为了我我听说也是为了招一些优秀的开发者

459
00:59:24,140 --> 00:59:28,780
对然后呢有意识地去使用了一些新的元向购啊这些东西

460
00:59:29,340 --> 00:59:38,140
对去做他们的一些模块上的一些开发对然后呢通过这种方式去吸引一些开发人员去加入到他们

461
00:59:38,860 --> 00:59:47,660
对那其实呢也是花了牺牲了一些一些所谓的一些成熟度对也是在这一块其实

462
00:59:48,060 --> 00:59:53,260
嗯化的打磨了很少对因为像嗯数据库里面的其实也是有不同的一些风格

463
00:59:53,660 --> 01:00:05,740
对你说这个究竟效果怎么样对其实我相信只有那些真正实践过的嗯一些团队其实他们可能内心的一些感受会更多

464
01:00:06,060 --> 01:00:12,060
对但是呢肯定是会付出很多的一些一些代价的对就像庄老师刚刚所提到的

465
01:00:12,700 --> 01:00:22,460
在落地的时候虽然一时酷对吧但是你真正特别是像数据库这一种它又需要这种非常具有的稳定性和一些安全性

466
01:00:22,780 --> 01:00:25,020
这个呢需要做一些平衡吧

467
01:00:25,660 --> 01:00:34,620
若斯的这个语言怎么说呢就是说新也新说不新也不新它从传出来就动静也有二十年了

468
01:00:35,260 --> 01:00:41,340
但是它的第一个稳定的正式版本一点零的发布是二零一五年

469
01:00:41,660 --> 01:00:43,180
那确实还是比较新的

470
01:00:44,860 --> 01:00:49,740
关于若斯这个语言因为它比较新嘛所以有些同学可能会

471
01:00:50,060 --> 01:00:54,700
用得深入一点有的可能就听外面说的会比较多

472
01:00:55,580 --> 01:01:03,980
那我给大家的一些建议啊就是类似这种非常分色的技术啊一定要自己去试一试不要听别人说

473
01:01:04,780 --> 01:01:12,940
我在我的职业生涯里看过太多的新技术被他的狂热的爱好者吹得天花乱坠

474
01:01:13,420 --> 01:01:21,820
也有很多技术它实际上擅长的事情和广为人所知的事情并不一定是完全重合的

475
01:01:22,380 --> 01:01:26,620
所以你一定要自己去体会一下才会有比较好的一个感觉

476
01:01:27,340 --> 01:01:32,940
若斯这个语言呢我说说我自己的体会吧首先呢它是最早是摩贼拉弄出来的嘛

477
01:01:33,420 --> 01:01:37,740
摩贼拉的背景是世界上的第一个浏览器Netscape

478
01:01:38,380 --> 01:01:51,500
那一波人在浏览器大战输给微软之后当然输得我觉得是挺冤的啊就是微软利用它的操行垄断一个很烂很烂的爱意的浏览器把一个挺好的Netscape那些也干掉了

479
01:01:52,060 --> 01:01:57,420
嗯然后他们不服气然后出来做了一个开源的Foundation就是摩贼拉

480
01:01:57,900 --> 01:02:06,620
然后摩贼拉一直在做开源的浏览器啊在Chrome出来之前它是最能够跟微软抗衡的浏览器的产品

481
01:02:06,620 --> 01:02:32,540
但是苹果买了webkit然后来引起了谷歌的注意又投入很多去做Chrome的之后那么这块的发展比摩贼拉快啊虽然摩贼拉一直在技术上是非常不错的但是在推广各方面它确实前面好不容易打出一点名气啊然后突然又被Chrome这些干了一把然后所以它一直都混得不是特别好但是它对整个web的生态影响力一直都是有的

482
01:02:33,180 --> 01:02:45,100
所以他当时去开发Rust他的目标其实是很确定的就是他觉得整个web前端是已经越来越像一个操作系统

483
01:02:45,580 --> 01:02:59,180
就是我们现在可以在浏览器里面做的事情跟我们在操系统传统意义上操系统做的事情进行越来越像里面要渲染整个页面渲染页面的时候现在都是采用GPU渲染的方式

484
01:02:59,180 --> 01:03:15,820
啊跟绘制一个屏幕桌面其实是类似的技术啊然后在里面运行了一个虚拟机这个虚拟机可以运行加script代码啊就像我们的Windows上面可以软c牙牙鞋代码软夹娃鞋代码类似

485
01:03:15,820 --> 01:03:20,380
所以它实际上浏览器现在已经成为一个雅凑系统的概念

486
01:03:20,380 --> 01:03:28,220
所以他觉得这个非常重要所以需要用一个很强的技术的base来构建浏览器的整个生态

487
01:03:28,220 --> 01:03:37,420
然后他们就觉得啊思压加这个有很多隐患啊其中最为人诟病的当然就是指贞啊各方面带来的一些内存管理上的问题

488
01:03:37,420 --> 01:03:53,980
嗯还有他们认为的开发效率的问题所以出于这个角度来讲他们需要一个功能很全面很强大但同时呢又能够比较好的控制它的产品代码质量的这样的一个全新的语言

489
01:03:53,980 --> 01:04:04,540
所以他们选择了包括像静态的啊包括像这种强类型的这样的一些特征是有这样的一些出发点

490
01:04:04,540 --> 01:04:12,300
但是又因为它是Mozilla这样的一个体系孕育出来的技术所以它不可避免地跟web的前端有很多的关联

491
01:04:12,300 --> 01:04:20,140
但这个关联呢很容易产生误解我就以我们在我们听友群里聊到的一些误解来做例子

492
01:04:20,140 --> 01:04:31,180
比如说现在RUST有一个很热门的一个应用场景就是用RUST重写一些对性能要求比较高的命令行工具

493
01:04:31,180 --> 01:04:49,660
啊这个五花八门什么样都有嗯那其中有一个领域就是很多前端框架它会用到的一些命令行工具比如说打包啦比如说预编译啦还有就是本地和远端的包的依赖管理啦这样些东西以前那些前端的

494
01:04:49,660 --> 01:05:02,140
比如说MPM这样的工具本身的结构就设计的有一些问题啊包括包依赖的管理一直都是一个很大的隐患啊以前还出过一些很离谱的事情之前我们也聊过的

495
01:05:02,140 --> 01:05:18,140
就是有人把这个MPM的主仓库里面的一个很核心的小工具删掉了一个小库删掉了然后一堆依赖于它的全都出毛病就类似这样的问题一直都有啊前端的这样的有毛病的工具还真不少

496
01:05:18,140 --> 01:05:48,140
那现在很流行就是把一些前端命行工具用RUST重写啊他们甚至专门发明了词秀化啊就是某某工具原来是用加Script写的啊现在我们已经把它秀化就是重新用RUST写过了但这个事儿跟前端的编程其实关系不大它本质上是一种生产力工具而是生产工具呢它是比较偏命令行的然后它需要跟大量的文件打交道啊对性能啊要求比较高那这个的话呢确实挺适合

497
01:05:48,140 --> 01:06:18,140
RUST这是一类还有一类呢就是RUST也可以对接WSM就是WebAssemblyWebAssembly呢也是摩赛拉搞出来的一个技术这个技术的本意是什么呢还是回到刚才说的这个态度就是认为浏览器是一个雅操作系统那这个操作系统上面只能够软加Script写东西这个未免太糟糕了啊加速本身并不是一个特别优秀的编程语言

498
01:06:18,140 --> 01:06:48,140
不是所有人都会它那么有没有一种办法就像真的操作系统一样我们可以在浏览器的那个容器里面软任何编程语言写东西那这个呢就催生了WebAssembly这个技术这个技术本质上呢它是一个二进制的中间代码格式就是这个格式呢可以软在浏览器里面的虚拟机上而这个格式呢又可以从任何你所熟悉的

499
01:06:48,140 --> 01:07:18,140
编程语言编译而来就是你可以用你喜欢的编程语言去写你想写的代码然后把它编译成WebAssembly这个名字实际上已经暗示了它就好像是浏览器里的汇编代码它叫WebAssembly嘛对吧Assembly就是汇编那所以就是浏览器里面的汇编代码实际上就是浏览器里的一个自解码或者是一个二进制的执行文件格式那这个当然是一个很通用的而且语言中立的

500
01:07:18,140 --> 01:07:48,140
一个体系原则上讲这个体系本身就决定了它其实不care你原来用什么语言去写借助现代化的编译体系框架比如像LVM这样的一些技术实际上现行的优秀的大家喜欢的流行的编程语言都可以被编译成WebAssembly那也出现了一些语言它就是专门针对WebAssembly去优化的比如之前我们介绍过的国产编程语言Moonbit

501
01:07:48,140 --> 01:07:53,580
它就是专门设计为跑在WebAssembly的这个环境下的

502
01:07:53,580 --> 01:07:59,180
那以后他就希望它是一个云原生的一个语言可以在浏览器里面做任何事情的

503
01:07:59,180 --> 01:08:05,100
浏览器里面的Server端客户端都可以用这个Moonbit来写就类似这样的也有

504
01:08:05,100 --> 01:08:11,420
那若是能干这个事那当然也可以但是它是不是最好的呢其实没有最好不最好

505
01:08:11,420 --> 01:08:18,060
你习惯的比如说我习惯用C那我就用C来写写完编译成这个WS

506
01:08:18,060 --> 01:08:23,180
啊这就可以了那我原来喜欢RUST我就把它编译成WS那都可以

507
01:08:23,180 --> 01:08:30,620
所以这个本质上没有大的问题啊就是还是看你这个语言本身是不是已经比较多人在用

508
01:08:30,620 --> 01:08:37,500
那么在建筑它对WebAssembly的支持它可以拿过来去乱在浏览器里面

509
01:08:37,500 --> 01:08:45,900
当然我们使用WebAssembly的时候有的时候并不是我刚才说的语言偏好的问题而是出于性能啊或者其他的一些考虑

510
01:08:46,460 --> 01:08:53,100
比如说有的时候需要在网页上做一些非常消耗很大的一些特效啊之类的一些东西

511
01:08:53,100 --> 01:09:00,060
那么这东西的话用传统的家属可能效率比较低或者比较难优化那么用传统的像C++可能比较容易做到

512
01:09:00,060 --> 01:09:05,340
那RUST是不是可以替代这个地方呢那就变成另外一个问题了就是RUST能不能替代C的问题C++的问题

513
01:09:05,340 --> 01:09:13,580
那这个问题呢就我个人的观点是这样就是有一些语言比如说像C语言你是挺难替代的

514
01:09:13,580 --> 01:09:20,540
因为C语言目前在整个生态环境里扮演的是一个高级的汇编语言的作用

515
01:09:20,540 --> 01:09:35,980
就是我想写一些跟汇编一样快的东西我必须要去做这个事情比如它是用在嵌入式芯片或者嵌入式环境里的它对于性能实施性要求特别高那么可能就只能用C来写最厚的那一层

516
01:09:35,980 --> 01:09:43,220
那除了这个以外其他地方我们其实很少用到C了现在啊所以这一块我觉得挺难替代的

517
01:09:43,220 --> 01:09:47,340
除非你再做一个跟example里非常像的语言那这个也没必要

518
01:09:47,340 --> 01:09:53,260
C挺好的我也觉得C是一个非常优美而且接近计算机本质的一个东西

519
01:09:53,260 --> 01:09:59,020
它可以看作是冯诺一曼体系的一个翻译那这个东西我觉得没有任何语言能够替代啊

520
01:09:59,020 --> 01:10:05,060
好那C++就不太一样跟C++同等定位的还是有一堆的

521
01:10:05,060 --> 01:10:09,860
那RUST其实最直接威胁的是传统C++的应用环境

522
01:10:10,100 --> 01:10:20,300
那传统C++用的是哪些地方呢我知道这样一东西啊一个是桌面的操系统这个什么Windows啊底层很多是C++的代码

523
01:10:20,300 --> 01:10:31,940
这是还有像什么浏览器这种什么Chrome Mozilla都很多是C++代码就是重型的桌面应用包括操系统啊这个是C++比较多的

524
01:10:31,940 --> 01:10:38,620
但这个东西你想想看它的数量很少啊全世界就这么几个产品是这个级别的

525
01:10:38,860 --> 01:10:48,340
换句话说它就是那几个特定的领域特别适合还有一个C++很大的一个领域就是现在做游戏的后端挺多的

526
01:10:48,340 --> 01:11:08,540
还有这个前端的三A游戏做客户端也C++挺多的这些的话其实与其说是C++不如说是那些游戏引擎和后端的网络游戏服务器那些框架比较有C++的积累这里面我个人认为那些非常重的网络的企业

527
01:11:08,540 --> 01:11:16,380
后端并发控制的服务这些部分若是去替代可能是不错的

528
01:11:16,380 --> 01:11:36,100
但现在我还没有看到这样的趋势啊但这个可能是个挺好的场景那么前面说的那个Desktop桌面应用很重的桌面应用什么Office啦什么Chrome的浏览器啦还有操系统本身那些东西啊这个东西若是能不能替代其实就看那几个关键厂商他最后做的选择

529
01:11:36,100 --> 01:12:06,100
现在我看到的雷尼斯跟麦克萨夫其实是正在从暧昧态度变到比较鲜明他们可能会接纳若斯所以这条路上我是觉得若斯对C++会形成一个很大的一个一个趋势啊就是可能会替换掉它然后就是假网呵那假网这个东西的话很多人现在就是尤其那些比较追求时髦的一些年轻人啊都不太了解甚至不太看得起假网

530
01:12:06,100 --> 01:12:36,100
其实呢加瓦是有它的很独到的优势的而这个优势我个人认为短期内可预见的阿比五年十年是很难被撼动它的优势就是积累了非常海量的用户人群以及非常高质量的社区和库语言本身吧从加瓦八九开始从九开始其实语言已经开始放飞自我了但是后面的功能大家很少用啊

531
01:12:36,100 --> 01:13:06,100
那些传统遗留的代码里面也没这东西它也会保持兼容就基本上不太会去碰它那些新的功能大家也尽量避免去用啊那在它加瓦八以前的版本语言特性上还是比较简明的而且相对来讲比较规矩就是没有太多的让你去玩得太花的地方而且入门也相对比较容易所以这些东西导致了加瓦的整个社区是相当稳定的那么什么场景特别需要加瓦

532
01:13:06,100 --> 01:13:36,100
就是那种不需要你发挥但是需要很多人去写的一些东西比如说很枯燥的那些业务系统这些业务系统可能不是那种做交易的核心啊它是做什么工作流啊然后一些报表啊这种类型的它用户量也不会特别大数据也不会特别复杂但是它有特别繁琐的前后端交互很多啊然后逻辑很复杂这个流程本身的定制很复杂啊类似处理这样的东西呢

533
01:13:36,100 --> 01:13:37,580
加瓦还是很有优势的

534
01:13:37,580 --> 01:13:39,060
然后加瓦这么多年发展下来

535
01:13:39,060 --> 01:13:41,380
JVM是一个非常强大的东西啊

536
01:13:41,380 --> 01:13:44,980
有很多人看不起加瓦说它速度慢什么的其实没有这回事啊

537
01:13:44,980 --> 01:13:47,380
JVM的效率是相当相当高的

538
01:13:47,380 --> 01:13:51,780
在高级编程语言里面运行效率能超过JVM的

539
01:13:51,780 --> 01:13:55,740
经过优化的那种运行效率的其实不多的

540
01:13:55,740 --> 01:13:59,100
啊然后在这个技术之上有大量的酷

541
01:13:59,100 --> 01:14:03,540
不论是一般的编程逻辑的什么容器啊啊

542
01:14:03,540 --> 01:14:05,340
那些范型啊那些酷

543
01:14:05,340 --> 01:14:09,100
还是像io这种就是网络通讯的这样的酷

544
01:14:09,100 --> 01:14:11,020
其实加瓦的那个都优化得非常好

545
01:14:11,020 --> 01:14:15,460
因为它背后是一些第一流的工程师在做的一些事情

546
01:14:15,460 --> 01:14:21,220
所以从这个角度上来讲我觉得加瓦也是短期内挺难被替代的一个语言啊

547
01:14:21,220 --> 01:14:27,860
那若斯现在我看来看去觉得他能够努力去干掉的就是斯亚加了

548
01:14:27,860 --> 01:14:30,020
其他的可能都挺难碰的

549
01:14:30,020 --> 01:14:33,940
那说到这里就反正我们可以稍微敞开多聊一几句就是

550
01:14:34,020 --> 01:14:38,980
我们自己或者我们建议怎么去看待或者评价一个编程语言

551
01:14:38,980 --> 01:14:44,020
其实我突然联想到另外一个东西李俊你有没有研究过就是说

552
01:14:44,020 --> 01:14:47,620
就是说我们都说加瓦好但是我又不喜欢加瓦那个语法

553
01:14:47,620 --> 01:14:51,580
其实有很多这种基于JVM的语言

554
01:14:51,580 --> 01:14:53,660
对啊有专门的一个叫JVM language

555
01:14:53,660 --> 01:14:58,780
对你会推荐就是说哎如果我写加瓦写腻掉了

556
01:14:58,780 --> 01:15:01,020
但是呢我又不可能离开加瓦生态

557
01:15:01,060 --> 01:15:04,060
你会推荐这种所谓的JVM的语言吗

558
01:15:06,060 --> 01:15:11,180
嗯其实我觉得还是要回到我们刚才我说这个问题啊就是

559
01:15:11,180 --> 01:15:13,220
我们如何看待和评价一个编程语言

560
01:15:13,220 --> 01:15:18,300
其实是跟你的任务和你的从事这个任务的人群有很大关系

561
01:15:18,300 --> 01:15:21,780
比如你刚才问我这个问题如果我从我自己角度来回答的话

562
01:15:21,780 --> 01:15:24,500
我已经在这么干了我最喜欢的语言叫closure

563
01:15:24,500 --> 01:15:25,940
它就是一个JVM language

564
01:15:27,060 --> 01:15:30,380
嗯它的语法是百分之一百Lisp那种语法

565
01:15:30,380 --> 01:15:33,060
它是Lisp的一个方言就是一大堆括号那种

566
01:15:33,060 --> 01:15:38,660
嗯但是呢它是这个语言会被编译成JVM上的by code

567
01:15:38,660 --> 01:15:40,620
然后乱在JVM上面

568
01:15:40,620 --> 01:15:45,620
然后它这个语言里面可以直接调用任何加瓦的家包

569
01:15:45,620 --> 01:15:47,820
只要你把那个家包扔在class path里面

570
01:15:47,820 --> 01:15:51,740
然后你就可以在这个语言里面用它那个语法去创建加瓦对象

571
01:15:51,740 --> 01:15:53,900
然后调用加瓦对象的那些方法

572
01:15:53,900 --> 01:15:56,620
就是加瓦对它来讲是开箱即用的

573
01:15:56,620 --> 01:16:00,100
嗯所以它是一个非常典型的JVM的语言

574
01:16:00,140 --> 01:16:01,740
其实这样的还挺多的

575
01:16:01,740 --> 01:16:06,980
这JVM语言里面有一些其实已经取得了不错的一些成绩的

576
01:16:06,980 --> 01:16:10,140
斯卡拉斯卡拉这个斯卡拉也很传奇啊

577
01:16:10,140 --> 01:16:13,020
就是推特这家公司就很倒霉你知道吗

578
01:16:13,020 --> 01:16:15,980
它就是它每次选新都被人骂

579
01:16:15,980 --> 01:16:22,100
它早期是互联网公司里非常罕见的去用加瓦用的很多的一个公司

580
01:16:22,100 --> 01:16:24,180
然后就被很多人骂很多人看不起

581
01:16:24,180 --> 01:16:27,180
然后它转型到斯卡拉

582
01:16:27,180 --> 01:16:29,540
斯卡拉有一段时间是很多人喜欢的

583
01:16:29,540 --> 01:16:33,940
觉得它解决了加瓦的一些问题啊就比较酷或者怎么样

584
01:16:33,940 --> 01:16:38,740
好然后它用了斯卡拉之后呢又很多人不喜欢斯卡拉

585
01:16:38,740 --> 01:16:43,300
我都不知道为啥啊还有一个比较出名的就是卡尔特林

586
01:16:43,300 --> 01:16:48,660
啊对卡尔特林是那个专门做 IDE 的那个捷特布林

587
01:16:48,660 --> 01:16:51,300
那家公司搞出来的

588
01:16:51,300 --> 01:16:56,180
它的目标是把卡尔特林做成一个跨设备的一个

589
01:16:56,180 --> 01:17:00,020
而他的说法就是一同也是更好的加瓦那个感觉

590
01:17:00,020 --> 01:17:02,500
就卡尔特林跟斯卡拉其实有点像

591
01:17:02,500 --> 01:17:08,420
然后就是我刚才说的克洛杰这个在像我这种立斯波爱好者里面那是神奇的存在

592
01:17:08,420 --> 01:17:14,980
啊还有一类就是用 JVM 來实现其他的流行语言比如著名的就是加森

593
01:17:14,980 --> 01:17:19,620
派森的加瓦实现还有揭鲁比啊鲁比的加瓦实现

594
01:17:19,620 --> 01:17:24,540
这个其实都是把你喜欢的语言编译成 JVM 的 by code

595
01:17:24,540 --> 01:17:28,220
然后在上面去软就实际上就是利用 JVM 的优势了

596
01:17:28,220 --> 01:17:31,820
JVM 的性能稳定性然后跨平台运行的特点

597
01:17:31,820 --> 01:17:39,420
所以加瓦现在已经是一个我觉得就比较有料的一个生态环境了这个也很难动得了啊

598
01:17:39,420 --> 01:17:45,740
所以就还是回到刚才说这个问题就是你喜欢这个语言你到底喜欢的是啥你喜欢它的语法那这已经不是问题

599
01:17:45,740 --> 01:17:52,540
现在我们几乎可以做出任何的 A to B compiler 就是可以把你喜欢的语言编译成另外一个语言

600
01:17:52,540 --> 01:17:56,700
然后在后面再把它编译成可执行代码基本都可以干

601
01:17:56,700 --> 01:18:02,340
现在有很流行的一个小玩意儿就是叫 Clojure script 就是我喜欢的那个 Clojure 的语言

602
01:18:02,340 --> 01:18:05,500
用那个语言的语法写写完之后编译成 JavaScript

603
01:18:05,500 --> 01:18:09,380
因为编译成 JavaScript 那就可以在几乎任何地方运行了嘛对吧

604
01:18:09,380 --> 01:18:14,100
你可以在 Node.js 里运行你可以在乐案器里运行那就基本上什么都可以干了

605
01:18:14,100 --> 01:18:19,140
但是它写的时候语法又是 Lisp 那这些 Lisp爱好者就感到非常爽啊

606
01:18:19,540 --> 01:18:24,780
所以如果你只是喜欢那个语法的话那其实这个不是个大问题只要你肯折腾你啥都可以干

607
01:18:24,780 --> 01:18:27,500
反正这些语言都是图零等价的

608
01:18:27,500 --> 01:18:33,180
但很多情况下其实不是这样很多情况下是你喜欢的是它底下那个东西

609
01:18:33,180 --> 01:18:36,140
就是它生态环境里所带的东西

610
01:18:36,140 --> 01:18:46,900
你像 Python 如果离开了像难品像 PyTorch这样的一些酷一些科学计算或者 AI 的酷的话谁用它没有人会用 Python

611
01:18:47,900 --> 01:18:53,940
就还是那个问题就是我们到底怎么去看一个编程语言其实这个还是个哲学问题啊我觉得

612
01:18:53,940 --> 01:19:04,900
呃就是常见的一种理解就比如说呃复杂工程呃通常的 JavaScript这样的语言不太适用于复杂工程

613
01:19:04,900 --> 01:19:13,900
嗯因为因为人多了以后大家都写得乱七八糟的语言风格太灵活了对这是一种说法

614
01:19:13,900 --> 01:19:23,900
像比如说这个如比我一直很喜欢这个说过好多回了但是呢也会觉得呃如比这个语言呢呃除了慢没啥缺点对吧

615
01:19:23,900 --> 01:19:30,900
那那慢就是它最大的缺点所以呢很多这种需要性能的场合没法选

616
01:19:30,900 --> 01:19:41,900
这也是一个原因就是从性能的角度还有第三个的话呢就是嗯怎么说呢就是呃我我看到过一种说法

617
01:19:41,900 --> 01:19:50,900
就是说不同的语言它对于程序的严格性是有要求的就是有些语言非常的灵活

618
01:19:50,900 --> 01:20:01,900
嗯让你有很多种写法它会它会给你带来某种爽感但是呢比如说所有支持红的语言都都是这样的

619
01:20:01,900 --> 01:20:07,900
对什么是压榨啦如比啦嗯利索啦它支持红

620
01:20:07,900 --> 01:20:11,900
对还有还有如比我最喜欢的其中一个特性叫原编程

621
01:20:11,900 --> 01:20:19,900
然后就是说在工程当中是不是该用这种红或者是过于灵活的原编程的做法

622
01:20:19,900 --> 01:20:29,900
这个其实我我我觉得锅不能够甩在甩在这个编程语言头上还是要是这个技术团队的负责人的决策上

623
01:20:29,900 --> 01:20:38,900
就是哪怕我用如比我也可以用的很老老实实的也可以用的很这个叫什么只有一种玩法

624
01:20:38,900 --> 01:20:43,900
当然当然这会让这个如比的代码写的像假码一样这也会丧失很大乐趣啊

625
01:20:43,900 --> 01:20:57,900
但是但是我们是可以选择这个样子的所以所以本质上来说呃选择某种语言意味着这个技术的负责人想要如何去管理自己的团队

626
01:20:57,900 --> 01:21:02,900
以及对自己团队的成员是如何去预判的

627
01:21:02,900 --> 01:21:14,900
就是我预判他们不会乱来或者说我预判他们热爱自由或者我预判他们会有很多的我意料之外的打引号的创新

628
01:21:14,900 --> 01:21:19,900
这都是我需要预判的我预判完了之后我选一个编程语言

629
01:21:19,900 --> 01:21:24,900
这可能是一个技术团队负责人要做的事情

630
01:21:25,900 --> 01:21:34,900
其实我觉得你说到这个就已经是很就我很认同这个点啊就是语言的选最后其实是个人本的问题啊就是完全看人的

631
01:21:34,900 --> 01:21:40,900
比如我以前我我第一份工作是Delphi为主啊然后有塞加加的一些东西

632
01:21:40,900 --> 01:21:50,900
而当时就是我们那个团队还不算小啊大概有三十多个人但是里面有一个五六个人的小组我那个应该叫师傅了

633
01:21:50,900 --> 01:21:59,900
一个香港人在美国做了很多年编程的带了我一阵觉得不错吸纳进去了那个小组干嘛呢就是那个小组是有些特权

634
01:21:59,900 --> 01:22:05,900
比如说塞加加里面如果要写跟红有关的东西的话就只有那个小组能写其他人都不给写

635
01:22:05,900 --> 01:22:13,900
这个就在塞加加里面当然这不是一个问题啊就是在塞加加里面确实需要这样一些管理

636
01:22:13,900 --> 01:22:18,900
因为本质上原编程它是创造语言特性啊它已经是在语言特性方面

637
01:22:18,900 --> 01:22:24,900
它可以开发出新的关键字在别人的程序技术之上去叠加一些更高层的东西

638
01:22:24,900 --> 01:22:33,900
那这个如果全力下放到所有的人的话比如像乳比里面最为人所诟病的一个东西就是它那个叫做mix in嘛

639
01:22:33,900 --> 01:22:44,900
就是你像可以给别人写的你没有原代码的类添加或者修改它的行为这个就很离谱对吧

640
01:22:45,900 --> 01:22:50,900
这个如果你散到每个都可以干的话那这确实定时炸弹啊所以有人很喜欢

641
01:22:50,900 --> 01:22:59,900
哎对这就是我下面要说的如果你在乳比选了乳比作为主编程语言然后禁止大家用这些东西的话大家就会觉得那我还不假玩

642
01:22:59,900 --> 01:23:04,900
这就是一个矛盾了我刚才说那个例子就是我刚工作的时候我们塞加加那里没这个问题

643
01:23:04,900 --> 01:23:08,900
因为塞加加那个红说真不能够把它当做一种乐趣

644
01:23:08,900 --> 01:23:13,900
就写这个玩意儿既危险又很枯燥很无聊而且很容易出错

645
01:23:13,900 --> 01:23:22,900
啊那那就反正有人把它写好了然后别人用就好了吧没问题但是你像乳比也好或者其他的一些语言它有一些很leading edge

646
01:23:22,900 --> 01:23:30,900
就是那种很前沿的特性的话那是大家喜欢玩的东西啊你不给它玩那它就失去了这个语言的乐趣

647
01:23:30,900 --> 01:23:40,900
那这种情况下可能这个语言选起来就要特别当心了啊所以跟人有非常大的关系啊比如Rust这个语言它适合什么样的团队呢

648
01:23:40,900 --> 01:24:07,900
它适合一个工程和对编程的理解都比较深啊然后也有相当多其他语言的经验的一个团队他们都愿意去学愿意去不断地通过沟通来解决一些问题的话那么对他们来讲也许挺适合的一旦他们度过了这个磨合期以后的话它生产力真的会上来啊会比塞加加要生产力要高很多所以这里面完全看人

649
01:24:07,900 --> 01:24:20,900
但如果你这个团队呢并不是一个我刚才说的这种很积极的沟通各方面都很没有问题的一个团队的话那么在走这样比较有难度的新语言之前你要非常谨慎

650
01:24:20,900 --> 01:24:33,900
还有一些关于Rust的传闻我觉得也是大家要打一个问号比如说很多人会误解说而Rust比塞加加好地方在于只要你这个Rust的编译通过里面就不会有那些运行式错误了

651
01:24:33,900 --> 01:24:46,900
这是一个典型的误解啊不可能有这样东西的它只能说它编译通过之后它把绝大部分的运行式错误在编译期间就能够发现

652
01:24:46,900 --> 01:24:55,900
所以Rust团队花了很多精力来做它的编译器还有它的那个语言服务器就是那个叫Rust Analyzer

653
01:24:55,900 --> 01:25:02,900
它是一个LSP啊它就是可以在你一边写程序的时候一边去分析你的代码通过静态分析来发现绝大部分问题

654
01:25:02,900 --> 01:25:09,900
这个绝大部分到底多少呢我个人的感觉啊百分之九十以上但是它不代表你不会有问题

655
01:25:09,900 --> 01:25:17,900
它这个也叫做确实好比如说它甚至我举个例子啊比如说你在Rust里面你用到数据库

656
01:25:17,900 --> 01:25:24,900
你会用一个数据库的第三方库然后写一段sql代码来操作数据库对吧

657
01:25:24,900 --> 01:25:31,900
如果你sql代码里面引用的一些字段是数据库里实际上没有的那么它这个Analyzer它也可以发现

658
01:25:31,900 --> 01:25:37,900
就它在编辑和编译的阶段就已经实际连上数据库去做一些检查了

659
01:25:37,900 --> 01:25:45,900
但这个背后是那个第三方库的开发者以及这些Analyzer的开发者要做大量大量工作的

660
01:25:45,900 --> 01:25:51,900
这个工作我认为不是那种短期之内几个月它就能够建设完备的它是一个过程

661
01:25:51,900 --> 01:25:58,900
现在Rust还是在一个爬坡阶段还没有到那个真的就是广泛应用的阶段

662
01:25:58,900 --> 01:26:09,900
对我再提供一个视角啊嗯其实包括前面我也查了一下现在其实我们学校里面有一门课程叫做数据结构理算法对不对

663
01:26:09,900 --> 01:26:21,900
嗯对这门课其实你们应该见过有很多用不同的语言去写这门课甚至是同样一个作者他写不同的编辑语言版本

664
01:26:22,900 --> 01:26:34,900
其实最近这几年呀你们不知道有没有留心过其实特别是在国内用数据结构语算法用Rust的语言来去写书的企业开始躲起来了

665
01:26:34,900 --> 01:26:50,900
哦是吗这我还真不知道对应该也是从嗯特别是一些企业的员工对他们喜欢去用Rust的重新去把数据结构语算法教一下

666
01:26:50,900 --> 01:27:06,900
嗯一方面的是我相信是大家用这个语言在嗯平时工作里面可能会用到嘛第二个呢就是就像李老师前面我们一直商量的就是很多的一些互联网的一些员工啊

667
01:27:06,900 --> 01:27:28,900
对他到了一定年龄以后他特别喜欢去教别人对他怎么教呢对他就重新把他以前学过的数据结构语算法用他现在熟悉的语言来他再去写一遍或者是通过开源项目呀或者是通过一些书呀对其实我我看到好几本类是这样的其实都是这样的

668
01:27:28,900 --> 01:27:32,900
然后呢完了以后他发布到网上还挺有成交感的

669
01:27:33,900 --> 01:27:53,900
但这个有个小问题啊就是如果他这门课是为了教人算法和数据结构的话他用Rust的语言来写他得花几乎百分之五十的篇幅去教Rust本身的那些东西啊比如光一个奥特契普对一般的大学生来讲我觉得就够他学败学弃了

670
01:27:54,900 --> 01:28:07,900
对我觉得这些老师不需要关心这个他他不不在乎这个嗯对写得好对而且想学的学生可能也会觉得那我就用Rust来学也会有对

671
01:28:08,900 --> 01:28:21,900
尤其是写数据结构比如说你要写一些容器类呀什么之类的你要写一个字典你要写一个什么二叉树之类的对吧它都是容器类型的这种容器类型的它里面装的数据的类型是不确定的嘛

672
01:28:21,900 --> 01:28:31,900
它就需要用到比如说像啊generic啊这样的一些范型啊这样的一些东西这些东西他的奥特契普在Rust里面都是特别麻烦的

673
01:28:32,900 --> 01:28:45,900
就我我觉得这种说实话写数据结构还是动态语言比较容易一些嗯至少可以很多语法细节就可以不用管了这个还挺有意思我我可以去看一看啊还有这样的书啊

674
01:28:45,900 --> 01:29:12,900
对为什么提到这一点呢其实有一本另外一本书其实大家应该都熟悉叫做计算机程序的构造与解释对不对嗯SICP对的很出名的对一开始呢它里面其实是像Lisp这种比较抽象语言对吧对因为它其实就主要是为了叫抽象对的它后来呢其实作者他为了让更吸引更多人来学他这本书他后来用那个加洛斯库普的重写了这本书的对

675
01:29:13,900 --> 01:29:24,900
他一本加洛斯库普的版本对给学生哎让更多人吸引学生来来学这个可能也是教育里面的一个一个小特点吧

676
01:29:24,900 --> 01:29:25,900
SICP因为在美国应用的还挺广的就是computer science这个专业很多学校用了这个教材所以很多学校会自己去改编它有的学校会用派森去重写里面所有的例子和题题有的会用加瓦还有有的会用加斯库但是你会发现派森也好加斯库也好还有它原来用的这个Lisp这个方言啊叫scheme这些语言都有个特点就是它语法本身并不复杂它可以把大量的精力时间花在怎么去讲抽象怎么去讲抽象对不对

677
01:29:54,900 --> 01:30:00,900
怎么去讲编程逻辑上去这也是他当初使用scheme的那个最大的原因之一

678
01:30:00,900 --> 01:30:09,900
嗯有个很资深的教SICP的一个教授就写过一篇文章介绍这个事情我还把它翻译在我的博客里面他就说过他说

679
01:30:09,900 --> 01:30:16,900
scheme的优势在哪里就是我可以用半杰克讲完它的语法它的语法半杰克讲完了

680
01:30:16,900 --> 01:30:23,900
然后接下来一整个学期都不用再想这事儿了我就专心去教怎么去把问题抽象成代码抽象成数据

681
01:30:23,900 --> 01:30:29,900
所以这些东西我觉得就是适合的包括派森加瓦其实都可以达到类似这样的效果

682
01:30:29,900 --> 01:30:40,900
但是我原来就说我们大学里面用C语言来做教学语言是绝对失败的因为C语言大量的东西是跟你的教学目的无关的但是你不掌握你就会出错

683
01:30:40,900 --> 01:30:48,900
现在REST是一个比C语言学习曲线还陡峭的语言它至少跟斯加加类似

684
01:30:49,900 --> 01:30:58,900
有人就喜欢爬陡峭它不是以就是说教和学两边的人我觉得都不是专业

685
01:30:58,900 --> 01:31:10,900
就是教的人也没想过啊更好的教学语言是什么学的人也没想过我要找一条更适合我的学习道路反正啃呗年纪轻啃一个就不要紧

686
01:31:11,900 --> 01:31:20,900
学的人来讲他就可能是会走弯路可能会浪费时间可能会就最后没有足够的时间去学真正重要的东西这就是现状

687
01:31:20,900 --> 01:31:27,900
那责任在哪儿责任当然是教的人了责任当然不是学的人了所以这个我觉得这个追求新奇

688
01:31:27,900 --> 01:31:39,900
所以包括我我现在给学生讲我也说你们那些语言你喜欢都可以去学但是你在这之前一定要先用一个比较简单不那么耗你脑力的语言来学更重要的东西

689
01:31:39,900 --> 01:31:48,900
好呀果然这个变成语言一聊就没完啊所以我们最后一个话题就先不说了吧我们以后找时间再说吧

690
01:31:48,900 --> 01:32:00,900
好的好的变成语言实在是一个坑啊所以你就知道为什么我们一直不太敢开这个话题啊就一开就就是这种这种情况啊

691
01:32:00,900 --> 01:32:05,900
很正常很正常其实还有好多还没讲完呢

692
01:32:05,900 --> 01:32:14,900
对啊有有兴趣有问题的话还是可以跟我们提啊就是我们虽然有这样的担心但是时不时的还是可以拿出来讲一讲的啊

693
01:32:14,900 --> 01:32:30,900
毕竟这个是对所有搞技术的人来讲都是很令人兴奋的话题啊嗯以前我老是提这个例子以前包括在四大参院的时候都有很多我们的老同事啊都是一个上古时代的论坛叫TPL

694
01:32:30,900 --> 01:32:43,900
嗯叫Top Programming Language这个论坛专门聊变成语言的啊那别提多兴奋了啊但就很小众后来很快就没了现在已经找不到这样地方了只能我们偶尔来过一下雨

695
01:32:43,900 --> 01:32:59,900
行那我们今天就到这里OKOK先聊到这儿好嗯老赵可以继续休息啊还是有一点这个嗓子有点哑但是我们感觉应该快好了嗯好好的那就这样谢谢大家

696
01:32:59,900 --> 01:33:01,900
好拜拜拜拜

