1
00:00:00,000 --> 00:00:10,000
各位听众好啊这个欢迎来到我们后互联网时代的乱谈啊这一期呢

2
00:00:10,000 --> 00:00:20,000
赵莉是我跟我们王老师大家好啊还有老庄大家好啊跟大家一起来聊聊科技

3
00:00:20,000 --> 00:00:31,000
今天呢我们准备了两个话题啊第一个呢是最近啊在这两天刚刚这个今年的屠龄奖的得主公布了啊

4
00:00:31,000 --> 00:00:39,000
这个今天我们给大家介绍一下这位大牛啊他的一些这个成果以及相关的一些影响

5
00:00:39,000 --> 00:00:50,000
另外呢就是这个关于信息啊和网络和软件的安全我们之前也提过啊最近的也有一些相关的

6
00:00:50,000 --> 00:01:07,000
嗯我们看到的一些说法啊就是嗯我们现在是不是应该去担心去准备啊万一我们每天都在使用的软件突然有一天不能用了怎么办啊这个话题也挺有意思我们今天会聊一下

7
00:01:07,000 --> 00:01:16,000
呃但是在这个之前呢我们也还是回顾一下之前啊这个我们聊过的话题的一些进展或者一些新发现的一些情况

8
00:01:16,000 --> 00:01:28,000
嗯一个呢是关于疫情啊之前我们聊过关于我们这边的这个关于健康码呀关于核酸检测的一个管理的这个系统

9
00:01:28,000 --> 00:01:38,000
它里面发生的一些档机的故障啊还有一些数据不同步的一些事情这个事情呢现在又有新的一些进展了啊这个请老庄给我们说一说

10
00:01:39,000 --> 00:01:55,000
其实也不是进展就是没进展所所谓的没进展就是呃就是有人爆料说呃我的核酸检测码是阴性但是疾控中心来找我了说我是阳性这两边的数据不同步怎么办

11
00:01:55,000 --> 00:02:16,000
当然这又是一个典型的系统问题到底听谁的为什么数据会不一致会不同步事实上我前两天做了一次呃检测核酸理论上来说这个核酸检测的结果应该管四十八小时对吧但是过了四十八小时之后这个核酸检测结果没出来

12
00:02:16,000 --> 00:02:17,000
这就很有意思就是说他检测了但是他结果没出来然后过了四十八小时就白搞一轮所有的人所有的居民在楼下排队一了一个一个的做核酸做防护还有志愿者全忙活忙活到现在这四十八小时过去了这结果就没有意义了对从某种意义上讲就白做了因为下一轮又要开始了对嗯这是这个啊这个事儿啊我我觉得有有几个点哈第一个点呢就是计算机系统其实

13
00:02:46,000 --> 00:03:16,000
不是万能的现现代计算机系统它里面有很多的环节啊它是不自洽的就是计算机系统自己独自不能形成一个闭环它需要人在里边进行操作比如我们现在这个核酸检测这个管理它是这样的它是每个检测者先生成一个二维码然后扫白二维码之后相当于我登记了一次核酸检测然后我是脱离开计算机做这个检测检测完成之后有人把我这个结果录入电脑根据我之前扫的码

14
00:03:16,000 --> 00:03:27,720
我那个结果对应上录进去就是从我登记到我得到这个扫描结果之间这一段事情全部是人手工在操作它计算机是管不到的

15
00:03:28,400 --> 00:03:44,480
如果这个过程当中出现人为的一些失误的话那么计算结果就一定不对或者它就没办法实时的完成这个计算机的这个这个流程这个其实是呃信息化或者数字化里面的一个一直的难题

16
00:03:44,480 --> 00:03:51,280
就是一旦计算机它不自洽的话它系统设计时所假定的一些事情就不一定成立了

17
00:03:51,640 --> 00:03:57,200
就像刚才老庄说这个情况就是我设计的时候假定这个事情是很快就会完成的

18
00:03:57,400 --> 00:04:01,120
嗯完成之后那么在未来的四十八小时里面这个记录就有价值

19
00:04:01,440 --> 00:04:09,760
结果我这个中间人人为的过程不进电脑的这部分过程它超过了一个长的时间不说四十八小时比如三十多小时

20
00:04:09,760 --> 00:04:17,320
那使得这个操作它在计算机系统里面呈现就一点点时间或者压杠杆就没有了那这个问题就很大

21
00:04:18,480 --> 00:04:23,160
那这整个设计系统的这个这个原始逻辑可能就不成不成立了

22
00:04:24,040 --> 00:04:32,960
嗯然后我想拟深拟深说一下这件事情就是关于我们如果看一个计算机系统它当然是需要用工程的思维去考虑的

23
00:04:33,480 --> 00:04:38,720
但是如果你考虑到整个检测这件事情也应该用工程的思维去思考

24
00:04:39,240 --> 00:04:44,360
我一共有多少人去检测这是一个可以统计出来的量

25
00:04:44,920 --> 00:04:53,320
完了以后任何一个哪怕现在运作良好的系统它的处理能力一定有上限超过了上限就会出问题

26
00:04:53,920 --> 00:05:04,840
那么我们这个城市它的核酸检测这个系统它每天的检测量每次检测出结果的这个速度它也是有上限的

27
00:05:04,840 --> 00:05:15,880
超过了这个上限而没有做充分的准备那么一定会出现超时超期甚至由于赶工由于紧张会导致错漏

28
00:05:16,440 --> 00:05:23,360
这些事情在一个复杂系统里当你的负载当你的压力上去以后它一定会发生

29
00:05:23,960 --> 00:05:32,760
而不考虑这样的负载这样的压力所制定的政策就可能会出现漏洞或者是导致更多的麻烦

30
00:05:33,760 --> 00:05:42,960
对我其实嗯因为计算机这个行业这个比较年轻嘛或者或者准确说比较年幼啊

31
00:05:43,360 --> 00:05:56,480
就是没有很成熟的这个方法论和工程体系是一步步慢慢建立起来的现在已经比我刚入行的时候好一点了我刚入行的时候更啥都没有都靠自己摸索那个时候真的我的一些用户教会了我很多东西

32
00:05:57,000 --> 00:06:00,960
当时有一个我们给政府做系统政府有一个信息中心的主任

33
00:06:01,800 --> 00:06:08,240
那是做业务做了很多年然后做计算机他也做了很多年他就跟我说他说你们搞计算机的人啊

34
00:06:09,360 --> 00:06:16,280
这个有的时候太太太怎么讲就是太封闭了只觉得计算机可以解决所有问题

35
00:06:16,880 --> 00:06:24,120
你要真想把这做好你下去这个这个这个机关里面去那个去那个呃呃就是服务大厅

36
00:06:24,920 --> 00:06:30,520
啊去政府的服务大厅你去蹲他个一个礼拜两个礼拜看看手工操作是怎么做的

37
00:06:31,120 --> 00:06:36,280
纯手工操作没有计算机参与的情况下人家怎么做的里边主要问题是啥然后你再把它

38
00:06:36,760 --> 00:06:39,160
跟计算机结合起来你才能想明白很多事情

39
00:06:40,120 --> 00:06:47,040
所以这个嗯就就哎这这对当时年轻的我啊这个我觉得帮助真的挺大的

40
00:06:47,440 --> 00:06:53,680
但是现在很多做计算系统的人好像还是这个状态就他没有机会或者他不愿意去

41
00:06:54,120 --> 00:07:03,840
呃触碰这些末端的业务其实就很多问题你说现在做这个健康云系统的人他要是没有在实地跑过

42
00:07:04,600 --> 00:07:09,520
完整的跑过那么几轮的大规模的这个核酸普查的话东西他根本想不到的

43
00:07:10,400 --> 00:07:13,680
他再聪明他也想不到嗯根本根本就想不到的

44
00:07:14,640 --> 00:07:27,680
嗯ok呃说到这个话题呢我们今天开始讲这个呃正式的两个大话题之前啊我们也说说我们这边防疫的情况吧因为我们都在上海哈

45
00:07:28,040 --> 00:07:43,200
上海现在是疫情的这个这个中心点啊呃我我我们仨应该也都隔离了不短的时间了而且这个状态不太一样哈一个在浦东啊我在浦东这个另外两位老师在普希然后王老师还在这个学校里面

46
00:07:43,200 --> 00:08:13,200
这个情况跟一般的这个这个居民区的隔离肯定不太一样所以我们前面先花点时间来聊聊我们的这个防疫隔离的体会和见闻吧就我们这个就是说得不开心的大家开心一下对不对呃我觉得我我在隔离期间有开心也有不开心的事情啊我觉得都可以说出来让大家开心开心啊这个这个两两位怎么样最近这个关在家里都在干些啥呢

47
00:08:13,200 --> 00:08:43,200
哎呀我在学去做菜啊对好像做菜是个共同主题啊我也被迫要去做做饭了啊对对不过我还我还去看到最近有那种什么开源项目很很出名的项目叫什么程序员做饭做菜指南什么的我觉得可以学习起来哦就是好像大家做饭然后把自己的做法上传上去那个共享是吧对但是后来我们才发现这样的一种呃

48
00:08:43,200 --> 00:09:13,200
程序员做饭指南他没有考虑到我们现在这种场景然后那天在我跟我老婆聊天我老婆就说说你们应该开发这样的一种做菜的算法就是先输入我家里有哪些菜就是原材料嗯嗯然后对然后他给我推荐我们能够拿这些原材料做几顿饭做几顿菜嗯嗯嗯对因为现在有这样的一种算法的话你说我怎么想我都已经知道我要做一个红烧排骨了我当然该知道该去采买什么原材料但是在疫情封闭期间

49
00:09:13,200 --> 00:09:43,200
我就手上就这么点菜就这么点蔬菜就这么点没得挑点鸡蛋然后我能做几顿嗯这个确实啊这这就是所谓逆向工程逆向工程比正向的工程难很多啊对而且而且现在假设我的输入需求是这样的如果我打算做五顿饭我这些菜怎么对优化对如果我要真的有可能要做十顿饭了我怎么优优化我怎么更加合理的分配对对对

50
00:09:43,200 --> 00:09:50,200
对这个这个是我们化老化罗羹老老前辈的专长了啊这个应酬学的东西了嗯应酬学

51
00:09:50,200 --> 00:10:01,200
呃这这可以拿来当那个算法题哈这个这个回回回头这个可以让王老师们给他们做呃这可以当算法题用嗯硕士富士

52
00:10:01,200 --> 00:10:12,200
哈哈哈真的可以的可以的嗯呃这个这个太欢乐了啊这这这个太呃王老师的话在学校怎么样

53
00:10:12,200 --> 00:10:42,120
对我我其实没有嗯还不是真正的在学校对其实我们有老师在对那我们呢其实是有一个嗯一些换班的机制对因为学校现在疯子嘛对学生呢都在学校里面但是呢是特别需要一些老师对特别是我们同学嗯也不能出楼的时候是需要一些老师啊辅导员呀然后呢去给他们去送一些饭对那这个时候的实际上是需要的对

54
00:10:42,120 --> 00:11:11,840
那我这边的其实是在家现在是嗯上网课对然后呢也是会线上还是该干啥就干啥对但是呢一个一个比较大的一个感触呢其实还是还是蛮累的就是嗯包括一些会议啊包括一些嗯各种各样的一些事情对当就像我刚才说的对那还得嗯召集着怎么样去做菜对还有召集怎么样去抢菜对吧那这个都都是

55
00:11:11,840 --> 00:11:41,840
抢菜也是一个竞争激烈啊非常技术性的啊好在那个政府还学校都发了一些慰问品对你们应该有多收到了吧啊对对对都有社区大礼包啊我们这还有很多东西的呵呵嗯可能可能我们家这边的要少一点就是你们发了啥我们可以摊出来比一比啊呵呵嗯三根胡萝卜呃一包青呃一个一个一包青菜嗯哦没有青菜没有青菜

56
00:11:41,840 --> 00:12:11,840
一一颗一颗卷青菜然后还有三块三块大排还有一个鸡腿嗯嗯嗯啊一块鸡胸肉一块鸡胸肉还不是鸡腿肉鸡胸肉鸡胸肉OK王老师呢哎我们还还还也也不少对刚才除了刚才说的以外包括那种很大的卷青菜对我们这边还有带鱼还有虾滑昨天就是哇这个明显高端对哈哈还不错

57
00:12:11,840 --> 00:12:41,840
呵呵总的来说好像都是发一些比较耐放的一些蔬菜啊这个也是专门考虑了我这边收到的是有呃七根很长的那种黄管啊还有六根不知道七根挺大的胡萝卜这都是比较耐放的然后两颗卷青菜但我们婚菜就就就比较弱一点啊基本上没有婚菜就只发了这个呃一些火腿肠和一罐那个午餐肉啊另外发了有一大包挂面好像是那个两两斤不知道三斤桩

58
00:12:41,840 --> 00:13:11,840
的嗯嗯嗯所以这个就各地各显神通了看这个组织货源的能力了嗯对对我在家里边这个关注的除了就是跟大家一样哈都都要这个被迫要重新开始做饭了好好多年懒得做饭的然后这这就不说了哈大家都说过了另外有一个事儿呢就是忙着在各种各样的群里面干辟谣的工作

59
00:13:11,840 --> 00:13:23,400
嗯呵呵呵呵呵呵我发现这个事儿啊真的是让人吐血的一一件事情啊就真的是难啊呃基本上就非常非常的困难

60
00:13:23,920 --> 00:13:39,080
呃就举个例子哈就前两天在我们这个小小区的业主的这群里边然后就说起来现在上海有很多的舆论的声音啊说让这个呃尝试居家隔离啊因为这个

61
00:13:39,360 --> 00:13:52,800
嗯症状不不不不是很很严重吗然后很多这个感染或这个确诊或者是无症状感染者他的症状都不严重居家隔离可能是最好的措施啊对这个医疗资源比较比较友好

62
00:13:53,320 --> 00:14:01,960
这个事儿我就有一些其他的观点我我的态度是这样我就说嗯这个居家隔离呢能做到当然是好

63
00:14:02,600 --> 00:14:08,080
啊就是它就是基本上成本最低嘛但是我说这个必须要有配套机制

64
00:14:08,920 --> 00:14:14,240
否则的话你不能够就是完全放任依靠大家的自觉去做这件事情

65
00:14:15,200 --> 00:14:25,440
啊因为我我我自己是武汉人啊我有很多这个亲戚都在武汉当年二零二零年这个疫情爆发的时候武汉其实初期就是以居家隔离为主的

66
00:14:25,960 --> 00:14:31,760
但是效果就不好啊然后这个后来改成这个方舱医院

67
00:14:31,960 --> 00:14:41,480
来收容轻症和无症状感染者的时候整个局面就好起来了那你能说上海就素质比上海人的素质就比武汉人好

68
00:14:41,880 --> 00:14:43,720
所以居家隔离就比较都很自觉

69
00:14:44,760 --> 00:14:48,040
那这个肯定不敢这么说的嘛对吧然后这个

70
00:14:49,240 --> 00:14:54,720
嗯而且绝大部分都没没问题他就一定没问题嘛有极少数比如百分之五

71
00:14:55,680 --> 00:15:00,280
的人不自觉出去晃荡然后形成了传播的话那这就是致命的

72
00:15:01,000 --> 00:15:06,280
啊结果我在群里边表达类似的观点的时候那那就有人问我说哎

73
00:15:06,880 --> 00:15:09,040
如果是你杨姓了你会出去晃吗

74
00:15:10,280 --> 00:15:18,760
这这就就问我这个我就很无语啊然后我就说嗯我是不会出去逛但是我没法替所有的人做这个担保我说你能吗

75
00:15:20,720 --> 00:15:28,920
所以所以就是就是在网上啊你去跟人去论辩啊你想尝试说服一些人什么事情真的太难太难了

76
00:15:29,880 --> 00:15:35,160
啊这呃有的时候就放弃了我们我们小区那个群我早就放弃了

77
00:15:35,560 --> 00:15:39,040
我有一次也是因为这样类似的事情跟人讨论

78
00:15:39,600 --> 00:15:44,640
然后直接就有人冲出来说不要理这个奇葩他在带节奏怎么怎么的

79
00:15:46,160 --> 00:15:53,040
那你这个更更可怕了对然后我就说我说我们针对这个什么什么事情我们讨论一些可行的方案

80
00:15:53,440 --> 00:15:58,800
为什么你要对我进行人身攻击然后又有另外个人跳出来说你看这是个李宗克

81
00:15:59,680 --> 00:16:06,480
哈哈哈我我后来就默默的退群了我觉得我确实没办法说服他们而且我现在

82
00:16:06,880 --> 00:16:14,280
对我原来也不理这样的群很少在里边说话或者连看都不看但是现在这个阶段不行啊很多重要通知在里边啊

83
00:16:15,240 --> 00:16:25,920
嗯没事的没事的这个不不重要我我老婆在里面潜水所以哈哈哈我就我就放弃了呃呃所以

84
00:16:26,760 --> 00:16:33,240
所以这个叫什么这个疫情隔离欢乐多啊这个既有苦衷作乐也有真的欢乐啊

85
00:16:33,760 --> 00:16:39,600
当然也也也有很多这个令人担忧的事情包括现在我想上海的疫情也仍然是

86
00:16:40,040 --> 00:16:46,000
不论是每一个在上海居住的人啊或者在全国其他地方居住人都还是很

87
00:16:47,080 --> 00:16:53,320
既有担心也也也在默默祝福吧所以现在我们能做事情也有限就是配合好政府的这个

88
00:16:54,040 --> 00:16:58,960
不断调整的策略哈就是尽快的能够把它做好

89
00:16:59,920 --> 00:17:04,440
现在确实挑战很大这这这个也也也也对非常有挑战

90
00:17:04,840 --> 00:17:11,680
毕竟两千多万人而且之前从来没有经历过这种级别的啊机前之前精准防控

91
00:17:12,200 --> 00:17:18,640
都把这个疫情的规模限制在一个小的范围里面很多基层的这个根本就不需要参与进来

92
00:17:19,120 --> 00:17:24,080
但现在是没办法了全上海所有的街道所有的基层组织都必须动起来

93
00:17:24,840 --> 00:17:31,840
那这个确实是有挑战所以反正咱们这个现在这个阶段我觉得也没什么太多可说的

94
00:17:32,800 --> 00:17:39,480
就就讲讲我们各自的这个这个隔离期间的事情让大家乐意了就好了

95
00:17:40,160 --> 00:17:47,120
OK呃那我们这个开场白就到这里了啊我们下面开始聊我们今天呃这个真正的话题啊

96
00:17:47,120 --> 00:17:50,480
首先我们来说一下关于今年屠龄奖的这个事儿

97
00:17:50,960 --> 00:17:59,000
呃这个呃屠龄奖这个简单介绍一下有的听众可能还不一定知道啊屠龄啊屠龄这个名字大家可能大部分听说过哈

98
00:17:59,360 --> 00:18:05,960
这个英国非常天才的数学家啊我们计算机科学的这个祖师爷啊这个奠基者之一

99
00:18:06,760 --> 00:18:16,200
那么以他名字命名的这个奖的他是呃有计算机科学领域的落边奖支撑啊

100
00:18:16,800 --> 00:18:25,080
呃虽虽然可能行内的人会觉得还是不太一样啊但是总之他的地位很高的那每年获得图灵奖的人呢

101
00:18:25,640 --> 00:18:32,160
基本上可以认为确实是计算机科学这个领域的绝对的大牛那么今年的这一位呢

102
00:18:32,560 --> 00:18:39,800
呃是刚公布的啊三月三十号刚公布的这个具体的情况请我们王老师给大家介绍一下

103
00:18:41,720 --> 00:18:49,400
好那个那个杰克呢党嘎啦那实际上是做那个高性能计算的对实际上

104
00:18:50,000 --> 00:18:54,920
今年的那个屠龄奖是第一次颁给那个超算这个领域

105
00:18:55,360 --> 00:19:01,560
对那以前的那个屠龄奖对包括上一次的其实就是颁给了那个深度学习的

106
00:19:01,920 --> 00:19:06,640
对还以前很多像数据库呀像那个程序原设计啊这些的

107
00:19:07,080 --> 00:19:13,400
对那高性能计算的这一次其实也是嗯很多计算机界的一些同仁嘛就一直

108
00:19:13,880 --> 00:19:17,360
认为在高性能计算里面一直没有对那今天有了

109
00:19:17,880 --> 00:19:24,240
对那为什么那个高性能计算呢其实也是大家比较关注这个话题对其实它也是

110
00:19:24,680 --> 00:19:30,280
嗯能够显示一个整体的一个国家的他的一个计算机方面的一些实力

111
00:19:30,760 --> 00:19:38,000
对那同时呢超算这一块呢其实也是推动计算机不断往前发展的一个非常重要的一个点

112
00:19:38,680 --> 00:19:47,160
对因为可能大家都知道就是计算机里面其实也有一个非常著名的一个定律叫做摩尔定律对实际上就是说我们

113
00:19:47,560 --> 00:19:52,280
计算机的硬件对每过十八个月它的性能其实就会

114
00:19:52,720 --> 00:19:57,040
翻一番对那这个呢其实大家应该都可以感受到我们身边的这些

115
00:19:57,760 --> 00:19:59,840
笔记本电脑呀我们的那个

116
00:20:00,480 --> 00:20:04,800
嗯手机呀对它的性能其实是越来越好而且呢会越来越便宜

117
00:20:05,200 --> 00:20:13,920
对但是呢会有个问题就是哎计算机的性能一直在硬件性能一直在增长对但是呢软件实际上是

118
00:20:14,680 --> 00:20:24,360
不太容易能够特别好的去利用到这些增长的计算机的这些性能的对需要在软件这一块呢去做各种各样一些优化

119
00:20:24,840 --> 00:20:30,080
对那超算里于实际上是一个非常好的能够完美的利用到

120
00:20:30,680 --> 00:20:38,880
计算机硬件性能的提升对你计算机硬件的性能再怎么提升对超转都能够非常好的去消化它

121
00:20:39,440 --> 00:20:47,400
对那怎么消化它其实最早一代的这些超级计算机对里面的一些算法就是

122
00:20:48,120 --> 00:20:54,520
借给档哥拉的这个博士他所做出的一些研究的成果包括像丁珮克呀

123
00:20:54,920 --> 00:21:02,560
那个布拉斯呀这些还有乱派克呀这些嗯算法的一些一些酷对特别是一些并行的这些算法

124
00:21:02,920 --> 00:21:13,640
对使得超转能够服务于我们传统的一些嗯传统的一些个人电脑呀或者是小型机大型机呀都能够做不到的一些事情

125
00:21:14,040 --> 00:21:24,480
包括什么生物制药啊那个天气呀航空啊对那最开始超转的其实更多的是服务于军方对那后来才开始

126
00:21:25,000 --> 00:21:31,360
去慢慢的去民用对而且呢他做了这件事情的现在已经成为了一个嗯

127
00:21:32,160 --> 00:21:40,120
一个标准对我们称之为能够评测全世界的这些计算机性能好坏的一个内容

128
00:21:40,680 --> 00:21:47,440
对他实际上是一个全世界现在有一个非常著名的那个超级计算机拓普五百的这样一个

129
00:21:47,920 --> 00:21:54,000
排行榜对就是你的计算机是不是好其实就是靠董哥拉他们现在

130
00:21:54,520 --> 00:22:02,240
嗯当年做的这些林派克呀这些基准测试用来评价他们的这些内容对那这些东西的其实就是

131
00:22:02,680 --> 00:22:11,360
一直在推动计算机不断的往前去发展各种各样的一些优化呀对那他们从一些不同的领域里面去

132
00:22:12,160 --> 00:22:18,560
整理到一些那个嗯沃克洛的然后呢去评测这些计算机对那大家

133
00:22:18,560 --> 00:22:35,440
应该也会听过对包括嗯中国的像天河像那个太湖之光对其实都都有过在那个世界那个五百强的这个排名上能够排到第一的这样一个一个位置

134
00:22:36,480 --> 00:22:41,120
对我先介绍这些看看大家有什么嗯有感兴趣的一些一些点落

135
00:22:41,840 --> 00:22:51,280
嗯我先稍微解释一下啊就是其实在很长一段时间里面计算机软件是领先于硬件的就是软件发展得非常好

136
00:22:51,600 --> 00:23:02,440
但硬件一直很疲软啊但是呢在最近的十年左右的时间话硬件发展得很快其中一个两个标志性的代表一个呢是多核的CPU

137
00:23:03,040 --> 00:23:07,960
就是一个CP有多个计算的核啊或者能够多线次的去做计算

138
00:23:08,560 --> 00:23:17,320
那么有相当长一段时间有好几年的时间里面这个大部分软件是用不到那个多核的性能的就它任何时候只能用到一个核

139
00:23:18,200 --> 00:23:28,240
直到软件整套工具链从编译器到核心的这些呃酷寒术啊到等等这样的一些配套机制整个工具链都升级完毕

140
00:23:28,240 --> 00:23:34,720
才能够让一般的人写出可以利用CPU多核优势的程序

141
00:23:35,360 --> 00:23:40,400
而写程序的时候呢你不太需要了解这点你只要把你的程序写得足够好

142
00:23:41,160 --> 00:23:52,760
就是足够的这个这个按照一定的标准去写那么编译器啊包括酷寒术啊或者一些框架啊会自动的啊把你能够应用到各个核上面去让你充分地利用每一个核的这个计算能力

143
00:23:53,400 --> 00:24:04,120
第二个就是云计算啊就是可以把很多CPU并联起来啊让他共同去为一个计算任务去服务啊这个就是所谓的这个这个并行计算

144
00:24:05,160 --> 00:24:14,600
啊啊CPU里的并行计算和多CPU的联合的并行计算那么并行计算的一个理想是什么呢就是

145
00:24:14,600 --> 00:24:14,640
呃大部分写算法的人他不需要去做这个具体的任务分派啊具体的这样的一些任务调度这样的一些事情而有一些基础性的软件一些酷一些框架可以帮助你去把你的计算任务分配到不同的计算CPU计算单元上去啊分配到不同计算盒上去然后把结果能够最终汇总起来其实这方面的呃工作吧在过去的十年年是做了非常

146
00:24:44,600 --> 00:25:14,280
多的工作的啊所以现在我们可以自豪地讲啊计算机软件已经追上了硬件的步伐现在你有多少硬件我们这些底层的计算库都能够很好地去用用尽你的计算力啊这个里面的我们这位呃接蛋糕啊就是中文叫杰克唐加拉啊他的工作呢是起到了很多奠基性的作用的而其中有一个很重要的叫Blast它实际上是一个通用的接口就是你只要按这个接口去写你的

147
00:25:14,600 --> 00:25:23,800
算法实现那么底层的那些优化啊就可以交给那些公共的库存处理了这些底层的优化包括非常基础的一些数学运算

148
00:25:24,120 --> 00:25:34,120
比如说项量啦这个呃举振啦这样的一些基础性的运算都是做的非常非常优化的一些单元它会自动的帮你去做优化

149
00:25:34,120 --> 00:25:46,920
啊这个是我觉得是非常非常有益的一件事情所以我我非常赞同的一个点就是这个领域是应该拿一次土陵奖了而且众望所归啊今年的这个获奖的这个人

150
00:25:46,920 --> 00:26:16,840
对而且呢那个党瓜那这块的他和那个我们中国其实关系是挺好的对对对他来过好几次以前之前对包括我我记得我在那个参加一些学术会议的时候其实就那个也听过他现场听过他的那个报告对人也是特别耐识对我们国家在那个超算方面一些建设实际上起到了非常多的一些提了很多一些好的建议对包括现在那个也是我我们我

151
00:26:16,920 --> 00:26:30,200
我也看到在那个我也我也在一些群里面吧然后嗯也会那个我们有同事会和嗯他去讨论包括中国接下来一些超算的一些发展的一些方向对实际上是一个特别好的一个人

152
00:26:31,040 --> 00:26:46,600
所以也算是中国人民的老朋友了哈对对对然后谈到这个超计算机超算啊这一块呢也有挺多有意思的话题啊这个刚才这个王老师也提到了有一个很著名的

153
00:26:46,600 --> 00:26:57,440
世界超算top五百这个是有一个组织啊就叫top五百的一个组织他每年会发一堆的不同领域的top五百其中一个是超级算机

154
00:26:58,120 --> 00:27:09,800
嗯虽然不算完全官方但是现在大家都认他也都会参与他的这个评测这个评测的基准算法就是用的我们党高二教授的这个一个库

155
00:27:10,080 --> 00:27:15,480
用这个库来做的一个benchmark来做这个超算的这个基基础的这个基基准评测

156
00:27:16,280 --> 00:27:19,360
而说起这个排名啊就是也很有意思啊就是

157
00:27:20,560 --> 00:27:27,920
啊我我之前就专门一一看过其实在好像是一七一七年还是一八年

158
00:27:28,680 --> 00:27:34,080
之前连着好几届这个top五百的冠军都是我们中国的这个太湖之光

159
00:27:34,880 --> 00:27:44,880
啊然后再往前当然都是美国比较多了然后中国崛起之后中国连着拿了好几年但最近几年呢有一个日本的超算就是叫富月

160
00:27:46,200 --> 00:28:00,560
这个就是日本的超级算机以领先相当多的一个大概领先百分之三十左右的算力啊拿到第一名然后二三名是美国的第四名是我们的这个太湖之光这个是去年下半年的这个这个成绩

161
00:28:00,560 --> 00:28:06,480
而但这个呢我也专门问了一些相关的朋友他们就说啊这个其实是

162
00:28:07,080 --> 00:28:14,080
呃要要要要怎么看呢首先第一呢中国表面上丢掉了这个第一名啊美国也没拿到

163
00:28:14,480 --> 00:28:19,280
但其实目前世界上最强的超算还是中国和美国有两点

164
00:28:19,840 --> 00:28:25,880
第一点的就是综合算力就是你把五百强里边所有上榜的超算的计算能力加起来

165
00:28:25,880 --> 00:28:34,360
嗯你不要光看排前面的几个你把所有上榜的五百前五百强的这个上榜的操算的加这个这个能力加起来

166
00:28:34,600 --> 00:28:40,040
你会发现中国是也额领先的第一名然后其次是这个美国日本其实很少的

167
00:28:40,840 --> 00:28:47,560
啊这是第一个就是总量优势第二个很更重要的呢就是下一代的超算就是一级的超算

168
00:28:47,560 --> 00:28:56,120
这个ABCDE啊这个一级的超算呃比现在的这个数据呢应该会要高一到两个数量级的超算其实中国和美国都在做了

169
00:28:56,720 --> 00:29:03,520
这些呢由于他还没有呃正式的投入使用所以呢他可能就没有在这个榜上面出现

170
00:29:03,840 --> 00:29:09,640
但是现在就有人跟我说说可能大概今年下半年的榜单可能就会出现了

171
00:29:10,080 --> 00:29:14,360
所以大家可以拭目以待哈期待这个这个新的一代的这个出现

172
00:29:14,360 --> 00:29:24,920
那我有一个问题啊想想想问问王老师就咱们现在学校里边假设要做一些课题想申请这个超算资源可以比较方便的申请到吗

173
00:29:25,960 --> 00:29:41,080
哎你你这个你这个点说得很好对其实呃有的其实现在那个国家在做一些呃科研支撑方面的时候超算其实也是在科学研究这一块它实际上是一个支撑点

174
00:29:41,080 --> 00:29:53,720
对那我们学校其实就有对我们就有同事在申请一些和一些那个呃其他学校比如说像那个广州广州那边有超算嘛学校去做联合申请的时候

175
00:29:54,040 --> 00:29:58,240
哎广州那边的那个超算呢他会配套一个超算资源

176
00:29:58,240 --> 00:30:03,280
也会配套我们一些资源也在那个平时的时候去用

177
00:30:03,800 --> 00:30:09,720
甚至呢其实他是挺希望一些科学研究能够落地到超算里面的

178
00:30:10,000 --> 00:30:16,720
对因为超算其实有一个非常大的一个一个一个局限啊对不是说他的缺点就是

179
00:30:17,440 --> 00:30:26,080
嗯因为他能力特别强他就需要一些应用特别是能够充分地利用到这些算力的应用在上面

180
00:30:26,800 --> 00:30:34,640
对他就是特别是希望对所以他挺挺鼓励哎有什么好的一些应用能够放到超算里面来他就嗯能够给我们去提供支持

181
00:30:34,880 --> 00:30:39,560
特别是如果你后面还能够产生一些经济上的一些效应的时候对他就他就更支持了

182
00:30:39,800 --> 00:30:50,480
对因为我们知道超算其实他是需要投入巨大的这些资源去建设的包括他的光电费其实他的在里面运行其实就有非常大一些花费对所以说他是一个非常联动的一个一个形式

183
00:30:51,480 --> 00:31:00,520
就我我心目中啊就是如果这个事情做得好的话其实他应该就是就我们假设国内的超算环境建设的比较好

184
00:31:00,520 --> 00:31:09,480
其实像学校里面的不要说是一些重大课题了就是一些学生他去做一些研究课题的话其实都应该可以去尝试一下

185
00:31:09,480 --> 00:31:14,760
还有包括像老庄你们公司里面会有这样的资源吗我不知道啊

186
00:31:14,760 --> 00:31:23,240
啊但有的时候其实也也应该面向社会我觉得可以提供一些这方面的资源因为他本质上啊超算做的事情其实很单纯

187
00:31:23,840 --> 00:31:26,800
就是大量的密集型的计算的内容

188
00:31:27,720 --> 00:31:30,840
就你你肯定不会把你的应用软件跑上去跑

189
00:31:31,280 --> 00:31:34,960
但是你会把你应用软件所需要的一些比如数据分析处理啊

190
00:31:35,320 --> 00:31:42,640
比如说一些预测呀一些模型的分类呀这样一些高度密集型的东西把它专门压缩好放进去算

191
00:31:43,200 --> 00:31:54,520
消耗掉一些钻石之后得到结果然后把这个结果应用到自己的应用里去这个其实是非常适合外包的就是从逻辑上来讲啊但是我确实呃不知道现在到什么程度了

192
00:31:55,680 --> 00:32:04,680
我我确实不知道我们公司的情况本来说实话聊超算这个话题我还以为我插不上话的但是我我现在其实能提供一个八卦

193
00:32:05,520 --> 00:32:14,040
呵呵八卦好因为前面王老师在说道说这个党哥那的这个教授他提提出过一个叫不拉死的算法嘛

194
00:32:14,960 --> 00:32:20,520
对嗯然后我突然在联想起来有一个的国内的高手叫张先亿

195
00:32:21,080 --> 00:32:28,640
他是中科院的后面当又去读了m i t的博士后然后他就开发了一个著名的开源项目叫open blast

196
00:32:28,640 --> 00:32:38,720
对嗯嗯是的这个是在国际上应该是在这个应该是超算领域非常著名的一个开源的对对对对对我还很有很有一次很有

197
00:32:39,120 --> 00:32:50,440
性就是跟他一起来就是搞了一个圆桌因为他现在还有一个创创业的一家公司专门做这个基于open blast的一个呃开源的商业的一个公司

198
00:32:50,440 --> 00:32:58,160
嗯很有意思然后另外还有一个八卦就更有意思了因为呃前段时间不是俄乌的这种冲突吗

199
00:32:58,840 --> 00:33:04,360
对然后就有人到了open blast的这个仓库下面去提了一个建议

200
00:33:04,960 --> 00:33:14,160
说呃我们应该让这个open blast不要支持俄罗斯的一个芯片以及不要支持中国的龙芯因为怎么怎么样

201
00:33:15,120 --> 00:33:26,920
然后然后我觉得这些人应该是没想明白这个open blast背后应该是什么样的背景以及什么来历他都没想过然后就冲出来提这个建议嗯嗯就仅提供一个八卦

202
00:33:27,400 --> 00:33:35,400
嗯嗯嗯挺挺有意思这个blast实际上是一个协议啊就实际上它是一个接口协议就是它是一个规范的协议

203
00:33:35,400 --> 00:33:41,280
就是把上层应用所需要调用的一些嗯核心算法把它标准化了

204
00:33:41,840 --> 00:33:53,560
比如说两个项量相加两个项量项量相成把这些全部都标准化了然后blast下面的实现其实是呃就是这个这个呃百话齐放的

205
00:33:53,840 --> 00:34:00,760
比如刚才表表委提到的这个open blast就是应用非常广的因为它是开源社区里面做的一个blast的实现

206
00:34:00,760 --> 00:34:10,680
然后还有很多专用的比如说呃恩维迪娅他做显卡的吧他有专门的一个实现就是用这个他自己的显卡的那个那个计算的

207
00:34:10,680 --> 00:34:25,440
api来实现了blast的那些那些那些功能的呃api然后那么你你你你你你的应用软件是不需要改的你就写好之后你只要用blast的协议去写好那么对底层你可以用open blast实现

208
00:34:25,440 --> 00:34:36,480
呃作为通用通用的这个解决方案然后你检测到说我系统里面有一块nvidia的显卡我可以转为调用nvidia的那个blast实现这样效率会高很多它类似这样子的

209
00:34:36,760 --> 00:34:43,840
所以实际上挡盖二的那个早期工作啊是给这一类的数值计算确定了一个非常好的抽象层

210
00:34:44,640 --> 00:34:55,240
嗯也为后来的这个百话齐放做了很多的这个这个贡献所以open blast现在确实是是用的非常广的它的性能也也相当的不错在这个开源实现里面

211
00:34:56,040 --> 00:35:06,160
嗯ok呃关于这个超算这事儿啊刚才既然谈到这个表委提到这个这个有人去open blast这里提这个啊这事儿其实

212
00:35:06,640 --> 00:35:15,480
呃在超算这个领域啊超算已经被广泛地认为是国之重器也就是国家的国力的这个重要主层部分了

213
00:35:15,480 --> 00:35:20,600
所以在几年以前甚至还没有开始打这个中美贸易战的时候

214
00:35:20,960 --> 00:35:28,280
美国就已经在这方面对我们施加了非常多的限制大家肯听说过哈就是中国最早一代的这个超算

215
00:35:28,960 --> 00:35:30,960
最早的有这个曙光

216
00:35:32,360 --> 00:35:41,200
啊然后面有天河啊天河一号天河二号这些这些超级钻机当时就已经在二零零几年的时候就已经进了这个

217
00:35:41,720 --> 00:35:48,080
呃top五百但是这一些超级钻机他使用的芯片全都是英特尔的芯片

218
00:35:48,920 --> 00:35:58,320
那么在我忘了是二零一几年的时候美国就已经明确了就说你英特尔的芯片可以出口到中国但是只能出口民用的版本

219
00:35:58,840 --> 00:36:02,400
那些未超算定制的版本就不能往中国出口了

220
00:36:03,120 --> 00:36:09,840
然后约定了一个时间那么中国就被迫开始去研究完全国产化的这个自己的超算

221
00:36:09,840 --> 00:36:16,240
所以最新一代中国的这个最强的已知的啊已知的这公开的最强的这个叫做呃成为太湖之光的

222
00:36:16,680 --> 00:36:24,760
二零一六年底拿到这个呃top五百榜首的这个这个超算他就使用的是完全国产的这个

223
00:36:25,240 --> 00:36:33,240
呃计算机芯片了这个芯片的还很神秘啊他用的指令及他的这个具体的架构都不公开的我们都不知道的

224
00:36:33,240 --> 00:36:40,560
呃然后这个呃太湖之光上面跑着一个为这个芯片专门定制的一个类内四系统

225
00:36:40,960 --> 00:36:44,920
然后这个系统上有专门为这个芯片优化的一组的编辑器

226
00:36:45,440 --> 00:36:55,760
福博川和西的这个运行库啊就是当你去用超算的时候其实呃对这些事情不需要特别深入了解因为你他是有上层都是标准化的

227
00:36:56,080 --> 00:37:04,440
但是这个这个呃呃太湖之光实际上就他已经是核心的这个部分cpu已经是国家我我们自己生产的了

228
00:37:04,760 --> 00:37:14,400
但是呢呃我听这个领域比较熟悉的朋友讲就是在超算这个领域啊完全的国产化其实还没有实现

229
00:37:15,120 --> 00:37:19,520
呃其中包括比如说呃超算的一些设计软件啊

230
00:37:20,040 --> 00:37:23,840
还有一些什么这个代工厂啊这个还

231
00:37:24,960 --> 00:37:28,680
实现国产这个自主所以这里面还有很多工作要做

232
00:37:31,080 --> 00:37:36,480
对还有一个对我这里还可以提供一个信息就是超算上面所要运行的一些软件

233
00:37:37,120 --> 00:37:41,600
对其实那个刚才所提到的那个董高了教授其实他还有一项

234
00:37:42,200 --> 00:37:44,840
工作对是他和他老实的就是卖特赖

235
00:37:45,640 --> 00:37:51,400
对啊其实卖特赖是当时他老师所提出的那个临派格的时候

236
00:37:51,720 --> 00:37:55,640
对包括还有像一二s pack呀对他们是为了教学的方便

237
00:37:56,040 --> 00:38:03,000
对他们把这几个那个包啊给他打打包成一个小的工具对方便他们去教学

238
00:38:03,400 --> 00:38:07,400
对那后来呢这个小工具就成长为我们现在

239
00:38:07,840 --> 00:38:11,640
嗯几乎所有包括搞数学的都会去使用到的一个卖特赖

240
00:38:11,640 --> 00:38:19,440
对了当时那个董高了带读博士的时候其实就是基于这个工具去做那个临派格方面的这一研究

241
00:38:19,760 --> 00:38:25,240
对说成的像这种数学上的这种工具啊这种也是超算里面一个非常重要的一个点

242
00:38:26,240 --> 00:38:29,040
对它实际上是降低了超算的使用门槛

243
00:38:29,640 --> 00:38:34,640
就是你不需要懂计算机体系架构你也不需要精通编程

244
00:38:34,640 --> 00:38:43,640
你只要了解卖特赖的那一套语言你就可以去把你的这个计算任务把它变成计算机超算可以使用的东西

245
00:38:44,040 --> 00:38:49,640
那正好在这个前两年吧这个美国也把中国的一些大专院校

246
00:38:50,040 --> 00:38:59,040
比如非常出名的像国防科大呀还有这个哈哈工大呀啊都认为他们为中国军方工作啊所以把这个嗯

247
00:38:59,040 --> 00:39:09,040
嗯呃他们列上了一个实体名单那直接导致的就是卖特赖不能向他们提供授权了他们就不能够使用正版的卖特赖了

248
00:39:09,640 --> 00:39:21,240
那这个事儿也是就是影响也挺大的我不知道现在大学里面对这个事情有没有一些呃比较完备的一些这个备用方案比如说如果

249
00:39:21,640 --> 00:39:28,640
现在只是少部分的学校被制裁不能使用哈但是大部分的学校他们有没有在考虑一些代用品啊或类似这样的

250
00:39:29,640 --> 00:39:36,840
对那个还还是有的对特别是那个开源呀还有包括嗯

251
00:39:37,340 --> 00:39:46,140
这几年比较流行的像拍摄呀人工智能这块起来以后对其实嗯是有这样一个一个趋势的对也是我们会在

252
00:39:46,140 --> 00:39:57,840
来来学校里面去呼吁的对因为本身我们都希望在学校里面肯定是尽量多用这些开源的这些嗯软件去去作为教学科研相关一些活动

253
00:39:58,240 --> 00:40:01,940
对但是呢我我发现了就是特别是像卖特赖不这种

254
00:40:03,040 --> 00:40:16,060
特别那个专业化发展成熟的软件对包括在很多其他的学科因为知道卖特赖不其实他不光是数学其实还有很多其他的一些理工科理那个嗯都会去去去

255
00:40:16,140 --> 00:40:26,560
用他而且呢他确实是方便而且呢会和很多的一些其他的一些一些软件呀或者是一些那个后续的一些处理的一些工具对他会形成一些生态

256
00:40:26,960 --> 00:40:34,420
对他有非常好的一些接口甚至一些专业的硬件他都会有对这个呢其实就会使得

257
00:40:35,060 --> 00:40:39,100
你可能在一些局部里面可能会对他有一些好的替代

258
00:40:39,100 --> 00:40:52,900
但是呢在一些场景里面可能你还是要用到卖特赖不可能他还是最适合的对所以说呢我是看到包括我们自己学校里面作为教学这块的话其实还是有对卖特赖不的这种相关的一些依赖吧

259
00:40:54,420 --> 00:40:57,380
对这就是一个舒适区的问题了

260
00:40:58,220 --> 00:41:04,860
就是就是人吧他都是有惰性的不是逼急了这个他他就不会去采取一些行动

261
00:41:05,300 --> 00:41:10,460
但其实我看到的这个卖特赖的这个代代用品其实还是很有一些的

262
00:41:11,060 --> 00:41:20,900
嗯比如说法国人做的那个塞赖嗯对他甚至兼容卖特赖的那个文件格式哈就就理论上讲最大限度的降低这个

263
00:41:20,900 --> 00:41:25,100
迁移的这个难度但是也必定会有一定的学习成本

264
00:41:25,780 --> 00:41:33,900
还有一个就是差异比较大但功能同样强大的就是基因优的那个奥特曼就是欧西提阿维翼啊就是基基因优这个项目

265
00:41:34,260 --> 00:41:42,300
其实他也很多年了我自己没有深入用过哈但是我看文档啊各方面我觉得他功能上是一点都不比卖特赖差的

266
00:41:42,620 --> 00:41:50,180
但是基因优的软件吧大家都知道了就是在利用性啊各方面可能会有些问题那那这个也是有学习成本的问题

267
00:41:50,900 --> 00:41:59,460
好说到这个话需要点时间对一方面需要时间另一方面可能也需要一些决心这种决心完全靠自发就比较难

268
00:41:59,860 --> 00:42:05,860
他必然得是某些政策性啊或者是相应的一些有一定的行政力量或者走之类的

269
00:42:06,580 --> 00:42:15,620
嗯这个老庄你们你们有遇到这种就是常用的习惯了的软件不能用了被迫要改的这种这种这种问题有啊

270
00:42:16,620 --> 00:42:19,820
肯定肯定有啊那你们一般咋办呢

271
00:42:20,500 --> 00:42:22,820
嗯自己做替代啊

272
00:42:23,700 --> 00:42:32,020
然后那些人不肯用觉得我以前用顺手了让我换一个好难受这个公司规定你当然不能用了公司内部有严格的这个约束啊

273
00:42:32,300 --> 00:42:39,060
你不能用因为你会导致这种违规法务违规也好信息安全违规也好肯定不准用的

274
00:42:40,060 --> 00:42:53,420
所以这就是一个执行力的问题了那桂思是执行力很强的公司所以这个问题不大对这个都问题不大其实最难的还是要要投入巨量的人力物力还得把替代系统开发出来这个很累

275
00:42:56,460 --> 00:43:08,860
而且比如说如果这个比如说卖车赖不太有一个插件或者有一个库特别好用啊暂时没有其他替代品那你新开发的替代者必须兼容这个库才行这样类似这样的需求就会有很多

276
00:43:09,060 --> 00:43:39,060
嗯说到这儿呢我觉得正好就可以转向我们的第二个话题啊就是应用软件的安全性的问题了嗯这个话题啊其实正好我也看到我们国内做这个网络和信息安全的某某头部企业某某自身的这个大佬啊也是这个政协的委员他他也在今年这个开两会的时候也专门提议了啊就说这个我们要非常重视这方面的嗯

277
00:43:39,060 --> 00:44:09,060
一些安全性啊但是这个人呢他他提的这个建议啊让我觉得哎挺挺有意思的一点在哪里呢他倒没有说我们要盲目的去呃什么软件都自己做一套啊就是他反而提的是说第一我们要主动走出去啊在境外的在世界全球性有影响力的那些软件社区里面站稳脚跟获得影响力让他们不能随意抛弃我们把这个建议摆在第一位

278
00:44:09,060 --> 00:44:39,060
嗯啊然后第二位呢他的建议是在使用大量的外部软件的时候要做好信息安全的把关啊就是要防止这个里面存在的一些对国家或者是企业或者甚至个人的安全有危害的一些隐患啊然后第三才是说哎这个有一些东西也要做好这个相应的准备啊就是要寻找相应的替代品我觉得他提的这几个建议呢还挺靠谱的但这个话题呢我觉得很多人也都关注

279
00:44:39,060 --> 00:45:09,060
很多人也会产生一些莫名的恐惧就是觉得啊好像这个这个尤其最近俄晤战争啊这个西方对俄罗斯的制裁简直是有一点拿到了心思底底的状态啊就就有人就会说哎突然我们今天每个人都在使用的软件突然有一天不能用怎么办我们是不是要提前自己做一个一样的做出来这个问题呃不知道两位朋友你们怎么看我我先说呗嗯好关于这个问题其实

280
00:45:09,060 --> 00:45:39,060
我我一直会强调工程思维所谓工程思维就是你得系统性地看一件事情假设里面有风险那么风险最容易发生的第一大风险是什么或者是危害最大的第一大风险是什么这可能两个的排名第一还不一样然后你要做出来一个风险的排序然后基于风险的排序然后分别的去考虑他的应对策略而且在考虑应对策略的时候还要去想

281
00:45:39,060 --> 00:46:09,060
我为了这个投入我要投入多少人力物力精力怎么怎么样一个一个地往下排那么抗议的领域我就不说了但是在开源软件风险的领域其实我们同样需要这样一个排序排名第一的风险恰恰不是别人有意针对你干什么就是代码有漏洞有bug导致安全漏洞这是最多的而且啊

282
00:46:09,060 --> 00:46:39,060
随着开源软件的增多随着开源软件在我们的软件系统当中的使用的范围和比例的增加那么这个风险是在不断上升的而且这是最大量的这是第一类第二类可能的是有恶意软件这些恶意软件有出于这种呃绎客的理由黑客的理由也有可能是出于好奇也有可能是出于政治理由政治投毒像上次我们聊过的乌克兰的那种政治投毒这种理由

283
00:46:39,060 --> 00:47:09,060
是第二类风险然后第三类风险才是别人不让你用某款软件而且这个软件通常是呃商业软件或者是开源软件的商业版本嗯在下面一个风险才是某个比如说像get hub这样的平台彻底对你关上大门嗯这些风险的顺序我我

284
00:47:09,060 --> 00:47:39,060
觉得当然这个风险的几率我不太说得好但是顺序大概应该是这样那么我们应对的策略也应该是这样这是第一第二个其实呃我觉得那个安全大佬就是那个前面你说的政协委员的安全大佬他说的特别有道理的一点是我们越是要担心别人不让我们用我们越是要积极地走出去参与国际的开源项目对他太表两件事

285
00:47:39,060 --> 00:48:09,060
第一个是如果我们的贡献比例占到百分之二十百分之三十甚至百分之五十对啊别人不敢不跟你玩啊对不敢不跟你玩而另外一方面其实还意味着我们要有能力在开源社区做出贡献能够生存下来哪怕别人不让你玩了你也是在外面混过的在外面写过代码提交过派去的那么你回来你能够接着干下去对如果你在国际社区在国际上的

286
00:48:09,060 --> 00:48:16,660
开源社区你都没有参与过贡献你关起门来自己改代码觉得我能改的下去这就是一种妄念

287
00:48:17,740 --> 00:48:18,240
是

288
00:48:19,300 --> 00:48:21,620
我觉得这方面俄罗斯比我们做的好

289
00:48:23,460 --> 00:48:32,620
啊俄罗斯的黑客级的开发者啊这个黑客是包抑的还可啊不是那个搞破坏的是那种特别牛的那种那种程序呃

290
00:48:32,940 --> 00:48:43,020
这种开发者挺多的啊当然俄罗斯也有很多那种那种含义的就cracker啊就是搞网络破坏那种也很多所以他们他们技术力是强的而且

291
00:48:43,460 --> 00:48:55,980
呃有挺多这种高精尖的这个开源的这个这个代码是是俄罗斯或者前苏联的一些一些这种人去去贡献的所以挺他们这方面还真的还挺厉害的

292
00:48:56,500 --> 00:49:04,140
呃呃相比这个人口和这个程序员人口中国比俄罗斯多得多但是反而好像

293
00:49:04,820 --> 00:49:09,460
当然这几年我觉得已经好多了比以前好多了但我觉得还是有有很大空间的

294
00:49:10,020 --> 00:49:17,900
嗯王老师呢怎么看对我我我说一下对我这一块呢其实也会从两两个点来不同的去看这个事儿

295
00:49:18,300 --> 00:49:22,540
对第一个呢其实我特别赞同包包括刚才表伟老师所提到的

296
00:49:22,940 --> 00:49:28,940
对其实我们的同学也好老师也好其实是非常需要走出去对特别是

297
00:49:29,500 --> 00:49:34,660
嗯如果是和开源相关的一定要走到国际上的这种开源社区里面去

298
00:49:35,180 --> 00:49:46,020
从事相关的一些学习和研究工作所以这一点是那个非常非常重要的也是我们现在希望在那个我们自己的学校啊实验室资金去推的对那一个非常

299
00:49:46,540 --> 00:49:52,500
那个大的一个好处就是你首先你需要知道这就是世界上的这些好的东西是什么

300
00:49:52,860 --> 00:50:00,300
对并且呢哪些厉害的人是谁对然后呢如果有机会尽量和他们去做些连接对和他们去打试一片

301
00:50:00,740 --> 00:50:06,260
对包括我们现在实验室去参与到的一些国际上的一些那个开源项目你会发现

302
00:50:06,900 --> 00:50:12,500
真的还是特别的一些耐事他们的一些那个开发罪啊对的一些贡献责呀还是非常好

303
00:50:12,500 --> 00:50:21,140
对这就是为什么我们现在其实还是鼓励同学在getup上面去做一些相关的事情包括我们自己实验室那些项目还有一些文档啊其实都是

304
00:50:21,460 --> 00:50:28,460
背诗在内上面的对因为它就是一个国际环境对它能够去连接更好的一些人更好的一些项目

305
00:50:28,780 --> 00:50:35,900
对这是我们是需要大大的去去鼓励而不是说啊我只能用某些东西把我们自己给他

306
00:50:35,900 --> 00:50:39,380
局限起来对这个呢肯定是不对的就我们自己

307
00:50:39,740 --> 00:50:48,860
嗯拉几个人去玩对越是这种那个嗯某些方面去封闭那我们反而是要越开放对我们要去没错

308
00:50:49,300 --> 00:50:55,220
主动去参与他们这些事情对那即便是别人的其实我觉得也也没什么呀他确实是好没有必要你

309
00:50:55,620 --> 00:51:02,620
你自己再再再去做别对吧我觉得这是第一个层面对第二个层面呢我同志也是非常赞同

310
00:51:03,100 --> 00:51:06,140
对在某些方面如果我们有自己的

311
00:51:06,620 --> 00:51:12,780
特别是我们自己发起的一些开院项目对我们现在很多的一些大厂所发起的一些开院项目

312
00:51:13,140 --> 00:51:18,460
我们也是鼓励同学们也多去用我们自己的一些开院项目对为什么这么去说呢就是

313
00:51:18,940 --> 00:51:24,340
嗯对因为大家都是搞软件的对软件的有一个非常大的特点就是好多软件啊它一定是

314
00:51:24,340 --> 00:51:30,500
是用出来的对他不是说你有多少的高手对吧你有多少厉害的一些工程师

315
00:51:30,900 --> 00:51:37,500
对他是一定是和一些用户不断去打磨不断去提一些问题然后的把它慢慢的给他培养起来的

316
00:51:37,780 --> 00:51:47,220
对那我们现在知道包括我们现在国内的一些嗯一些大厂队都开始去嗯希望能够推出主导的一些一些开院项目

317
00:51:47,220 --> 00:51:56,940
对那我们其实在学校里面一方面我们和格局国际社区多去对接第二方面呢我们在教学我们在做研究的时候其实也都去用自己

318
00:51:57,540 --> 00:52:06,060
的特别是哎我们觉得还还挺有一些创新点的一些一些一些项目对那其实我们前面刚才那个例子其实是是一个特别好的

319
00:52:06,340 --> 00:52:13,820
对那他们刚才那个党高了他们嘛就是从做那个另派格的时候对把它做成一个教训工具

320
00:52:14,180 --> 00:52:22,380
对你可以想大家可以想象一下对那个时候他的那种简陋性和我们今天所看到的那个门带大法其实是相差的十万八千

321
00:52:22,860 --> 00:52:28,860
对但是那就是因为给这东西的那我就先从学生里面去用嘛他可能不完善不好但那没关系我们

322
00:52:29,260 --> 00:52:43,340
边用的时候当中我们可以去提出一些问题对吧那这个问题如果有人解决最好如果没有人解决那我们也可以去一起解决嘛这样的话我们可以一起把这个软件让他不断地去完善不断的那个成熟

323
00:52:43,340 --> 00:52:50,020
对那那这个其实就可以慢慢成长为一个我们就是一个那个国际上的一个一个最好的一个东西

324
00:52:50,260 --> 00:53:01,300
但是呢你你不能够说一开始你觉得他不好你就不去用他对我觉得是可以嗯多去做一点这方面一些事情对带我们同学去去体验去学习这些软件

325
00:53:01,300 --> 00:53:31,260
所以说现在我实际上是在学校里面大力推崇基于一些开源的软件去替代我们传统的那些嗯商业化对甚至是一些是一些那个专业化的一些软件包括像像这些麦特莱弗亚对其实虽然他用起来方便对但是呢像一些开源项目对那特别是我们自己如果有像我们的欧盟布拉斯特亚这个东西对其实可以考虑去多用对因为你你多用其实他才能够慢慢地这种成长起来对他一定是一个这种有和其他软件

326
00:53:31,300 --> 00:54:01,300
也有关系形成一个生态上的一个一个东西对那这样的话其实哎那我们其实就会越来越越有自信并且呢不光是我们用那还可能奉献给全世界所有的人去用那开源其实就是这样一个一个精神嘛对吧嗯这个无论是程序员还是产品经理啊都有一句话是智力名言啊叫一车到户就是你要你要吃自己的狗粮意思就是说你自己做东西你自己一定要多用嗯就是这个真的

327
00:54:01,300 --> 00:54:31,300
是颠复不破的真理就是软件是用出来的嗯用得多才有可能成为一个好软件而且确实我的感受跟王老师一样就是我我遇到的一些国外的啊包括啊对我们不太友好的国家的一些开发者其实他本身人都是很耐斯的在做技术的时候在做创新在做开放性的创新的时候其实大家的很多东西里面价值观是共通的而这敌人慢慢地变得不开放了我们就

328
00:54:31,300 --> 00:55:01,300
马上要去扛起这个开放的大旗这一点我非常非常的赞同啊这个那说回来呢就是刚才表伟从这个一个一个就是大的面上给了一个排序啊我想给出另外一种思路就是做一下这个不同的软件的一个分类啊我我我我把软件分成大概粗一点分三类啊可能不严谨但是比较方便我们讨论问题一类呢叫做

329
00:55:01,300 --> 00:55:15,580
日常性的功能性的应用软件啊比如说我们现在已经耳熟能详的各种各样的互联网服务还有我们在计算机和这个手机里面经常用到的一些常用工具

330
00:55:15,580 --> 00:55:30,780
比如拍照啦照片的这个处理啦啊这个拍视频啦还有看书啦类似这样的软件这种东西我称之为叫做常规性的应用软件这一部分我觉得我们国家现在不存在任何风险

331
00:55:31,300 --> 00:56:01,300
就是你需要的时候随时很快就可以做一堆出来啊以前国内也有人尝试过但由于各种原因没做成那是因为需求就那样如果真的被逼到一定程度了哪怕从零开始很快就能起来这种我觉得不是特别担心这是第一类啊第二类呢就是所谓的平台性的软件这个里面呢其实呃比较引人注目的就是类似于gitHub这样的开源软件托管平台这一块啊

332
00:56:01,300 --> 00:56:31,300
它确实存在假设极端情况哈但是现在从恶务战争这么严重的一个呃制裁的形势下gitLab啊gitHub都都坚守了自己的阵地啊拒绝去做进一步的这样的一个分分离分割呃我觉得已经是一个非常重要的风向标了所以这块呢我也不是特别担心而且这个如果大家真的很了解git这个东西就gitHub底层的这个关键工具啊git这个分布

333
00:56:31,300 --> 00:57:01,300
式的原码版本管理系统你就会知道这样的平台就算啊有朝一日走到了一个很极端的情况你非常容易去fork里面的东西出来因为它本来就是分布式的啊你可以先锁定你现在使用的版本啊最新的你先不升级然后fork出来之后你再去具体做因为它只是个托管平台关键还是里面的内容啊所以这个平台这个层面呢有有人在说啊说哎呀我们不能受制于gitHub

334
00:57:01,300 --> 00:57:31,300
我gitHub和gitLab啊我们要自己做一套啊这个事儿的我觉得也未免是有点起人忧天或者有其他的啊不可告人的目的啊这这这个咱就不去说它了但我觉得这个有点没有必要啊因为这个东西本身的危害并不大啊第三类是我觉得要认真对待的了就是一些国之重器啊比如刚才我们提到的超算啊以及为超算服务的一系列东西还有大家耳熟能耳

335
00:57:31,300 --> 00:58:01,300
能详的北斗啊与这个北斗相关的所有的东西还有比如说芯片计算机芯片的制造全流程以及这个全流程上需要用到的各种各样的软件这些东西呢我觉得它的危险是非常现实的也就是在可预见的未来是完全有可能就真的出现的而这些软件呢跟我说的第一类的软件还不太一样它不是说你想做马上就能做出来的它跟这个metlab是很像

336
00:58:01,300 --> 00:58:13,260
就是它本身并并没有那么的不可愉悦的东西在里面但它是一个很专门的软件它需要长期的使用迭代才能够让它变成一个真的好用的东西

337
00:58:13,260 --> 00:58:27,260
所以这种东西我反而觉得呢是需要未雨绸缪地提前开始搞起来而且刚才我觉得王老师说的这个点我也非常赞同从学校开始搞是非常非常好的一个方式

338
00:58:27,260 --> 00:58:29,260
就是在教学当中先用起来

339
00:58:30,260 --> 00:58:44,740
嗯那这个你比如说metlab其实有很多好的替代品我刚才举的例子arc'tof还有这个基于python的一整个python站的一个科学计算和这个数学呃数学相关的东西其实很多了

340
00:58:44,740 --> 00:58:54,420
而且里面有很多部分已经可以兼容metlab的一些文件格式啊一些那个呃metlab的那个编程语言啊它其实都是兼容的或者有相应的模块

341
00:58:54,420 --> 00:59:24,380
唯一就是你需要有一点使用的这个呃就是学习曲线你需要付出一点代价去尝试但是如果一个刚进学校的学生以前也没用过metlab的话他有什么损失吗没有损失的他就是从头开始学另外东西嘛好嘞所以我觉得这个这个逻辑应该是比较重要就是而这一块呢我我我我我我一直借各种机会都在表达就是包括国家包括有关的这个呃协会

342
00:59:24,420 --> 00:59:36,580
或者类似的我觉得应该在这方面去做一些推动性的工作因为按照我刚才说的这三个分类的话只有最后的这个分类啊包括刚才说的所有这东西包括cad啊一些设计软件都是属于这个分类的

343
00:59:36,580 --> 00:59:47,300
呃他的应用面没有那么广但是对国家非常重要对我们整个呃民族复兴的大业非常重要那这个恐怕就得呃另外专门去考虑

344
00:59:47,300 --> 00:59:59,260
包括我们老庄同志的这个工作的公司啊也也可能是这个前前前线部门之一啊也会碰到很多这种问题啊

345
00:59:59,260 --> 01:00:10,060
所以我觉得这方面是需要社会各界一起来努力的一个一个一个领域前两个真的我个人觉得没有太大的必要去恐慌或者担心啊

346
01:00:10,620 --> 01:00:35,300
其实我还想指出一个呃现在的一些讨论当中的一个误区或者说有人刻意混淆有人真不懂就是呃把软件不是分开源闭源而是分美国或西方但通常会说美国好像哪怕这个开源软件是美国的我们都不敢或者说用起来要当心

347
01:00:35,300 --> 01:01:05,260
那是一个很神奇的思路这不是神奇这是无知的思路或者装作无知的思路对对但事实上我觉得只要它是开源的尤其是像基因优这样的开源那是非常友好的而且来自非常友好的开源对对品牌有保证的这个我们就应该大胆的甚至是积极的去用而且就应该像我们刚才说的要反渗透对对要要打入内部去赢得一定的影响力

348
01:01:05,300 --> 01:01:35,300
哈不光是用而且要积极的贡献对对这其实华为已经做了示范了嘛早期我们在这个无线电的相关的标准组织里面是话都讲不上的但是十几二十年努力下来就成为主导力量了等到你成为主导力量之后美国人说把你踢出去就踢出去之后发现哎踢出去之后好像我这也不剩啥了是对吧就就是这么回事儿嘛嗯好那我们今天也聊了一个多小时了哈这个

349
01:01:35,300 --> 01:02:05,300
呃一开始说了一下我们几个人在隔离期间的各种啊可以让大家乐一乐的事儿啊然后重点聊了这个今年的图林奖啊这个高性能计算和超算的一些话题啊然后再又转移到这个关于软件的安全可靠软软件的使用的这个安全性方面的一些问题啊希望能够给大家一些启发啊那我们今天的节目就先到这里啊

350
01:02:05,300 --> 01:02:11,380
大家再见好再见拜拜

