1
00:00:00,000 --> 00:00:02,120
好各位听众大家好

2
00:00:02,120 --> 00:00:09,120
那今天呢是我们这个后互联网时代的乱谈啊加更的一期番外片啊

3
00:00:09,120 --> 00:00:19,120
因为上周有一个呃至少对我来说啊对我们几位这个都在行里面混了很多年的人来说都挺震撼的一件事啊

4
00:00:19,120 --> 00:00:30,440
就是有一位这个开源的开发者啊他的一个很算比较热门的一个开源的库啊是no j s的一个库叫no的ipc

5
00:00:30,440 --> 00:00:39,720
那是做这个no j s里面的跨境重信的一个库那么他在这个库里面呢他就提交了一个这个一些代码啊

6
00:00:39,720 --> 00:01:09,400
就是以这个支持乌克兰啊反对俄乌战争这样的一个名义啊在里面加入了一些呃怎么讲攻击型的代码啊如果有人真的使用代码的话会面临着很重大的数据损失所以实际上类似于一个病毒了啊这是实际上是在开源软件供应链的这个里面去投毒的一个行为这个行为呢以我的所知啊好像应该历史上没发生过

7
00:01:09,720 --> 00:01:21,040
所以我们非常想来聊聊这个事情那正好呢我们有一位这个也是多年的老友啊前同事啊就是hacks他是这个对整个事情是一直

8
00:01:21,680 --> 00:01:32,880
呃跟踪也非常的了解所以今天我们也请到呃他来跟我们几位一起来这个聊聊这个事情那欢迎我们hacks给大家打个招呼

9
00:01:33,880 --> 00:01:41,880
哈喽大家好很高兴来到这个节目啊当然还有我们呃常住的两位朋友啊老庄

10
00:01:42,880 --> 00:01:57,400
哎大家好啊王老师哈喽大家好啊那首先请这个hacks说一下这事儿的来东去外吧因为很多朋友可能还不太了解这个事情的情况好的我给大家简单介绍一下吧

11
00:01:58,400 --> 00:02:16,720
呃脑袋PC这个酷吧他呃就是一个note的这样一个酷然后呢用的人还挺多的啊最呃有名的就是vue js这个大家非常熟悉的啊前端三大框架之一

12
00:02:17,720 --> 00:02:30,360
那vue的话呢他的vue cli就是vue的命令行的工具呃在这个开发依赖里面间接的使用了脑袋PC这样一个包

13
00:02:31,360 --> 00:02:42,560
当然也有好多的其他的呃软件也可能用了这样一个包那这个包的作者呢啊其实是一个还是一个比较积极的开源开发者

14
00:02:43,400 --> 00:02:52,400
那他在这个俄乌战争发生之后啊呃他可能啊我就猜测他可能是想啊做点什么

15
00:02:52,400 --> 00:03:09,560
所以他当时呢呃就给自己的这个脑袋PC这个库里面啊就是我们现在最终看到的实际上是加了一个依赖这个依赖呢也是他自己写的叫做

16
00:03:09,560 --> 00:03:34,000
He's not a war这样一个模块啊这样一个库这库干了些什么事儿呢就是啊如果你这个使用这个依赖的话他就会在你的这个电脑的桌面上创建一个文本文件里面是一个反战的一个宣言用各个文字写的这样一个反战宣言

17
00:03:35,000 --> 00:03:46,000
那么他不仅会在你的桌面上写啊他可能也会找一下比方说如果你使用了文捉那也会在这个文捉的目录夹下写这个文件

18
00:03:47,000 --> 00:04:02,000
那么这件事情呃最早也是国内的使用啊优质的一些开发者发现的啊他们发现这个我装了之后怎么突然这个桌面多这个文件感觉是中毒了

19
00:04:02,000 --> 00:04:08,000
结果这个找了一下发现是这个依赖包做的这样一个事情

20
00:04:09,000 --> 00:04:21,000
那么这个事情就呃逐渐的就发酵了在这个发酵的过程当中呢啊有人就去审查了这个这个库的这个历史上的最近的提交吧

21
00:04:21,000 --> 00:04:39,000
结果发现这个他不单单是peace not war这样一个呃新加的这样一个依赖里面干的这个事情发现他在这个之前啊曾经在他的这个代码仓库里面加过一段更加危险的代码

22
00:04:39,000 --> 00:04:49,000
那段代码的话呢如果运行的话呢他就会有一定概率的去检查当前这个用户的ip

23
00:04:50,000 --> 00:05:00,000
然后呢根据这个ip判断你是在什么在什么地方如果是发现你是在这个俄罗斯或者是白俄罗斯的话的

24
00:05:00,000 --> 00:05:17,000
他就有一定概率会去删除啊不是删除了但实际上就是复盖复盖你的这个当前目录复目录啊两极复目录以及这个根目录的所有文件啊因为他是一个地规的一个操作

25
00:05:17,000 --> 00:05:32,000
那这个就啊比前面这个要严重得多了当然他最终其实没有把这个代码发到这个包里面因为他后来就把这段代码又给删掉了删掉之后就是加了我前面讲这个peace not war这样一个东西

26
00:05:32,000 --> 00:05:36,000
所以这个事情本身大概是这样的

27
00:05:36,000 --> 00:06:05,000
所以这个事儿就是现在后面啊就这个事儿本身就是这个开源的这个开发者在他的库里面所做的这样的一系列的操作其实只是这个事件的我我理解啊着这个事件的一部分更有意思的可能是这事儿出来之后也发生了一系列的呃事件包括在安全领域的这个事情讨论还有在这个开源社区对这个事情的讨论也也出现了很多不一样的一些

28
00:06:06,000 --> 00:06:18,000
呃反映这个不知道这个是怎么样的一个状况比如说呃大家对这个事情的态度啊呃后后续的一些对他的这个影响比如对这个开发者本身的影响

29
00:06:18,000 --> 00:06:47,960
而我看到的话呢因为我是呃当时是在这个自己的这个国内的一些开发者群里面啊看到了这个大家来报告了这个事儿呀一开始是那个一个开发者的经常去的这个网站上讲的然后呢啊呃有国内呢因为有这个npm的这个面网这个网这个那个服务呢他实际上是提供了这个npm

30
00:06:48,000 --> 00:07:02,840
这个镜像那么这个镜像的维护者啊就赶紧的就是锁定了这个这个库嘛然后呢也在也在这个VOJS的这个仓库里面也提交了这个issue

31
00:07:02,840 --> 00:07:32,800
比如说这这样一个依赖呀他干了这事儿然后呢当然也在这个本身都的ipc的这个库里面去发了这样的意思那这个事情实际上他发了同时呢实际上也有其他的国外的这开发者发现了这个问题啊也在发这样的一个意思那我当时就去看了一下这些意思就一开始的话呢其实大家这个讨论也就说觉得你觉得这开发者就跟他讲你你这样做可能不太好

32
00:07:32,840 --> 00:08:02,840
那当然也那时候我看到还是有有人支持他的啊就说哎我们这个这个反对这个俄罗斯这个啊对乌克兰的这个这个行为啊所以还是支持他但是当有人这个支持这个支持是指还不知道他做那个复盖和删除文件那个操作的时候吗还是说对这个行为也支持啊一开始还不知道一开始还没有人对揭发这个事情嗯啊所以这个等后来这个事情因为

33
00:08:02,840 --> 00:08:13,840
因为有人发现了这个事情之后这个一下这个这个是大家就非常的这个反对了你就说这个性质就变了啊又变了性质又变了

34
00:08:15,120 --> 00:08:25,360
然后这个事情就逐渐的发酵啊就是越来越多的人这个知道了这个事情然后就不停的就涌到了这个作者的这个仓库啊

35
00:08:25,760 --> 00:08:39,600
有发了很多的意思就是这个仓库的那个一四六表啊差不多在过去的若干天里面一直到这个这个仓库的维护者把这个整个的仓库都锁定了

36
00:08:40,520 --> 00:08:46,480
为止他大概在几天里面大概就有五百个意思基本上都是在

37
00:08:47,040 --> 00:08:55,720
啊讨论这个事情就大部分的人的当然都是啊就是都是谴责谴责他这样的一个行为啊

38
00:08:57,760 --> 00:09:01,920
然后这个事而且我现在看到他所有的艺术的名称都改成简号了

39
00:09:03,240 --> 00:09:13,320
啊你说那个最近是吧对对他把艺术把整个仓库封掉了之后不允许提新的艺术然后把所有的艺术的标题都改成了简号

40
00:09:13,320 --> 00:09:17,640
啊对那这个可能也是啊这个

41
00:09:19,040 --> 00:09:23,560
这个仓库的这个作作者他引起重度的一个原因啊

42
00:09:24,080 --> 00:09:32,520
因为呃一开始的时候呃我觉得很多人在就只是那个加了这个peace not war内那个模块的时候

43
00:09:33,280 --> 00:09:36,320
很多人态度还是可以啊就说你最好不要这么做啊

44
00:09:36,600 --> 00:09:44,680
那你是不是能够把这个模块给移除掉啊对吧或者你找些替代的办法啊你比方说在这个包安装的时候

45
00:09:45,080 --> 00:09:47,960
在这个council上这个打一些

46
00:09:48,840 --> 00:09:54,840
打一些你的这个metage啊打一些你想讲的话已经可以了那你不要不要写字盘吧

47
00:09:55,600 --> 00:09:59,800
这个一开始还是我我觉得还是比较友善还是比较友善的

48
00:10:00,200 --> 00:10:03,800
但是当那个发现了这个他曾经想做了事情之后的

49
00:10:04,080 --> 00:10:09,760
大家就这个一下子就氛围就不对了而且在这个事情这件事情发生之后啊

50
00:10:10,360 --> 00:10:15,720
这个仓库的这个作者做了很多的呃狡辩啊我觉得是狡辩了

51
00:10:16,360 --> 00:10:23,600
啊他比方说说五这个一个就是他强调说现在的行为啊就是往这个

52
00:10:24,320 --> 00:10:32,160
desktop上写一个文本文件了啊不会做别的事情然后呢又说当时写的这个代码它是运行不起来的

53
00:10:33,040 --> 00:10:35,440
就总是找了很多的借口啊

54
00:10:36,080 --> 00:10:42,240
然后呢啊有很多人啊包括我就去验证了这个当时的这个恶意代码

55
00:10:42,920 --> 00:10:47,480
我验证一下这个代码确实是可以跑起来的而且这个行为确实相当的恶劣

56
00:10:48,040 --> 00:10:54,800
就是如果你这个ip在内的话啊就会去做这个事情而且呢他当时那个代码我看了时候呢

57
00:10:55,440 --> 00:10:58,360
他实际上那段代码是做了一些简单的加密的

58
00:10:59,800 --> 00:11:06,800
就你这个你其实如果直接看代码只是呃不是那么容易的发现他这个代码是干什么的

59
00:11:07,440 --> 00:11:10,640
ok对他的这个心怀恶意

60
00:11:11,200 --> 00:11:25,880
所以才常常躲躲闪闪的这种对这个在法律上如果是如果真的是就是开庭审判刑事案件的话哈他这种演示行为其实是这个就是很重要的一个一个因素啊就证明他的这个恶意的因素

61
00:11:26,800 --> 00:11:31,880
他做了呃不少的这个演示的一个行为一个是呢就说他当时这个

62
00:11:32,520 --> 00:11:40,160
呃写的这这一份恶意代码了他是混在一个相当大的一个体教里面就改了可能十几二十个文件

63
00:11:40,640 --> 00:11:45,280
那恶意代码的话对他的恶意代码实际上就是一个一个很小的文件

64
00:11:45,680 --> 00:11:52,280
那如果你去呃就算有人啊当时是那个review代码的话可能也会忽略掉

65
00:11:52,760 --> 00:12:01,160
因为那个代码其实是只是一个比较大的体教的一一小个文件然后那个文件本身呢进行了这个压缩

66
00:12:01,840 --> 00:12:06,440
压缩的话他就变成一行的加瓦斯库的代码了嗯嗯不是很好读

67
00:12:07,440 --> 00:12:13,040
然后呢你就算把这个代码展开了你看的话呢里面一些关键的字符串呢

68
00:12:13,520 --> 00:12:16,120
他使用了贝斯贝斯六十四的这个编码

69
00:12:17,840 --> 00:12:25,640
要比方说呃他的这个实际这个代码里面的逻辑呢是先要访问一下一个第三方的这个服务

70
00:12:26,040 --> 00:12:32,040
这个第三方服务呢是一个根据你的ip呢返回你这个所在地区的这样一个服务

71
00:12:32,560 --> 00:12:36,600
那这样一个服务的由二标地址呢他也就贝斯六十四了对吧

72
00:12:37,000 --> 00:12:42,600
然后呢他里面有一段逻辑是我要判定一下这个你返回的这个第三方服务返回的这个

73
00:12:43,440 --> 00:12:49,040
康取内是不是这个俄选或者是这是不是俄罗斯或者是白俄罗斯

74
00:12:49,520 --> 00:12:57,280
那俄罗斯白俄罗斯还有这个康取内这些字符串他都做了贝斯六十四的这个这样一个一个这个加密

75
00:12:58,280 --> 00:13:04,640
所以就说你光看代码你其实不太清楚他在干什么当然这些加密手段其实也是比较简单啊你稍微

76
00:13:05,120 --> 00:13:12,680
稍微这个看一下也就是可以逆向的这个推导出来啊但是就说他做了这样一些这个遮掩的行为

77
00:13:13,800 --> 00:13:21,480
哎其实那个太克斯我我其实有一个疑问就是这是一个单人项目还是一个社区里有一堆人在一起做的项目

78
00:13:21,480 --> 00:13:29,480
这个项目呢其实是有比较的比较多的这个康取标策的但是呢他仍然是一个单人项目

79
00:13:29,720 --> 00:13:36,040
这大部分的就很多的这个项目他实际上就是有很多人来给你这个tpr但他只是

80
00:13:36,920 --> 00:13:43,640
比方说帮你修个豹或者那个做一个小feature但是呢这个项目本身一直还是他自己主要维护的

81
00:13:44,640 --> 00:13:54,400
但那我就更更疑惑了就是说赵李说像这种单人项目他都不需要自己给自己提pr就直接发一个commit就提交上去了

82
00:13:54,760 --> 00:14:04,160
这个时候这个仓库的代码都几乎没有人会去看的吧还是说谁会去关心他的代码一行行的去看出问题来的这个其实挺传奇的

83
00:14:04,840 --> 00:14:11,400
对其实就是所以就是因为他写了文件吗他在桌面上写了新文件才引起大家注意的吧

84
00:14:11,400 --> 00:14:23,640
对对对是因为是因为这个原因别人才来系读他的代码是不然是不然不会去这么读的一般来讲所以这才更让人觉得毛骨悚然你知道吗嗯明白对就这个大家都是后怕就是

85
00:14:24,160 --> 00:14:37,880
如果他这个不是就他做了一个更加简单的事儿就比方说像我前面讲的他只是往康素上打一点这个血口号的话可能并不一定有人会去review这个这么仔细地review他之前的代码

86
00:14:38,400 --> 00:14:43,480
而且这个确实就像这个老庄讲的他其实就是一个command他不是一个皮啊

87
00:14:44,680 --> 00:14:51,280
他是一个单独的command只是这个command就是这个command没有很多文件啊就就是这样一个这样一个情况

88
00:14:53,720 --> 00:15:01,440
他没有酿成大货我觉得是两个点第一个点他提交到他的这个master上面他没有进入他release的那个流程

89
00:15:01,800 --> 00:15:07,240
第二个呢是他做了这个显示的一个操作就是在桌面上写出一个文件了

90
00:15:07,240 --> 00:15:18,720
因为只要是编程比较有经验的人他对于这种就是这种库突然会在你的文件系统写文件多少都是有些顾虑的一看就会觉得很很反常

91
00:15:19,280 --> 00:15:27,840
所以导致了后面这个这个暴露那他这个两个行为呃很难讲他是主观故意还是无意的我个人觉得

92
00:15:28,280 --> 00:15:34,760
如果他是故意的那说明可能他也就是闹着玩但更大的可能性是他也没有想那么仔细

93
00:15:34,760 --> 00:15:39,520
可能有一半的情绪冲动然后确实有一半的这个主观恶意

94
00:15:40,080 --> 00:15:46,000
所以浇汁成这么一个比较奇怪的现象所以才没有酿成大货不然的话这个真的是

95
00:15:47,800 --> 00:15:49,400
比较罕见的灾难了要是

96
00:15:50,360 --> 00:15:55,520
对他当当时到底怎么想的呢其实就说也有很多的猜测吧

97
00:15:56,520 --> 00:16:03,480
就包括有很多人这个在这个下面去攻击他而当首先要说就是有一个误解有一个误解就是说

98
00:16:04,120 --> 00:16:08,080
呃以为他是发过一个非常严重的这样一个

99
00:16:09,280 --> 00:16:16,360
这个恶意代码就是他确实把这个恶意代码给提交到主干上了但是呢这个代码其实在主干上的

100
00:16:17,160 --> 00:16:21,800
也只存在了大概半天时间然后他就删掉了删掉之后呢就是

101
00:16:22,360 --> 00:16:28,040
做了我们前面讲这个peace not war的这个就相对这个不是那么恶意的这样一个事儿了

102
00:16:28,640 --> 00:16:35,440
就前面的一个非常恶意但是他半天之后他就删掉了所以我个人觉得他其实是血血压肉麻了这样一个事儿

103
00:16:35,840 --> 00:16:37,560
嗯嗯比较像是

104
00:16:38,280 --> 00:16:45,160
比较像是这样一个情况啊所以他可能当时一上头啊想着我要这样做但是也有些人啊我看到也有些人说

105
00:16:45,680 --> 00:16:54,600
呃是不是他当时觉得说这个啊担心这个呃这个这个地理位置这个检测不准确啊之类的

106
00:16:57,920 --> 00:17:08,840
对这个就就真的很难讲了那这事下来之后对他这个人以及他这个项目就是no NPC这个这个库后续不知道会有什么样的影响哈

107
00:17:09,560 --> 00:17:16,560
假设以我们的常识来讲如果我身边有这么一个人干了这事儿的话我觉得他职业生涯应该是有很直接影响的

108
00:17:17,360 --> 00:17:23,800
是啊这个先说吧就说首先就说呃像我们前面讨论的

109
00:17:24,440 --> 00:17:34,440
就是他自己可能也一开始没有意识到这个这么严重尤其是他这个之前做的那个更加恶意的代码被被发现这些事情有可能他一开始没有预料到

110
00:17:35,400 --> 00:17:42,880
对他这个是他在被发现之后首先做了很多的这个遮掩嘛就除了我们前面讲的这个呃

111
00:17:43,400 --> 00:17:50,440
就是不承认之外啊他还做了一些事情啊一个呢就是他因为用了那个第三方服务吗这个第三方服务

112
00:17:50,920 --> 00:17:55,760
需要有一个API key啊才能够正常的这个去使用的

113
00:17:55,760 --> 00:18:03,080
然后他估计啊他应该是他把这个API key给那个吹撤销了

114
00:18:03,720 --> 00:18:11,240
嗯所以那段代码就是就算你就是呃用我前面讲的首先他删掉了然后也没有发到这个NPM上

115
00:18:11,640 --> 00:18:18,520
然后就算你现在把这段代码挖出来你实际运行一下也是运行不起来的因为那个API key已经失效了

116
00:18:19,040 --> 00:18:26,760
嗯那所以他他就以这个为借口吧他就说这个我这个代码其实跑不起来但是呢

117
00:18:27,440 --> 00:18:30,840
最早发现他这个这段恶意代码的这个人呢

118
00:18:31,400 --> 00:18:39,240
就当时就跳出来说了说我当时试验的时候这个API key是有效的百分之一该是有效的

119
00:18:40,600 --> 00:18:47,480
那这个话呢就说当然我现在没有办法验证啊因为我在验证这段代码时候那个时候API key已经是失效了

120
00:18:48,120 --> 00:18:56,680
我当时验证的时候是我自己到这个第三方服务我自己申请了一个key然后我跑了一遍我我验证了他确实是可以跑起来的啊

121
00:18:57,720 --> 00:19:06,760
那当然这个事情他到底他呃是不是在被发现之后去呃主动的这个撤销了以掩盖他的行为呢

122
00:19:07,200 --> 00:19:11,640
这个事儿呢其实如果一定要验证还是能验证的啊因为我后来在

123
00:19:12,160 --> 00:19:19,440
有一个这个就是最早发现的这个人的这个帖子下面发现这个第三方服务的这个维维护者都出来了

124
00:19:19,880 --> 00:19:23,120
说啊我们知道这个事儿了我们去去就是把他这个

125
00:19:23,960 --> 00:19:27,200
我们确保他这个API key都是都是那个被撤销的

126
00:19:29,400 --> 00:19:35,240
但是其实第三方服务这个公司完全可以提供相关的操作日志

127
00:19:35,640 --> 00:19:41,440
几点几分什么时候做的他都可以查出来如果真的要把人挖到死的话就可以挖出来

128
00:19:42,120 --> 00:19:46,320
是来比较有趣的是这个第三方服务这个就我们讲这个

129
00:19:46,800 --> 00:19:53,800
这事情里面还涉及到一些国别的问题吗就是这个作者本人是这个美国人然后这个第三方服务实际是一个巴基斯坦人

130
00:19:54,520 --> 00:20:05,480
哦是吗就那个叫什么ip geolocation是吧对对对啊我我也后来发现哎这个人呃这名字一看这个哪儿人那就发现是巴基斯坦人啊特别特别有趣这个事儿

131
00:20:06,000 --> 00:20:11,720
嗯哎还有这个小小八还有干这个事儿的这以前真不知道

132
00:20:13,120 --> 00:20:18,960
对他这个服务可能用的人还挺多的啊可能很多人没有注意到其实他是个巴基斯坦人啊

133
00:20:20,800 --> 00:20:23,920
啊这服务我以前没用过这这次出名了我我要去试一试

134
00:20:25,800 --> 00:20:28,320
对他那个API还是挺好用的啊就是

135
00:20:29,000 --> 00:20:36,200
你你可以很容易的就我大概就花了这个几分钟吧就是申请一个机器然后就把它挂上去给跑起来了

136
00:20:37,240 --> 00:20:40,040
所以他当时就是这个作者吧他就

137
00:20:41,440 --> 00:20:48,680
呃抵赖了那么一下子啊这个一下子就引起众怒啊然后呢他还修改这个别人的这个评论

138
00:20:49,560 --> 00:20:54,640
啊因为一开始就是呃就是最早这个发现者嘛

139
00:20:55,480 --> 00:21:03,080
啊他一最早的发现者一开始只说那个皮斯诺特沃的时候啊他就说几个皮斯诺特沃啊他觉得这是一个

140
00:21:04,000 --> 00:21:08,920
这个恶意软件结果这个作者就把这个恶意组软件这几个字给删了

141
00:21:09,480 --> 00:21:17,160
就是改他的那个就改他的神操作对他觉得他觉得说你不能管我这个叫恶意软件啊我这个就是

142
00:21:17,560 --> 00:21:28,680
呃这个很正义的一个行为啊呃哦对我我记得那段对话他还在领内更加讨论说你把我这个软件称之为抗议软件可以的不要叫恶意软件

143
00:21:29,680 --> 00:21:34,640
对因为这个是后面有人有人那个提了说你这也可以叫抗议软件

144
00:21:35,880 --> 00:21:46,400
呃后来就是因为被发现了他的那个更加恶意的代码嘛然后这个发现者就也在他的这个帖子里面写了结果这个呃后来这个作者跟他

145
00:21:47,160 --> 00:21:58,200
诶而有一一番之后啊就把他这个部分给删掉那删掉之后这个当然那个人家这个就就很很那个很很很不爽啊

146
00:21:58,200 --> 00:22:04,000
就说明明是我自己写的课满字我要揭露你的这个行为你还删掉给他们好好这个说起来

147
00:22:04,360 --> 00:22:13,160
给踏步里边这个管理员可以去改这个一讯的课满字这这也是个挺挺迷的设定我我一直没搞懂为什么会这么设计

148
00:22:14,080 --> 00:22:24,480
我觉得这个设计本身还是有道理的因为就说你的这个仓库回录者你可能会帮你修正一些东西啊比方说你这个哪里写错了我帮你修正一下

149
00:22:25,120 --> 00:22:35,600
那你回复就行了嘛你你你引用和回复或者怎么样这个我也觉得这是给他们一个不好的特性啊到当年对因为人的邮件列表的阶段

150
00:22:35,600 --> 00:22:48,680
那人家发出去的邮件就不可能再三改对对因为一旦能修改很多事情会变得特别的啊对啊麻烦是我我理解就不讲意思但是我觉得这个本身啊它其实是好的为什么

151
00:22:49,160 --> 00:23:03,760
就说它是因为比方说你的主贴啊你最紧紧贴你要提供那个信息我可以去修改它这其实是一个比较好的事情对我知道我其实也用过这个功能我觉得它在好的时候是挺好用的对啊就说在不好的时候特麻烦

152
00:23:03,760 --> 00:23:18,560
啊但是我们前面讲那种就说实际上是个恶意修改或者说就是我不同意你的观念所以我修改你的话那这个事情呢实际上我觉得呃给他哈布这个这样一个东西他不是为这样一个场景准备的

153
00:23:19,040 --> 00:23:28,320
而且呢给他哈布的这个康买斯啊有一点是好就说所有的修改其实是可以看得到的对对对对他他有一个log啊

154
00:23:28,720 --> 00:23:37,960
我觉得这这这这题外话就就不说了这个而且他好像后来把那个人干脆就拉黑了是吧就根本不让他在他这里能够去发言了好像

155
00:23:38,480 --> 00:23:46,120
是的就说因为这个反复的几次嘛就说啊这个你你改我的我也把它改回去然后他又把它改回去

156
00:23:46,440 --> 00:23:50,400
那经过几番操作之后就把这个人拉黑了而且拉黑的不止他一个

157
00:23:50,920 --> 00:23:59,280
啊因为把他拉黑之后那还有很多其他的对网友啊就觉得你怎么可以做做呢我们帮他把他的那个评论啊再搬用搬用回来

158
00:23:59,640 --> 00:24:02,560
截屏给贴上去啊因为当时我也截屏了

159
00:24:05,440 --> 00:24:10,480
但我没有在他的那个仓库里面做因为我已经发现这个人有点问题那我我觉得

160
00:24:10,480 --> 00:24:21,800
啊我不要在他这个仓库里做所以我是在这个啊VOGS的那个讨论的那个那个相关的asus里面我把我的这个截屏给发在里面因为那边他们没有权限去做这些事情

161
00:24:23,320 --> 00:24:23,640
对

162
00:24:25,240 --> 00:24:33,680
但是我我现在在回看啊就是当年note ipc里面就是当年前两天最热门的一个二三三的issue

163
00:24:34,200 --> 00:24:40,160
有几百个回回帖的四百多个回帖的那个但是他其实改不完好多都还留着呢

164
00:24:40,640 --> 00:24:47,440
是的是分村上去骂他的那个好多人还留着好多他已经来不及改了我觉得这来不及他毕竟只有一个人啊

165
00:24:47,960 --> 00:24:52,280
是的而且我觉得这人估计已经批贴是地界自闭在家里了估计

166
00:24:53,520 --> 00:25:00,760
嗯有可能但是他后来实际上是就网友一下子涌上来非常多了因为这事情发酵之后啊就

167
00:25:01,200 --> 00:25:08,800
包括在像什么reddit啊还有在youtube上啊就有人发了一个视频讲这个事情啊那就一下子涌进来很多很多网友

168
00:25:09,120 --> 00:25:16,200
就一开始啊是那个最早了最早的那个时间段其实是好多好多的这个来自中国的这个开发者

169
00:25:16,960 --> 00:25:18,080
到上去去骂他

170
00:25:19,000 --> 00:25:27,120
那后来呃前几天就到最最这个事件的就到他整个关闭他这个就完全锁定他仓库了那几天

171
00:25:27,560 --> 00:25:31,840
其实都不是中国网友了都不是这个中国开发者就世界各地的开发者

172
00:25:32,360 --> 00:25:37,400
就轰炸他的这个意思类表像我前面讲的就是很短时间里面大概四五百个意思

173
00:25:38,080 --> 00:25:46,120
啊各各种各个各方面的这个全方位的这个轰炸而且还有人不断地调侃他比方说你你总要睡觉吧

174
00:25:47,000 --> 00:25:54,280
所以他他当时去睡觉了他有段时间他一个人跟二十四小时十个时期的人对抗怎么可能全球化的

175
00:25:54,760 --> 00:26:00,760
对他后来就会有人直接在这个到后来以这个意思也没有内容就直接就是消极嘛

176
00:26:01,040 --> 00:26:08,560
他就是轰炸的意思类表这标题都很逗啊就说哎呀我刚刚看到他又上来那个删了一个说明他现在睡醒了

177
00:26:10,000 --> 00:26:17,440
啊就直接直接在这而且你是不是睡醒了直接直接就哎呀这个最后就变成这样一个情况了

178
00:26:17,760 --> 00:26:29,120
而且这哥们这次是非常强的指向性直接是针对俄罗斯和白俄罗斯的那前苏联地区的这个黑客也特别多这这

179
00:26:30,080 --> 00:26:33,400
估计会有很大的这个反应啊在这个事情上

180
00:26:34,520 --> 00:26:43,640
是的啊实际上就是前辈几天吧这个这哥们的这个社交社交媒体的账号已经被爆破了

181
00:26:44,000 --> 00:26:49,200
就是直接被黑客黑掉了他的推特账号就是被这个黑掉了

182
00:26:49,920 --> 00:26:54,840
然后呢他的相当多的个人信息啊包括他的家庭信息

183
00:26:55,840 --> 00:26:59,440
其实都被黑客掌掴了而且就是公开了

184
00:27:01,600 --> 00:27:11,000
这个有点过分这个有点过分啊这属于人肉加网曝对就是黑客网曝就是我我我猜测的黑客有可能是俄罗斯黑客

185
00:27:12,520 --> 00:27:15,960
对因为你你这都打到我头上来了我这对吧

186
00:27:16,960 --> 00:27:24,360
那这个黑档也就说是这个而且不是那个一轮黑客因为他这个我刚说他

187
00:27:25,160 --> 00:27:30,920
把那个把他这个个人信息啊家庭信息啊包括他这个妻子的信息啊

188
00:27:31,360 --> 00:27:35,200
全都公开之后啊他那个放在他那个黑客网站上

189
00:27:35,720 --> 00:27:43,120
我后来去看了一下那黑客网站我发现就说不不止这一轮了就是已经好几天之前就是已经有好久人黑客

190
00:27:43,120 --> 00:27:47,280
的都这个就光这一个黑客网站上啊就公布过好几轮

191
00:27:47,960 --> 00:27:53,840
就是最厉害的这一轮就是就非常非常厉害就是把它的所有信息都到内一开始他可能信息比较少

192
00:27:54,240 --> 00:28:02,640
后来几轮几轮这是甚至可能有接力吧我都我都猜想有不同的黑客的接力了肯定有肯定有黑黑大家大家拿着小子练手

193
00:28:03,480 --> 00:28:09,440
就一轮一轮来对而黑客圈子本来也小达大家对信息都走得特快

194
00:28:10,400 --> 00:28:15,280
对他在这个当中比较严重的就是呃包括把它的这个

195
00:28:15,960 --> 00:28:25,120
呃因为他他其实有很多的这个一秒账号都被挖出来了包括他用一些一秒账号在一些这个其他的

196
00:28:25,560 --> 00:28:33,560
可能那些网站已经被黑客洗过一轮的所以就是你可以知道所有这个网站的注册者即使是私密的但是也已经暴露了

197
00:28:34,120 --> 00:28:38,160
结果有人就是从一些这个所谓的这个戴婷网站吧就是

198
00:28:38,800 --> 00:28:47,840
交友的就交友而发现他用一些这个他的小号吧就是一秒注册过这个约会网站大概两个约会网站

199
00:28:48,440 --> 00:28:52,320
其中一个还被黑客挖出来就是他曾经在上面付费过

200
00:28:54,920 --> 00:29:02,080
而且这个约会网站呢就是据说啊就这个约会网站就是专门供这个已婚人士啊

201
00:29:04,560 --> 00:29:10,720
就是就是搞搞这种啊婚外恋的然后那个出轨专用网站对对

202
00:29:11,280 --> 00:29:18,040
结果这个黑客就把这个信息公布了而且也就是我前面不是说他的推特账号也被爆破了吗

203
00:29:18,320 --> 00:29:23,960
因为那是他自己账号嘛这黑客上来就在那个他的这个推特账号上干了两件事

204
00:29:24,280 --> 00:29:32,720
第一件事是把他的头像换成了俄罗斯国旗第二件事情第二件事情是发了一条推说啊我这个

205
00:29:33,560 --> 00:29:41,000
那个出轨了而且是在我那个和我老婆结婚四个月之后就出轨了直接就发了一两条推特

206
00:29:41,600 --> 00:29:45,520
天哪这就直接射死掉了已经对这个就是真的是射死了

207
00:29:46,160 --> 00:29:52,640
所以这事我我的感觉啊就是首先这个人呢他是有过很明确的恶意的

208
00:29:53,200 --> 00:29:57,280
但是呢他毕竟还没有把这个事情变成一个

209
00:29:58,160 --> 00:30:02,240
就怎么说呢如果从法律意义上来讲的话就属于这个

210
00:30:02,920 --> 00:30:07,840
嗯思思想犯和行为犯之间那个状态

211
00:30:08,840 --> 00:30:13,560
他不算完全的纯思想犯但是他也不算完全的现行犯因为在

212
00:30:13,840 --> 00:30:23,320
上一就是可能比较接近于这个犯罪行为中止这样的一个概念做了一半他自己停下来了就是这个感觉但是这个停下来是因为被人发现停下来

213
00:30:23,520 --> 00:30:32,000
还是自己主观的悔悟呢这就不太好判断咱也没法去审判他也没这权利但是给我的感觉吧反正就是说这人呢不能算是一个

214
00:30:32,520 --> 00:30:35,240
就是已经完成了这个这个这个事情

215
00:30:35,880 --> 00:30:43,560
嗯然后呢整个行为看上去也有一些幼稚的地方感觉就是有点那个那个冲动的感觉在里面

216
00:30:44,040 --> 00:30:51,360
然后后果应该会蛮严重的第一是刚才说被黑客爆爆破之后他肯定射死的会会有这方面的效益

217
00:30:51,360 --> 00:30:54,280
另一方面我觉得我不知道这人他是一个

218
00:30:55,080 --> 00:30:59,600
完全靠开源的开发还是有别的一些生计还是他是

219
00:31:00,200 --> 00:31:07,200
他是有雇主的他是在某公司软件公司工作的那软件公司会会会怎么看待他这个这个这个状况

220
00:31:08,280 --> 00:31:13,320
他有雇主而而且这个雇主已经也曝光了所以有很多人就是给他过去

221
00:31:14,160 --> 00:31:15,200
就说就是

222
00:31:16,360 --> 00:31:24,040
投诉他雇主继续被轰炸这个这个其实倒是欧美非常常见的这种cancelcancel文化了就直接对

223
00:31:24,800 --> 00:31:28,680
被迫估计他的雇主就算本来觉得没啥估计也得被迫把他干掉了

224
00:31:29,880 --> 00:31:33,640
对这个后续就不太清楚就是他雇主会怎么处理这事儿了

225
00:31:34,880 --> 00:31:43,240
如果他的雇主是比如说谷歌这种级别的那可能还会有一些那个如果是一般比较小的公司

226
00:31:43,240 --> 00:31:47,840
那一般就找个找个原因打破掉完了通常就是这样

227
00:31:48,720 --> 00:31:51,640
他的公司我没有稽查但是

228
00:31:52,400 --> 00:31:55,160
呃我看了有一个人说但我我没有那个验证过

229
00:31:55,160 --> 00:32:00,160
比如说好像是好像是呃亚马逊的子公司吧可能是我

230
00:32:00,920 --> 00:32:02,920
没有验证过没有验证过这个信息

231
00:32:03,600 --> 00:32:05,200
嗯对

232
00:32:06,000 --> 00:32:12,880
哎那个海克斯其实我还想接着问一下就是就是在社区里面发生了这么大的事情之后

233
00:32:13,600 --> 00:32:16,640
在呃开源供应链安全这个层面上

234
00:32:17,680 --> 00:32:24,360
有没有什么就是更加深入的探讨就比如说这个npm的这个安全性这件事情

235
00:32:25,600 --> 00:32:31,880
对这个也是一个关注的焦点吧啊就是像我前面讲的首先这个

236
00:32:32,760 --> 00:32:40,600
呃国内的这个镜像啊就大家用最多的镜像npm mirror这个已经马上做出了这个响应啊

237
00:32:41,040 --> 00:32:47,320
就是把这个包直接就给锁定了啊然后像标志s也马上发了新的版本

238
00:32:47,800 --> 00:32:51,480
这是进行一个版本锁定把它锁定到他之前的这个版本

239
00:32:52,600 --> 00:32:54,120
就是没有没有问题的版本

240
00:32:54,960 --> 00:32:55,480
嗯

241
00:32:56,360 --> 00:33:03,800
当然这个问题其实是又不断的在被提起吧包括有很多的这个讨论里面

242
00:33:04,320 --> 00:33:09,520
就有很多人就啊就讲说这个哎呀我早说了嘛这个

243
00:33:10,320 --> 00:33:15,720
啊no的爵士啊或者npm啊或者加洛斯科啊就是一个烂语言啊这个烂平台

244
00:33:17,000 --> 00:33:23,080
其实真正好像没啥关系哈呃有关系有关系这个我是我是一直同意的这个这个

245
00:33:23,080 --> 00:33:31,000
因为我不是前端程序员不是不是这这核心他怎么说呢就是就是你真的在哎开源软件里面做供应链投毒的话

246
00:33:31,600 --> 00:33:34,280
嗯其实你什么语言都是可以做的

247
00:33:34,920 --> 00:33:40,480
对而且这加script可能还算是相对你更难做一点你你还要费点劲

248
00:33:41,720 --> 00:33:48,680
就这个也有好有坏吧就是这次有一个好地方就说啊他的原码就是完全公开的

249
00:33:48,680 --> 00:33:58,200
对就如果其他语言就是你甚至可能通过二季制投毒那你对啊那更麻烦发现对吧但是呢这个no jess和npm他生态呢

250
00:33:58,720 --> 00:34:06,280
有一点的是可能会被诟病的就是传统的这个npm嘛他是不锁版本的

251
00:34:07,080 --> 00:34:12,720
人说你这个安装这个他就说传统这个npm他一开始设计的时候

252
00:34:13,240 --> 00:34:17,040
他有一个假设假设就是大家都是比较善意的

253
00:34:17,720 --> 00:34:23,440
所以呢他什么是所谓的那个三明文水就默认都是走这个啊语译版本的

254
00:34:23,920 --> 00:34:27,720
所以这事儿已经其实呃npm已经出了好几次这样的事情了

255
00:34:28,280 --> 00:34:35,080
对上次是有一个什么酷这个他把自己给删掉了然后导致一堆的依赖都都都失效的那个事儿

256
00:34:35,520 --> 00:34:41,400
也这个比较有名的有两个事件啊一个是比较早的叫做拉布派的事件

257
00:34:42,040 --> 00:34:47,160
也来不及派的这个作者啊这个是这个事情以前我也做

258
00:34:47,680 --> 00:34:55,640
这件事我还是也关注了比较多的当时我还这个发了发了一个专门的这个演讲讲这个事情

259
00:34:56,080 --> 00:34:59,160
就这个当时他做的事情实际上是因为一些原因啊

260
00:34:59,680 --> 00:35:04,920
因为一些也比方说npm官方把他的某一个库的名字给了另外一个公司

261
00:35:05,320 --> 00:35:10,880
他一怒之下就把自己的这个库给删了啊就把他自己的npm上的这个包就是撤销了

262
00:35:11,400 --> 00:35:20,240
然后他有一个包叫拉布派的是非常非常多的这个库做使用的这样一个对对对就就我要说就是这事儿

263
00:35:21,280 --> 00:35:30,240
而且他那个来派的是一个非常小的模块只有就有效代码是有大概几行代码也不到十行代码

264
00:35:30,920 --> 00:35:37,280
所以当时就是造成一个夸张的说法就是十行代码造成了这个互联网的这个

265
00:35:38,120 --> 00:35:45,640
一一度的这个停止啊但是这个说法非常夸张啊来其实没有没有那么大的这个破坏力

266
00:35:46,360 --> 00:35:54,200
但是这个事情就是是第一次就比较比较大的一个事件就是因为他删了一个包导致他的下游呢

267
00:35:54,600 --> 00:35:56,480
啊一下子全都挂掉了

268
00:35:58,040 --> 00:36:04,120
所以自那以后npm也并没有改变这种管理的机制来怎么去防范这种事情吗

269
00:36:05,160 --> 00:36:14,920
呃实际上不是的就说npm他一开始就是锁版本这件事情啊其实是呃不单是这个供应链攻击这样一个问题吧

270
00:36:15,200 --> 00:36:20,120
就是他可能有一些更加呃General的一些事情比方说

271
00:36:20,640 --> 00:36:26,120
如果我发了一个新版本当我引入了一个bug对吧我不是故意的对对供应链的攻击

272
00:36:26,480 --> 00:36:34,240
但我也可能引入bug啊而且就说有很多人他可能对于所谓的语版本这个规定啊也执行的不是很好

273
00:36:35,400 --> 00:36:40,200
按照道理说语版本他应该是说你有breaking change的话应该要发大版本

274
00:36:41,000 --> 00:36:47,360
但是有时候可能就说有些人没有注意啊他他做了一些breaking change他也没发大版本

275
00:36:47,800 --> 00:36:52,560
或者他做了一些他不认为是breaking change但实际上不breaking change的事情

276
00:36:53,080 --> 00:36:56,640
他发出去了结果造成下游就出现了出现了问题

277
00:36:57,400 --> 00:37:04,640
那所以这个问题就说不单是供应链攻击的问题就是不锁版本这个事情本身呢其实也是有这样一些

278
00:37:05,320 --> 00:37:05,760
问题的

279
00:37:06,520 --> 00:37:12,880
所以这个n片的实际上比较就是我前面讲的是他最初啊其实现在的话其实

280
00:37:13,520 --> 00:37:16,600
n片的client他实际上是可以锁版本的

281
00:37:16,960 --> 00:37:24,520
而且在n片之前央就是facebook这公司也做了一个啊这个包的这样一个管理器

282
00:37:25,000 --> 00:37:30,880
他他的默认就是锁版本的那我因现在n片的那个区别就是n片

283
00:37:31,480 --> 00:37:36,600
以前是默认不锁版本但是最新的版本其实也是会锁版本的

284
00:37:37,640 --> 00:37:38,280
在这里

285
00:37:39,360 --> 00:37:39,840
啊对这里

286
00:37:40,840 --> 00:37:48,560
我我想表稍微表述一下我为什么对这个no的揭示或者说是这个生态的一些看法

287
00:37:49,080 --> 00:37:56,240
就是不是说供应链攻击就是假设有一个人无论他是诚心想做恶还是无心犯错

288
00:37:56,640 --> 00:38:00,360
他究竟要过几关才能够真的造成损害

289
00:38:01,400 --> 00:38:10,440
这件事情上我觉得太容易了在no的这个这个生态里面太容易做到损坏对其实n片刚出来的时候啊就有人提过这个问题

290
00:38:10,680 --> 00:38:15,000
就说你是一个包管理器啊你不是一个git hub这样的开源社区啊

291
00:38:15,800 --> 00:38:23,960
你既然是包管理器那比较达比的包管理器是怎么怎么做的人家是分三层啊有这个什么最最新的版本有测试的版本有什么

292
00:38:24,160 --> 00:38:30,400
贝塔的版本然后才正式完这是非常保守是测试过很多很多东西很多轮之后才会放进去的

293
00:38:30,760 --> 00:38:37,760
那你npm如果不不版你不你不去尽这个责任的话那你跟给他没什么本质区别你你只是在

294
00:38:38,240 --> 00:38:43,320
嗯嗯提供一些更一般性的东西你没有去验证这些版本的话

295
00:38:43,760 --> 00:38:50,240
所以当时我记得npm刚出来就有这种声音但后面可能大家很方便然后也也没什么太大的问题

296
00:38:51,080 --> 00:38:55,080
另外一个原因另外一个因素就是我个人的感觉好不知道对不对就是

297
00:38:55,600 --> 00:39:02,320
呃前端的开发者社区他的节奏非常快恩片包更新的速度是远超过后端包的

298
00:39:02,880 --> 00:39:10,120
是的是的就是一个他的节奏快第二个你就说呃由于npm形成的那样一个方式啊就是

299
00:39:10,560 --> 00:39:20,320
他和其他语言不太一样的一点就说他比较倾向于这个比较小的库比较小的包对对他的分特散

300
00:39:20,320 --> 00:39:27,040
怎么记得这很多对分散然后呢这个包包可能有很多小包然后依赖可能很深

301
00:39:28,000 --> 00:39:30,280
所以他这个问题是比较多的

302
00:39:30,800 --> 00:39:41,560
但是他但是前面那个问题啊就说锁版本和不锁版本这个我还是要讲这个就是各有利弊也不是说锁版本就没有这个是的确实是

303
00:39:42,240 --> 00:39:47,120
而且就说就说像我前面讲的就说如果大家以善意的方式去考虑的话其实是

304
00:39:47,520 --> 00:39:56,960
能够让你更快的去拿到新版本也许是件好事而且还有反过来讲就说我我们前面讲说你无意的引入了一个问题对吧

305
00:39:57,280 --> 00:40:04,160
但是呃不锁版本自动升级他有一个什么好处就是说如果我有一个bug甚至是比方说安全漏洞

306
00:40:04,760 --> 00:40:09,040
啊那么就不需要你介入我自动的就可以去修复掉

307
00:40:10,360 --> 00:40:16,480
但是后面这个这个想法我觉得也也挺危险的就像你把你的如果你这个系统真的是很critical的系统的话

308
00:40:16,480 --> 00:40:23,840
嗯那你相当于就是你把你的这个安全依赖把他委托给一个你并不知晓体系的那个那个第三方供应链了

309
00:40:24,240 --> 00:40:30,880
这其实也挺危险的我你如果问我的话我我在公司里边去负责这事的话那我可能我还是更愿意

310
00:40:31,440 --> 00:40:36,520
我先研究完了你这个这个release我再来决定是不是要去应用它

311
00:40:37,200 --> 00:40:39,560
这我不知道比如说这个有个问题

312
00:40:39,560 --> 00:40:47,480
也就这里有个平凡问题就说像我前面讲的由于这个杰森也闹得和那个mpn

313
00:40:47,960 --> 00:41:00,200
他的这个依赖啊非常非常多非常非常小由于这个生态的历史所造成的导致你去如每一次你要去升级去review他的成本非常高

314
00:41:00,960 --> 00:41:06,600
对啊你这个成本非常高的话你就是说结果会造成什么如果你是锁版本的话

315
00:41:07,160 --> 00:41:17,040
啊你就会说哎呀我我我我现在来不及把这个所有的事的都review掉那我就攒着你越攒你的这个成本越高你越不会更新它

316
00:41:17,720 --> 00:41:26,640
结果就导致说你嗯你锁版本一旦锁版本之后你可能会嗯是的是的很难的去更新它是的是的

317
00:41:27,040 --> 00:41:32,120
这是像那个情况下就说自动更新就是以我们的实践来讲自动更新是ok的

318
00:41:32,120 --> 00:41:34,200
所以国内大厂其实有一些

319
00:41:34,640 --> 00:41:43,080
比方说这个某国内大厂啊就是包括就是我们前面讲的mpn mirror的这个做这个的这个国内大厂他们的这个

320
00:41:43,640 --> 00:41:47,720
一直就是用自动自动的这个升级的策略不锁版本的策略的

321
00:41:49,560 --> 00:41:54,880
就是就是他们主张是这个就我在这个事情上是中立的但是我觉得他们讲的有道

322
00:41:55,680 --> 00:42:01,960
我我我不会说那个我有一个我有一个长期的观点啊就是说单说这个

323
00:42:02,840 --> 00:42:06,520
一个人他干了一桩事情甚至还为谁这也就过去了

324
00:42:06,880 --> 00:42:15,640
但是对于开源的整个生态会有一种长期的影响就是有一个人不管他怎么样

325
00:42:16,080 --> 00:42:23,600
但是他是向大家证明了以后有机会只要有机会有人就能干成这件事情所以

326
00:42:24,280 --> 00:42:31,280
所谓的我们对整个开源社区的整个开源供应链有什么善意的猜想这件事情就不成立了

327
00:42:32,000 --> 00:42:38,040
你不能假设是善意的你也不能假设整个供应链是友好的或者说是安全的

328
00:42:39,240 --> 00:42:46,400
那么也是为什么啊就这一次感觉上整个开源社区还是比较团结的或者说意志是比较一致的

329
00:42:46,840 --> 00:42:52,560
杂音并不多就大家都还是比较反对这个行为的我觉得这个也可能大部分人都还是比较希望

330
00:42:52,960 --> 00:42:57,840
嗯开源社区能够保持一种相对比较正常的状态

331
00:42:58,600 --> 00:43:05,160
对就说啊包括我觉得对这样一个事件对这个人的这个谴责吧

332
00:43:05,760 --> 00:43:10,560
啊包括我觉得说可能把这个人这个驱逐出去啊驱逐出开源社区

333
00:43:11,240 --> 00:43:16,320
嗯其实也有这种净化开源社区的这样的想法吧就是

334
00:43:16,960 --> 00:43:20,800
保保持说我们这个仍然是一个善意为主的这样一个社区

335
00:43:21,200 --> 00:43:27,000
然后大家仍然可以去信任或者认为说我们仍然能保持这样一个资金化的这样的能力

336
00:43:27,400 --> 00:43:29,360
然后通过社区去发现这个事情

337
00:43:30,440 --> 00:43:35,400
就是你你从另外一方面看如果社区能够很快的发现这些问题的话

338
00:43:35,800 --> 00:43:41,240
对于普通的这个开发者来讲的话也许他们仍然会觉得说啊是一个可信赖的

339
00:43:42,080 --> 00:43:50,640
就是你可以从两面去看这问题啊就是也如从那个非官主义的角度来讲话是说哎呀那就无法再信任了我们一定要

340
00:43:50,800 --> 00:43:52,400
索版本也好或者怎么样也好

341
00:43:52,920 --> 00:44:04,720
但是你从非官的角度你可能会呃走到一个非常呃糟糕的一个境地就说索版本因为也是有成本的第二个事情就是有些人可能觉得说我所有东西都要自己写

342
00:44:05,160 --> 00:44:17,080
哦我不要依赖那这个其实也也很有问题因为现在就这就是这这就是所谓的一一一这个一招回到解放前嘛对对就是你又回到很很少有人能承担这种这种这种代价的

343
00:44:17,760 --> 00:44:30,560
是的所以就说你从非官主义的角度看是这样的但呃可能也有些人他会以乐观主义的这个态度来看就说你看虽然有这么多这个可能不好了但是社区很快的就发现了这个事情

344
00:44:30,960 --> 00:44:38,960
就是他可能你从乐观角度讲就再一次证明社区可以非常快的去发现这个问题并且去净化这个事情

345
00:44:39,960 --> 00:44:48,280
是我觉得这两方面的都有道理而且我们都得看呵呵呵确实是这样的因为因为那你说老赵你说

346
00:44:49,000 --> 00:44:58,520
我想说的是就是说我们现在展现给所有其他人就是说咱们作为开源圈内人我们展现给圈外人看的是啊我们大家齐身前者

347
00:44:58,520 --> 00:45:02,560
但是圈外人的看法是我不能假设极端情况不会出现

348
00:45:03,280 --> 00:45:10,280
嗯这个肯定是的但是你反过来说啊软件的这个compliance就是软件的可信性啊本身就很难

349
00:45:11,080 --> 00:45:20,360
你难道说你公司里面的人开发的代码你就可信任吗其实这个风险都是存在的所以我我个人哈就是我个人我个人更看重

350
00:45:21,120 --> 00:45:30,200
我个人更看重的还是说他有没有更多的人更多的机制一起来帮我们去发现问题那总比你封闭起来要更好一些

351
00:45:30,840 --> 00:45:34,840
所以这次说实话这件事情刚出来的时候我是非常非常担心的

352
00:45:35,080 --> 00:45:47,320
然后后面观察了一阵哈然后这个看下来哎整个开设区的态度非常的鲜明而且反应也很迅速其实我稍微的好就舒服了一点就我个人的感受是这样子的

353
00:45:48,320 --> 00:45:52,080
对我觉得这边是有一个很大的这个问题就是机制问题啊

354
00:45:52,800 --> 00:45:57,840
就是说他和那个实体的东西不太一样了实体的其实也有供应量攻击嘛

355
00:45:58,400 --> 00:46:03,440
对比方说咱们之前这个三要五的事实际是的是的本质一个这个

356
00:46:04,080 --> 00:46:10,000
对本质是一样的但是它有一个区别就是实体的这个东西啊就是说谁负责

357
00:46:10,680 --> 00:46:13,280
最后那个卖给你产品的那个人

358
00:46:13,280 --> 00:46:18,560
他跟你有一个商业的一个交易对吧所以他负责是应该的因为他从里面受益了

359
00:46:19,000 --> 00:46:24,640
对吧我我记得这个老庄写了那个文章里面我觉得讲的事情就是一个是这个

360
00:46:25,240 --> 00:46:30,760
整个供应链还有是责任链还有利益链对吧我记得这个老庄这个文章是写了这三个东西

361
00:46:31,320 --> 00:46:36,240
但是在这个开源这里面这个链他练不起来了对吧他只有供应链

362
00:46:36,840 --> 00:46:41,320
这个责任链和利益链是断裂的对吧这个老庄这个文章我是看了是

363
00:46:42,080 --> 00:46:46,520
甚有感触的那如果它是断裂的一个情况的话

364
00:46:47,280 --> 00:46:53,080
那你单纯讲说我们要通过什么方式去解决很难解决

365
00:46:53,760 --> 00:46:57,440
因为普通开发者他没有办法去担负这样一个责任

366
00:46:58,480 --> 00:47:03,640
所以我觉得可能要倒过来考虑这个事情就说软件软件的行业怎么解决这个问题

367
00:47:03,960 --> 00:47:11,000
我觉得得靠得靠技术得靠技术得靠我们这个一些技术方案去把这个安全机制去改进

368
00:47:12,000 --> 00:47:16,800
对这个我我我觉得是一直以来开源社区面临的一个很大的挑战

369
00:47:17,440 --> 00:47:24,960
但是之所以开源社区协同的这个体系能走到今天的话有很大的原因就是大多数人还是善良的

370
00:47:25,040 --> 00:47:30,200
然后开源社区里面如果能形成一种大多数人一起去发现然后通过一种

371
00:47:31,000 --> 00:47:40,560
类似民主的机制投票或类似这样的方式能够更有效的发现那些恶意行为的话那么本身这其实是开源可以塑造的一种优势

372
00:47:41,520 --> 00:47:48,360
但是是不是能够达到呢这我觉得到较到目前为止还是挺大的挑战就没看到这个特别就是

373
00:47:49,520 --> 00:47:51,600
突破性的一些一些尝试啊

374
00:47:52,520 --> 00:47:54,840
我自己有一些想法是可以改进的

375
00:47:55,640 --> 00:48:06,440
就呃因为我们讲这个供应链的这个问题就是它它难是难在哪里难其实主要难在你的这个安全审计成本非常高

376
00:48:07,360 --> 00:48:16,040
就是你不可能把你的这个下游的所有东西你都审计一遍对那只有大厂能够这么干对吧大场都很难做大场都很难也很难

377
00:48:16,720 --> 00:48:27,640
那如果是一个个人开发者他根本不可能啊对吧于我可能只是在一个基础上写了一点点代码我可能只写了比方一千行代码但我的依依赖包可能有十万行代码

378
00:48:28,280 --> 00:48:29,080
那我怎么正常

379
00:48:29,960 --> 00:48:30,760
我不可能审计

380
00:48:31,480 --> 00:48:36,840
所以我觉得这个需要一些别的机制比方说这个基于包的这个权限控制

381
00:48:37,760 --> 00:48:43,360
就比方说这个no的ipc这个包吧说他为什么要有文件读写的权限

382
00:48:44,120 --> 00:48:50,720
这件事其实就是这个也是我刚还想问这个问题我我我就觉得这有点细碎了所以没问啊

383
00:48:51,560 --> 00:49:00,440
那但这个很重要他虽然是一个细节问题但是很重要就假设说我们有一个机制啊能够能够说这个把敏感的权限能够收拢

384
00:49:01,040 --> 00:49:18,840
但这个很难呀因为因为这个东西他难的点在于说目前操系统对于这个可可运行的程序的权限没有那么精细的控制你nojs全是在一个进程里去运行的他没办法去细分到你这个进程里面的代码到底权限怎么分配

385
00:49:19,840 --> 00:49:31,440
其实是有可能的因为在能那就得弄的自己来做对了就是自己来做啊其实我所以我说这个东西他其实需要这个no的或者甚至这个只是语言了

386
00:49:32,160 --> 00:49:35,120
他需要一些新的这个机制去加紧去

387
00:49:35,960 --> 00:49:50,600
那个亥克瑟我想说一大段了这个刚才刚才我忍忍了一下但是还是没忍住我其实不太认同你说的用技术手段来解决供应链问题这样的一个整体思路我觉得这是解决不了的

388
00:49:52,320 --> 00:50:02,800
呃举个例子说吧我们现在的手机或者说这个隐私数据为什么比原来的几年前要好很多是有法律的

389
00:50:03,720 --> 00:50:08,320
因为如果有什么什么东西侵犯了我的隐私的话是直接触犯法律的

390
00:50:09,360 --> 00:50:18,360
而且是打掉了一堆的这样的公司对已经打掉了一堆啊对就是说只要违法成本够低

391
00:50:19,120 --> 00:50:23,800
就就就像开源社区啊真的你说到底不费就是把这家伙骂死还能怎么样

392
00:50:25,080 --> 00:50:28,920
假设有一个人他在这个社区里潜伏了几年

393
00:50:29,800 --> 00:50:32,600
完了以后他就不是想在社区里面

394
00:50:33,320 --> 00:50:34,760
来追求什么名誉的

395
00:50:35,840 --> 00:50:42,880
他只是把自己埋伏在那将来他就有可能实施某种供应链攻击你怎么办

396
00:50:43,520 --> 00:50:49,480
呃是我觉得你讲的很有道理啊而且我也赞同用法律解决但这里有一个漏洞啊

397
00:50:49,920 --> 00:50:56,480
就是软件这个行业它是全世界的嗯就是你怎么去比方说这个人根本就在境外

398
00:50:57,200 --> 00:51:03,240
嗯对对之前看我我没有我没有说完嘛就就就说嘛所以我说有大段

399
00:51:03,840 --> 00:51:13,960
你看现在你刚才在说小公司没有权没有能力或者说没有没有这个技术实力去去承担所有的这种风险对的

400
00:51:14,680 --> 00:51:23,880
那是因为小公司现在觉得开源软件就是一个免费的东西我拿来就用节约成本多好的东西现在如果

401
00:51:24,880 --> 00:51:26,120
说开源软件你可以用

402
00:51:26,840 --> 00:51:31,680
你用的就是你负责如果你的用户出了问题你去赔偿

403
00:51:33,080 --> 00:51:42,400
那么这个小公司也好大公司也好就像一个被被被欧洲的极低PR所所严格规范的公司他一定要去审查自己的

404
00:51:42,800 --> 00:51:50,560
这个数据的合规问题或者说是隐私合规问题他当然要花钱把这些问题解决啊同样的任何一家公司

405
00:51:51,280 --> 00:51:57,480
他如果用了某某开源软件然后他又说哎我咋知道这个开源人咋回事啊我不负责那不行

406
00:51:58,040 --> 00:52:00,840
你不能够假装你不能负责你就得负责

407
00:52:01,720 --> 00:52:11,280
这个时候他才会投入更多的时间精力成本去把他用到的开源软件去检查去去判断到底是不是安全的

408
00:52:12,280 --> 00:52:21,880
所以结论就是利好开源软件治理外包的创新公司啊是的你们现在谁有权赶紧开公司这么干这事

409
00:52:23,200 --> 00:52:34,520
如果能干成的话不能真的解决问题因为因为你不可能通过什么什么技术手段啦通过什么什么社区的谴责了真正的杜绝这样的风险

410
00:52:35,360 --> 00:52:41,680
啊是是的我是我是赞同你的分析啊只是我觉得这就说得要双管齐下

411
00:52:42,160 --> 00:52:48,880
因为像我前面讲就是法律的这个这个基于法律啊其实还是有有些问题但是他一定是需要的

412
00:52:49,280 --> 00:52:56,560
但他也有些问题像前面讲的就是跨国的问题而且就说如果是恶意的黑客的攻击

413
00:52:56,560 --> 00:53:00,800
你甚至来讲很多人他根本没有能力取证取真理都取证不了

414
00:53:02,000 --> 00:53:09,400
你不要你不要说那个非常难我绝对说技术手段其实是呃能够解决很多问题的像我前面讲的就说

415
00:53:10,160 --> 00:53:18,040
你因为我我我前面那个还没完全讲完啊就说主要问题供应的攻击的主要问题实际上是因为你的安全审计成本太高

416
00:53:18,560 --> 00:53:26,440
技术手段在里面起了作用主要是使得你的这个安全审计能够控制在一个

417
00:53:26,840 --> 00:53:34,240
合理的成本里面嗯可能的成本里面嗯这样的话你才能够去做我们刚刚讲的那些事情就比方说你要求他

418
00:53:34,640 --> 00:53:43,400
去做安全审计但如果像我们现在这情况下他安全审计根本没有可行性你首先得有可行性对他才能做

419
00:53:43,720 --> 00:53:51,880
否则我就是我他都不让开发了对吧就是你开发一个东西你的这个你的这个如果万一你中刀这个成本你直接就破产了

420
00:53:52,240 --> 00:53:54,800
那就那别别开发了对吧是

421
00:53:55,440 --> 00:54:01,600
所以首先得首先技术技术要让他能够在一个可控的城门里面去干这个事情

422
00:54:02,400 --> 00:54:04,960
这是这是我讲的说那个技术手段的作用

423
00:54:06,040 --> 00:54:12,040
我觉得你们两个的观点其实是是是是兼容的对是财务同意的

424
00:54:14,720 --> 00:54:21,560
好呀我我我们也也聊了差不多一个钟头了哈这个这个稍微的这个收收尾啊就是我我

425
00:54:22,000 --> 00:54:27,000
我觉得这事儿吧嗯其实是

426
00:54:27,840 --> 00:54:35,920
有解决方案的只是这个解决方案呢就像刚才说的是全体人类都要去付出更高的成本

427
00:54:36,760 --> 00:54:48,800
就明明明知道我们有有一个更更这个效率更高的方式但是由于某些这个老鼠屎那那你就不得不退回到一个人人自危都无法互信的一个状态的话

428
00:54:49,200 --> 00:54:54,360
不是不可以但是成本真的会非常非常高甚至有一些业务就没法继续下去了

429
00:54:55,920 --> 00:54:59,080
嗯那那这种情况肯定不是我们想看到的东西

430
00:55:00,280 --> 00:55:07,040
所以维护这个开软件的社区的纯洁性和他的相对的这种

431
00:55:07,920 --> 00:55:10,440
大对他的信任感我觉得是一个

432
00:55:11,400 --> 00:55:12,880
的非常有价值的事情

433
00:55:13,880 --> 00:55:24,120
就是值得很多人去为之努力当然了这个并不是说就是说我们不需要去做一些这个防人之心不可无的这样的准备

434
00:55:24,600 --> 00:55:26,040
那就是刚才说的你

435
00:55:26,760 --> 00:55:33,040
你要跟就不同的用户你要根据你的成本承受能力去选择对你来说合适的解决方案

436
00:55:33,360 --> 00:55:38,120
如果你的成本成本很低那你就选择信任这个嗯开软社区

437
00:55:38,960 --> 00:55:46,840
然后选择你的这个供应商的或这个或是说你的上游的这些代码的时候你要谨慎一些你要有一些判断

438
00:55:47,240 --> 00:55:54,360
那就只能这样了那很大的大厂你要建立非常完善的开源治理你要有一整套的

439
00:55:55,040 --> 00:55:57,320
这个依赖和可信方面的一些验证

440
00:55:58,080 --> 00:56:04,640
那以后会不会出现非常优秀的也有具有一定规模的专门把这种服务

441
00:56:05,280 --> 00:56:12,080
啊外包出去的这种这种服务价格又可接受那么很多中型的消费者可能会使用这些服务

442
00:56:12,400 --> 00:56:15,360
其实就跟当初呃最有钱的人用欧瑞口

443
00:56:16,000 --> 00:56:26,040
其次有钱的人买这个瑞哈的这个或者是卖西扣的这个付费服务那完全没钱的人你就用卖西扣的community版本其实本质就就这么回事

444
00:56:26,640 --> 00:56:30,320
然后承担相应的一些风险所以这这个事情本身吧

445
00:56:30,720 --> 00:56:40,200
呃当然他是在很特殊的历史状况俄晤战争是改变二战之后历史格局的一件大事啊出现一些这种怪胎我个人认为也算正常

446
00:56:40,520 --> 00:56:42,880
但确实给我我们很多冲击和思考

447
00:56:43,320 --> 00:56:45,400
那这是我个人的一些一些感想

448
00:56:45,840 --> 00:56:55,480
那各位你你你们对这个事情的一个总结或者说一个现在可以每个人有一个这个这个总结层次啊看大家是是怎么怎么去想的

449
00:56:56,000 --> 00:56:56,240
嗯

450
00:56:58,920 --> 00:57:07,560
那我先我来说一下王老师先来王老师先来对好好谢谢对其实今天学到了很多啊其实我觉得这件事情肯定是

451
00:57:08,040 --> 00:57:13,400
嗯大家都有责任干系来做这件事情我觉得我们这个节目其实最大的一个

452
00:57:13,880 --> 00:57:18,360
嗯价值其实就在于把这件事情给大家呈现出来了

453
00:57:18,760 --> 00:57:24,440
对无论你是贡献者或者是你是消费方使用方首先你知道了这些事情

454
00:57:24,920 --> 00:57:32,680
对第二个呢知道这件事情后那根据我们刚才讨论的这些内容对我也是非常赞同几位嘉宾的就是

455
00:57:33,200 --> 00:57:39,600
嗯不能说倒退还是要在这个创新的道路上继续走包括整个开云社区的发展

456
00:57:40,080 --> 00:57:47,360
对那其实是需要各方面大家一起来为这个开云社区发展的这种健康去做出贡献

457
00:57:47,360 --> 00:57:57,600
对你的使用方做好贡献管理对甚至是对开云社区甚至是直接供应链安全做一些更加额外有价值的一些投入

458
00:57:58,000 --> 00:58:08,960
对那我们的一些开发者其实也是希望大家共同构建一个更加可信的这样一些社区对我是我个人其实还是

459
00:58:09,440 --> 00:58:25,000
嗯挺有信心的虽然也看到了这些问题我是觉得开源他首先的这种开放式协作这种透明的这种信息状态应该是可以朝一个好的方向去发展对这是我的观点

460
00:58:25,000 --> 00:58:55,000
嗯我想表达的意思是呃两段啊第一段呢其实呃我原来在另外一个地方说过就是说这个开源随着这个开源时代越来越繁荣越来越新旺其实它里面有一个曾经有一个叫里纳斯定理就是所谓的眼球越多然后这个开源软件的质量就越高大概这样的一个里纳斯定理我当时的发的爆论是说这个里纳斯定理快要施行

461
00:58:55,000 --> 00:59:25,000
是笑了因为开源软件太多眼球不够用了但是其实我要收回我的话或者说收回一部分吧就是像这一次的事情之所以会被人发现还真的是靠社区眼球的力量然后一一层一层的追溯所以我至少认为到目前为止这个社区的自我发现和自我纠偏的能力是在的但是第二段话是想想说呃开源我如果我们

462
00:59:25,000 --> 00:59:55,000
直觉的是一个伊甸人或者是一个乌托邦的话那这个幻想应该早早的醒过来了他不是一个乌托邦也不是一个伊甸人因为在这样的一个开源的社区里面什么样的人都会有你你保不准什么时候就会出一个更疯狂的家伙做出更加疯狂的行为因此而尽早地从理想主义的状态醒过来然后去做一些事情这是我们所迫切的任务OK

463
00:59:55,000 --> 01:00:07,000
好黑斯好呃我的感受啊在这件事情上感受因为这个事儿我这个吃瓜了也比较长时间亲自也下场参与了一会儿会儿

464
01:00:07,000 --> 01:00:24,960
嗯就我自己感受就是第一个这个事情就是就大家讲这个爱供应量安全问题其实是一个核心的一个问题现在已经是一个刻不容缓的要要去思考和解决的问题尤其呢就我作为一个这个前端啊

465
01:00:25,000 --> 01:00:55,000
就是这个事情在这个浓浓直smpn直s这样一个具体的一个技术站上面是他有一些尤为突出的一些问题这可能我身在这个社区里面啊包括我自己也是这个加瓦斯科普语言标证委员会的成员来所以确实是想在后面能够去做一些事情去改进这个问题的这是一个嗯第二件事情呢其实是呃我们今天没有

466
01:00:55,000 --> 01:01:24,960
怎么讨论的但是呢其实我一直也有些感受就是开源和政治的这个关系啊因为这个事情的起因啊实际上是一个这样一个战争是这样一个政治事件在现在的这个整个的世界这个变化里面这种冲突啊确实是越来越多了因为之前的其他的一些问题啊其实也是一些呃我觉得是有一些这种问题的就包括之前的

467
01:01:25,000 --> 01:01:54,760
来派的也好或者后来的飞捷子啊什么康了有好几件这个事情一直到今天的这个事情可以讲这个整个世界的这个这个冲突可能是在不断的加剧越来越多的随着开源社区不可避免的会受到这个影响对所以这个开源社区他到底和政治这样一个关系呃以及我们看到的一个大的趋势呃就是所谓的

468
01:01:55,000 --> 01:02:05,120
你要把这个道德或者政治混合在里面今天因为我我我希望以后的节目是不是也能讨论讨论这方面的问题

469
01:02:05,120 --> 01:02:15,160
嗯这是个好话题啊而且我们肯定会讨论的这个说白了是什么哈就是在几十年的全球化之后现在出现了逆全球化的一种势力

470
01:02:15,160 --> 01:02:36,200
那在逆全球化的势力下那么开源协作其实是全球化的一个缩影也是全球化的一个支撑力量这个影响一定是会有的这个以后有机会请海斯莱跟我们一起去再讨论后面说这个问题如果有机会的话呃因为这次我看到了真的是非常有感触就经常一定会有的一定会有你放心了

471
01:02:36,200 --> 01:03:06,200
嗯我们都八百多宗没有国际啊这个话啊或者说要不要有一个道德道德条款的许可真的这这些问题希望以后有机会再来跟大家一起一起来聊一聊我特别感兴趣下回咱们继续聊这个一定会你放心我们我们也就就看你时间到时候找谁我们一块来来专门聊这个话题好呃这个首先让我们祝愿哈这个呃开放平等互助

472
01:03:06,200 --> 01:03:35,920
的人类命运共同体成为我们的未来啊一切逆流终将被时代所抛弃并且我们几位也都是实干者也都是在第一线的就像刚才海斯说的各自在我们自己的领域去努力为这个愿景去去做事儿吧啊好那今天我们这个番外的节目啊也聊了多少事啊就差不多到这里啊非常感谢大家我们下次节目再见拜拜拜拜

