0
0:00:00.000 --> 0:00:06.280
各位好欢迎走近今日说法今天我们要关注的是三个来自高科技领域的案件

1
0:00:06.280 --> 0:00:13.040
秦杰新颖发人申请和我们一起的是一位长期从事科技领域法律工作的专家郑华老师

2
0:00:13.040 --> 0:00:14.360
郑华你好

3
0:00:14.360 --> 0:00:16.520
大家好我是郑华

4
0:00:16.520 --> 0:00:21.320
这是有点这个央央视小萨的这个感觉

5
0:00:21.320 --> 0:00:28.520
大家没有走错门啊我们还是这个后互联网时代的乱谈啊

6
0:00:28.520 --> 0:00:39.040
但是呢今天我们打算啊跟我们的这个一位老朋友啊也一直是在科技领域做法律相关工作的啊这个郑华

7
0:00:39.040 --> 0:00:46.240
我们一起来聊聊在科技不断发展的过程当中我们所碰到的一些有意思的案件

8
0:00:46.240 --> 0:00:51.040
熟悉我们这个节目的朋友就知道好像其实我们一直都挺关注这个问题的

9
0:00:51.040 --> 0:00:57.040
因为我们都认为的是这个科技的发展啊它对人的影响是很深远的

10
0:00:57.040 --> 0:01:05.040
啊它会影响你的生活方式啊会创造很多新的商业模式会重塑很多老的商业模式

11
0:01:05.040 --> 0:01:10.040
那么这个过程当中肯定就会产生很多纠纷啊或者是相关的问题

12
0:01:10.040 --> 0:01:21.040
那这里面包括人的行为模式包括你的呃这个商业上的一些纠纷包括最后会有达到法律上的一些问题

13
0:01:21.040 --> 0:01:27.040
那法律这个东西呢它就相对科技的发展它总会那么滞后一点

14
0:01:27.040 --> 0:01:38.040
所以很多问题会出现在当前环境下会是一个有争议的或者是一个比较呃难以简单判断的一个问题这恰就是我们一直在关注的点

15
0:01:38.040 --> 0:01:48.040
嗯那正好就是这个郑华也在我们科技这个行业里面做了很长时间啊就是法律行业的专业

16
0:01:48.040 --> 0:02:01.040
那么相信有很多这个能够跟我们聊出一些不一样的东西嗯再一次感谢郑华我们今天来聊几个非常有意思的这个法律案件

17
0:02:02.040 --> 0:02:15.040
嗯在我们开始这个主题之前哈嗯先插一个这个我们之前的这个嗯上一期聊的话题的一个延续吧

18
0:02:15.040 --> 0:02:28.040
上周我们聊了这个kingdo的这个事情嗯正好前两天我遇到了一个很有趣的情况嗯给就今天也跟大家分享一下

19
0:02:28.040 --> 0:02:38.040
就是就在amazon宣布说我明年要撤出中国市场之后大概没几天我发现我的kingdo就出问题了

20
0:02:38.040 --> 0:02:50.040
就是它的电呀用得特别的快就很快这个放在那大概两个小时呃就从充满就会变成零这个我我不知道有你们有没有碰到过类似的问题

21
0:02:50.040 --> 0:03:19.040
就我一开始觉得哇这个是你amazon不做了这也不用把我的kingdo弄坏掉然后在网上看到有人真的也有类似的这个猜测啊你你们可以猜一下这个大概是什么原因我我花了两天时间做这个科学侦探呃把这个案子给破了哦你那个kingdo联网吗对我常年是联网的以前一直都是联网的所以会不会是在跟远端联系什么之类的嗯但是具体联系干啥我就不知道了

22
0:03:20.040 --> 0:03:50.040
对就是kingdo他耗电嘛就那么几个问题啊一个就是他可能灯一直亮着没熄这就是故障但我那个没有啊还有一个可能性就是之前很多人说的他对文件做缩影做缩影的时候遇到bug他就死循环了就一直在那转啊这个我也没有所以最后发现就是网络的问题但是网络到底干啥呢这个就有意思了呃很快我就发现就是就上个礼拜这个amazon发了一个新的

23
0:03:50.040 --> 0:04:20.040
kingdo的固件的更新啊这个固件更新的一共是两百多照按正常情况的几十分钟就下完了但是这一次不知道为什么就一直下不完很慢很慢所以后来我就在电脑上面手动下载然后把它导到这个kingdo上去然后安装这个问题就解决了所以我有一个合理猜测啊就是这个amazon决定撤出中国之后啊他有可能啊对中国的服务器做了一些调整比如说撤掉了一些CDN啊或者是怎么之类这样的一些

24
0:04:20.040 --> 0:04:28.080
节点然后导致我这里访问变得特别慢啊特别慢的情况下两百多照他要下很长时间还没等下完就没电了因为

25
0:04:28.440 --> 0:04:33.680
kingdo其实他电池很小的比一般的这个智能手机都小那最后发现就是这么个问题

26
0:04:34.320 --> 0:04:44.000
其实我觉得这个应该算bug那就是你合理的一个软件他做成这样你发现你的下载需要花很长时间超出你的这个

27
0:04:44.600 --> 0:04:55.760
嗯设备的这个电量的话那么你其实应该挂起你不应该继续下了你应该等这个人打开设备的时候提示说哎有一个更新需要很长时间下载请你接上电源再去下

28
0:04:56.240 --> 0:05:05.720
我类似这样但是他没有做所以这是一个小插曲好那我们下面就开始我们今天的这个主话题啊

29
0:05:06.160 --> 0:05:13.240
我们刚说了我们今天会聊三个跟科技领域的这个法律问题有关的案例

30
0:05:14.480 --> 0:05:20.200
第一个呢我们要看的是一个啊华盛天城这个对埃乒乓的诉讼案

31
0:05:21.320 --> 0:05:28.080
华盛天城呢是一个A股上市的一个搞集成的公司啊做系统集成和这个企业企业的信息服务的

32
0:05:29.240 --> 0:05:36.040
那他其实跟埃乒乓是多年的合作伙伴啊是跟埃乒乓搞合作开发在国内的推广都有做

33
0:05:36.680 --> 0:05:41.720
那么这一次这个案件其实不是刚刚发生的啊应该去年去年九月份十月份的事情

34
0:05:42.280 --> 0:05:50.120
在美国和中国两两边对埃乒乓起诉那么这个起诉呢其实我看下来我觉得是比较正常的商业纠纷

35
0:05:50.640 --> 0:06:01.560
啊里面几点就是说有商业线密啊有对这个有在这个对经对手的一些支持可能违反了我们之间的约定啊这样一些事情

36
0:06:02.040 --> 0:06:10.920
但是这个里面最吸引我们的一个点哈就是他里面诉讼里面提到了这个诉讼理由里面三个主要的理由里面有一项就是说

37
0:06:11.480 --> 0:06:21.880
嗯埃兵卖给华盛天城的一些原代码啊由华盛天城来做这个二次开发的一些原代码

38
0:06:22.640 --> 0:06:27.480
但是呢后来这个埃兵在没有告知华盛天城的情况下把它开圆了

39
0:06:28.920 --> 0:06:30.080
那么这个

40
0:06:31.040 --> 0:06:33.920
然后听了又认为是侵害到自己的这个权益的

41
0:06:34.760 --> 0:06:40.880
而这一点其实我看了一下国内的几个新闻媒体都没有特别关注这个点

42
0:06:41.440 --> 0:06:47.960
很多更多的可能关注比如经对手的问题啊因为正好经对手是爱别人在国内的另外一个合作伙伴的浪潮

43
0:06:48.520 --> 0:06:52.840
嗯就这方面可能聊得比较多但是对于开源这个事情聊得反而不是很多

44
0:06:53.240 --> 0:07:00.320
那我们对这个会比较关注的原因是这个其实是一个挺有意思的现象就是一个软件

45
0:07:00.800 --> 0:07:07.440
它原本是开源的然后我想把它变成商业避源的商业软件的话这个

46
0:07:08.600 --> 0:07:12.960
要怎么做那反过来这个案例就是爱边这个案例我原本是一个商业软件

47
0:07:13.400 --> 0:07:20.480
我是要卖钱的这个原代码是拿来卖钱的而且就已经以相当高的价格给卖给一些人了

48
0:07:20.840 --> 0:07:27.360
然后我突然把它开源了那么这个事儿到底嗯在法律上也好

49
0:07:27.920 --> 0:07:34.320
在这个正常的这个商业的这个社会里面也好它到底是一个什么样的性质啊这个事儿我们是

50
0:07:35.000 --> 0:07:42.200
挺有兴趣的所以想看看这个嗯振华新闻怎么看这个事情或者有什么你掌握的一些别的信息可以给我们分享

51
0:07:43.200 --> 0:07:53.680
啊那好呀其实这个案子之前就是咱们也大致有提过吧就是首先就是华盛天城诉了爱边爱门但是爱边爱门的同时又提起了一个仲裁

52
0:07:54.160 --> 0:07:58.800
然后而且赢了然后仲裁然后还判定这个华盛天城支付

53
0:07:59.360 --> 0:08:05.320
爱边一定的违约金所以这个时候就比较有意思了就是说像你刚才提的两点就是

54
0:08:05.840 --> 0:08:12.000
第二点中就是原来一个这个代码或者一些软件是避原的后来想把它给转成开源的

55
0:08:12.400 --> 0:08:18.280
那这个时候他如何就是如果之前把这个避原的曾经许可给或者是转售给一些这个

56
0:08:18.880 --> 0:08:22.160
呃厂商然后这个时候他是怎么去收尾的

57
0:08:22.440 --> 0:08:27.560
因为比如说这个许可还好了许可就是许可期间到了之后那我这个仍然拥有这个

58
0:08:28.000 --> 0:08:30.960
呃完全清洁的一个权利我就可以把它拿去开源了

59
0:08:31.360 --> 0:08:39.080
还有一个就是我已经把这个代码的所有权转让给一家公司了那我其实就对这份代码没有什么就是权属或所有权了

60
0:08:39.080 --> 0:08:46.520
那于这个时候我再去开源呢就是肯定侵犯到了就是另外一家公司的利益那这是一个基本的情况

61
0:08:47.880 --> 0:08:51.720
那就这个案子来说其实还是比较有意思的因为

62
0:08:52.560 --> 0:08:59.240
大家可能表面上看起来或者说最初听到的一个信息就是说华盛天城塑了爱边爱边就是

63
0:09:00.000 --> 0:09:06.440
一是说支持像你说的一样支持了竞争对手另外一个就是把一部分许可代码拿去开源了

64
0:09:07.440 --> 0:09:08.840
那这里呢看起来

65
0:09:09.400 --> 0:09:19.680
呃就是因为没有我们因为我们没有足够的这个信息呢可能不能够完全去判断这个事情就是究竟这个事实是什么

66
0:09:20.000 --> 0:09:30.000
但是我们可以做一些假设啊如果是说呃最初是爱边牧许可给了一些就是把一些代码的使用权许可给了华盛天城然后还提供了一些服务

67
0:09:30.680 --> 0:09:36.680
那这个时候可能正常的按照合同履约的情况来说需要等这个相关的

68
0:09:37.320 --> 0:09:49.280
合同到期或者说额服务期列期之后而别木才能拥有这个呃代码的一个清洁的版权或者是一些清洁的权利这个时候呢才能拿去开源

69
0:09:49.960 --> 0:09:56.240
但是呢就是在这个案件进程中或者说双方履行合同义务过程中如果说这个

70
0:09:56.720 --> 0:10:05.560
另一家公司有一些根本的违约行为双方合同目的无法达成同时呢在这个合同中又能够有一些约定条款

71
0:10:06.400 --> 0:10:10.720
一方如果另一如果一方就是没有办法去履行这个合同义务

72
0:10:11.280 --> 0:10:15.560
在某个情况下呢另外一方可以通知或者说一些公示的手段

73
0:10:15.840 --> 0:10:22.040
然后来终止合同那这个合同终止后呢当然这个权利人或者说权利方而变也有权利

74
0:10:22.240 --> 0:10:28.080
把一些相关的乃至开源那就是根据我们这个基本的一些假设

75
0:10:28.680 --> 0:10:34.040
我们大致能做出来这样的推论但是具体情况呢可能还得看这个具体这个

76
0:10:34.840 --> 0:10:38.360
呃仲裁或者说一些这个呃判决

77
0:10:39.440 --> 0:10:40.840
啊好这是我基本的看法

78
0:10:42.920 --> 0:10:49.560
呃关于这个就是我我有一个可能比较外行的一个问题啊就是比如说我这个软件的源代码

79
0:10:50.160 --> 0:10:54.040
啊我把他的使用权卖给某个公司

80
0:10:54.880 --> 0:11:03.680
嗯然后我把这个源代码开源这件事情跟我以原价卖了一个商品

81
0:11:04.120 --> 0:11:12.320
然后过了一段时间我要把他打了一个很厉害的折去销售嗯这有什么区别吗这这两件事情

82
0:11:12.320 --> 0:11:22.240
嗯我个人认为呢这个区别就在于当你把这个应用代码他就有一个附用的权利嘛当你把一个

83
0:11:22.760 --> 0:11:28.240
就是代码的使用权卖给某家公司的时候这个公司可能基于这些代码做了一些二次开发

84
0:11:28.600 --> 0:11:29.680
然后做了一些产品

85
0:11:30.240 --> 0:11:34.840
然后当你再去把这些相就是同一份代码再去开源之后呢

86
0:11:35.240 --> 0:11:41.840
其实这个公司就上失了当时的一些这个竞争优势了或者一些比较好的权益那肯定就是

87
0:11:42.440 --> 0:11:45.680
损害了这个被许可方的一些比较严重的一个权利嘛

88
0:11:46.120 --> 0:11:50.120
然后这个时候通常会认为就是有比较比较重的一个损害

89
0:11:50.560 --> 0:11:52.920
这当你去卖这个商品的时候呢可能

90
0:11:53.640 --> 0:11:59.760
就是说你当时去买这个商品价格比较高的时候可能市场的价格或者形式这个样子

91
0:12:00.240 --> 0:12:06.040
然后呢之后再去打纸的时候呢可能就是说对你本人的损害没有那么高或者没有那么大

92
0:12:06.680 --> 0:12:10.520
这个代码这个权限包括这个商品的这个

93
0:12:11.280 --> 0:12:15.280
价值其实都和在一定期间内这个估值是有关的嘛

94
0:12:16.000 --> 0:12:27.160
特别是说咱们这个举的案子它本身那个价格是比较高但是通常咱们这个商品打折来说就是价格比较低而且一般的消费者都大致会有一个预估

95
0:12:27.240 --> 0:12:31.760
当然在某些案子上呢也会有一些争议啊比如说这个六八八打折打得比较厉害

96
0:12:32.160 --> 0:12:37.520
然后就是打折之前呢就花比如说一倍的价格买了而慢慢地呢对

97
0:12:38.360 --> 0:12:46.520
就是说六二八这种车也就打得稍微轻一些了或者说会有一个这个前提的这个告知或者

98
0:12:46.800 --> 0:12:53.240
比如说在多少月内或者多长时间内或这个价格可以保持在一定的一个呃幅度区间内

99
0:12:54.080 --> 0:12:59.040
但我觉得总体来说还是个案子里面这个原代买的价格或者价还是比较高的

100
0:12:59.040 --> 0:13:01.640
但是普通的商品来说就通常没有那么高

101
0:13:03.480 --> 0:13:10.760
所以在我国的司法实践里面类似这样的问题它是跟这个价格的

102
0:13:11.560 --> 0:13:19.280
就是前后价格的差异是有关的对吧就是我我假定在假定它在合同里面是明确约定了啊说

103
0:13:19.680 --> 0:13:27.280
你这个原代码卖给我之后啊不能卖给别人或者以低于我的价格卖给别人如果明确约定这种东西那那另说了

104
0:13:27.280 --> 0:13:35.760
如果没有约定的话那么他去降了价呃我去告他对我造成了这个这个损失

105
0:13:36.040 --> 0:13:42.320
那么这个最后我能不能告赢是跟这个价格高这个变化的大小是有关系的是这样吗

106
0:13:43.120 --> 0:13:44.440
对其实是有关系的

107
0:13:44.680 --> 0:13:51.320
比如说嗯本来就是A和B公司签了一个A将一些源码许可给B公司然后B公司就

108
0:13:51.320 --> 0:13:58.880
就是正常的商业期待就是在这三年内我就是有这个代码的一家独独有的一个使用权或者是说

109
0:13:59.280 --> 0:14:06.520
呃我当然也知道A公司许可给其他家但基本上是说我们几家一起来用这份代码然后再做二次商品开发的时候

110
0:14:06.880 --> 0:14:11.400
然后能保持到一个合理的这个利润范围或者一个合理的这个获益区间

111
0:14:11.880 --> 0:14:19.160
如果是说直接开源了那根本上就是在对数签那个合同一些合理的期待或者一些合同目的就没有办法实现了

112
0:14:19.560 --> 0:14:29.400
那当然可能就对这个双方的交易就会有一个比较大的挑战以及说这个啊双方交易的一个合理性或者划性吧

113
0:14:30.520 --> 0:14:37.840
那这个说哎我我我买了你的源代码进行使用那么隐含着在这个合同期内我是有一定的独占权利的

114
0:14:38.200 --> 0:14:43.880
这个是一种约定俗成的规则吗还是有立法精神在里还是干脆就有法律条文的

115
0:14:44.880 --> 0:14:48.440
嗯这个许可是有两种一种就是独占许可

116
0:14:49.320 --> 0:14:56.880
独占许可就是说当A公司许可给B公司之后然后除了B公司之外其他人其实都不对这个

117
0:14:57.440 --> 0:15:03.840
呃代码在一定时间内享有这个权利了包括二次开发了包括A公司也不能再许可给其他公司

118
0:15:04.200 --> 0:15:07.960
这这份代码这是一个独占的许可另外一个呢就是说

119
0:15:07.960 --> 0:15:14.240
呃还有一些就是非独占许可就是说A公司可能会许可给B公司了B公司D公司

120
0:15:15.560 --> 0:15:25.240
这个相关的许可但同时呢也会就说A公司也会考虑到一个市场的实际情况同时呢B公司也会对这个市场实际情况有一个期待

121
0:15:25.680 --> 0:15:36.680
比如说这个市场上大概有五家各种类产品的大家可能都有的利润都有的钱赚但是呢如果一下许可一百家的话可能这个实际上整个市场坏掉了

122
0:15:37.080 --> 0:15:44.880
那这个时候呢肯定就是说像BCD这几家公司肯定会来找A公司然后来讨要至少是讨要说法或者是

123
0:15:46.280 --> 0:15:47.040
非常相关的事

124
0:15:50.000 --> 0:15:58.640
郑华我我有个疑问啊就是或者说我想了解一下就关于授权的事情就比如说我我是一家公司完了以后呢

125
0:15:59.120 --> 0:16:03.480
呃我给你的这份代码最多也就是这个代码的比如说三点零版本

126
0:16:04.440 --> 0:16:10.800
那么假设我坑之坑之我在公司里又组织员工又做到了三点二三点三这个后面的版本

127
0:16:11.480 --> 0:16:18.680
我是不是可以主张就是说我三点零的版本给你了我是独家许给你的但是我把三点二开圆了跟你就没关系了

128
0:16:19.440 --> 0:16:20.240
能不能这么说

129
0:16:21.840 --> 0:16:28.160
这个可能也要看一些情况嘛比如说三点二包含了很多三点零的代码这个时候其实还是对这个

130
0:16:28.640 --> 0:16:31.960
呃被许可方就是当时三点零的被许可方有较大的影响

131
0:16:34.760 --> 0:16:43.160
我感觉这个在司法实践上操作起来好难啊对啊我我说我后面又投入了一百个人年增加了很多很多功能

132
0:16:43.600 --> 0:16:51.960
怎么怎么样完了以后我就说关键是关键是真上法庭了谁能够判断这两个版本的代码到底差异有多大

133
0:16:52.800 --> 0:17:00.400
对而且还有一个很大的问题是我买你的原代码的时候我能描述的清我买的到底是一个什么样的原代码吗

134
0:17:02.480 --> 0:17:11.840
估计很难的意思但是你也不能够说啊因为我买了你的三点零然后我就独占了你今后所有的开发你都不能开源出去或者说你都不能够再授权给别人

135
0:17:12.160 --> 0:17:19.240
那不见但它就不是一个版本的独占它是一个终身独占了就是我永远独占你今后所有的修改的

136
0:17:19.240 --> 0:17:32.600
拍定是有一定时间的啊就比如说几年这这个不倒不会终身了但是就是换句话说就假设我开发原代码我这公司是以开发和卖原代码为生的话那么我不可能只卖给一个或者两三个公司

137
0:17:33.120 --> 0:17:39.680
我卖给你们之后我就只为你们这两三家服务了那那其实就这个价钱就不一样了是吧

138
0:17:39.680 --> 0:17:47.040
哼所以我觉得这里面嗯就我不知道他能怎么操作就是

139
0:17:48.040 --> 0:18:05.160
软件是个案件如果有具体诉讼的话肯定是说法院就是在国内啊法法院会指定一些专门的技术专家或者说这种叫鉴定机构来去鉴定这个不同版本的代码来去判断一些相关的情况相对来说还是比较客观的吧

140
0:18:06.160 --> 0:18:16.520
他会他会判断什么就是说这个代码的这个呃重合度还是说公用上的就他怎么去评价我们做软件都很清爽就是说

141
0:18:16.920 --> 0:18:27.080
你你软件跟跟小说的侵权是不一样小说你就看他的文字段落相似度这甚至ai算法对对但是代码是真的不能做这一点我举个例子哈

142
0:18:27.080 --> 0:18:36.800
我有一个一点零版本的这个库然后做了个二点零版本的库这两个库的接口和功能完全一样但是实现是完全重写的你说这两个是不是一样的库

143
0:18:39.320 --> 0:18:49.640
嗯他一般来说鉴定的时候就会鉴定这个代码两两份代码是实质相似的还是说是一个呃这个完全他怎么定义实质相似

144
0:18:49.640 --> 0:18:59.840
就是小说文学实质相似我觉得还稍微能理解虽然也有很多争议但至少能理解代码的实质相似到底指的是什么比如刚才讲这个例子就是就是个典型的例子

145
0:19:00.200 --> 0:19:17.120
我两个库功能是完全一样的接口也完全一样你使用他的方法完全一样但是内部实现我是完全重写的有很多优势啊速度更快兼容性更好可以跑在很多不同的设备上但是他的功能是完全一样的这个时候算实质相似吗

146
0:19:17.120 --> 0:19:29.480
啊这个其实比较复杂基本上来说如果咱俩都是同一个公司就是差不多员工开发的哦容易会被认定为是一个实质相似

147
0:19:30.520 --> 0:19:38.080
就是说鉴定结果基本上只会判断这个东西是不是一个实质相似至于你说那个功能就是说如果有特别大的提升

148
0:19:38.360 --> 0:19:44.840
那这个时候可能会由这个法官来进一步去判断一些赔偿或者做一些价格房子内的考量

149
0:19:47.280 --> 0:19:51.320
那就这个就对法官的考验法官法官是很难很难

150
0:19:51.840 --> 0:19:56.080
就说我不知道在法律意义上两段代码的实质相似他是指什么

151
0:19:57.600 --> 0:20:00.520
比如说是同样的人开发的就算实质上还是说代码

152
0:20:00.920 --> 0:20:10.520
他又有比如说两个代码一百行有三十行是一样的算实质相似还是功能一样就算实质相似就他这个标准是什么

153
0:20:11.760 --> 0:20:27.280
哦现在初步看起来我我感知啊就没有什么特别特别就是特定的一个标准往往来说会说是是说一些什么定义了一些喊数了或者是说一些逻辑表达相似最后就会被认为一个这样的相似

154
0:20:28.000 --> 0:20:35.440
也也会考虑到一些就是比如说有一些是通常的实现或者一些通常的写法这个可能会排除出去

155
0:20:35.800 --> 0:20:50.680
但你说完全有一个标准的话是没有只是说在判断一个呃相同或者实质近似的时候会参考一些是一些比如说纸吧或者说一些像我刚才说的一些比如喊数了比如说这个逻辑然后两边都相似

156
0:20:51.280 --> 0:20:51.960
这种判断

157
0:20:51.960 --> 0:21:04.440
这个从我的专业角度出发我觉得真的非常非常难我假设把一个呃 A代码我把里面所有的变量名全部都变掉

158
0:21:05.000 --> 0:21:15.600
我把它混淆了就是原来都是有有意义的这个变量然后把它变成 abcd abcd这是在这是在软件里面很常见的一种操作有专门的工具做这个事情

159
0:21:15.600 --> 0:21:20.320
那其实从字面上你几乎看不出来他的他的他的相似性了

160
0:21:21.320 --> 0:21:31.000
或者你去看他的这个处理流程比如说一佛奥斯啊货循环这里面有很多是你刚才说那种所谓的通用处理模块通用处理套路

161
0:21:31.720 --> 0:21:33.400
不知道这个这个真的是

162
0:21:34.560 --> 0:21:42.040
如果有一个案例啊最后这个案例确定了说这两份代码是十字相似然后我们来看看这两份代码说不定会有一些感触

163
0:21:42.680 --> 0:21:48.480
对我可以之后找一些这个专门建立机构写的书然后大家来看一下

164
0:21:49.000 --> 0:21:57.880
哎这个有意思因为有的建立机构会把他们之前处理过的一些法庭指派的案子然后一些内容大概出书去讲一下

165
0:21:58.240 --> 0:22:06.880
因为我觉得这个还是有一定的参考意义但总体来说判断还是没有说像你说的一样必须有一个什么样的标准对

166
0:22:07.560 --> 0:22:09.080
嗯

167
0:22:11.080 --> 0:22:16.320
那另一个问题就是如果这个代码确定下来说哎是类似的

168
0:22:16.880 --> 0:22:22.560
然后我先是把他一百块钱许可给你了然后没有以十块钱许可给他了

169
0:22:22.960 --> 0:22:31.280
那么这个在法律上是不是直接就会认定我对第一方只要第一方的合同还在有效期内就算是一种情海

170
0:22:32.280 --> 0:22:36.320
而这个并不必然是因为美方的这个谈判能力可能不一样

171
0:22:36.760 --> 0:22:40.120
然后同时呢就是特别是针对那种就是

172
0:22:40.640 --> 0:22:49.120
这种类似功能软件然后各家都有发其实你很难说A和B他这个价格的差异会会给两方造成一些

173
0:22:49.560 --> 0:22:57.760
就是特别不公正的地方尤其是在说就是可能各方签了个合同都是保密的所以说很难实质上

174
0:22:58.120 --> 0:23:05.120
但是这个实质上有不公平的地方但是可能这两个两个被取缓他也很难去做一些对比或判断

175
0:23:05.520 --> 0:23:09.920
唯一可能说稍微例外一点地方就是有些这种比如说是

176
0:23:10.560 --> 0:23:15.720
压的许可他可能会被认为有一些反垄断或者说有些对这个

177
0:23:16.400 --> 0:23:24.920
有在这个领域里面他有一些绝对的优势地位他和不同的家签订不同这个价格的合同可能会有一些反垄断的问题但是

178
0:23:25.480 --> 0:23:29.240
如果说一些技术本身来说没有那么强的一个

179
0:23:29.880 --> 0:23:33.600
的主导力或者在这个领域中占一个绝对优势的地位的话

180
0:23:34.360 --> 0:23:40.840
通常来说不会造成一个实质上你说的这种问题或者是说有一些这个问题但是也很难被发现

181
0:23:42.320 --> 0:23:42.820
对

182
0:23:44.880 --> 0:23:46.560
所以涉及到这个软件

183
0:23:47.520 --> 0:23:49.840
要从商业化往开远走

184
0:23:50.680 --> 0:23:57.560
这样我不知道大家知不知道有类似的比较成功的案例就我感觉只要你是

185
0:23:58.680 --> 0:24:08.680
商业上销售了而且你的客户还在有效期内的情况下你去开源好像很难避免惹上这样的问题

186
0:24:10.360 --> 0:24:14.440
或者有没有反例现在初步看起来感觉还是说

187
0:24:14.960 --> 0:24:25.440
你确实得需要等到一个合同期或者说你的被许可方大家都认为这份代码可能直接拿去售卖没有特别强的这个商业价值的时候才有可能说

188
0:24:26.360 --> 0:24:28.200
那去开源然后问题不大

189
0:24:30.000 --> 0:24:35.320
所以给到大家一个实这个比较practical的这个这个结论就是说

190
0:24:35.720 --> 0:24:44.960
如果你想把你的软件从商业的转开源的话你要么等到所有的合同期满要么你争得所有的这个当前的客户的许可

191
0:24:46.440 --> 0:24:52.200
才比较安全是的是的否否则被告总归是难免对

192
0:24:54.720 --> 0:25:01.320
我就怀疑就是你刚才就是提到那个案子里面可能就存在这种情况就是说这个合同还在争一起

193
0:25:01.680 --> 0:25:05.280
双方还没有达成一个比较塞头或者比较满意的一个结果的时候

194
0:25:06.160 --> 0:25:07.880
嗯我就拿去开源了

195
0:25:08.920 --> 0:25:09.160
嗯

196
0:25:10.960 --> 0:25:15.320
爱标姆这个行为我因为我没有仔细研究他那个代码

197
0:25:16.040 --> 0:25:17.800
就是到底是什么样的一个代码

198
0:25:18.320 --> 0:25:25.680
嗯就我其实不是特别理解他一个给商业集成商用的一个一些代码他

199
0:25:26.640 --> 0:25:30.800
会很着急在把它开源出来到底是是一个什么样的考虑不知道

200
0:25:31.640 --> 0:25:35.480
对这种从后面看我们可能会比较难看出来

201
0:25:36.760 --> 0:25:39.320
他们的案子现在还在进展中是吧

202
0:25:40.520 --> 0:25:47.760
对仲裁税额初步的结果但是是不是一个仲裁结果我们现在不清楚然后判决的话现在还没有给出来

203
0:25:48.120 --> 0:25:52.040
所以说两个我们都没有办法得到一个相对来说比较

204
0:25:52.560 --> 0:25:54.040
比较清晰的一个事实背景吧

205
0:25:55.920 --> 0:25:58.920
嗯而且现在我们也不知道他合同里到底是怎么说的

206
0:25:58.920 --> 0:26:00.800
对现在这是一个关键嘛

207
0:26:02.000 --> 0:26:02.240
对

208
0:26:02.760 --> 0:26:08.880
孔涛如果他知道合同具体是怎么说但是如果有这个相对的判决出来的话可能会提一下

209
0:26:09.280 --> 0:26:13.200
这是当时双方是怎么约定以及说现在的一个法律的状告

210
0:26:13.880 --> 0:26:14.560
对对对

211
0:26:15.280 --> 0:26:21.360
他现在这个中这个这个暂时的仲裁的结论还没有提到这些东西对吧

212
0:26:22.240 --> 0:26:26.320
对没有提到特别具体东西只有提到了一个仲裁的结论吧

213
0:26:27.200 --> 0:26:33.080
就是大家都能在这个这个微信圈里或者是叶网上看到一个结论

214
0:26:36.600 --> 0:26:41.560
他有结论也是一文这个应该是个上市公司吧所以可能必须要披露一些相关的信息

215
0:26:41.960 --> 0:26:44.800
所以呢大家知道的结论两边都是上市公司

216
0:26:45.280 --> 0:26:51.160
所以这个是这个案例呢我觉得是一个挺典型的商业纠纷的案例

217
0:26:51.160 --> 0:26:55.400
而且这两个公司其实都是以企业服务为主的

218
0:26:55.400 --> 0:26:59.680
所以它也没有就是跟普通人的东西有太多的关联

219
0:26:59.680 --> 0:27:06.120
但是它所揭示的我觉得主要是一个软件相关的权利到底怎么去认定

220
0:27:07.120 --> 0:27:15.680
然后当你这个把商业软件开源的时候有哪些可能会侵犯到利益的这个点是要去注意的点

221
0:27:15.680 --> 0:27:19.280
所以这个我们也还会再进一步再观察吧

222
0:27:19.280 --> 0:27:21.520
因为这个还在进展当中很多信息也不清楚

223
0:27:21.520 --> 0:27:26.800
那下一个案例呢我觉得就是属于跟这个

224
0:27:26.800 --> 0:27:31.000
嗯普通的开发者关系就挺大的了

225
0:27:31.000 --> 0:27:36.680
就是这个关于agess这个开源库的一个文档的侵权纠纷

226
0:27:36.680 --> 0:27:40.160
这个我也先简单介绍一下现在的一个事实情况啊

227
0:27:40.160 --> 0:27:46.080
就agess呢是淘宝团队开源的一个加scrape的一个企业端的库

228
0:27:47.080 --> 0:27:51.480
嗯还算比较这个热门吧

229
0:27:51.480 --> 0:27:53.880
然后他出的一个纠纷是这样子的

230
0:27:53.880 --> 0:27:57.320
就是有人啊应该也是一个普通的网民

231
0:27:57.320 --> 0:27:59.720
我猜应该是一个开发者啊

232
0:27:59.720 --> 0:28:01.760
他自己有一个个人的blog啊

233
0:28:01.760 --> 0:28:06.000
那么他把这个agess里面的一部分文档啊

234
0:28:06.000 --> 0:28:08.240
在他的这个blog上全文转载了

235
0:28:09.640 --> 0:28:10.480
然后呢

236
0:28:10.480 --> 0:28:22.360
他突然就收到了来自国内某知名呃自称知识社区的网站的一个法律的这个呃邮件

237
0:28:22.360 --> 0:28:24.880
啊提醒他侵犯了这个内容权

238
0:28:26.440 --> 0:28:30.160
那么他就认为这个事不存在的

239
0:28:30.160 --> 0:28:33.960
因为agess的文档在github上也是有开源的

240
0:28:33.960 --> 0:28:37.000
用的是mit的这个开源license

241
0:28:37.000 --> 0:28:40.040
那mit的开源license是是非常非常宽松的啊

242
0:28:40.040 --> 0:28:45.360
就是你可以引用你甚至可以修改你甚至可以用于商业目的等等等等

243
0:28:45.360 --> 0:28:50.760
嗯但是由于这个个人的个人网站上面的这些东西已经被删除了

244
0:28:50.760 --> 0:28:55.960
所以我后面没有办法去确认他是不是真的完整地包含了所有的

245
0:28:55.960 --> 0:29:00.440
嗯包括mitlicense要求的那些license文档这个我没法确认啊

246
0:29:00.440 --> 0:29:03.480
但我相信大概率他应该是都有的

247
0:29:04.480 --> 0:29:10.080
那为什么他会收到这个这个侵权的这个法律通知呢

248
0:29:10.080 --> 0:29:15.920
那原因是呃agess的这个团队不仅仅在github开源

249
0:29:15.920 --> 0:29:22.200
也同时把这些文档发到了呃知乎这个网站上

250
0:29:22.200 --> 0:29:30.800
那么知乎的这个网站他的所有的内容他的授权是保留给作者的

251
0:29:30.800 --> 0:29:37.720
那么呃相当于作者有一些做作者就是有些头部的作者会跟知乎签一个协议

252
0:29:37.720 --> 0:29:43.640
就是委托他们来呃去保护他自己在知乎发表的所有内容的版权

253
0:29:43.640 --> 0:29:51.840
那知乎可能有一个软件去全网去搜索如果发现有这个未授权的转载的话就会自动的去发这个通知

254
0:29:51.840 --> 0:29:54.160
所以这个案案子就是这么出来的

255
0:29:54.160 --> 0:30:04.000
嗯所以这个是一个很典型的情况哈就是当一份东西它被以不同的授权模式发表在不同的地方之后

256
0:30:04.000 --> 0:30:10.120
他产生了冲突那么这个事情我不知道呃这话怎么看

257
0:30:10.120 --> 0:30:21.240
哎其实我这两天也看了一下这个事情的背景那初步看来就是田柱把这个首先把这个文档情绪发布在了之后呢

258
0:30:21.240 --> 0:30:32.000
又以这个协议的形式然后发发在这个开源网站我在看这个故事的时候看了天初的描述就是说反正就是转发的这个同学呢

259
0:30:32.000 --> 0:30:39.520
他在转发的过程中其实没有就是根据协议的要求比如说标记这个作者以及说许可证的信息

260
0:30:39.520 --> 0:30:42.480
所以这里呢其实在转发的时候是有一些瑕疵的

261
0:30:43.480 --> 0:30:46.720
嗯是安耐浩他其实他其实就是侵权的嘛

262
0:30:46.720 --> 0:30:58.360
如果是说他确实按照mrt许可这个东西你没有根据mrt的一些这个协议的要求来来做一些义务的话其实是呃是侵权的对

263
0:31:00.760 --> 0:31:05.440
对我也看了这个天珠他在之后专栏发的这个文章这个文章很有意思啊

264
0:31:05.440 --> 0:31:22.400
我读了之后百感焦加有一些感想我们等一下再讨论哈但是有一点很有意思就是他自己也问了一个问题在他这篇文章里面他说这个文章的作者是我但是我同时发布了两个地方其中有一个是开源的mrt所以这个意味着我放弃了版权吗

265
0:31:23.560 --> 0:31:24.880
他他也在问这个问题

266
0:31:26.640 --> 0:31:27.760
这一点你你怎么看

267
0:31:28.280 --> 0:31:46.600
我觉得所有这个就是符合这个欧埃塞就是开放原码促进会定义的开源的一些代码了文章了也好其实都作者是没有放弃版权的只是说呃通过这个开源协议允许大家去复制学习修改这种再发布

268
0:31:46.600 --> 0:32:16.560
并且并入一些产品这样的一些权利同时呢作者也保留了一定的权利的嘛比如说你需要在这个发布相关的软件或者是一些文章的时候要标记说这个代码或者说这个文章原来的作者是谁然后根据什么样的开源协议发布的这样可以说明两件事情啊第一是说明这个作品来源就像是咱们写一些文章时候一些引用版或者是论文的引用第二个呢就是说根据这个协议

269
0:32:16.600 --> 0:32:21.360
我就是有权利发布到这儿这样的话其实就把两件事情都说得比较清楚了

270
0:32:21.360 --> 0:32:24.560
第一件事情就是来源第二件事情我全这么干

271
0:32:24.560 --> 0:32:36.840
而如果你不写这两的话呢别人就会认为这个文章是你自己写的嘛这样就有了这个抄袭或者是说一些侵权的一个嫌疑啊或者是说就是实打实的侵权或者抄袭

272
0:32:36.840 --> 0:32:44.080
其实我觉得添朱我从他这篇文章里就添朱是xjs的主要的维护者也是最早的开发者

273
0:32:44.080 --> 0:32:51.680
他他从他这个文章里面我可以看得出来一点就是他对开源的协议啊相关的法律啊等等

274
0:32:51.680 --> 0:33:06.800
嗯其实不是特别理解啊就呃他这里用词可能不一定特别准确比如说他嗯因为我发到两个地方其中一个是mít所以我是不是放弃了版权这个话怎么说呢不严谨但是我可以换一个方式

275
0:33:06.800 --> 0:33:19.960
来问他实际上问的问题啊是什么呢我发布到两个地方其中一个地方我保证的权利比较多那个地方我保证的权利比较少那是不是我就意味着我只能救那个比较少的

276
0:33:22.200 --> 0:33:29.000
他这个问题的本质如果准确一点讲其实这个意思他并没有完全放弃版权但确实放弃了很多权利这是肯定的

277
0:33:29.000 --> 0:33:40.720
你像mít的话mít甚至于啊他就是呃只要你包含了原版的版权声明和许可声明就可以了其他的几乎没有任何要求

278
0:33:40.720 --> 0:33:53.720
所以从这个逻辑上来讲的话呢就是当然你刚才说到的就是那个那个转载者他是不是完全遵循了mít的这个协议的要求这个这个我现在没法考证了嗯因为他已经删掉了

279
0:33:54.120 --> 0:34:04.800
嗯如果他不是的话那么很简单这个权利人是可以要求他去修修改或者是这个撤掉这个内容

280
0:34:06.560 --> 0:34:17.960
但是并不是像他收到的那个法律函件说哎知乎的这个授权的呃机构啊说你这个转载本身就是侵权

281
0:34:18.240 --> 0:34:25.160
因为你不能够转载啊这可能是两个概念因为他转载本身是有权利的只是他必须要遵循一定的要求

282
0:34:28.800 --> 0:34:38.840
对我我觉得这里可以从两个方面来看嘛第一个就是说呃天珠他其实对这份就是文档有这个完全的所有权

283
0:34:39.160 --> 0:34:50.000
他可能对一方比如说在直呼上然后做了一个这个许可然后又根据mít做了另外一个许可其实呢根据mít做的那个许可呢

284
0:34:50.720 --> 0:34:58.560
给了这个下游的用户比较广泛的权利别人如果是根据这个新的许可来进行发布或者转载相关文章的话呢

285
0:34:59.120 --> 0:35:01.880
只要是遵循mít协议都是可以的

286
0:35:02.360 --> 0:35:10.480
因为嗯在这个直呼他相关的这个用户协议里面也变样了说作者其实有权利再把这个发布的文档

287
0:35:10.600 --> 0:35:15.920
以其他的这个协议许可给就是其他的用户这些其实都是没有什么问题的嗯

288
0:35:17.080 --> 0:35:29.320
所以所以答案是yes就是当你以不同的授权去发布你的内容的时候那就是以最宽松的那个为准了因为你多点发布之后别人就引用那个最宽松的那个就好

289
0:35:30.000 --> 0:35:32.800
对是这样吧是会有这样的一个效果

290
0:35:33.760 --> 0:35:35.040
嗯OK

291
0:35:36.200 --> 0:35:41.480
关于这个问题跟前面一个就不太一样我觉得这个就跟所有的开发者和用户都有关系了

292
0:35:42.080 --> 0:35:47.280
不知道老庄跟王老师你你们有有什么感想或者问题吗我其实有有一个疑问

293
0:35:47.720 --> 0:35:58.520
就是说为什么天诸不以西西协议或者说是西西的某一种比如说禁止商用禁止演艺这样的一种协议来发布他的文本为什么要选mít呢

294
0:35:59.480 --> 0:36:02.200
我怀疑是他偷懒就直接跟原代码捆一块了

295
0:36:03.080 --> 0:36:08.440
嗯是的像你说的那个怀我怀疑是他他没明白就是

296
0:36:09.160 --> 0:36:17.520
文档和这个原代码可以或者说也应该用不同的方式授权会更理想可能我怀疑他不明白这件事情

297
0:36:18.520 --> 0:36:30.800
反正我看他的文章我觉得他对这些东西的理解是不太不太深的他还没有认真考虑过这种问题他就是一个很简单的技术人我我写代码然后为我代码写文章推广和介绍使用的文章

298
0:36:30.800 --> 0:37:00.480
嗯啊然后因为我做这些事情我也有一定的成就感和那种啊 owner意识啊就觉得这是毕竟是我做的东西你们得给我足够的这个尊重这种都是很天然的那种感觉就是我我读这篇文章的感觉是这样子的所以他对这个里面的呃license啊还有相关的一些呃legal的问题啊我觉得其实不是就没怎么认真想过感觉是然后第二个问题就是其实我还

299
0:37:00.800 --> 0:37:12.440
联想到另外一位就是犹豫西不知道那个呃郑华知不知道之前的一件事情犹豫西他的那个vue的文档也是以mit的形式授权的

300
0:37:13.160 --> 0:37:22.320
然后前段时间也是因为有人做了这个vue文档的进项完了以后他就呃犹豫西就发表一个类似于

301
0:37:23.240 --> 0:37:27.880
警告或者说是劝告就是说你们不能够这样搞你们这样搞的话就

302
0:37:27.880 --> 0:37:34.360
类似于说啊你们在官方文档网站之外另外搞了一个非官方的这样是不行的

303
0:37:35.640 --> 0:37:38.600
怎样的问题明明明明明人家就是

304
0:37:39.440 --> 0:37:44.440
征行mit的协议做了个再发布而已或者说甚至修改后再发布都是可以的

305
0:37:44.920 --> 0:37:53.240
那么犹豫西其实就讨就是就就愤怒或者说是不爽的一个点就是人家在那个进项网站上面挂了自己的广告

306
0:37:53.240 --> 0:37:55.800
那那么就还是这个问题

307
0:37:56.320 --> 0:38:01.880
所谓的在一个进项网站一个文档的网站上面我把你的原来的文档修改了

308
0:38:01.880 --> 0:38:08.280
把你的那个文档的网站修改了然后画上我自己的广告本身是不是也算是一种

309
0:38:09.000 --> 0:38:18.320
修改元代码的行为是不是也是一种修改后再分发的行为是不是也不算是违反mit的协议

310
0:38:19.320 --> 0:38:30.600
对之前我看过认为就是说呃对方啊就是发布标一文档的地方他其实在征行mit协议的情况是可以这么做的

311
0:38:30.600 --> 0:38:43.560
包括是说修改文档包括是说进行一些商业化的行为那可能就是要求的我觉得最后想下来还说咱们开发者在做一些开源软件时候刚开始就要想好自己想要什么

312
0:38:43.560 --> 0:38:55.520
比如说我就想把它做成一个完全开源的然后包括代码包括文档都可以就是说去分发去修改包括也允许别人商业化或者是说我允许别人用代码

313
0:38:55.520 --> 0:39:05.840
但是希望对文档保留一些权利那我就可以通过不同的这个许可证来去设定不同的权利和义务嘛其实这是一种比较妥当的方式

314
0:39:05.840 --> 0:39:35.520
嗯因为许可证它本身就是一个设定权利和义务的这个法律文本嘛大家就可以根据就是自身的要求也不一定说把它必须得做成一个完全符合这个开放源码促进会的一个呃一个这种这种标准是的嗯是的当然就是每个人他做这个事情的时候他得知道知道这个这个因果cause and consequence就是我选择了这种授权那么可能带来的影响是什么

315
0:39:35.520 --> 0:39:50.560
其实国内很多做开源的人都有这个倾向我我不知道大家感受哈就是他在这个他开始做开源的时候他希望越多人使用就越好传播的越快就越好

316
0:39:50.560 --> 0:40:20.560
所以他会倾向于使用一个最大限度去推广的一个协议的这台媒体那当他名气大了之后他可能就会开始有些别的想法他会更想控制住这个社区他会更想体现他作为 owner 的价值那么这个时候他就希望整个社区能按他的想法去运作或者去嗯做这件事情那这个时候有些时候他就控制不了了因为他一开始放得太开想要

317
0:40:20.560 --> 0:40:50.560
收回来其实是非常非常难的但如果他一开始不放开可能要担心说哎那可能是不是就不容易流行起来所以这里面我觉得存在着挺多的可能有误解也有一些就是没想清楚的地方对所以就是如果开展一个开源项目的时候在最初还是要稍微的想得清楚一些包括嗯是不是对不利了或者说你是不是就本身想让这个项目变得更流行啊但是说如果到了一定

318
0:40:50.560 --> 0:41:20.560
阶段他对这个项目本身看法有变化的话就是可以在早期的时候通过设置一些比如说供应者协议了然后来保障后面去修改这个开源项目开源协议的一个权利吧包括芒果地币包括 elastic 然后都改过这个开源协议让看让这个协议变得更加的这个从开源变得不开源不那么开源也有一些的把本身这个限制比较严格的比如说有的项目他是 agpo 三点零开源的

319
0:41:20.560 --> 0:41:29.280
到了后来呢他认为其实不用那么严格的协议也可以去实现一定的商业价值他又改成了这个阿帕契二点零也是有这种情况的

320
0:41:30.400 --> 0:41:40.920
你从从那个沿的往松了的做其实问题不大就是他相对来讲是就就不会遇到阻碍啊或者是一些一些坑

321
0:41:41.280 --> 0:41:47.160
但是他如果一开始很很松然后他要往沿了做的话其实就相对来讲我觉得会难很多

322
0:41:48.160 --> 0:41:58.320
其实都有阻力吧比如说那个沿的最初用纸票开源的可能这个这个贡献者这个社群里面他们可能有一些就坚信这个纸票精神的

323
0:41:58.800 --> 0:42:01.200
然后可能你都要赶着画一样麻烦

324
0:42:02.480 --> 0:42:04.640
是因为你会违背他的意愿吗

325
0:42:05.520 --> 0:42:11.760
对那个呢我觉得他比较大的问题可能是会损失社区里面的贡献者的力量

326
0:42:12.520 --> 0:42:21.760
而后者呢可能会损失这个客户的这个这个东西所以可能不太一样啊就是有得必有失啊对对

327
0:42:22.200 --> 0:42:23.880
哎我还有一个问题啊其实

328
0:42:24.720 --> 0:42:36.160
嗯对其实这个案例的话我们回到最源头就是那个厂家平台去给侵权的这个人发邮件

329
0:42:36.720 --> 0:42:43.840
对那最开始的这个诉求不太清楚就是这个厂家是怎么考虑的可能也有两个第一个就是

330
0:42:44.440 --> 0:42:49.440
嗯他在做那种其实是相当于帮作者去维权

331
0:42:50.080 --> 0:43:00.200
可能他也不太清楚他本身用了myt他以为是一个独占形式的他就想去他只管他自己而且我现在看到的是他那个是自动的

332
0:43:01.200 --> 0:43:13.160
哦那那我让你甚至是一个自动的一个系统啊就是就是支乎他现在就是只要是跟只要你在发布的内容的时候勾选了相关的一些服务的话那么

333
0:43:13.680 --> 0:43:20.760
他就会帮你去做相关的维权可能是不是我现在具体不太不太清楚的是

334
0:43:21.520 --> 0:43:30.160
是支乎会跟一些大V去签这样的委托还是说会收费的去做一些这样的委托维权的事情我具体不太清楚

335
0:43:30.200 --> 0:43:42.440
但是我我看到的这个信息就是嗯作者选择把这个东西发布再支乎啊然后嗯授权他去维维护自己的这个版权

336
0:43:42.840 --> 0:43:43.560
是这么一个概念

337
0:43:44.880 --> 0:43:46.440
然后他有个自动系统去做这事儿

338
0:43:47.600 --> 0:43:54.640
啊那我理解了那那他是自动系统的话那这个就没办法了他就不会去判断这个内容究竟是什么只要有重复的他就去自动区

339
0:43:55.640 --> 0:44:04.040
他其实可以做比如说他可以检测这个发布的内容下面有没有相关的来自子说明啊类似这样但是可能也未必会做那么好

340
0:44:05.040 --> 0:44:08.400
嗯可能成为我知道的微信工作套有一个

341
0:44:09.120 --> 0:44:13.840
我是觉得像这种群发维权系统本质上就是散弹枪

342
0:44:14.600 --> 0:44:24.160
打中了就打中了打不中其实根本没办法不是不是误伤误伤也是一种可能性下不住也是一种可能性啊对对对对是的

343
0:44:24.360 --> 0:44:26.400
就是就事实上我觉得这种

344
0:44:27.440 --> 0:44:35.200
对于自户来说我觉得他们既没有更好的办法也也没有也没有特别好好的逻辑说我要改过来

345
0:44:35.480 --> 0:44:46.760
没有必要改啊反正也是散弹枪打中了再说我觉得他们做这事儿有一半左右是一个他的怎么讲他的一个呃对宣扬的自己的一个优势

346
0:44:48.080 --> 0:44:50.560
至于实际能做到什么程度他也知道很难

347
0:44:51.520 --> 0:44:55.680
那个嗯微信公众号我不知道你们知不知道有一个

348
0:44:56.400 --> 0:44:59.840
据说内部还挺重视的项目就是原创保护码

349
0:45:00.400 --> 0:45:05.160
这个事儿说了很久占尔龙也在对外说然后内部他们也很重视据说很重视

350
0:45:05.600 --> 0:45:10.440
从很早就开始一直做这个系统现在微信公众号是有一个功能的就是比如说我

351
0:45:10.440 --> 0:45:14.320
我呃我我我写了一篇文章然后被别的这个

352
0:45:14.920 --> 0:45:23.160
嗯公众号授授权转载他转载不是引用了就直接整个文本在我那公众号里重新发一遍这种情况

353
0:45:24.080 --> 0:45:32.520
他的很多情况下是经得授权的嘛他就直接重发一遍那么这个时候微信会自动在前面附上原创来自于是哪个公众号

354
0:45:33.440 --> 0:45:35.560
这个是他的一个算法去判断的

355
0:45:36.560 --> 0:45:40.320
嗯这个也会出错之前就出过问题

356
0:45:42.120 --> 0:45:51.200
就是某个著名的大V啊然后他的文章被判定为是别人的原创了然后他登对文章的时候反而被判为是侵权

357
0:45:55.240 --> 0:46:00.880
我觉得这种检测方法就是会随着这个量的不断增多而一所改进

358
0:46:01.280 --> 0:46:09.840
不过说呢就是按照知乎这这种逻辑比如说他检测到和别的别的网言上和他一种章就发一个函来说

359
0:46:10.200 --> 0:46:16.840
这种自乎来说成本是最低的因为如果他在检测标权协议或者检测一些别的东西可能成本会高一些

360
0:46:17.960 --> 0:46:24.840
对反正他发这个函也不代表任何意思嘛对吧你还可以再去看遍了也也没有又不是立刻就怎么样了

361
0:46:25.640 --> 0:46:26.140
对

362
0:46:27.140 --> 0:46:34.780
反而来说我认为如果是说一些独家授权或者是一些这个有商业性的文章发在他上面他去维权来说

363
0:46:35.180 --> 0:46:44.260
这种意义更高一些如果是说本来那个文章他就不是一种独家授权的话他做这种检测互商率会比较高

364
0:46:45.820 --> 0:46:51.140
比如说非独家授权他就会发在不同的网页上嘛他就对会出现一些问题

365
0:46:52.140 --> 0:46:54.500
对这次就是典型的这样的一个例子嘛

366
0:46:54.980 --> 0:47:03.700
而且就是我看知乎的那个授权的那个我那个那个说法我感觉它是相当传统的一种模式

367
0:47:04.620 --> 0:47:10.380
就是谁发的就是谁的然后转载什么的都是要事先经得许可的

368
0:47:12.140 --> 0:47:15.980
那基本上很多其他的都会比这个宽松

369
0:47:16.380 --> 0:47:20.460
因为很很容易就就欧欧尔莱掉你你这个东西了

370
0:47:22.140 --> 0:47:28.300
而现在看起来就是我前两天在看知乎这个就是呃用户协议草案

371
0:47:28.540 --> 0:47:34.140
他里面是写说作者在直播上发了文章之后也有权在其他地方再发

372
0:47:34.620 --> 0:47:41.740
那我觉得他这种检测然后比如说这个作者在其他地方再发的时候他怎么能检测到这是作者在发的呢

373
0:47:42.540 --> 0:47:46.500
还说直接就设定其他地方一旦发了就先发个侵权这个通知再说

374
0:47:47.500 --> 0:47:50.740
这这真真不清楚这好难判断我觉得

375
0:47:51.460 --> 0:47:58.140
我觉得这是两个部门的协作问题就知乎内部的两个部门协作问题他们互相之间估计还吵呢

376
0:47:58.700 --> 0:48:04.420
这这种我们是要稍微大点的公司待过就知道这个这个不见得就是协调一致搞出来的东西

377
0:48:05.340 --> 0:48:10.700
哎哎郑华我其实还有另外一个疑问啊就算是一个小科普的问题

378
0:48:11.140 --> 0:48:16.260
就是一般来说假设人家在社区里或者在自己的公众号里面发了一个什么什么东西

379
0:48:16.500 --> 0:48:24.260
然后呢还特别注明说啊这个转载来自于网络如有侵权请联系我删除这样是不是构成侵权

380
0:48:25.380 --> 0:48:29.980
那这样对啊这样其实我认为还是有问题的呀

381
0:48:31.660 --> 0:48:35.220
就是他并没有真的拿到一个护身符对不对

382
0:48:35.780 --> 0:48:45.140
对因为就是按照这个所有的这个资产权这方面的权利就是说你获得了授权才能使用除非你是一些合理使用

383
0:48:45.140 --> 0:48:53.380
但是就授权来说比如是个转载文章来说合理的使用就是你引用一些啊片段了或者文章做了一些

384
0:48:53.980 --> 0:48:59.260
抠门子或者评论那你的主要目的是为了评论或者是说一些发表自己的观点

385
0:48:59.540 --> 0:49:05.820
但若你原文转过来了那你肯定不满足通常来说在各个法庭上都不满足这种合理使用的方法

386
0:49:06.220 --> 0:49:09.900
所以即便是说他说是说我来自于网络然后

387
0:49:10.900 --> 0:49:14.660
联系这种一个不正确的所不正确的做法

388
0:49:16.780 --> 0:49:20.860
我觉得这可能是对那个新千年的一个误解吧

389
0:49:21.780 --> 0:49:25.340
就是数数四千年那个那个那个那个那个法

390
0:49:26.620 --> 0:49:29.620
条文里面其实讲的是说互联网平台

391
0:49:31.060 --> 0:49:35.900
对于个人在互联网平台上所发布的内容他不能够承担完全的责任

392
0:49:36.660 --> 0:49:40.580
而只能承担就是刚才说这种就是安迪网德的一种责任

393
0:49:41.460 --> 0:49:46.660
这个跟某个人就是去引用这个不太一样就是已经有具体个体你你去

394
0:49:47.340 --> 0:49:55.220
抄了别人的东西然后说一个啊你只要让让我三我就删所以我这就就对是不行了这这肯定我觉得是不成立的

395
0:49:55.620 --> 0:50:00.980
对如果是那种抓取的或怎么样的可能可能还能适用就是说刚才

396
0:50:01.260 --> 0:50:06.140
啊张老师说的这这个这个声明但说如果个人的话其实不适用的

397
0:50:06.460 --> 0:50:15.020
而且随着现在说这种就是检测算法不断的提升的话可能这种平台的义务也会逐渐变得更高

398
0:50:16.020 --> 0:50:22.140
因为随着这种算法检测能力不断提高的话可能就是只怕结婚会认为你这个平台就有

399
0:50:22.780 --> 0:50:25.700
检测侵权内容的能力特别是说这种事

400
0:50:26.500 --> 0:50:33.580
很明显的你这个平台上没有任何授权然后在有一段这个视频发在你的这个网站上或者你维护的平台上

401
0:50:33.940 --> 0:50:39.140
那可能你就有义务在第一时间删掉而不是说去通知删除这样对是的是的

402
0:50:39.820 --> 0:50:43.500
其实这不是现在了这个在好好几年以前就我之前

403
0:50:44.100 --> 0:50:50.980
嗯一一五一六年所在的那公司因为也是内容方面重度内容的这个服务

404
0:50:51.540 --> 0:50:55.580
那当时我们网站上出现任何侵权的内容

405
0:50:57.340 --> 0:51:00.660
基本上都是这个平台的主体责任

406
0:51:02.500 --> 0:51:08.180
哪怕是用户发的你没有检测出来也是你的责任这个网信就直接会找你的

407
0:51:10.700 --> 0:51:20.580
早些年可能就是对这个平台的这个注意义务要求这么高但我我认为就是随着这个检测能力不断提高对平台的注意义务要求会越来越高

408
0:51:21.660 --> 0:51:23.260
但我觉得这其实也有个问题

409
0:51:23.860 --> 0:51:30.940
就是说针对知识的传播哈比如说你有小段东西然后这个平台检测到你可能引用自别的一个地方

410
0:51:31.220 --> 0:51:37.340
但是他也没有办法办法判断你是不是引用这段地这段这个文章或者视频来发表自己的观点

411
0:51:37.740 --> 0:51:42.020
那这个时候他要采取比较严格的标准那肯定你很多东西都发不出去了

412
0:51:43.020 --> 0:51:53.780
确是所以现在我看到的哈就是包括我我之前这个这个所在的业务所面临的问题一般都还是定向性的

413
0:51:54.100 --> 0:51:58.780
比如说嗯一段时间开始从从某个时间点开始

414
0:51:59.260 --> 0:52:03.620
嗯美剧日剧韩剧这些东西是属于红线

415
0:52:04.340 --> 0:52:07.060
就这种东西绝对不能出现的ok这个就不行了

416
0:52:07.460 --> 0:52:10.500
然后还有一些这种版权的形象物

417
0:52:10.500 --> 0:52:13.820
比如说啊迪士尼的还有奥运的

418
0:52:14.060 --> 0:52:18.740
然后跟这些相关的不论是嗯形象图片视频

419
0:52:19.020 --> 0:52:21.900
还有一些新闻报道都会查得很严

420
0:52:22.260 --> 0:52:27.860
所以我觉得现在还是目前这个阶段还是相对比较定向性的一些防范

421
0:52:28.260 --> 0:52:33.900
还没有进展到那种很普遍的杰诺的这种管理那个确实非常难

422
0:52:33.900 --> 0:52:38.580
对而且那个我觉得如果是卡得太远的话其实不太利于这个知识的传播

423
0:52:40.060 --> 0:52:41.460
是的是的

424
0:52:42.620 --> 0:52:46.060
同时你维护这些东西的话可能成本也需要是考虑

425
0:52:46.300 --> 0:52:51.340
比如说这个特定的比如说日剧韩剧或这些东西它可能相对来说特定的话就会

426
0:52:51.660 --> 0:52:55.020
就是在一定时间内投入这个成本还是稍微可控的

427
0:52:55.340 --> 0:53:00.180
但是你要说是完全打开的话可能就会成本就会非常的高对于这个平台来说

428
0:53:00.180 --> 0:53:02.660
我觉得非常依赖于一些基础设施吧

429
0:53:02.980 --> 0:53:08.940
比如说我国家或者是全球的某些机构啊它做一个服务

430
0:53:09.180 --> 0:53:12.980
这个服务明确地把一些版权内容列出来

431
0:53:13.900 --> 0:53:16.420
就是我有哪些版权内容它什么时候到期

432
0:53:16.900 --> 0:53:22.660
那么这东西是受到相关的保护的就至少你得有这样的一个认定才行

433
0:53:22.940 --> 0:53:26.780
连这个都没有的话那后续连算法都没有用武之地啊

434
0:53:26.820 --> 0:53:32.580
现在做内容创业的一些不是这种创业就内容相关的平台的都其实都面临这方面的挑战

435
0:53:32.900 --> 0:53:38.580
我记得好久以前啊YouTube就开始有一个功能就是你上传视频的时候

436
0:53:38.900 --> 0:53:46.700
它会检测里面你用到的BGM那个音乐是不是版权音乐如果是的话啊第一你就不能传了

437
0:53:46.740 --> 0:53:51.540
或者你可以选择完全屏蔽掉这个BGM它把BGM给你抠掉了

438
0:53:51.780 --> 0:54:03.260
但是人生还在这黑科技哈然后第三种方式甚至它说我可以给你找一个类似的但是呃这个没有版权问题的这样的一个音乐

439
0:54:04.500 --> 0:54:07.300
就这个这个版权非常复杂它什么意思呢

440
0:54:07.620 --> 0:54:10.100
就是这个版权非常复杂它什么意思呢

441
0:54:10.100 --> 0:54:12.580
比如说呃这个音乐本身肯定就歌啊什么这音乐都是有版权的

442
0:54:12.580 --> 0:54:16.700
但是有一些这个唱片公司它愿意放弃一部分权利就说你把我的音乐用在优车的视频里面我是不算你侵权的

443
0:54:16.700 --> 0:54:31.220
但是有一些这个唱片公司它愿意放弃一部分权利就说你把我的音乐用在优车的视频里面我是不算你侵权的

444
0:54:31.580 --> 0:54:34.300
但有的公司是坚决不这么干的最典型的叫索尼

445
0:54:35.260 --> 0:54:40.860
索尼所有的音乐它都不允许的所以那个优车上面碰到索尼的那个音乐它就会自动的把它卡掉了

446
0:54:41.460 --> 0:54:43.780
所以这是个非常复杂的一个一个东西

447
0:54:45.020 --> 0:54:47.620
嗯国内的好像还没有做到这一步

448
0:54:49.260 --> 0:54:55.060
嗯我觉得是这样的就是它能提供第三个选项就是再给你一个就是

449
0:54:55.620 --> 0:55:00.940
音乐让你加上我觉得就已经很不错了我就担心了对就是直接给你扣掉之后

450
0:55:00.940 --> 0:55:07.980
有也没得选对对对说这个作者还是愿意或者说有些公司像你说的样愿意去分享一些这种相关的

451
0:55:08.420 --> 0:55:16.140
这种音乐也好一些视频片段也好然后供普通的这个有什么创作者来使用这这其实是个挺好的事情

452
0:55:17.300 --> 0:55:18.860
那音乐的版权特别复杂

453
0:55:20.420 --> 0:55:27.420
尤其这几家大唱片公司像索尼就是三大之一外应该他他可能对这个相对来说更加保守

454
0:55:27.820 --> 0:55:33.980
国内的现在其实都还是停留在一个你戳一戳我动一动的状态

455
0:55:36.540 --> 0:55:42.460
我觉得国内现在来说去传播一些这种有益的知识或者东西还是

456
0:55:43.420 --> 0:55:49.580
就是更加的会有意特别严格的保护的话可能就会造成这个巨头去控制一些

457
0:55:50.580 --> 0:55:55.540
比如说一些音乐一些因因视频知识不太有利于这个相关的

458
0:55:56.300 --> 0:56:05.220
就是知识也好或者是这种啊文化娱乐也好的传播这个我想起一个特别有趣的趣闻大概前一段时间这个

459
0:56:05.700 --> 0:56:07.980
闭站有个up主叫波罗赛东一个小姑娘

460
0:56:08.940 --> 0:56:14.660
他唱歌唱得非常好尤其是模仿那个就是日本的一些动漫的那些歌曲

461
0:56:15.540 --> 0:56:19.380
然后他前十翻唱了一首歌啊就很热门的那个

462
0:56:20.620 --> 0:56:25.220
日本的那个鬼滅之刃啊这个剧场版里面的一个主题曲

463
0:56:25.980 --> 0:56:33.500
然后把他这个翻唱的这个歌发在抖音结果被拒了原因是抖音的要求是你翻唱是没问题的

464
0:56:34.220 --> 0:56:36.980
但是你不能够直接在抖音里面用原唱

465
0:56:39.020 --> 0:56:42.700
就他唱得太好了以至于抖音的算法认为他这个是原唱

466
0:56:44.860 --> 0:56:46.460
可以的可以的这个厉害

467
0:56:47.420 --> 0:56:54.180
而且特别的有趣这个例子然后他那个同样的那个版本也发在闭站闭站就没有这回事我估计闭站压根没做的检测啊

468
0:56:56.260 --> 0:57:01.980
特别有意思就是你翻唱是没问题的所以刚才郑华在说的时候我就在琢磨一个事情

469
0:57:02.820 --> 0:57:11.260
就是刚才郑华不是在说说如果这个网站或者说这个服务商的技术检测能力越来越进步就不能够逃避这个责任

470
0:57:11.940 --> 0:57:15.380
我真是难受了我反而越是进步了我越痛苦了

471
0:57:17.300 --> 0:57:17.900
这简直

472
0:57:18.900 --> 0:57:23.060
就是就怎么说技术差点反而就没事了

473
0:57:25.540 --> 0:57:29.540
就是关键不是你这个网站进步了而是行业进步就是说

474
0:57:30.020 --> 0:57:31.700
嗯其实这件事情

475
0:57:32.260 --> 0:57:41.700
就就怎么说呢就是假设技术上真的进展到一定程度了执法部门可以直接这么干的时候那其实你平台有没有这个能力就不重要了

476
0:57:42.380 --> 0:57:52.940
对吧就像这个呃我我一个前同事他最早是在Apple做事情的很早就是Apple的而且当年就是因视频方面的专家

477
0:57:53.740 --> 0:57:57.340
出来之后他就创业开了公司这公司做声闻

478
0:57:58.140 --> 0:58:07.700
声闻检测应该是世界上最早做声闻检测的那个服务的公司然后他这个东西就专门卖给好莱坞的人好莱坞什么人用的好莱坞的法务部门

479
0:58:08.300 --> 0:58:12.860
用他这个软件到处去爬看哪个地方有他们版权的声音

480
0:58:13.500 --> 0:58:20.940
然后后面为了避免被法务部门盯上那各大平台开始自己各大平台就开始找他们买这个服务了嗯

481
0:58:22.660 --> 0:58:23.420
就这么个逻辑

482
0:58:25.380 --> 0:58:32.460
卷起来了就是就是卷起来了就为了不被告我先自查啊就这就变成这样了

483
0:58:32.460 --> 0:58:38.180
现在各大平台就是后来我我觉得后来越来越来越多这个平台具有相关的能力

484
0:58:38.580 --> 0:58:46.060
但是也有一个问题一是说这个监管部门可能要求你强行具备这个能力第二个就是有了这个能力之后

485
0:58:46.580 --> 0:58:50.100
这个松眼的一个程度问题可能还是需要一个考虑

486
0:58:51.100 --> 0:58:57.140
对就像刚才说的这个呃翻唱然后直接被吓掉了这件事情

487
0:58:57.140 --> 0:59:05.580
杀掉了这件事情对就你翻唱你如果唱得不像无所谓不算侵权你唱太像了我就说你是我就认为你是正版

488
0:59:07.420 --> 0:59:13.380
ok那关于这个案子我们就聊到这里啊这个也是相对比较

489
0:59:14.060 --> 0:59:19.580
我觉得跟跟大家的关系会比较密切的啊那第三个我们还点时间来聊一下就是

490
0:59:19.940 --> 0:59:23.260
嗯最近这个微软在一个开人项目的乌龙啊

491
0:59:23.780 --> 0:59:32.980
微软的这个浏览器爱他是有一个开人的社区的然后里面有很多这个贡献给他的一些开人项目其中有一个叫edge flat pack

492
0:59:34.060 --> 0:59:40.700
那么这个项目呢嗯不是微软自己的啊其实是第三方的一个个人做的一个开人的项目

493
0:59:41.100 --> 0:59:49.980
但是微软在他的文档里面呢没说清楚啊这个文档里写得非常让人感觉这个项目是微软自己的项目

494
0:59:50.460 --> 0:59:54.380
那么这个这个项目的贡献者啊他维护者

495
0:59:54.860 --> 1:00:04.500
这个就写了一篇文章啊说我我们当然很很愿意为微软的这个爱知的这个社区去服务啊去去去支持他们但是

496
1:00:04.860 --> 1:00:13.540
嗯我们的劳动也是不能被忽视的那这个就吐槽了这一把这个事情然后有很多人说啊微软干这个事不是第一次了啊以前也经常会

497
1:00:14.020 --> 1:00:17.460
这个做这样的事情但后来发现啊这可能是

498
1:00:18.140 --> 1:00:25.260
微软爱知团队的一个疏忽啊就是他们在查这个相关的这个开源库的这个资料的时候

499
1:00:25.700 --> 1:00:29.860
就是自动的去维护这些开源项目的信息的时候可能没有搞对

500
1:00:29.860 --> 1:00:35.020
对啊那么后面很快这个微软也道歉并且做出了更改

501
1:00:35.700 --> 1:00:40.380
嗯这个事儿大家怎么看因为这个事儿在国内的媒体啊特别还火了

502
1:00:40.900 --> 1:00:41.580
他的标题

503
1:00:43.260 --> 1:00:52.220
在线抄袭风波啊微软这么大一公司抄袭个人的东西据为己有啊听上去就非常的有热点啊大家怎么看这事

504
1:00:53.060 --> 1:00:54.380
哎不能先说一下

505
1:00:54.380 --> 1:01:01.060
哼那你说啊我觉得这样的就是当一个公司比如说微软这种他可能管理的项目

506
1:01:01.260 --> 1:01:05.420
比如说自己使用的开源项目都比较多的时候可能就没有办法靠人就是

507
1:01:05.740 --> 1:01:11.980
特别精细的去来确认这件事情往往可能就像你说的一样可能会有一些工具了一些平台来来进行管理

508
1:01:12.380 --> 1:01:20.620
那这个管理过程呢就难免说啊会有一些疏漏比如说就比如说爬了资料或者从这个

509
1:01:20.820 --> 1:01:24.180
平台上获得一些资料并不全可能就会有一些描述

510
1:01:24.700 --> 1:01:28.540
地方那针对这个错误地方往往来说这个

511
1:01:29.060 --> 1:01:35.180
比较成熟的这种治理啊也会考虑到就是在第一时间发现之后或受到反馈之后会经营修改

512
1:01:35.660 --> 1:01:42.460
付来去消除这方面的一些不利的影响也好就是一些一些潜在的危害也好

513
1:01:42.460 --> 1:01:50.460
就我觉得基本上是会有怎么样的一个情况就说疏漏是在所难免的但是不管是说从优化

514
1:01:50.980 --> 1:01:56.580
工具和平台的角度来说还是说第一时间反馈这方面说都是比较重要的

515
1:01:57.580 --> 1:02:07.780
其实我就觉得这事情其实很小但是它反映的并不是一个法律问题它反映的是一个咱们国家的新闻媒体或者说咱们的这种自媒体的一种

516
1:02:08.780 --> 1:02:12.220
见到大公司就一定要炒一把的这种风气

517
1:02:12.460 --> 1:02:18.220
当然其实国外也也不少啊国外国外听说微软或者听说这个大公司比如说

518
1:02:18.500 --> 1:02:22.620
听说邪恶的谁谁谁哪家大公司又干了什么他们也很兴奋

519
1:02:23.020 --> 1:02:27.620
但是这是一个老老毛病它并不是一个真的值得

520
1:02:28.860 --> 1:02:34.380
拿出来作为法律或者说是知识产权的问题来讨论的一个事情

521
1:02:35.220 --> 1:02:35.740
嗯

522
1:02:37.220 --> 1:02:46.940
这是第一个想法第二个想法可能呀一般来说我都是愿意站在这个弱势群体一边但是这件事情来说呢

523
1:02:47.420 --> 1:02:54.660
我就看到了一种感觉就是呃那个所谓的受害者作者本人其实是想尽微软不成

524
1:02:55.660 --> 1:02:56.140
嗯

525
1:02:56.700 --> 1:03:07.740
所以就发一篇文章出来叫吐槽对吐槽说我是受害者但其实他最最核心的目标其实是希望能够加入微软成为其中的团队预员的

526
1:03:08.500 --> 1:03:08.820
嗯

527
1:03:09.020 --> 1:03:10.980
这这个这种哎怎么说呢

528
1:03:13.100 --> 1:03:20.540
对我我是觉得这也是一种这也是一种对来替来替人能够用得上的炒作的手段吧

529
1:03:21.500 --> 1:03:30.100
我看他那篇原文我有一个感受就是他好像在说一个什么呢就是说你看你看我的东西不错呀你拿去吧你想招我进去就就你的了

530
1:03:31.860 --> 1:03:35.540
就就暗含着这个这一种一种愿望在里面

531
1:03:36.260 --> 1:03:44.340
所以这一类的事情啊其实我印象中还真的是经常会发生就是

532
1:03:45.340 --> 1:03:52.580
嗯一个一个大的公司他管理着一个庞大的社区然后里面有数不清的这种大小小的项目

533
1:03:53.060 --> 1:03:57.980
然后他们有的时候就是会搞错的就是里面有一项目他就直接的甚至就

534
1:03:58.940 --> 1:04:03.620
没有很好的处理的情况下就统一地框在他的一个大的框子里面

535
1:04:04.020 --> 1:04:12.020
比如说贴上一些这个版权的说明啊等等类似这样的一些东西这种问题都时有发生

536
1:04:12.660 --> 1:04:14.860
国内可能是不是嗯

537
1:04:16.020 --> 1:04:24.900
呃我接那个李迅老师问的其实是一样的就是现在像这样的风险其实按道理来说是会越来越大对吧就像振华

538
1:04:25.420 --> 1:04:32.060
觉得就是像这种特别是开源软件越来越多以后对那甚至公司他都不一定真的清楚

539
1:04:32.980 --> 1:04:40.500
有一个人清楚究竟随那个哪个开源项目是属于自己哪个是不是属于自己的或者是自己用了哪些

540
1:04:40.900 --> 1:04:44.660
这里面肯定会有很多风险对那现在是特别是大企业

541
1:04:45.220 --> 1:04:52.060
他现在是不是会有专门的就是像法务亚或者这些团队专门去做这样一件专业的事情

542
1:04:52.540 --> 1:04:58.540
我理解就是大法使用开源的东西基本上都会有这样的一个团队来去处理类似的事情

543
1:04:58.900 --> 1:05:09.660
但是处理的这个包括这个基础设施怎么样包括这个相关人对开源的事开源社群的一个理解怎么样可能都是呃成熟度是有所不同的

544
1:05:09.660 --> 1:05:15.700
但我认为基本上法务部都会去比较就是起码从法务这个角度来说会比较正式这件事情

545
1:05:16.220 --> 1:05:26.820
因为是遵守这个相关事态或者遵守这个社区的规范其实是对公司在开源水开源社共同体的形象的一个打造

546
1:05:26.820 --> 1:05:32.700
也是说公司遵守参考资产一个比较好的一个例子吧

547
1:05:33.020 --> 1:05:37.500
因为如果说这因为相对来说大部分开源的协议还是比较明确的嘛

548
1:05:37.500 --> 1:05:45.420
如果这部分都没有办法去遵守的话那遵守其他的不同的协议了那那可能更加的会有一些问题

549
1:05:47.460 --> 1:05:54.180
对而且大的公司我觉得他得很大的困难就是他是不是真的能把自己公司所有的部门统合好

550
1:05:54.740 --> 1:06:06.620
比如说微软这个事情我我看他表表述的情况我我觉得很很大一种肯定就是做这件事情的部门以为这个库就是另外一个部门开源的

551
1:06:08.020 --> 1:06:14.860
因为他在那个部门的很大的一堆的开源的库里面就就是欠着这么个东西但他是外部第三方的

552
1:06:15.620 --> 1:06:26.100
所以这种信息在公司内要做到整合好像也不是很容易的问题现在我不知道国内外的大公司在这方面的实践做的程度怎么样

553
1:06:26.100 --> 1:06:28.700
我可以稍微介绍一下我们这边的情况

554
1:06:29.460 --> 1:06:36.380
因为我在公司里就是干这个嗯开源自理相关的事情其实挺挺复杂的我介绍两个点

555
1:06:36.380 --> 1:06:43.060
第一个点就是就是关于叫做代码开源片段识别

556
1:06:43.860 --> 1:06:52.220
就是哼哼哼我要通过你的原代码比如说你对外要发布原代码了我扫一遍然后呢我就从里面扫出来一百个片段

557
1:06:52.540 --> 1:06:58.740
然后呢这一百个片段的我还能认出来就像你刚才说的那种音乐指纹一样的我这个相当于是开源的指纹

558
1:06:59.220 --> 1:07:00.020
代码指纹

559
1:07:00.860 --> 1:07:04.340
对我扫到第一片段我知道啊这是某某开源软件比如汤凯塔

560
1:07:04.780 --> 1:07:11.260
所以呢他的爱啊阿帕奇的来生使这我就清楚了然后扫到第二个片段可能是open ssl然后扫到第三个片段

561
1:07:11.620 --> 1:07:18.300
然后我一个一个的片段扫出来然后最后发现我的这个软件总共用了五十个一百个开源软件

562
1:07:19.220 --> 1:07:28.540
他分别是什么来生使这个是识别而这个识别的话呢我们最需要防范的一种叫做片段引用就是我不是一

563
1:07:29.220 --> 1:07:33.820
一整个的把人家的开源软件拿出来用我从人家那边扣了一个文件

564
1:07:34.420 --> 1:07:41.300
或者是扣了一个函数出来用然后呢被人家识别出来了说你看你抄袭我的快用软件这个是很难看的

565
1:07:41.820 --> 1:07:48.500
这是一种我们叫做防止片段引用但是呢还有另外一个很麻烦的事情就是

566
1:07:49.500 --> 1:07:56.100
哪怕是一个开源软件他在他的软件的来生使就是跟目录下面放了一个叫来生使的文件

567
1:07:56.620 --> 1:08:04.700
看上去他的授权就是阿帕奇或者卖题但是没有完因为因为其实我们还要另外再做一个功能叫文件级来生使扫描

568
1:08:05.380 --> 1:08:11.900
就是他可能在他的目录下面还有纸目录纸目录下面另外还放了一个来生使

569
1:08:13.180 --> 1:08:18.300
可能他的那个纸目录放的是他从人家那边挖过来的一堆的开源的代码

570
1:08:18.300 --> 1:08:27.140
然后他也放了人家的一个来生使嗯这是第二种还有第三种是什么呢有些原来有些传统的来生使不是说一个来生是文件了

571
1:08:27.140 --> 1:08:32.980
他是放在一个原代码的文件头对对对就就一段注释对那段注释

572
1:08:33.460 --> 1:08:38.940
他可能是一段什么比如本本这个本文件授权阿帕奇来生使二点零

573
1:08:39.900 --> 1:08:45.340
于是一个开源软件他的来生使不是一个什么什么而是

574
1:08:45.900 --> 1:08:48.780
百分比是他其实真正扫描出来的是一个百分比

575
1:08:49.180 --> 1:08:58.900
就是说这个软件他百分之九十可能是属于阿帕奇来生使但是还有百分之三点五是一个MIT但是还有百分之二是一个什么什么东西就很烦

576
1:09:00.260 --> 1:09:09.380
嗯我们我们在做这样的事情但是这个肯定有漏有漏掉的有搞错的然后有没没有识别出来的

577
1:09:09.380 --> 1:09:18.820
这就是难点我举个例子啊而我真正想吐槽的我我真正想吐槽的事情是开源来生使我也什么要搞这么复杂

578
1:09:19.540 --> 1:09:24.860
对不能浓缩成五个到十个吗对呀对呀就是这种感觉

579
1:09:25.660 --> 1:09:36.260
而凯里君你先说对我就很好奇啊就是假设我一个很大的软件几十万行代码的一个软件里面我有一个函数是超了一个别人的时限

580
1:09:37.060 --> 1:09:41.780
这个是什么性质的问题呢这能到啥程度就这个问题的恶劣程度是怎么样的

581
1:09:43.020 --> 1:09:46.540
这个很没法来这这话题是小我也不清楚的

582
1:09:48.460 --> 1:09:52.580
我觉得恶劣程度这个可能很难判断吧这个东西就好比就是说

583
1:09:53.340 --> 1:09:57.500
啊就是有句话来说就是什么千里之一亏于已确这个里面就是属于

584
1:09:58.420 --> 1:10:03.300
这个你如果对他数据反派的话这个里面就有很多语气很多这个已确

585
1:10:03.300 --> 1:10:15.940
然后之后的话可能你这个软件就是经过别人去奥地特或者审计的时候就就会很难解释吗或者说有有的这个客户会对这方面要求比较赢给那你就很难解释最最好的方法是说

586
1:10:16.420 --> 1:10:24.940
啊尽量不要出现这种类似的这种这种做法即便是说你引的这个函数段是来自于某个开源项目而这个开源项目又比较宽松的话

587
1:10:25.300 --> 1:10:32.260
那你要不就是注上这段代码从哪来要不就是说自己通过这种啊经适原则或者说能比较好

588
1:10:33.380 --> 1:10:38.260
这样的话起码在这个版权上或者说这种检测方面问题就不会太大

589
1:10:39.980 --> 1:10:46.660
就这个好难做到的就是我我我知道的现在有非常多的开发者程序员哈他他这个

590
1:10:47.580 --> 1:10:51.220
就是叫叫英特尼特靠片配置的真的是非常普遍

591
1:10:52.580 --> 1:10:58.380
在网上搜一个代码搜到直接拿过来用这种行为已经就是很普遍很普遍了

592
1:11:00.820 --> 1:11:14.900
就算了怎么去避免这个事情我我突然联想到还有那种微软的先进的科技帮助你更快的拷贝对呀对呀那个什么就是那些AI的那些辅助工具什么开了这种东西

593
1:11:16.660 --> 1:11:28.700
就我个人的习惯是这样的哈就是我写代码的时候如果我用到了一个比较特别的算法那我一定会附上这个算法的原始的说明和地址就在直接与代码里面会注释写出来

594
1:11:29.140 --> 1:11:41.100
然后有一些是我呃比如说我在网上摘取了一个比较独特的不是那种很呃吹某的内那种代码就是很独特的一个时限的时候我也会注上一些东西

595
1:11:41.500 --> 1:11:51.020
但除此以外如果我只是看到一个呃没什么特别的一个一个函数的时限我懒得自己写了我直接把他靠近过来这个行为跟扣牌了的其实差不多的

596
1:11:51.620 --> 1:11:54.740
那这种但这种你不当心也会掉进坑里的说实话

597
1:11:55.780 --> 1:12:02.700
所以比较好的我认为还是像特别是公司稍微大一些的话还是有一些培训一些这个指引相关的来说大家

598
1:12:03.100 --> 1:12:05.620
用什么样的方式来处理类似的情况会比较好

599
1:12:05.980 --> 1:12:10.340
只是往往是说在引入之前然后就来就是做一定的判断了

600
1:12:10.660 --> 1:12:18.740
比如说把这个相关的一些知识然后普及给就是这个比如说几万个就是公司内的开发者这样的话大家

601
1:12:19.300 --> 1:12:24.220
就是做起来会更加的好一些因为你如果一旦引入之后再去后处理就像

602
1:12:24.780 --> 1:12:30.060
桩老师刚才说的那个后面再去检测的话处理起来其实是会比较麻烦也比较困难的

603
1:12:30.460 --> 1:12:38.940
因为引用代码片段的话来说除了说诸多权或者说相关的问题之外可能也会有一些这种漏洞方面的引入问题

604
1:12:39.580 --> 1:12:44.340
对这样的话就可能导致一些难以追踪然后有些漏洞在这个代码里面

605
1:12:48.580 --> 1:12:55.420
对我觉得确实应该是这样会比较顺一些但是实际里面还是挺难的就一些现在

606
1:12:56.180 --> 1:12:59.900
的这个考代码这事儿我觉得实在是太常见了

607
1:13:01.460 --> 1:13:04.900
如果公司内部的培训教育做得很好的话那

608
1:13:06.020 --> 1:13:11.580
能够做到让绝大部分的程序员都不去网上考代码而是自己去写吗

609
1:13:12.940 --> 1:13:17.500
他不是不去考而是考的时候就是能够遵循看原的协议或者是说

610
1:13:17.780 --> 1:13:24.060
因为现在网上有很多那种所谓的就是原码可见但其实是商用的那部分肯定是对

611
1:13:24.420 --> 1:13:29.820
但是很多人他是搞不清楚的呀比如说你去考考虑段代码这段代码是从赛可弗洛考的

612
1:13:30.180 --> 1:13:34.380
或者某个叫做给他给他有一个gist嘛里面有很多代码片段

613
1:13:35.100 --> 1:13:41.380
这些他都不会很严肃他不像一个开源项目他会很严肃地列出所有的这些来自说明他不会他就是一个代码片段

614
1:13:41.900 --> 1:13:46.020
然后说那是比如说啊这是井自齐的一个算法

615
1:13:46.540 --> 1:13:52.740
他是都没有说明是什么来源好某些人就谷歌搜索到了然后看一看哎这个代码写得还挺清楚的

616
1:13:53.020 --> 1:13:54.780
啊我也看懂了我就把拿过来用了

617
1:13:56.420 --> 1:13:59.940
就只有这种事我觉得是非常常见的一种一种做法

618
1:14:00.660 --> 1:14:03.020
而且从不容易上来讲呢也是一种

619
1:14:04.060 --> 1:14:09.700
嗯方法吧但是他要去溯源其实是相当困难的

620
1:14:10.580 --> 1:14:18.380
如果这些代码大家都因为要法律上保险而不去使用的话那其实我觉得也未必一定就都是好事

621
1:14:19.300 --> 1:14:25.900
就跟刚才我们谈的说他不容易上也会也会阻断这个知识的传播就就很难讲这个这个事

622
1:14:28.420 --> 1:14:33.740
我觉得可能其实比较好的就是你看过那个代码之后可以自己在某种程度上

623
1:14:34.100 --> 1:14:40.300
比如说一些嗯源码可见的商用代码你可以用一些所谓的经适原则来去处理一下

624
1:14:40.780 --> 1:14:46.100
一些看起来确实比较通常的做通常的这种写法你确实可以自己就是

625
1:14:46.460 --> 1:14:52.460
在稍微的改一下从重新去实现一下这样的话就会把风险降得来说会比较低

626
1:14:53.860 --> 1:15:02.060
因为比如网上的有一些这个什么sdk的一些什么专门的协议他说我这个sdk所有源码都可见但是只能用在某些场景下

627
1:15:02.540 --> 1:15:03.540
如果是这个

628
1:15:04.380 --> 1:15:13.500
公司然后把这个整个的代码就是稍微的没有改直接就复刻到自己这个sdk里面的话肯定会带来比较大的一个侵权风险嘛

629
1:15:14.380 --> 1:15:22.940
对我觉得公司能做的比较好的事情是他提供一些源一些原账的这种代码比如说

630
1:15:23.260 --> 1:15:30.980
他有一些呃相扑的库或者一些这个盖的的库那么这里面的代码的使用是没有什么限制大家可以放心的去用

631
1:15:31.540 --> 1:15:35.740
啊还有一些网站他给指定一些网站比如说styleflow

632
1:15:36.260 --> 1:15:44.620
啊他里面使用的源码他的权利是是怎么去约定的啊其实styleflow对这个问题他是有有研究的他是有一套体系的

633
1:15:45.580 --> 1:15:50.020
所以这些呢我觉得就是可能可以在这方面做一些规范化的事情

634
1:15:50.620 --> 1:16:00.860
但是你说完全把这个事情由使用者来去做判断就我觉得是做不到的就是每一个程序上去判断我我这个代码是不是有风险

635
1:16:01.300 --> 1:16:06.900
嗯我要做到什么程度才能让他变得没有风险我觉得这个程序员是根本做不到的事情

636
1:16:08.260 --> 1:16:09.860
就算程序员能做到

637
1:16:11.020 --> 1:16:14.820
你在项目压力之下他肯定是先把活干完

638
1:16:16.020 --> 1:16:20.420
他还有空跟你去了解这些东西的法律遵循义务这不可能

639
1:16:21.780 --> 1:16:25.540
有有能力有能力他都不愿意做因为忙不过来

640
1:16:25.540 --> 1:16:27.940
我觉得这是最重要的一条具有能力也有意愿

641
1:16:28.980 --> 1:16:36.420
而且还领导还允许啊你你可以花点时间去看看人家的莱绅斯的具体的授权我真是太难了

642
1:16:37.780 --> 1:16:45.580
关键有很多代码你是你是一眼看不到他莱绅斯的你还得是的你还得满世界去搜哎他代码从哪里来的他源头是哪啊

643
1:16:46.060 --> 1:16:48.300
我看到的可能已经是恩守的转载了

644
1:16:49.140 --> 1:16:49.420
对吧

645
1:16:51.260 --> 1:16:57.420
对所以这种情况下可能就首先有一个比较好的工具和平台能够溯源是比较好的第二个就是说

646
1:16:58.140 --> 1:17:13.500
哎比如说这个公司大了之后他有一些比较简明的一个指引比如说在引入开源的时候大概一眼就能看出来这个某个项目或某些项目的这个莱绅斯大致是怎么用在某些场景下比如说ok我就可以直接用比如说用在App端

647
1:17:13.620 --> 1:17:23.380
PC端然后可以直接用有些只能用在这个客户端哦有些只能用在服务端这样的话其实我觉得对于这个普及开源的这个许可证也是一个比较好的做法

648
1:17:23.980 --> 1:17:36.140
再就是说我觉得这是一个挺重要的基础设施对再就是说另外一个就是说呃判断两个代码究竟是不是相似其实是在实践中就是比较困难

649
1:17:36.140 --> 1:17:47.100
咱们提到刚才史扎克欧弗洛他其实目前的开源协议是说如果一个代码作者没有明示说这个相关的来源以及这个许可证信息的话

650
1:17:47.300 --> 1:17:50.140
那他就要按这个ccby ssa这种

651
1:17:50.780 --> 1:17:57.380
杠四点零吧现在是许可证来许可那其实就是一个类似于纸票的一个许可证他其实是

652
1:17:57.860 --> 1:18:05.100
不能够用在普通的比如说对外分发的产品里去的这一点也是需要就是啊比如说开发者去注意一下

653
1:18:06.180 --> 1:18:10.060
因搞不好那个时候你可能最初这段代码就只是内部用

654
1:18:10.420 --> 1:18:15.980
那可能某一天就会经过审计了或者是说呃作为这个产品一部分打包出去

655
1:18:16.460 --> 1:18:20.740
那到到之后再改的话其实就会比较的困难以及比较麻烦

656
1:18:22.100 --> 1:18:23.180
嗯是

657
1:18:25.020 --> 1:18:30.700
这让我想起一个最近的另外的一个话题啊就是前不久这个苹果

658
1:18:31.260 --> 1:18:35.260
今年的wldc公开了新的这个ios的这个预览版本

659
1:18:36.100 --> 1:18:40.020
嗯然后里面有一个大家传的比较厉害的就是那个扣图啊

660
1:18:40.660 --> 1:18:44.980
就是下一代iphone的这外上面有一个功能就是一个图片里面比如说前景有一只狗

661
1:18:45.420 --> 1:18:51.260
你用手指摁住它然后就把这只狗托托出来托到任何地方去它就实际上相当于它完成了从图片

662
1:18:51.660 --> 1:18:56.860
画面上面把那图扣出来然后自动的填充背景然后你再可以去

663
1:18:57.940 --> 1:19:02.980
转转转就是呃相当于是去改变那个构图结构

664
1:19:03.700 --> 1:19:09.380
嗯其实扣图这事儿ai扣图这个事儿已经很多年了也也做得越来越好了

665
1:19:09.660 --> 1:19:13.860
但是苹果嘛就比较擅长把东西做的特别的呃用户友好

666
1:19:15.060 --> 1:19:17.940
然后当时我我就说哎呀这个这个

667
1:19:18.540 --> 1:19:25.940
就是扣图做做假照片假图片的这个门槛又进一步降低了本来就不高了现在进一步又降低了

668
1:19:26.380 --> 1:19:29.540
可以可以期待一下这个未来群魔乱舞啊就是

669
1:19:29.940 --> 1:19:36.380
呃图片完全不能信的时代就就是现在了然后后面就延伸出一些讨论

670
1:19:36.780 --> 1:19:43.820
就是当时就就其实好早以前有一个呃很很出名的人就是斯蒂芬呃沃弗莱姆就是那个

671
1:19:45.060 --> 1:19:47.660
嗯耐思曼蒂卡的那个发明者

672
1:19:48.540 --> 1:19:53.260
他去写个文章他说他说以后啊这个网上的任何媒体都不可信

673
1:19:53.860 --> 1:19:56.820
照片视频文字什么的都有可能是造假的

674
1:19:57.340 --> 1:20:05.500
所以他认为以后真的要去所谓的这个fact check就是这事实检查呀必须依赖一些数字手段

675
1:20:05.980 --> 1:20:16.900
比如说要在这个信息照片他最源头的时候就要保存一个存根在一个完全的公链上一个呃公开的这个公共的区块链上面

676
1:20:17.380 --> 1:20:25.060
然后所有的图片必须要在他们溯源才能够做到那我就有一个这个这个联想哈就是不是我们对

677
1:20:25.860 --> 1:20:30.100
程序代码是不是他也应该有这样的一种溯源机制

678
1:20:31.180 --> 1:20:38.620
比如说给他这么大的一个开源平台他完全可以做这件事情就是我任何的代码片段当然他要去合理的

679
1:20:39.220 --> 1:20:48.380
设定一个力度啊就比如说函数或者怎么样级别那么这个片段他就应该能追踪到他的原始作者和他的原始的开源协议

680
1:20:49.100 --> 1:20:53.780
是不是有可能做到这样一些事情如果能做到的话其实这个呃

681
1:20:53.900 --> 1:21:01.740
基础设施这个原始的数据库会非常非常的有有意义否则就意味着像老庄这样的你们得自个儿干这事

682
1:21:02.700 --> 1:21:04.660
对对我们就在自个儿干

683
1:21:07.300 --> 1:21:14.620
老日做出来造福人类吧哈没有没有我我其实你你说到的在吉他上面就是说跟吉他不得合作或者说

684
1:21:14.620 --> 1:21:21.900
嗯吉他上面其实是在有类似于谷歌性的推出来一个东西叫sick store可能王老师也知道这个东西

685
1:21:22.340 --> 1:21:28.580
他代表的是一种提交者的为自己的代码签名的机制嗯但是呢

686
1:21:29.740 --> 1:21:34.780
他只签了就是说他能签名的只是那个作者提交了那个代码

687
1:21:35.260 --> 1:21:39.820
但是如果他被人拿出去复制了在别的地方提交这个肯定就追踪不了了

688
1:21:40.420 --> 1:21:50.020
所以所以你说的这个估计还没有他那个是绑定到那个commit log上了对对对对对呀那肯定就我文字copy你就完全追踪不了了

689
1:21:50.380 --> 1:21:58.700
是的是的但是你说的那个就真的是整个的基础设施就是代码托管平台甚至比特协议

690
1:21:59.180 --> 1:22:07.580
都要往区块链或者说往可存证的方向走才有可能解决这个我我很期待啊但是我还没有想好怎么搞

691
1:22:07.580 --> 1:22:15.900
对这种存证他最大难点在于他必须在的first time就是在最开始那一个瞬间要绑定住

692
1:22:16.380 --> 1:22:20.940
他才有意义对的对的一转出去就就完了所以这个特别难

693
1:22:22.940 --> 1:22:31.980
或者是说我们只能使用这个给他上另一个就是最最原始那个来源的一些一些代码或者项目这样的话就能最终到到

694
1:22:32.460 --> 1:22:34.860
之后再转出去可能就就最终不到

695
1:22:34.860 --> 1:22:35.260
对

696
1:22:36.700 --> 1:22:45.580
是的所以我觉得这个我个人的是比较悲观的对这个事情我觉得在很长一段时间里面我们不会得到一个

697
1:22:46.460 --> 1:22:51.340
嗯比较完美的解决方案就大家还要活活在这种比较红顿的状态

698
1:22:52.460 --> 1:23:00.060
我个人觉得红顿在某些时候还是比较不错的都都分清楚之后可能有些事情更加的难处理

699
1:23:00.060 --> 1:23:07.740
但总体来说有一个比较好的就是大家的做法或者说比如说咱们这也一直讨论的说这个引用第三方的这个

700
1:23:07.980 --> 1:23:16.060
这个代码或怎么样就是有一个好的意识去留存别人一些这个copyright比如说莱绅信息这些都是比较不错的做法

701
1:23:16.300 --> 1:23:19.340
我觉得在这个意义上呢我还是

702
1:23:20.620 --> 1:23:25.900
有些时候我会觉得哎呀不如就完全按这个锐查stomant的那一套算了

703
1:23:26.140 --> 1:23:29.100
你要么就不开源你看上出来就不要限制

704
1:23:31.020 --> 1:23:40.140
就就是你你猜唱出来的这个代码你你你就大开出来就都是一样的就必须一直开下去就一直这么开一样的方式开

705
1:23:40.140 --> 1:23:43.060
你你你就大家开出来就都是一样的

706
1:23:43.060 --> 1:23:45.020
就必须一直开下去就一直这么开

707
1:23:45.020 --> 1:23:47.460
一样的方式开要你就不要开

708
1:23:47.460 --> 1:23:49.100
这样就简单了

709
1:23:49.100 --> 1:23:53.620
但是显然这个也不可能在真实世界里面实现了

710
1:23:53.620 --> 1:23:55.420
对呀包括有这么多的许可证

711
1:23:55.420 --> 1:23:57.620
都是因为大家有各自不同的诉求嘛

712
1:23:57.620 --> 1:23:59.060
所以才有这么多的许可证

713
1:23:59.060 --> 1:24:02.700
所以我觉得强行把它统一到几种也不太可行

714
1:24:02.700 --> 1:24:06.500
但是说现在经常使用的可能也就二十多种吧

715
1:24:06.500 --> 1:24:07.900
就是和卡源相关的

716
1:24:07.900 --> 1:24:11.660
所以我觉得这种就是自然而然发展成这么一个情况

717
1:24:11.660 --> 1:24:15.580
其实比在最早的时候强行规定这种情况要好很多

718
1:24:16.580 --> 1:24:20.100
其实现在有一些人做的事情之前老庄也也跟我聊过

719
1:24:20.100 --> 1:24:23.140
就是把这个开源协议把它这个

720
1:24:23.140 --> 1:24:23.860
嗯

721
1:24:23.860 --> 1:24:24.620
feature化

722
1:24:24.620 --> 1:24:27.300
把开源协议里面的条款变成一个一个的feature

723
1:24:27.300 --> 1:24:30.620
然后你看人的时候你去勾选相关的feature就可以了

724
1:24:30.620 --> 1:24:34.580
其实那么多开源协议无非是大概有若干种呢

725
1:24:34.580 --> 1:24:38.500
不会特别多大概不到十种feature的各种组合罢了

726
1:24:38.500 --> 1:24:43.020
所以所以其实这事我觉得别人都不知道

727
1:24:43.020 --> 1:24:45.380
但丢他我觉得肯定是该做些事情的

728
1:24:45.380 --> 1:24:48.060
他现在坐拥着非常好的资源

729
1:24:49.740 --> 1:24:51.500
但是做不做就看他的商业利益了

730
1:24:51.500 --> 1:24:53.740
对他没没意义他就不做了

731
1:24:54.580 --> 1:24:57.460
我怀疑他们可能会做这一方面的事吧

732
1:24:57.460 --> 1:25:00.900
因为他们现在拥有的成态包括数据都是最多的

733
1:25:00.900 --> 1:25:06.180
所以说我我现在推测他们可能再做一些类似

734
1:25:06.180 --> 1:25:10.860
因为他们平时我看了一下就是出来讲赛事的一些不关法务了

735
1:25:10.860 --> 1:25:13.460
还是说一些治理的同学也好也会一些

736
1:25:13.460 --> 1:25:20.140
就是像刚才李老师说的这种就是把这个按不同的feature分类去去做一些检购

737
1:25:20.140 --> 1:25:20.980
这个他们在做

738
1:25:20.980 --> 1:25:22.180
推动他们也在做

739
1:25:22.180 --> 1:25:26.060
然后应该也有一些其他机构也在做这事情我觉得

740
1:25:26.060 --> 1:25:30.900
然后之后可能会为了从这个方便开发者使用角度来说

741
1:25:30.900 --> 1:25:36.820
基本上会把可能会把这些通行的开源许可证大致按你说的那种feature方式

742
1:25:36.820 --> 1:25:39.340
然后让让这个开发者来去参考

743
1:25:40.580 --> 1:25:43.540
就你现在在黑凯奥里面打开一个license文档

744
1:25:43.540 --> 1:25:46.980
他就会列出这个license什么license然后拿几个feature

745
1:25:46.980 --> 1:25:48.500
他现在是会列出来的

746
1:25:48.500 --> 1:25:51.220
对这个列出来已经已经有一阵子了

747
1:25:51.220 --> 1:25:54.420
但是感觉看起来还不是那么的友好

748
1:25:54.420 --> 1:25:58.100
因为比如说他他只是把这个法律的这种这种条款

749
1:25:58.100 --> 1:25:59.500
然后feature给列出来

750
1:25:59.500 --> 1:26:01.020
但是怎么去解读

751
1:26:01.020 --> 1:26:05.180
我感觉好像可能需要需要再讲一下

752
1:26:05.180 --> 1:26:06.900
是的是的

753
1:26:06.900 --> 1:26:10.900
嗯好那时间也差不多了哈

754
1:26:10.900 --> 1:26:15.780
我们聊了差不多一个半小时了这个今天我们聊了有三个话题啊

755
1:26:15.780 --> 1:26:21.020
都是跟这个软件和科技行业的一些法律问题有关的啊

756
1:26:21.020 --> 1:26:24.940
嗯不知道几位还有什么其他的感想吗或者补充

757
1:26:24.940 --> 1:26:26.780
其实我我个人觉得哈

758
1:26:26.780 --> 1:26:33.420
就是我想跟郑华聊的这个嗯关于科技与法律的话题还有非常多

759
1:26:33.420 --> 1:26:36.060
但今天我们时间关系啊只能开个头

760
1:26:36.060 --> 1:26:40.260
呵呵讲的几个相关软件权利的这个这个问题

761
1:26:40.260 --> 1:26:43.380
老庄王老师你们还有什么想法吗

762
1:26:43.380 --> 1:26:47.380
我是想说就是其实我们今天聊下来

763
1:26:47.380 --> 1:26:49.820
如果听众朋友能听到现在的话

764
1:26:49.820 --> 1:26:55.020
其实你们应该会发现就是说法律的问题也是很复杂的问题

765
1:26:55.020 --> 1:27:03.660
包括包括很多甚至是现在看起来还很难得到彻底解决的一些非常前沿的问题

766
1:27:03.660 --> 1:27:12.180
所以我特别我每次其实都想呼吁就是说哪怕你自认是一个程序员其实你要懂一点这方面的知识这个有好处

767
1:27:12.180 --> 1:27:19.100
而且是他不难因为他的法律的思维和软件的思维和程序的思维

768
1:27:19.100 --> 1:27:27.860
其实有非常多的互通的这种特质其实很容易理解你真的要是去理解那些条款理解那些法律背后的逻辑的话

769
1:27:27.860 --> 1:27:32.340
会觉得他背后也是非常的理性化的一些一些思维模式

770
1:27:32.340 --> 1:27:42.540
我特别希望有更多的开发者程序员朋友能够多去理解理解这种法律知识产权授权相关的东西这是我的感想

771
1:27:42.540 --> 1:28:04.540
嗯我以前特别喜欢在公司里面推荐的一些一些课程啊比如说非片的这个项目管理课程啊非会计的这个财务课程啊什么这个非二的人人理管理课程其实都都挺有意思的有没有这种给程序员的法律课程

772
1:28:05.540 --> 1:28:09.540
没四个好头好好好话题应该后面会有

773
1:28:09.540 --> 1:28:24.540
我觉得振华可以搞一个这样的课程应该会有因为我理解就是虽然说法律这个整个体系比较庞大但是首先就是从设计范围这方面的确实会有一套比较简单的课程同大家来去学习

774
1:28:25.540 --> 1:28:30.540
对呀我们程序员也要有这个普法意识自我保护意识

775
1:28:30.540 --> 1:28:54.540
对包括咱们刚才提到这个标义也好包括就是最早那个天珠这个项目也好其实我觉得大家如果最早的时候有一些这方面的意识其实也不用花特别长的时间去学习那可能就是最最后不管多久分来解决还是说对这个项目以后发展的更好期待其实我觉得是有益处的吧因为本质上就是一个权利和义务的评估我感觉哈

776
1:28:54.540 --> 1:29:04.540
是的我觉得很多法律问题他背后其实跟商业模式有关对而你做软件做开源软件你一定要考虑的是他的未来的商业模式

777
1:29:05.540 --> 1:29:14.540
所以这是非常相辅相成的好呀我非常期待咱们有有朝一日能看到这样的东西我自己都很有兴趣

778
1:29:15.540 --> 1:29:16.540
好的谢谢郑华

779
1:29:17.540 --> 1:29:27.540
谢谢郑华这个我我觉得以后你有你有时间的时候我们还可以多聊一聊因为真的这方面话题非常多像像今天有一个我一直很关心的话题就是

780
1:29:27.540 --> 1:29:37.540
互联网发展到今天对人的个性化和这个隐私相关的保护相关的话题都没有时间聊还有很多类似东西有时间我们可以继续

781
1:29:39.540 --> 1:29:41.540
嗯好呀好呀

782
1:29:41.540 --> 1:29:49.540
好那我们今天的这个今日说法就到这里了啊谢谢大家再见好再见拜拜

