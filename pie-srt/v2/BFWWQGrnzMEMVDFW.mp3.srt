0
0:00:00.000 --> 0:00:04.160
大家好啊欢迎来到后互联网时代的乱谈

1
0:00:04.160 --> 0:00:07.880
那今天照一是我们三个人在周末的下午啊

2
0:00:07.880 --> 0:00:09.720
跟大家一起聊聊天儿

3
0:00:09.720 --> 0:00:11.320
嗯广老师

4
0:00:11.320 --> 0:00:12.480
嗨大家好

5
0:00:12.480 --> 0:00:13.440
啊老庄

6
0:00:13.440 --> 0:00:15.400
哎大家好

7
0:00:15.400 --> 0:00:20.680
呃上一周啊我们聊了一个关于这个谷歌的这个

8
0:00:20.680 --> 0:00:24.680
ai的聊天机器人啊这个对话系统拦不打的一个故事啊

9
0:00:24.680 --> 0:00:28.560
据说他有成人的这个趋势

10
0:00:28.560 --> 0:00:33.880
嗯今天正好呢也补充一个这个后面得到的信息啊

11
0:00:33.880 --> 0:00:36.440
就上次聊的时候我就提了一个感想

12
0:00:36.440 --> 0:00:40.000
就是我我看完这个嗯相关的一些报道之后啊

13
0:00:40.000 --> 0:00:44.960
我感觉这个主角啊这个谷歌这个这个研究人员这小哥啊

14
0:00:44.960 --> 0:00:46.520
是个挺感性的人

15
0:00:46.520 --> 0:00:50.760
然后来我就又查了一些资料啊确认了这一点

16
0:00:50.760 --> 0:00:53.960
就这位老兄呢他确实不是软件工程师

17
0:00:53.960 --> 0:00:55.560
他不是写程序的

18
0:00:55.560 --> 0:00:59.600
啊他是一个这个计算机伦理学家

19
0:00:59.600 --> 0:01:02.040
就他就是专门研究这个计算机

20
0:01:02.040 --> 0:01:06.600
尤其是以后往人工智能时代发展的一些相关伦理问题的

21
0:01:06.600 --> 0:01:10.800
而他跟这个人机器人之间聊天呢他的目的也很清楚

22
0:01:10.800 --> 0:01:15.640
就是要确认啊这个人工智能他没有伦理上的风险

23
0:01:15.640 --> 0:01:19.440
随之就可以验证一个一个点就确实我们感觉他聊的内容啊

24
0:01:19.440 --> 0:01:24.920
包括他对这个聊天过程的一个观感一个感想一个认知啊

25
0:01:24.920 --> 0:01:29.840
就比较偏这个感性比较偏文科一点

26
0:01:29.840 --> 0:01:34.120
其实这个话题我觉得这个以后可以找个时间我们专门聊一聊

27
0:01:34.120 --> 0:01:38.480
就是在文科生眼中的未来科技

28
0:01:38.480 --> 0:01:41.520
因为就我们仨其实都是理工男哈

29
0:01:41.520 --> 0:01:43.760
但是这个我们也挺多朋友

30
0:01:43.760 --> 0:01:50.880
而且也也也一些关注的一些一些伙伴们也就他是文科背景的我我反正我个人我不知道你们两位啊

31
0:01:50.920 --> 0:01:59.480
反正我个人的感想就是文科生看这些未来科技啊他的那个视角和一些感想跟我们完全不一样

32
0:01:59.480 --> 0:02:03.120
这个挺有意思的嗯肯定的

33
0:02:03.120 --> 0:02:11.000
因为就像有人跟我说我的代码会造反我就无法想象我这代码是我自己写出来的他怎么能造反

34
0:02:11.000 --> 0:02:16.280
最多就是我自己出了八个但是文科生就会把这件事情想得很神秘

35
0:02:16.280 --> 0:02:23.920
就说我这种不可预知的力量藏在一个黑盒子里然后他会怎么怎么样对可能会是这种心态对

36
0:02:23.920 --> 0:02:35.320
就是那种人灵人灵比拟就是把它比就是这个这个评仪啊这个比比较或者说是类比成一种人和灵魂的东西

37
0:02:35.320 --> 0:02:41.120
对啊很很很很很鲜血啊对这个以后有机会我我们专专门来来探讨啊

38
0:02:41.120 --> 0:02:43.920
我觉得这个挺有意思的话题

39
0:02:43.920 --> 0:02:53.400
OK那今天呢我们也重点的一个话题呢也是跟人工智能有关的啊就是最近有一个

40
0:02:53.400 --> 0:03:02.560
消息啊这个在业内还挺热门的就是这个get hub啊这个做的一个人工智能的啊

41
0:03:02.560 --> 0:03:09.280
过这个写程序的一个编程助手叫扣拍了那么这个东西呢这个测试已经有挺久了

42
0:03:09.280 --> 0:03:16.240
我印象中应该有一两年了大概公测都有差不多一两年了那么现在正式要上线了

43
0:03:16.240 --> 0:03:24.160
那上线之后它将成为一个付费服务啊那么一个帮人写程序的机器人助手

44
0:03:24.160 --> 0:03:30.440
那关于这个呢我们就请我们王老师来呃跟我们来介绍一下

45
0:03:31.440 --> 0:03:41.920
好的呀对那个这个话题呢其实一直挺感兴趣的实际上我们前面的节目实际上是也有所设计

46
0:03:41.920 --> 0:03:52.880
对那这次不同的是是因为像get hub呢他把口拍了他呢正式的做一个商业服务了对而且呢是正而罢禁收费的

47
0:03:52.880 --> 0:04:07.880
对那我也我也去从流程上尝试了一下嗯包括我们的学生同学也有试用的对因为他对那个学生其实是可以认证并且去免费使用的

48
0:04:07.880 --> 0:04:37.400
对因为像我们计算机类专业本身对而变成这些事情也是我们的一个研究的一个兴趣点对就是在传统的软件工程那个时代呀本身就有非常多的希望让那个机器帮着做越来越多的自动化的一些工作最开始是从一些测试开始然后呢从一些设计到嗯

49
0:04:37.400 --> 0:05:06.840
代码的这种自动化对那再到今天对通过这种数据的方式做这种更加智能的这种自动化对因为从我们我们许同学的一些反馈对我相信李老师应该也有些接触啊就是效果真的还是挺惊艳的对如果大家有兴趣了可以在那个逼站上还可以去看现在用扣拍了的嗯直播写代码的一些视频其实现在也

50
0:05:07.400 --> 0:05:37.400
也也都有了对他还是反正看上去真的还是还是挺惊艳的对那这里面呢其实会涉及到非常多的一些一些一些一些嗯一些技术的内容而且他还还不是技术的还会涉及到包括我们前面也涉及到的知识产权呀还有大家的一些职业呀包括我们的嗯对我们大众来说意味着什么呀以及我们学校来说有些什么样的一些冲击呀对那我想

51
0:05:37.400 --> 0:05:50.880
更是我们今天可以讨论的嗯几个主要的话题对那这一个这一轮的像扣拍了他的大众智能量其实嗯一个很重要的其实也是术语智能

52
0:05:50.880 --> 0:06:20.880
把其和我们前面嗯阿巴沟也好还有我们前面做的那个图片的ai的内容自动生成也好对其实都是同一类技术对其实就是特别是包括像深度学习利用已有的这些代码对因为像git hub他去做这个事情对我们是可以想象到的他有非常嗯独特的优势对就是全世界最大的开源代码的托管平台对不对对那他上

53
0:06:20.880 --> 0:06:50.880
面的这些嗯千万级的这种嗯代码仓库对里面那么多的一些嗯宝贵的这种嗯数据的资料对实际上是对他有非常好的这种帮助作用对那现在看上去基本上在那个产品的成熟度和工程化这一块基本上已经有了足够的信心对那那就开始推推这种商业的这种嗯真正的产品了

54
0:06:50.880 --> 0:07:20.880
对那这里面呢其实嗯嗯我们一个个来啊我们先从嗯第一个问题我们来来讨论起对第一个问题呢其实也是我们嗯看待这个ai自动写ai自动写代码的我们第一个第一感觉哎就是写的这个代码究竟归水这件事情对这件事情其实我们前面的节目也有讨论过就像我们前面讨论的是用ai生成的那些艺术品或者是图形对吧

55
0:07:20.880 --> 0:07:50.880
他的那个嗯知识产权究竟归水对吧那我记得李老师当时也在节目里面有过一些解释对也举过一些案例比如说想想给哪个机器生成的去申请专利啊注册权呀嗯那目前法律是不予接纳的对不对那现在的这个ai他写的这些代码实际上他更加具有这种普遍性对那他写的这种代码

56
0:07:50.880 --> 0:08:20.880
究竟他的版权归水以及像git hub他是否有和那个合法的争当性利用这些开源的代码去做这种产品对因为我们同时还观测到那git hub本身也给那个平台上的这些贡献者给出了他这个选项就是他可以把他的代码贡献出来用于改善扣拍了的这个产品体验他也可以

57
0:08:20.880 --> 0:08:50.880
不予贡献出来对这个是可以让那个显示的可以让用户去选那那那我们看到就是那其实git hub他已经开始注意到这样一个问题了对因为他去做上演化了嘛他一定会规避这样的一些一些风险对所以从这点来看实际上应该会有非常多的一些争议甚至是一些目前的一些法律啊或者是规范还没有涉及到的这样一个范围随着呢我们的第一个问题就是

58
0:08:50.880 --> 0:09:03.240
那这个公共代码衍生作品他的这种知识产权究竟是怎么样界定对他肯定会接下来是一个非常大的一个一个一个一个重要的问题啊

59
0:09:03.240 --> 0:09:20.440
以及像git hub他是否能够合法合理的去使用大家在git hub上面的这些代码去做商业化以及如果使用的话他能够他应该怎么做会会会更合适对我想这是我们第一个问题想讨论的

60
0:09:20.440 --> 0:09:23.960
看看两位有什么样的一个想法啊

61
0:09:25.400 --> 0:09:30.280
嗯我我先简单说一下我自己用的这个感受吧

62
0:09:30.800 --> 0:09:41.160
就是我我其实是比较早的一批拿到那个邀请测试的资格的就他这个事发出邀请测试之后大概一两周吧我就收到那个

63
0:09:41.560 --> 0:09:44.880
嗯那个那个测试的那个那个资格了

64
0:09:45.400 --> 0:09:48.600
然后我的感觉是从那个时候我就运气特别差

65
0:09:48.880 --> 0:09:54.320
嗯我跟李俊基不是同时申请了我就等了很久大概多等了一年多才是邀请

66
0:09:55.440 --> 0:09:59.560
嗯他不知道根据什么跟随机的我的可能有权重也有随机的

67
0:10:00.640 --> 0:10:07.120
然后我我的一感觉就是说从那个时候开始就是一年多以前将近两年的时候嗯到现在

68
0:10:07.400 --> 0:10:11.680
其实我感受不到差异在哪就那个时候他已经相当好了也相当成熟了

69
0:10:11.920 --> 0:10:18.760
然后后面可能他还不断地完善一些产品化的呃比如说他现在跟像微作steel code的这样的工具

70
0:10:19.120 --> 0:10:21.000
绑定啊就更加的紧密

71
0:10:21.680 --> 0:10:27.840
呃更加的顺滑就是你几乎可以感觉不到你进去的时候填好注册那个呃登录信息

72
0:10:28.240 --> 0:10:34.960
然后他就变成这个呃编辑器右下角的一个图标了然后他就基本就自动的做事了

73
0:10:35.680 --> 0:10:40.720
呃他有几个经典的场景一个场景就是你写一段文字

74
0:10:41.640 --> 0:10:45.040
就是你比如外外流什么语言了拍子啊塞啊加啊什么的

75
0:10:45.400 --> 0:10:55.520
你就写一段注视啊你你用一个注视开头然后面写一段描述性文字啊他就自动地根据这段描述性文字找到合适的代码生成一个函数

76
0:10:56.800 --> 0:11:04.920
这个就非常像我们上一期讲的那个那个达尔易这样的这样的人工智能算法就是你写一段描述性文字

77
0:11:04.960 --> 0:11:10.800
他帮你生成一幅图画啊那这个扣拍了就是你写一段描述性文字他帮你生成一个函数

78
0:11:11.440 --> 0:11:21.040
比如说我写一个啊adding two vector a n b就是把两个项量a和b加起来我就写这么一句话下面啪就出来一个名字叫ad的一个

79
0:11:21.600 --> 0:11:28.760
呃函数里面就是a和b作为输入参数然后下面就是呃把这个项量a和b加起来的一个一个简单的实践

80
0:11:29.760 --> 0:11:34.480
呃当然你也可以写更复杂的比如说我曾经测试过因为那个时候我正在看一些

81
0:11:34.960 --> 0:11:39.960
嗯就当时我正在研究怎么跟一些不太熟悉的

82
0:11:40.480 --> 0:11:49.520
嗯这个新人讲解这个人工智能就是某些能力的算法那么新能力的算法最基础的其实就是那个

83
0:11:50.080 --> 0:11:58.520
嗯就是比较早的那个状态机的一些东西了比如说呃怎么用这个呃加法器

84
0:11:58.760 --> 0:12:06.440
来实现一个什么语获或者这个这样的一个一个逻辑算法逻辑电路类似逻辑电路模拟这样东西

85
0:12:06.760 --> 0:12:20.320
那那我就写了一个啊xor的这个implantation就易获的实现啊像啪就出来一个易获xor的这个这个实现就是用加加法机相关的这个算法来实现的

86
0:12:20.840 --> 0:12:32.680
那这些这些结果看上去非常的奇妙但是对于一个工程师出身的人来讲我就会觉得这个实际上非常像一个智能搜索引擎

87
0:12:33.480 --> 0:12:40.880
嗯他给出的这个算法我一看我都很熟悉为什么他都是教科书上的或者是经常被引用的一些样例算法

88
0:12:41.680 --> 0:12:49.760
而他那个写的那个就非常的眼熟啊就他其实是在皓若烟海的这个代码库里面

89
0:12:49.760 --> 0:13:01.720
这些代码当然很多是来自给他上面非常大量的开人代码可能也有在呃公开的外部上面去抓取的一些代码我不知道还我猜应该是有的那么

90
0:13:02.720 --> 0:13:08.000
呃得到的一些然后他经过一些算法来分析他的权重然后给出这样的东西

91
0:13:08.440 --> 0:13:17.560
然后他做了一个很重要的事情就是怎么把这个呃实现程序的实现跟他的文字描述或者他的呃一些关键词

92
0:13:18.080 --> 0:13:25.080
把它联系起来而这个准确度非常影响他的用户体验所以呃这套东西呢就是

93
0:13:26.080 --> 0:13:33.800
其实有挺多的产品在做我就用过好几个比如什么贴不纳啊还有之前更早的有什么东西我忘记名字了

94
0:13:34.480 --> 0:13:38.600
但是从终端用户的体验来讲扣牌了是做得最好的

95
0:13:39.480 --> 0:13:45.960
啊他尤其是跟前端编程的那个呃就是那种无缝的衔接做得特别好

96
0:13:46.560 --> 0:13:51.960
然后这个推荐的代码的这个吻合度我觉得起码有百分之九十

97
0:13:52.680 --> 0:13:59.720
啊当然如果不够高的可能他干脆就不出来你就你就看不到他的提示你只好自己写了对吧这这没办法

98
0:14:00.640 --> 0:14:04.720
啊所以这是一个基本的体验反正简单总结就是说

99
0:14:05.120 --> 0:14:17.640
嗯他是一个基于海量数据的一个分类和搜索的一个引擎啊然后呢他的优势在于呃终端体验很好而且准确率相当的高

100
0:14:18.640 --> 0:14:23.480
然后回到刚才这个王老师提的这个问题就是他这个代码的权限的问题

101
0:14:24.000 --> 0:14:29.120
就你现在就是今天现在这个时刻你登陆你给他的这个账号的话

102
0:14:29.480 --> 0:14:37.600
你会看到一个非常醒目的提示啊上回告诉你说你的给他的口牌了的这个设置还没有做你要赶紧去做

103
0:14:38.320 --> 0:14:45.560
那这个设置是什么呢其实就是刚才王老师说的嗯你可以选择就是

104
0:14:46.800 --> 0:14:52.560
你的口牌了是不是能够访问公开的代码

105
0:14:53.440 --> 0:14:58.720
还是说他只能够使用给他自己提供的一些模型算法

106
0:14:59.360 --> 0:15:08.840
啊这是一个一个选项第二个选项是允不允许给他使用你的代码片段来提升扣牌了的这个纸质量

107
0:15:09.400 --> 0:15:13.560
但是他这个其实是有点问题的哪我我我我还没有仔细的去研究哈

108
0:15:13.800 --> 0:15:19.160
因为他也写了很长很长的previous啊这种隐私保护的这种f a q啊写了一堆

109
0:15:19.160 --> 0:15:29.920
那这个我还没有非常仔细的去读但是我有一个呃就是第一感就是这个事儿他只做到账号这一级是不是合理

110
0:15:30.280 --> 0:15:32.920
比如说我个人我有很多的report水

111
0:15:33.800 --> 0:15:43.200
那有些report我是肯定无所谓的就是我完全开源而且就是我写的一个公共性的东西我自己用的合适我就开源车给别人用

112
0:15:43.600 --> 0:15:49.800
那这种我觉得你去用无所谓但有一些可能是我private的然后我的嗯

113
0:15:50.680 --> 0:15:57.720
就是可能是一些我认为我现在还暂时不希望他嗯被广泛的去使用的

114
0:15:58.120 --> 0:16:06.200
那这种我可能会分repo来设置这个东西我不知道他有没有做这方面的一些呃更细的力度的这样的控制

115
0:16:06.680 --> 0:16:16.040
但总之就是他现在因为要商业化了嘛所以他现在是很强烈的在要求所有人都去做这个呃设置但是要注意一点哈

116
0:16:16.680 --> 0:16:19.520
他这个设置是一个所谓的叫opt out

117
0:16:21.720 --> 0:16:33.480
就是他缺省是勾选的就是我允许你使用我的扣死配就是我的代码片段扣牌的是可以随便用的除非我把它勾掉我把它去掉

118
0:16:33.480 --> 0:16:41.640
嗯这就是霸王条款啊这个对就是理论上讲这个我觉得应该做成opt in

119
0:16:42.520 --> 0:16:50.680
就是缺省不加入如果你愿意你就勾选不不不我的意思是说他其实这个选项不光是这样的霸王条款

120
0:16:51.280 --> 0:16:55.760
还有一点就是说我用别人的和别人用我的这是两个选项

121
0:16:56.280 --> 0:17:04.200
对对对是的而且我的仓库的哪些可以选哪些不能选这也是一些选项他都没有他就一个大的选择结束

122
0:17:04.800 --> 0:17:13.320
嗯这就是霸王霸王条款就是他现在就是很明显我觉得就是因为我们自己都做过公司做过这种商业产品

123
0:17:13.680 --> 0:17:17.520
这个这个就就很很清楚这种很明显就是他在

124
0:17:17.920 --> 0:17:25.520
嗯强烈的引导你参与进来并且放弃你的相关权利那真是非常非常明显的

125
0:17:26.760 --> 0:17:31.520
而当然这一点我也看到就是嗯在国外也也已经产生了一些争议了

126
0:17:32.800 --> 0:17:37.040
就是嗯认为这样做是有问题

127
0:17:37.640 --> 0:17:45.320
但是我想很多人没有我虽然有很多争议哈但是我没有看到有人一上来就把这东西一棒打死的

128
0:17:45.960 --> 0:17:50.240
这说明什么哈就说明一个点就是这种ai辅助的

129
0:17:51.240 --> 0:17:58.360
你说他就要写代码也好或者我称之为叫代码生成也好啊就其实还是大家挺喜欢的

130
0:17:59.160 --> 0:18:04.360
就是对于广大程序来讲很多代码确实是那种就是无脑式的代码

131
0:18:05.360 --> 0:18:13.440
啊你扣拍了他不帮我写那我也得去网上搜然后copy paste或者从我自己的老代码里去找然后copy paste

132
0:18:13.760 --> 0:18:16.120
那与其如此不如让人工智能来帮我写

133
0:18:16.680 --> 0:18:20.960
就是我觉得我我可以看得到就是绝大部分的业内的人士还是

134
0:18:22.360 --> 0:18:28.440
相对虽然有所保留但还是相对积极的看这事儿的这是我现在能看到的一个东西嗯确实

135
0:18:30.640 --> 0:18:41.160
对特别是嗯我个人觉得在开源这个领域更能够让大家接受的一个原因是如果他确实比如说排除了

136
0:18:41.600 --> 0:18:50.880
嗯不去访问访问你的私有仓库而是直接访问那些license合适的一些那个公有仓库的话

137
0:18:51.160 --> 0:18:59.520
对他其实是可以很好的借助嗯在一个开源的这种组件或者是生产资料来去做这种AI的这种

138
0:19:00.560 --> 0:19:07.800
智能产品而且呢他开源也有一个问题啊开源就是说就像之前也讨论过老庄也专门强调过这个事儿就是

139
0:19:08.160 --> 0:19:12.360
开源现在最多最多只能做到一个文件的这个级别力度

140
0:19:13.840 --> 0:19:20.960
就是某个文件是开源或者不开源的那是以什么样的license开源的哈他使用了其中的一段函数

141
0:19:21.760 --> 0:19:29.320
而且他使用这段函数的这个snipet就是代码片段的时候他也没有在这个函数的上面附上开源的license的文本

142
0:19:29.720 --> 0:19:36.960
理论上讲他其实是不不遵循了就没有遵循这个开源license因为绝大部分的license其实都是要求你

143
0:19:37.440 --> 0:19:41.680
最差情况下你也要提供一个license的这个文本的拷贝的

144
0:19:42.320 --> 0:19:49.080
那他只使用其中一个一个函数的这个这个代码片段他也不会把这个license附上

145
0:19:49.840 --> 0:19:57.520
但是开源的这个license呢又一般来讲是限定到文件的他也没有说我这个函数到底如何所以这个事儿就变得非常的

146
0:19:58.160 --> 0:20:04.040
怎么说呢就是又又像是一个三不管的灰色地带了嗯他要打一些擦边球嘛

147
0:20:04.840 --> 0:20:14.320
对啊而且他的策略刚才我提到除了那个嗯对学生是免费的外他其实还有另外一个对开源贡献者是免费的

148
0:20:14.680 --> 0:20:17.680
他也是在他怎么界定他怎么界定这个开源贡献者

149
0:20:18.440 --> 0:20:27.640
他可能是在git hub上面的那个有过贡献或者是嗯明确的一些一些标签具体我我不是太清楚啊

150
0:20:28.160 --> 0:20:31.800
对至少他在git hub上他是可以有这方面的一些判断的

151
0:20:32.640 --> 0:20:39.520
嗯以前就有一个很很出名的一个开发工具嘛

152
0:20:39.520 --> 0:20:44.640
jett brings那杰斯布瑞斯杰斯布瑞斯的这套的工具呢挺贵的

153
0:20:44.640 --> 0:20:52.520
嗯他当然做的也很好啊就是但是他也允许就是开源贡献者来申请一个免费的开源贡献者的一个license

154
0:20:52.920 --> 0:21:01.480
那他的办法就是你要给他写一封邮件这邮件里要附上你的一个在给他上面的一个repo的地址

155
0:21:01.800 --> 0:21:07.120
然后他会去审核这个repo他穿看了这个repo他觉得嗯你确实挺活跃的

156
0:21:07.120 --> 0:21:10.720
而且也吸引了足够多的star或者类似这样的一些关注的话

157
0:21:11.120 --> 0:21:14.800
那么他就会发给你一个为为期一年的一个免费的license

158
0:21:15.280 --> 0:21:19.280
如果一千一年到期了你可以再次申请他再审核一次纯手工的

159
0:21:20.960 --> 0:21:27.760
嗯就是就是这杰斯布瑞的这个我我用过我用这种方式用了他一两年然后会觉得实在太烦了

160
0:21:27.760 --> 0:21:35.640
啊然后后面就干脆买了对对对好好好对所以我不知道这个扣拍了这个这个是不是也是类似的

161
0:21:36.240 --> 0:21:37.600
我觉得他们早晚会怎么干

162
0:21:39.000 --> 0:21:46.160
对我是看到网上说作为一个生产力工具的话还是有还是有开发者还是挺愿意去做这个付费的

163
0:21:48.160 --> 0:21:50.880
他好像是一个月十刀

164
0:21:51.520 --> 0:21:56.920
还是十刀十刀还是十元币啊我不记得了十刀一一年一百刀

165
0:21:57.720 --> 0:22:07.920
啊就是一年一百刀这个呢就怎么说呢我觉得对美国人来讲还行那对其他的就是没有那么有钱的国家来讲这个不算便宜了

166
0:22:08.720 --> 0:22:09.200
嗯嗯

167
0:22:11.760 --> 0:22:20.800
其实我我刚才往往是在提那个问题的时候就是关于如何界定是属于谁的时候我联想到的其实是早期或者到现在

168
0:22:20.800 --> 0:22:21.760
为止的福多笑

169
0:22:22.720 --> 0:22:31.400
嗯就好比说我们一开始假设没有福多笑吧每一个点都得用我自己的画笔一点点的点颜色上去

170
0:22:31.920 --> 0:22:39.280
那其实是很很费力的但是现在我用了福多笑话里面的各种滤镜各种快捷方式各种插件

171
0:22:40.040 --> 0:22:50.320
迅速的就能够把那个图样图像铁死掉或者是改成什么或者是渲染或者是怎么样其实那里面的很多个点的颜色都不是我自己决定的

172
0:22:50.800 --> 0:22:53.200
那是福多笑话有算法帮我决定的

173
0:22:54.120 --> 0:22:58.720
那么这算不算是我个人的创作呢好像从来没有这方面的争议肯定都是我的创作

174
0:22:59.440 --> 0:23:07.640
嗯再比如说再比如说我有我有用握的我来写一篇文章然后握的突然提示我说你这个单词写的不好

175
0:23:08.200 --> 0:23:14.800
你可以把它写成哪个单词就是他会给你做一个词语纠正我也是听他的纠正就纠正了

176
0:23:15.640 --> 0:23:19.080
嗯就结束了所以他也不会说是别人的成果

177
0:23:19.480 --> 0:23:26.000
当然更好一点的就是上次我们最早聊到的那个就是专门做那个语法检查的那个工具叫格拉米利

178
0:23:26.680 --> 0:23:37.680
对他就整篇文章都可以帮我改得更好一点嗯对的那么好所有的这些我们可以统称为叫做人机协作型的创作对的

179
0:23:38.920 --> 0:23:42.720
人机协作型的创作只要最终的决定权在人手里

180
0:23:43.440 --> 0:23:46.800
嗯这个权利这个这个所有权就应该是属于人的

181
0:23:48.120 --> 0:23:59.240
但是这个我觉得有点区别啊嗯就是你说的那个呢比较像什么比较像那个以前就一直有的一个功能就是代码的自动检查和那个纠错

182
0:23:59.800 --> 0:24:08.480
嗯他自动的你一边写代码一边去教验你代码有没有语法错误啊有没有那个可能变亮明没用过啊类似这样的一些五二零

183
0:24:08.880 --> 0:24:18.200
他会帮助你提升代码的质量而现在扣拍了做的事情如果类比ps的话呢他不是那个画刷不是那些滤镜他是什么他是组件化的

184
0:24:19.000 --> 0:24:26.280
我要画一只猫这个猫耳朵直接十个选项给你选你选一个怕猫耳朵出现了然后你就只要拼就行了

185
0:24:27.000 --> 0:24:34.200
嗯对对就这个我觉得还是有那么一点差别的就是有差别但并不能够称之为自的差别

186
0:24:34.920 --> 0:24:40.480
啊所以所以这就是争议点嘛对他那个边界很很很难完全区分的

187
0:24:41.680 --> 0:24:48.040
而且就是我我我现在担心的不是说这个就就我担心的是这个里面它有很大的复杂度

188
0:24:48.520 --> 0:24:50.960
就是这个问题它不是一个非零即一的问题

189
0:24:51.400 --> 0:24:58.600
比如说我这个函数就是我刚才说那种啊adding two vector and b把a和b两个倍这个这个项量加起来

190
0:24:58.920 --> 0:25:07.400
这一种不会有问题的没有人给你提什么这个代码这个是我的不是你的不会的会有问题的是什么啊是一些比较复杂的

191
0:25:08.320 --> 0:25:13.480
啊比如说一个嗯经过改良的冒泡算法的一个实现

192
0:25:16.200 --> 0:25:21.680
这个就那可能有人他就觉得说哎这个算法是我在一段时间里面我独创的

193
0:25:22.080 --> 0:25:31.040
你可以用我我也把它开源了但是这个是有来自限制的你必须要注明啊他的原作者和来自文本

194
0:25:31.840 --> 0:25:34.960
那靠拍了把他拿过来之后可能就不会这么去做

195
0:25:35.680 --> 0:25:41.800
那这个逻辑上来讲其实是侵犯了他的这个权利的那这种争议就会开始出现

196
0:25:42.320 --> 0:25:47.440
所以这个问题它不是不是非黑即白它是有有区别它是有不同情况的

197
0:25:48.000 --> 0:25:54.200
而这就会带来很大的复杂度就对扣拍了的这个产品来说就是一个很大的挑战我我是这么看这个事

198
0:25:55.520 --> 0:26:05.520
是而且他特别是他显示的做商业化自己的事情后对他现在收收钱了只是这一下子变得非常的这个敏感了

199
0:26:06.360 --> 0:26:11.440
OK随着是不是回到之前老庄聊过那个事情就是这个

200
0:26:12.400 --> 0:26:19.440
以以比如说比如说我我我我现在随便瞎想哈假如有人他他建了一个数据库

201
0:26:20.160 --> 0:26:27.280
嗯或者他建了一条这个公链啊就是我可以把我写的代码放到这个链上去然后附上一个

202
0:26:27.760 --> 0:26:35.480
那就自然获得了一个唯一的不可伪造的ID哈然后附上一个价格就是你你只要引用这个代码你就得在这个链上

203
0:26:36.400 --> 0:26:38.800
去付给我对应的这个报酬

204
0:26:39.880 --> 0:26:45.920
然后把这么一个系统跟扣拍了连接起来是不是一个挺有意思我觉得会非常理想我觉得会非常理想

205
0:26:46.840 --> 0:26:51.680
就是我可以放弃这个权利那我就不往这个链上放嘛我代码就搁在那我就不管了

206
0:26:52.760 --> 0:26:58.560
但是如果我有这个想法的话我就把这个东西上链登记到一项登记到相当于一个大的库里面

207
0:26:58.560 --> 0:27:03.320
然后我给他定一个价你们以后扣拍了可以用用的时候拍机你那个

208
0:27:03.880 --> 0:27:09.880
那个未做搜到扣的里面就会弹出一个提示而这个代码你使用了呃也一次性付费

209
0:27:10.560 --> 0:27:14.040
嗯嗯两美元然后你可以终生使用这段代码了

210
0:27:15.120 --> 0:27:20.440
干不干麻烦的地方在于现在还没有一个特别好的定价机子

211
0:27:20.440 --> 0:27:28.600
对所以所以像呃给他哈不这样的一种抢先出来赚这笔钱不管他赚的成赚不成能赚多久

212
0:27:29.040 --> 0:27:39.760
我觉得都是一个很好的尝试至少他他他走在前面了他在商业模式上比我们这些空想的要好得多他真正的在探索探索这个商业模式

213
0:27:41.160 --> 0:27:49.880
我我我听说啊就是前几年这个微软收购给他的时候定价非常高啊我我忘记多少钱是是几十亿刀还是多少我记得了

214
0:27:50.440 --> 0:27:59.400
那这个是一百九十亿美金好像是啊非常非常高反正当时给我的感觉很震撼我就去研究了一下然后我也问了一些在啊微软的一些朋友

215
0:28:00.000 --> 0:28:06.280
他们就说最看重凯特哈布的就两个东西一个是扣space一个是扣牌了

216
0:28:08.480 --> 0:28:12.120
就扣space可以帮助去推广这个微软的云环境

217
0:28:12.440 --> 0:28:26.600
对啊然后这个时候当初是七十五亿美金啊对我都给他好了对我一直认为给他应该是小几十亿十几二十亿大概这个这个超过这个这个这个级别的啊结果就看来我们不懂行就还是这个

218
0:28:27.040 --> 0:28:35.280
这看得不够深啊然后微软会跟我说就说这两个东西啊扣扣space是是推广微软的云服务啊然后这个扣牌了

219
0:28:36.000 --> 0:28:42.840
会带来软件的新的价值增值啊他们是这么一个讲法

220
0:28:44.320 --> 0:28:51.600
现在我们就能理解了就其实这个扣牌了背后它可能会带来一些全新的对软件的定价的这个机制

221
0:28:51.880 --> 0:28:59.040
因为他走到前面了嘛他就一定会在定价过程当中这个全新的定价市场上有最大的发言权

222
0:28:59.960 --> 0:29:01.840
好的伤人还是伤人啊

223
0:29:02.960 --> 0:29:06.360
对这些事情呢我们持续观察从那个

224
0:29:07.880 --> 0:29:14.360
他的商业模式版权这些问题来看那那我们再换换一个视角我们可以再来看一看

225
0:29:15.040 --> 0:29:25.760
对第二个视角呢就是我想问的就是想了解的就是从雇主来说从爱的企业来说对这个呢其实也是一个一个最大的市场

226
0:29:26.320 --> 0:29:30.920
对就是刚才大家也说了这么多对吧就是如果我们假设就是

227
0:29:31.400 --> 0:29:38.320
嗯扣牌了他呢他确实能够构建起来这样一个合法合理的这样一个一个商业模式

228
0:29:38.880 --> 0:29:42.640
对市场会不会买单对吧那我们先看一下企业端

229
0:29:43.200 --> 0:29:54.800
对那企业端因为现在特别是软件企业其实对营销的这种追求还是还是比较积极的对如果能够提高我的员工的这样一个生产效率

230
0:29:55.120 --> 0:30:03.880
对那那基本上还是挺乐于是支持特别是给我们的开发者去批量购买这些这些工具性的东西啊

231
0:30:04.160 --> 0:30:05.960
对就是两位都是企业界的

232
0:30:06.400 --> 0:30:11.480
就从你们的角度来看就是如果你是一个嗯雇主哎你愿意

233
0:30:12.040 --> 0:30:18.600
嗯去使用类似扣拍了他的这样一些工具来提高你员工的这样一个生产力吗

234
0:30:19.120 --> 0:30:27.040
就如果你你你不去购买的话会不会你的竞争对手哎他去有扣拍了的这种装备以后

235
0:30:27.440 --> 0:30:35.200
他的生产力其实会大大的去提高对就是企业他对这种代码编程的自动化的这样件事前

236
0:30:35.680 --> 0:30:37.960
他会持一个什么样的态度呢

237
0:30:39.360 --> 0:30:40.000
这都想问他

238
0:30:41.520 --> 0:30:50.200
嗯我我先说嗯这其实可能跟公司大小有关像我们公司可能就会选择自己搞一个

239
0:30:51.040 --> 0:31:01.560
哈哈哈哈好的好的好的你不是因为因为是这样就是说我们公司其实有非常非常庞大的自己的代码库

240
0:31:02.400 --> 0:31:08.960
嗯是的因为其实大家都知道了就是我在华为嘛然后我们华为有超过十万以上的软件研发人员

241
0:31:09.600 --> 0:31:18.240
然后代码仓库的数量是几十万上百万这样的代码仓库里面的代码量也是上千亿行了已经

242
0:31:19.240 --> 0:31:26.160
嗯所以所以我们其实很早就是说我在公司里面其实跟他们聊过这个事情但不是我在做我跟他们聊过

243
0:31:26.640 --> 0:31:31.560
就说我们应该完全可以用人工智能的方式把我们公司内的自己的员工代码

244
0:31:31.960 --> 0:31:39.440
通过机器学习然后学会了以后来做智能辅助所以所以我甚至觉得可能都有只不过我还不知道

245
0:31:39.440 --> 0:31:49.960
哦是但是如果用外面公司的一个不管是微软还是其他公司的话这个对于我们公司来说可能是难以想象的钱在风险

246
0:31:51.120 --> 0:31:55.800
对你看就是说我为什么对那个吉特哈布的那个霸王条款特别关注呢

247
0:31:56.120 --> 0:32:01.080
因为它意味着是双向的就是你能用别人代码别人也能够看你的代码

248
0:32:01.680 --> 0:32:07.880
那么如果我们公司有员工用这个代码的话就意味着我们公司的员工的代码别人也能看得到这怎么可能

249
0:32:08.520 --> 0:32:14.880
怎么能让他们看嗯哼所以所以一定是关切门来自己搞哪怕自己搞得再差也不可能用别人东西

250
0:32:16.280 --> 0:32:19.240
嗯对这是我我这边的一个评价

251
0:32:20.800 --> 0:32:29.520
对这个事儿呢我也就出来之后啊我也问了几个朋友啊就是在一些公司里做cto或者是做这个

252
0:32:30.200 --> 0:32:31.680
技术管理的岗位的人

253
0:32:32.600 --> 0:32:38.560
我觉得大家普遍的目前啊当当我问的主要是中国的一些一些这个互联网公司

254
0:32:39.320 --> 0:32:42.880
他们现在普遍的这个给我的感觉就是

255
0:32:43.440 --> 0:32:48.240
嗯谨慎的看好然后观望

256
0:32:49.280 --> 0:32:56.880
就这个事儿呢刚才王老师所所说的这几个点大家都看到就是它有可能是一个很有价值的东西

257
0:32:57.600 --> 0:33:04.360
呃会类比成什么哈就是现在有一种技术大家已经完全习以为常了

258
0:33:05.080 --> 0:33:08.320
就是这种写代码的这种智能提示

259
0:33:09.200 --> 0:33:13.160
对就我写了开头后面就自动弹出后后续的东西

260
0:33:13.760 --> 0:33:22.000
啊我写了一个对象那么对对象对应的属性方法打个点啪就自动弹出来啊这个技术呢最早是

261
0:33:22.720 --> 0:33:33.720
这个九零年代呃那个快速开发工具比如说什么微作basic啊啊什么这个达奥菲啊微作西加加这样的一些一些

262
0:33:34.320 --> 0:33:38.800
开发工具里面最早出来的在此之前是没这个东西的

263
0:33:39.640 --> 0:33:45.520
嗯对就那个时候写代码的人现在就无法想象的每一个单词都必须拼对啊

264
0:33:46.360 --> 0:33:54.960
嗯是那个时候最重要的一种书卖得最好的一种书叫什么叫做呃这个programmes reference

265
0:33:55.480 --> 0:34:02.240
就是呃程序员参考指南那个里面是啥呢就是所有的酷函数的说明

266
0:34:03.040 --> 0:34:10.520
来数查所对你没有这东西的话你就连拼都不容易拼对啊就就你很容易就就就你那个时候

267
0:34:10.880 --> 0:34:15.280
呃编译或者运行一个程序最容易出看到的问题就是某个东西拼错了

268
0:34:16.520 --> 0:34:25.280
但后面这种东西这种代码的智能提示已经是标配了有和没有它这个生产力确实是相差巨大的

269
0:34:26.240 --> 0:34:35.520
那么扣拍了这样的东西会不会成为下一代的这种英特尼sense就这种代码智能提示会不会成为下一代的这个东西

270
0:34:36.520 --> 0:34:41.520
哦那这个事情呢大家就是一种所谓的谨慎看好的一个状态

271
0:34:42.520 --> 0:34:48.000
然后呢大家除了谨慎看好这个未来以外确实是有很多担心的

272
0:34:48.520 --> 0:34:53.000
尤其是站在企业角度个人其实还好无问题没那么大

273
0:34:53.520 --> 0:35:05.480
但是在企业角度即使没有像表委这个华为这种这么巨大的而且啊属于出头鸟啊被被被这个嗯西方重点关注的这个对象

274
0:35:05.520 --> 0:35:09.480
小一些的公司中型的公司他们也会担心这种问题

275
0:35:10.520 --> 0:35:17.480
就是你这个服务或者说你扣拍了未来的这个商业化是不是不止这一种模式

276
0:35:17.520 --> 0:35:22.480
你可不可以为我企业来定制啊给我一些私有化的服务

277
0:35:23.520 --> 0:35:35.480
我甚至可以企业给你谈一个一个一个package对吧我我多少个这个seat就多少个这个员工或者说使用的这个呃并发的这个使用啊你给我一个好的价格

278
0:35:35.520 --> 0:35:42.480
或者是你维护我的隐私就大家也在等待这种东西出来来解决一些现在担心的事情啊

279
0:35:42.520 --> 0:35:50.480
所以我我觉得对雇主来说呢嗯他关注的确实就是是不是能提升我的生产效率

280
0:35:51.520 --> 0:35:55.480
那这一点说实话还没有完全的得到证实

281
0:35:56.480 --> 0:36:04.440
我不知道你们怎么看哈就是我认为这个东西呢他能提高一些这个这个工作效率但他会不会带来另外一些问题

282
0:36:05.480 --> 0:36:09.440
嗯还是有担心的是吧就这这是我现在了解到的情况

283
0:36:11.480 --> 0:36:15.440
比如很简单万一这个ai提提供的代码里安全漏洞怎么办

284
0:36:16.440 --> 0:36:21.400
对这也是我刚才也想或者说他的直线不不够优化怎么办

285
0:36:21.440 --> 0:36:27.400
当然这些问题都可以在扣review在这个代码这个这个检查阶段可以有可能可以发现

286
0:36:27.440 --> 0:36:34.400
但是如果他的品质不达到一定高度的话那其实他未必会提升团队的产出

287
0:36:35.440 --> 0:36:42.400
所以这些还在等还在看我我举个例子说其实我们公司现在有时候在研究这个开源投毒的事情

288
0:36:42.400 --> 0:36:49.360
啊嗯对吧就是有有人在开源代码里面放恶意代码然后有可能就进入你的公司内部

289
0:36:49.400 --> 0:36:55.360
然后就损害你的业务损害你的产品对现在他通过ai投毒就更容易了

290
0:36:55.400 --> 0:37:01.360
就给你一个你正好想要的东西然后加点啥料你只要一个太不见过去接纳了就没事了

291
0:37:02.400 --> 0:37:07.360
对而且这个事情有可能在git hub都不知情的情况下就发生对

292
0:37:07.360 --> 0:37:19.320
比如我在git hub上面拿一个这个热度特别高的report税然后在里面放一个这个提交进去一个代码这个代码有一些独特的关键字

293
0:37:19.360 --> 0:37:26.320
然后想些办法提升他的权重然后里面有毒git hub都不知道因为全是算法驱动的对

294
0:37:26.360 --> 0:37:34.320
而且还不光是说特别热门的项目我其实倒倾向于说最有可能的投毒方向是来自于那种特定领域的

295
0:37:34.320 --> 0:37:43.280
对就它很窄嘛特定的一个几个关键字匹配对这种特别溺取特别少那就很准对然后正好你又用得到

296
0:37:43.320 --> 0:38:01.280
然后就正好你就上钩是的是的好的对我我大概理解了对其实的呢一方面呢就是研发效能这件事情呢本身它也是一个综合性的事情对你的代码能够帮你自动的去做一些拼装组合对那只能是一面

297
0:38:01.280 --> 0:38:11.240
但是呢同时也会带来一些潜在的风险那不仅仅是刚才大家所提到的像投毒啊这些更加嗯严重的事情

298
0:38:11.280 --> 0:38:26.240
包括那个自动代码生成的自动的拍捞的生成的这些代码是不是更是不是更加难review还是还是怎么样或者是测试这些事情其实也都是充满的一些一些挑战

299
0:38:26.240 --> 0:38:56.200
所以说呢我相信像那个从雇主角度来说的话对可能还是会非常谨慎吧对那从嗯他真正的离落地实际的话可能还得还得有距离对那第三个字就引出来第三个啊第三个那个观察点就是那从开发者来说意味着什么对为什么问这个问题呢因为至少从我们自己的同学来看的话对那大家还是嗯一是

300
0:38:56.240 --> 0:39:26.200
非常感兴趣对马上会去做尝试第二个呢因为这件事情对他来说确实能够帮到他对帮他什么呢确实能够在比如说在我们的一些课程一些作业搬走了他对吧在他去解决实际的问题当中能够帮到他对然后呢还能够在一些人也许在那个实习呀对包括开学社区的一些代码写作呀那这些里面肯定是能够起到这些

301
0:39:26.240 --> 0:39:56.240
积极的帮助对那我就在想对那从一个专业开发者来说对意味着什么对特别是如果能够有这种呃代码的辅助的这种爱爱的能力以后对那对于一个专业的开发人员他的一个竞争优势接下来会是什么对特别是这个这个嗯产品却是如果能够按他发展得比较顺利的话对

302
0:39:56.240 --> 0:40:26.240
也比较成熟能够被企业也也会认可的话对那对于他来说是会什么样的一个比如说两位都是的也是比较积极使用的甚至已经使用了口拍了的这样一个一个方式的呀对你们觉得对于个人专业开发者来说会什么样的影响我先说嗯好其实我想会让先说个笑话好但不是我的观点是某一种可能的观点

303
0:40:26.240 --> 0:40:39.160
这是美帝国主义的阴谋原来毒害我们的青少女让他们再也不会真正的编程上撕了开发能力只会copy paste到将来假设

304
0:40:39.640 --> 0:40:47.760
因为他现在是对所有学生免费的嘛等到将来给他我对中国的学生服务一关中国学生以后出出了校门都不会写代码了完了

305
0:40:47.760 --> 0:40:58.680
哈哈对这这其实是一个笑话工具奴役对这是一个笑话但是我我想表达的意思是说呃什么叫做写代码的能力

306
0:41:00.080 --> 0:41:10.080
嗯如果如果说呃丢失了或者上失了工具之后你依然能把这代码写出来那么这是有能力如果这个工具没了

307
0:41:10.960 --> 0:41:15.840
或者他他比如说什么快捷键不灵了完了以后你就写不来写不来代码了

308
0:41:16.640 --> 0:41:18.520
我觉得这个能力就就是可疑的

309
0:41:19.440 --> 0:41:27.480
就是你你的写代码的能力完全依赖于这种导航或者说叫做这个就像就像就像我们现在开车有导航

310
0:41:28.080 --> 0:41:39.440
对吧那么这手机有导航的时候我就知道去哪一旦手机导航关了我就不知道怎么走了完了我根本不知道怎么去那么这时候就我其实已经上失了驾车去某地的能力

311
0:41:39.760 --> 0:41:45.520
只不过我现在正好手机还通了通了网络而且还运作正常所以我还能开车去哪里

312
0:41:46.360 --> 0:41:48.920
那么开发编程软件编程同样的

313
0:41:50.040 --> 0:41:55.640
如果上失了这个导航你依然能够写代码那没问题这个导航你就尽管用

314
0:41:56.480 --> 0:42:01.560
但是如果你有一天没了导航你就不能写代码了那不行那这个太危险

315
0:42:02.360 --> 0:42:03.880
嗯嗯

316
0:42:05.960 --> 0:42:13.240
这个就所谓的工具奴役啊就是有有个很很很著名那个动画片窝益啊就那个叫什么机器总统员啊

317
0:42:13.760 --> 0:42:21.760
对那里面描述的未来人类就是脑袋很大身体很胖但是四肢都已经萎缩了小小的手小小的脚

318
0:42:22.400 --> 0:42:31.320
嗯就不会走路了也也不会用用手劳作了他手唯一的作用就是呃按一下按钮就就就可以然后下缩性都是机器人做

319
0:42:32.200 --> 0:42:35.800
嗯我很赞同非常赞同老庄刚才这个观点哈就是

320
0:42:36.360 --> 0:42:43.760
嗯所有的这些工具他是帮你提升效率的而不是把不可能变成可能

321
0:42:44.720 --> 0:42:50.200
就是你自己会的情况下他帮你提供提高效率啊你自己不会的情况下

322
0:42:51.320 --> 0:42:54.080
那如果你借助他完成了你还是不会

323
0:42:55.360 --> 0:43:04.480
那这个呢就很危险尤其对于刚刚开始去学这个这个这个编程的人来说

324
0:43:04.480 --> 0:43:07.480
我说就像刚才老庄说的他现在对学生免费

325
0:43:08.160 --> 0:43:14.360
啊这个虽然老庄讲那是个笑话啊但是最后可能真的会产生一些不好的效果

326
0:43:15.400 --> 0:43:22.600
啊所以所以我觉得对于开发者来说的话呢嗯你把它看作是一种生产力工具就可以了

327
0:43:24.240 --> 0:43:32.200
我举个例子假设我写一个函数这个函数我也已经写了很多遍了我现在只是不想再去费劲把它靠皮配死一份

328
0:43:32.600 --> 0:43:38.960
我就借助这工具生成然后我稍微改几个地方就满足我的需要了啊这个完全OK

329
0:43:39.880 --> 0:43:47.640
但是如果说我要实现一个东西东西我自己还没想明白怎么实现我只是从网上靠皮配死了一段过来就不管了

330
0:43:48.640 --> 0:43:57.360
那么其实我啥也没做我做的就是一个搬运工那么这样的搬运工也许你现在还能在嗯

331
0:43:58.040 --> 0:44:05.400
一些互联网或者软件公司里面挣到一份工资还不错的工资但是你的未来毫无疑问是

332
0:44:06.440 --> 0:44:07.960
相当的有风险的

333
0:44:08.680 --> 0:44:16.560
因为我们一直在讲为什么我们这个节目叫后互联网时代就是互联网的那个最早的那个狂飙突进的时代结束了

334
0:44:17.280 --> 0:44:23.400
现在开始进入平台期然后接下来就会变成一个非常通常的非常普通的一个行业

335
0:44:23.400 --> 0:44:33.080
这个趋势是不可逆的啊不管你信不信你等着看就知道了那在这种情况下什么才是你最保值的能力

336
0:44:34.320 --> 0:44:38.080
那很简单就是ai干不了那些事情对你来说才是保值的

337
0:44:38.080 --> 0:44:39.760
才是保值的嗯

338
0:44:41.320 --> 0:44:48.520
所以就是假设你真的说哎这个函数你这个算法你不会做然后你去copy paste来之后

339
0:44:48.920 --> 0:45:00.120
它就顺利的完成了你的需求那很好没问题但你千万不能停在这里你得仔细的去研究它是怎么实现的然后把它搞懂

340
0:45:01.120 --> 0:45:06.240
啊很多现在年轻的程序员们不愿意花这个时间我觉得是非常可惜的就是

341
0:45:06.720 --> 0:45:10.800
你在你最需要的那个时候就是你一定要完成一个任务但是你又不会

342
0:45:11.120 --> 0:45:16.400
然后你搞到了一份代码不论你是在网上搜的还是你借助扣拍了写出来的其实本质是一样的

343
0:45:17.000 --> 0:45:20.400
扣拍了只是帮你省了那个去搜代码和研究代码的过程

344
0:45:21.760 --> 0:45:29.240
啊那接下来你还是要去学习这段东西然后直到你掌握它下一次你可以自己融会贯通为止

345
0:45:31.120 --> 0:45:37.360
这个时间是不会白费的就是你一定能从中收获到很多东西的这是我跟所有的这个

346
0:45:37.920 --> 0:45:44.480
嗯我我遇到的程序员都会去讲的一个东西当然有人会听有人不会听了这这这个没有办法对吧

347
0:45:44.680 --> 0:45:52.840
但是我仍然认为这是很重要的一个点所以过头来讲的话就是对于一个开发者不论你是企业雇员还是一个独立的开发者

348
0:45:53.400 --> 0:45:57.080
不论你是做商业软件还是做开源的软件其实嗯

349
0:45:58.080 --> 0:46:04.480
你要记住你的使命就是你驱动计算机为人类做了一些有价值的东西

350
0:46:05.840 --> 0:46:11.600
那在这个过程当中是你创造性的驱动了计算机

351
0:46:12.680 --> 0:46:14.840
而不是你只是搬运工

352
0:46:16.080 --> 0:46:19.800
你可以做一些搬运的事情但是你得知道你到底在干啥

353
0:46:20.800 --> 0:46:24.840
而如果你不这么做呢当然也没问题只是你更容易被替代而已

354
0:46:25.680 --> 0:46:27.040
那你的价值肯定下降了

355
0:46:28.040 --> 0:46:31.800
所以我觉得对于嗯个人开发者来讲的这样的工具

356
0:46:32.960 --> 0:46:38.400
我个人的预测啊就是会加速两极分化就是优秀的程序员会更加优秀

357
0:46:39.240 --> 0:46:45.520
而不优秀的会更加不优秀这是我的预测我我完全同意

358
0:46:47.360 --> 0:46:52.880
好的呀对我也非常同意两位啊要抓紧练内功对这个还是更重要的

359
0:46:53.360 --> 0:46:55.760
非常适合告诉王老师的同学们

360
0:46:57.760 --> 0:47:02.960
对这个这个议会的还还有一个视角我们会专门来讨这个问题的

361
0:47:04.200 --> 0:47:06.240
对这其实是个很很重要的一个挑战

362
0:47:07.040 --> 0:47:11.160
对好那那刚才我们说了是那个专业程序员对吧

363
0:47:11.640 --> 0:47:20.280
对那大家也知道对我们这个节目呢是后互联网时代对其实很多厅中呢其实是有一定的居住背景但是呢有的也没有对我

364
0:47:20.280 --> 0:47:31.080
想大部分的也不是一定都会在编程这个领域有非常多的一些经历对那我们第四个视角就是对于广大的听众来说

365
0:47:31.360 --> 0:47:42.440
对就是对于所有人来说这件事情意味着什么对我觉得刚才那个庄老师举的那个那个例子还是两年老举的那个例子挺好的就是我们的洽驾驶

366
0:47:42.960 --> 0:47:52.440
对不对那那汽车呢也是一个一个工具对那汽车的智能化自动化其实也是在大大的往前再走

367
0:47:52.880 --> 0:48:03.360
对他带来的一个好处呢就是能够让一些大众化的人更多的去自主的去或甚至是自动的去使用交通工具

368
0:48:03.360 --> 0:48:15.480
对吧以前最开始的还是手动的对吧你还得去记地图你还对汽去记车上的各种各样的一些操作对其实还是有一定的专业程度

369
0:48:15.880 --> 0:48:24.920
对那随着后来手动档对吧当然交通规则肯定是需要对那现在如果真的是那种自动驾驶理念交通规则都不用管了

370
0:48:25.240 --> 0:48:32.480
任何一个人其实把这个车辆可以当做是一个交通工具对吧你更重要的就是达到你的目的

371
0:48:33.040 --> 0:48:42.360
对那我就在想特别是我们上一期也提过AI的自动内容生成对吧以前对于文科来说这种计算机很难操作的呀

372
0:48:42.720 --> 0:48:50.800
对他现在甚至都可以利用计算机来生成一些图形图片音乐的来在他自己的专业领域去发挥作用

373
0:48:51.360 --> 0:48:54.160
对那对于我们广大的群众来说

374
0:48:54.840 --> 0:48:59.920
这件事情是不是也是一个利好呢我隐隐感觉到特别是我如果不会变成的

375
0:49:00.000 --> 0:49:05.560
哎那如果真的以后计算机能够有这种自动化的编程那我就完全可以

376
0:49:06.120 --> 0:49:15.880
把我的一些需求特别是我这些创意说出来然后呢让计算机帮我去把这个软件或者是一些方法实现出来来解决我的问题

377
0:49:15.880 --> 0:49:24.120
那我来创造一些业务领域的一些一些价值包括现在的一些低代码其实都是有有这样一个一个一个味道啊

378
0:49:24.480 --> 0:49:30.840
其实我就不知道两位老师你们觉得有没有可能发展到这样一个阶段真的是你

379
0:49:31.440 --> 0:49:36.760
给计算机说一段话让他帮你做一个软件这个软件就能够就能够做出来

380
0:49:37.720 --> 0:49:44.800
那个我又忍不住想说笑话了好的我们最喜欢听状态制的这个都是意味深长的笑话

381
0:49:45.000 --> 0:49:49.240
因为因为我我认识一些产品经理他们最容易产生这种梦想

382
0:49:51.000 --> 0:49:57.800
哈哈这些这些人连跟连跟人类交代需求都交代不清楚他们怎么可能跟程序讲得清楚他的需求

383
0:49:59.520 --> 0:50:06.920
这个问题问得好哈哈因为因为其实真正我们现在很多人欠缺的是表达能力

384
0:50:07.560 --> 0:50:11.640
就把它的需求正紧正紧的需求表达出来说我要什么

385
0:50:12.040 --> 0:50:17.560
你能把这东西讲明白人如果能听明白其实这就已经很厉害了

386
0:50:18.280 --> 0:50:22.880
大多数产品经理真是这就就很简单就你帮我抄一个那个啥

387
0:50:24.440 --> 0:50:25.880
他觉得这就叫做需求

388
0:50:27.840 --> 0:50:31.640
所以所以我觉得真正真正困难的问题不在于这个

389
0:50:32.560 --> 0:50:38.400
有没有程序员帮他做其实很多时候程序员之所以告诉他这个东西实现不了是因为烦他

390
0:50:41.360 --> 0:50:46.640
或者觉得这个需求完全没意义对啊对啊所以所以就才会很无理的拒绝嘛

391
0:50:47.480 --> 0:50:53.000
他会觉得啊如果有一个机器人能够帮我把这需求做了这些我都产品经理忘念

392
0:50:53.800 --> 0:51:01.480
我就不用去求那个可恶的共生师了对对对但但其实这就是妄想因为关键是他自己的问题

393
0:51:02.640 --> 0:51:14.040
对这么说起来我我觉得就是不管怎么人工智能哈这个在软件行业有一个工种是是我觉得很难被机器替代的就是系统的分析和设计

394
0:51:14.760 --> 0:51:15.240
嗯

395
0:51:17.480 --> 0:51:23.920
嗯就如果你系统分析和设计做的好所谓的分析啊我我我把它理解为就是

396
0:51:24.760 --> 0:51:31.840
把现实世界面临的问题呃翻译成计算机的这个需要解决的问题

397
0:51:32.600 --> 0:51:41.240
这个叫分析然后设计就是把这个计算机需要解决的问题分解成若干个更小的问题每一个都能够独立的去完成

398
0:51:41.680 --> 0:51:46.560
然后最后能拼起来就是分析和设计的过程呃它的

399
0:51:47.400 --> 0:51:53.560
重要性是毋庸置疑的而它的挑战也远比写代码来实现要高得多

400
0:51:53.920 --> 0:52:01.400
这个就属于我我我我们这个节目已经不止一次提到过的一个著名的这个论断啊就是no silver bullet就是没有银弹

401
0:52:02.920 --> 0:52:11.520
这个没有银弹这个文章里面讲的所谓的软件的根本性难题其中有一个就是关于这个系统的分析设计的那么另外是关于软件工程的

402
0:52:12.520 --> 0:52:25.320
那这些难题其实目前看哈不论是扣牌了这样的代码生成工具还是现最近这几年概念上比较火的所谓的低代码工具

403
0:52:25.840 --> 0:52:31.680
其实低代码工具的本质是啥哈我理解它就是在你系统分析设计里做好的情况下

404
0:52:32.480 --> 0:52:40.520
能够自动的通过构建的组合啊通过一些流程定义啊来创造出一个

405
0:52:41.640 --> 0:52:43.800
可编程的流程一个业务流程

406
0:52:44.760 --> 0:52:55.040
啊他他非常像很早以前的工作流的这种定制系统把那东西升级一下啊变得更灵活和力度更细一些其实就是现在所谓多这个低代码工具

407
0:52:55.480 --> 0:53:04.400
但第二个工具这个火了一段时间了我记得前年和去年有一段时间特别火啊大概是资本在后面推了一手吧

408
0:53:05.040 --> 0:53:07.440
嗯但其实完成度是很低的

409
0:53:08.360 --> 0:53:14.480
没有什么真的能能够这个就他英文场景很窄在少量的几个场景能用啊

410
0:53:15.560 --> 0:53:20.560
所以呃回到刚才王老师提这个问题啊我我我我认为

411
0:53:21.560 --> 0:53:27.200
嗯普通人在不掌握任何编程具体的工具的情况下

412
0:53:28.000 --> 0:53:33.360
能够实现一些类似编程的效果这件事情其实

413
0:53:34.240 --> 0:53:42.000
嗯一早就可以了啊比如说最简单的就是你去买一个那个可变成的机器人

414
0:53:43.280 --> 0:53:43.800
去玩吧

415
0:53:45.680 --> 0:53:49.040
他就他就很很简单就是一副艾奥斯

416
0:53:49.560 --> 0:53:58.200
然后这个就是其实就是分支和条件分支和循环把这些基本结构掌握了你就可以写一些脚本指挥这个机器人怎么动

417
0:53:58.760 --> 0:54:03.560
啊一个下午就能教会一个小孩去做这些事情这个是可以的

418
0:54:04.200 --> 0:54:07.880
但是说如果把这个东西变成一个通用的能力

419
0:54:08.520 --> 0:54:15.120
那我觉得非常难非常非常难就是你在特定领域下做这一点不复杂比如数控机床也是类似的

420
0:54:16.720 --> 0:54:26.120
对吧你你我不让现在我我我原来上学的时候我们我们的母校这个二年三年级的暑假就要去做这个精工实习

421
0:54:26.960 --> 0:54:35.720
那就是机械和金属工艺的就去接触那些的那些机床那个时候有我我那个年代有非常原始的书封机床

422
0:54:36.440 --> 0:54:43.760
你就自己去设定一些数据一些坐标上的点然后他就旋转体给你扯出一个旋转体出来

423
0:54:45.480 --> 0:54:49.520
就这种其实早就已经可以做了但这个是非常非常局限在特定领域的

424
0:54:49.520 --> 0:54:53.320
如果是跨领域的或者说是泛用性的这种

425
0:54:54.200 --> 0:54:56.640
变成的话那我觉得还是非常难的

426
0:54:57.400 --> 0:55:06.440
啊所以我一直讲的是说嗯普通人如果你有兴趣的话你学一点不用很深啊学一点变成的基本原理

427
0:55:07.120 --> 0:55:12.320
然后掌握一些一个样板语言然后以后你就很有可能可以融会贯通了

428
0:55:13.040 --> 0:55:23.520
嗯嗯因为你都你掌握这些基本原理之后那些什么具体的函数名啊变量名啊你不用记了因为自动化工具会帮你做这些事情

429
0:55:24.600 --> 0:55:28.640
就细节其实反而你不用太担心但是那个逻辑你得懂

430
0:55:30.640 --> 0:55:36.080
你得掌握的是怎么把现实世界的问题变成计算机能解决的问题然后怎么去拆解这个问题

431
0:55:37.080 --> 0:55:42.520
啊然后拆解之后的问题怎么解决呢那就是一个函数嘛这些函数有大把的工具可以帮你产生

432
0:55:43.680 --> 0:55:49.160
所以我觉得对普通人来讲的话理解原理比掌握工具要更重要

433
0:55:49.760 --> 0:55:56.840
因为工具一定会越来越强越来越自动化但原理它还是得人去解决的

434
0:55:57.840 --> 0:56:06.320
好的呀对其实两位老师的这些答复啊对已经在部分程度上解答了我

435
0:56:06.840 --> 0:56:16.800
第五个想要问的问题对就是正因为有这样些一些变化对那高校的这样一个整个教育体系还有课程应该怎么变

436
0:56:17.320 --> 0:56:26.800
对那那实际上呢我这一块感觉其实对于老师的这些压力和教学的改革其实要更加的迫切

437
0:56:27.360 --> 0:56:32.520
对因为有些事情我们是不只一遍地去说过对那特别是有了这种

438
0:56:32.960 --> 0:56:38.600
ai能力的这种提升以后对于我们的这种嗯改革的

439
0:56:39.720 --> 0:56:45.680
推进速度和老师的要求特别是对老师的这个要求其实要更大

440
0:56:46.040 --> 0:56:58.680
对因为很多时候就是就是那大家教过就应该清楚就是你去教一些具体可操作性语法或者是细节上的一些东西反而要容易一点

441
0:56:59.160 --> 0:57:05.560
但是呢你要去教授刚才所提到的就是系统层面的分析对吧把现实

442
0:57:06.440 --> 0:57:08.360
当问题里面的这些

443
0:57:09.120 --> 0:57:16.280
嗯复杂度然后呢分解到用计算机能够理解的东西来去实现这种能力其实还是特别难的

444
0:57:16.760 --> 0:57:20.520
对当然我们前面做了一些尝试其实方向肯定是没问题

445
0:57:20.960 --> 0:57:31.360
对特别是那个我们希望去推广的就是在所有的学生不管你是文科生还是尼克森都去学一点编程的知识

446
0:57:31.680 --> 0:57:36.440
这件事情目前看上来一定是有非常大的一个益处

447
0:57:37.000 --> 0:57:46.160
就是一旦你去学会了这样一些一些背后的逻辑和思维再借助一些工具实际上可以大大拓展你的能力

448
0:57:46.480 --> 0:57:51.560
对吧就是你你你真的不用去求一些一些别人的

449
0:57:52.000 --> 0:58:00.760
对如果你自己思路清晰又能够把现实世界当中的问题理解清楚的时候实际上你是可以用工具来做你自己的一些素质化创种

450
0:58:01.280 --> 0:58:09.720
那对于专业的人士专业的那个专业同学来说的话同样你在理解他背后的原理以后

451
0:58:10.240 --> 0:58:15.040
你要做的事情就是提高你的更加高级的那个认知能力

452
0:58:15.320 --> 0:58:23.800
对就是刚才所提到的那个系统分析啊对吧现实世界当中的这种问题的一些一些分解啊对可以把你的

453
0:58:24.200 --> 0:58:34.040
呃这些精力发挥到这样一些一些地方对这样的话呢可以更好地去提高你的一些一些一些一些综合能力啊

454
0:58:34.280 --> 0:58:38.000
对所以说呢我最后还是想再问一下两个老师啊就是

455
0:58:38.600 --> 0:58:48.440
对于我们的学校对吧我们的教学内容教学方法对吧以及我们的大学教育这一块对特别是随着ai的这种冲击啊

456
0:58:48.600 --> 0:59:03.240
对你觉得我们我们应该去去做些什么样的事情当然从我自己的角度来说的话那我得赶紧提升我自己的这种能力对吧特别是刚才大家所提到的并且呢把这些能力

457
0:59:03.600 --> 0:59:16.760
用一种方式能够传递到我们的同学能够教授给他们对这时可能是一个我最需要做的一些事情对那还有一些其他的大家能够想到的一些一些想法吗

458
0:59:18.440 --> 0:59:27.120
我我又产生一个好玩好玩的联想啊王老师好的来你你以后其实要要变身成为语文老师

459
0:59:27.880 --> 0:59:32.360
不是计算机老师就是说我们我们在搜扣拍了

460
0:59:32.640 --> 0:59:39.840
然后他说我写好的注试然后这个代码就能帮我生成对吧但是现在有多少程序原来好的注试都写不好

461
0:59:40.840 --> 0:59:47.920
嗯怎么样才能写出好的注试对对怎么样才能写出好的注这其实是作文课教的内容

462
0:59:48.240 --> 0:59:57.800
嗯怎么样怎么样让你的语言精练准确理解释然后有层次有逻辑可以啊我我们可以不写代码我们写注试给他们上作文课

463
0:59:59.640 --> 1:00:09.880
这个啊我跟你讲一个有趣的点啊就我一个朋友就理上来他他有一个特别特别这个坚信的一个爆论他说

464
1:00:10.360 --> 1:00:13.480
他说有些能力呀是过了十几岁就提升不了了

465
1:00:15.680 --> 1:00:17.360
这个语文相关的就属于这种

466
1:00:18.600 --> 1:00:21.640
就是你可以在人生的任何阶段随便成没问题

467
1:00:22.600 --> 1:00:26.760
但是你的逻辑和表达能力过了十几岁非常非常难提高

468
1:00:28.840 --> 1:00:36.920
我这个太让人绝望了对哈哈哈哈然后我就跟他说我说我我没法验证你说的这个东西虽然

469
1:00:37.480 --> 1:00:45.760
我想一想跟我观察到的现象也挺吻合但我决定不去相信这个东西我要给大家留一点希望是的

470
1:00:47.920 --> 1:00:52.400
其实我我觉得就是其实这个能力啊他跟编程序关系不大的

471
1:00:53.160 --> 1:00:56.760
他实际上是一种逻辑和思变能力就是就是

472
1:00:57.560 --> 1:01:02.600
就是你你你观察你面临的一个问题这个问题往往一开始的时候他很模糊

473
1:01:03.880 --> 1:01:04.800
他甚至

474
1:01:05.720 --> 1:01:11.080
不知道这个问题的本质到底在哪里他是一个纷繁复杂的就是我很烦我我我遇到的很多困难

475
1:01:11.480 --> 1:01:17.840
但到底这个困难的根结点在哪里这是要花时间去思考的这个东西跟编程跟计算机近乎没啥关系

476
1:01:18.800 --> 1:01:26.240
啊当你把这个问题思维搞清楚了之后那你发现哦其实这是几个不同的问题裹砸在一起

477
1:01:26.560 --> 1:01:32.040
ok那我把它拆解开啊拆解开之后每个问题分别是什么问题这个问题是我需要做心理建设

478
1:01:32.440 --> 1:01:41.960
那个问题呢是因为我不太懂行业里的某个规则我要去做一些市场调查啊最后一个问题是技术问题我怎么从这些数据里找到我要的那个数据

479
1:01:42.840 --> 1:01:44.920
那他就可以分别去解决这些问题

480
1:01:45.920 --> 1:01:48.320
我觉得这个能力才是最最关键的

481
1:01:49.240 --> 1:01:56.640
而作为一种通识呢你学计算机编程的通识性的思维方法其实最终是掌握这东西

482
1:01:58.080 --> 1:02:08.400
所以我我其实一直很有意见的一点就是我们的大专院校里面教的计算机啊大量大量的内容还是在教工具

483
1:02:09.320 --> 1:02:16.080
对的确实虽然的语法编译器啊这个ide怎么使用啊

484
1:02:16.600 --> 1:02:28.200
然后能跑通一个程序就算结束了不是的其实你提的这个问题哪怕再简单的一个问题他的解决过程那个思维的一步一步的思维过程才是最重要的

485
1:02:29.200 --> 1:02:41.960
所以包括之前我们我跟王老师我们合作的那个课程其实也在努力往这个方向去做一些尝试我觉得这个是可能嗯接下来的一个重点这个工作量很大因为他需要把

486
1:02:42.720 --> 1:02:52.080
嗯所有的这个大专院校然后以后可能会下探到中学的这个计算机和信息化的一些课程他要重构

487
1:02:53.080 --> 1:03:01.440
要从面向工具和这种东西的彻底的转向一种思维导向的思维方法导向的

488
1:03:04.200 --> 1:03:09.400
而这个但但我觉得这是必须要做的对这个否则的话一定会离时代越来越远

489
1:03:12.960 --> 1:03:19.680
对这个对老师的要求特别大哈那我们就从师训开始嘛先先从排老师开始嘛

490
1:03:20.400 --> 1:03:29.160
哎有道理有道正好华师大就是师范学院对吧我们就从现在有优势计划就是专门要提升老师的质量的对我们就从

491
1:03:29.560 --> 1:03:35.640
其实我一直觉得教育界的问题就是老师的培养是重中之重

492
1:03:36.840 --> 1:03:37.640
嗯同意

493
1:03:38.960 --> 1:03:41.280
这个是这个是老问题了

494
1:03:41.720 --> 1:03:42.280
对啊

495
1:03:43.080 --> 1:03:49.240
没问题没问题对我们节目里面很多时候绕去绕来都会捞在自上外群是的是的非常同意

496
1:03:50.160 --> 1:03:57.720
也希望我们的广大听众对有什么好的一些想法idea啊对吧也和我们对过来做一些互动对

497
1:03:58.760 --> 1:04:07.680
好了呀那关于扣拍了的呢其实我相信我们后面的节目肯定还会来继续关注的对我们今天呢只是从我们

498
1:04:08.200 --> 1:04:17.880
嗯这几个视角去聊了对吧如果大家对扣拍了的这里面呢有些你们想知道什么的内容对欢迎大家

499
1:04:18.600 --> 1:04:23.680
给我们来提问对吧那我们应该可以通过不管是技术层面的

500
1:04:24.160 --> 1:04:29.000
还是我们刚才所提到的一些现实应用层面的企业层面的对我们可以去

501
1:04:29.720 --> 1:04:35.440
问我们的相关朋友啊还有我们去查阅相关的一些资料呀或者是我们自己的一些

502
1:04:35.440 --> 1:04:41.360
一些亲自的一些体验对吧来给大家来做这样一个交流对

503
1:04:41.640 --> 1:04:46.760
那我们扣拍的这个话题呢我们就先谈到这里对那最后一个呢就是

504
1:04:47.400 --> 1:04:54.280
看看大家最近有没有一些新的一些事情呀可以和我们的听众做一些分享呀

505
1:04:55.320 --> 1:05:03.200
好玩的事情嗯好玩的事情对最近有一个新闻我我是看到觉得特别有趣这个跟跟跟大家分享一下哈

506
1:05:03.480 --> 1:05:08.840
听一下呃就是最近有一个新闻啊是被作为这个笑话来来传播的

507
1:05:09.840 --> 1:05:14.760
就是说日本啊有一个市啊肯定肯定也相当于我们县级市那种级别的一个市

508
1:05:15.480 --> 1:05:24.080
然后市政府管这个数据的单位啊搞丢了一个优盘这个优盘里面包含了全市的市民基本信息

509
1:05:25.440 --> 1:05:32.680
而这个是一个很大的一个事情了这因为一般来讲市政府尤其日本啊日本其实他的

510
1:05:33.520 --> 1:05:38.920
嗯民众的这个网格化管理做的是不错的也就是说他的政府实际上基层政府是掌握了

511
1:05:39.280 --> 1:05:46.480
市民的非常多的信息的比如说你的这个真实姓名啊联系号码住址啊啊等等等啊照片什么的肯定有的

512
1:05:47.320 --> 1:05:53.760
然后这个优盘就丢了啊丢了那么就这个事被曝光出来啊这个政府就

513
1:05:54.240 --> 1:05:59.800
嗯出来抱这个这个道歉了这日本人拿手的啊一鞠躬九十度的这个道歉

514
1:06:00.800 --> 1:06:08.640
但是更有趣的事情就是道歉的时候做了解释说大家不用特别担心啊我们这个密码非常的强壮

515
1:06:09.400 --> 1:06:12.680
长达十三位的一个密码由英文和数字组成

516
1:06:15.520 --> 1:06:26.400
然后瞬间就被外面这个把这个密码猜出来了啊就是他的这个那个市的市民的英文拼法加上一个年份正好是十四十三位

517
1:06:27.240 --> 1:06:38.280
啊就这个事儿啊有有我我个人感觉有有有几个点比较有趣啊第一个呢这个如此重要的一个

518
1:06:39.320 --> 1:06:47.480
信息一个数据啊一般来讲是不能导出的就是假如我我我因为我很早以前创业的时候我们给政府做新系统

519
1:06:48.040 --> 1:06:54.600
那政府新系统他的要求就是呃物理隔离而且是数据不能够离线

520
1:06:55.560 --> 1:07:00.440
就是所有的数据必须在系统里面不能够导出导出是一个非常非常高的权限

521
1:07:00.920 --> 1:07:03.880
相当于是那种应急响应才会做的事情

522
1:07:04.320 --> 1:07:10.320
比如说我这家出问题了我这这个机房可能要拆迁或者怎么样担心他那个了那就把他导出来

523
1:07:10.600 --> 1:07:16.800
然后备份在一个地方这个都要专门拽人去管的啊就是保险箱什么之类的哈就类似这种

524
1:07:17.280 --> 1:07:20.880
所以他这个导出本身就是一个非常奇怪的事情

525
1:07:21.160 --> 1:07:28.120
而且导出在一个优盘里这个优盘还丢了他能丢就说明他没有被妥善的呃这个这个

526
1:07:29.440 --> 1:07:30.040
保管好

527
1:07:30.920 --> 1:07:35.920
啊然后第二个就是这个优盘里的数据他居然是一个简单密码就能访问

528
1:07:36.520 --> 1:07:42.120
这个也挺罕见的一般来讲不会这样的一般来讲他是应该被一个加密的系统

529
1:07:42.520 --> 1:07:46.400
一个证书所这个这个保护然后这个证书本身

530
1:07:47.200 --> 1:07:52.680
他可能是物理的也可能是什么其他的东西啊他反正另外载个密码去保护这个证书

531
1:07:53.080 --> 1:07:56.240
就一般来讲至少是要这样子的那这个他又是个简单密码

532
1:07:56.760 --> 1:08:03.920
然后更搞笑的是这个这个道歉会上面给人的感觉就是我们发布了一个谜题大家来猜啊

533
1:08:04.280 --> 1:08:06.200
啊怎么还没猜到吗我跟你们点提示吧

534
1:08:08.120 --> 1:08:13.520
我就这种感觉就是以前我年轻的时候特别迷过一段时间密码学就是

535
1:08:14.440 --> 1:08:23.240
研究过各种各样的加密算法那我们那时候经常就当时也有些论坛嘛当时经经常就有人出密码题答一一一一个论坛的人在那做

536
1:08:24.640 --> 1:08:32.280
只要玩过这种游戏的人都知道告诉你密码的长度这是一个多么巨大的一个提示

537
1:08:33.080 --> 1:08:36.160
这它可以让你的复杂度一下子下降好几个数量级

538
1:08:36.800 --> 1:08:46.680
那显然这个负责道歉的这个人对此是好毫无所知的啊就是现在我们知道就这么一个故事啊特别的有趣的一个一个事儿

539
1:08:48.160 --> 1:08:54.400
对不知道那个我们的听众啊你们是怎么样去保存你们的密码啊

540
1:08:54.800 --> 1:09:01.640
哎我也可以问一下我们的两位老师我我自己啊对以前那个其实现在也是账户越来越多了

541
1:09:02.160 --> 1:09:10.360
包括对于自己的一些账户管理其实也是一个头痛的事情对吧以前我最早的时候我抄我的纸质的

542
1:09:11.160 --> 1:09:11.840
小本本上面

543
1:09:12.600 --> 1:09:16.040
对啊那随着数量的增多你发现挺难的

544
1:09:16.600 --> 1:09:28.120
对后来呢后来呢我也尝试过一些专用的软件对吧我不知道大家有没有用过啊就专门有一些对管理你的用户密密码呀那些软件

545
1:09:28.640 --> 1:09:31.800
那和有时候你发现你那个专业软件的密码你忘了

546
1:09:33.200 --> 1:09:37.240
对这又是一个比较比较搞笑的事情对那现在其实

547
1:09:37.720 --> 1:09:50.320
这这方面的问题其实也会也会比较比较常见对就现在的系统更多对不对嗯而且现在的很多系统呢又和你的一些嗯装备

548
1:09:51.280 --> 1:09:55.720
绑定包括你的手机对吧包括你的微信

549
1:09:56.440 --> 1:09:58.920
而且很多的一些一些数据啊都会打通

550
1:09:59.560 --> 1:10:03.200
对说说呢我现在其实对于我的很多平台我现在都不知道我

551
1:10:03.600 --> 1:10:11.920
我究竟一些一些密码和访问方式什么对就是我会把我的什么手机号邮箱然后呢我的微信

552
1:10:12.160 --> 1:10:16.160
然后呢或者是某些爱普的扫码我我统统用一遍

553
1:10:16.640 --> 1:10:23.200
对然后呢特别是一些不常用的对然后就就就就就就进就进去了对

554
1:10:23.640 --> 1:10:26.320
我不知道大家有没有这种感觉就是现在这种

555
1:10:27.360 --> 1:10:34.000
身份认证的机制一直是一个挺难的题对特别是这种系统

556
1:10:34.440 --> 1:10:42.440
这种萨斯服务越来越多的这样一个情况下面对但对这一点上有没有一些好的一些一些方式或者是

557
1:10:43.080 --> 1:10:46.240
从未来来看它会发展到一个什么样的一个阶段呢

558
1:10:48.560 --> 1:10:52.960
嗯我我没有好的防守我我应该都是些错误的示范

559
1:10:54.840 --> 1:11:03.200
那就就就就两类嘛一类就是说我我大概自己有大概五六种常用密码

560
1:11:04.800 --> 1:11:08.720
就是就是就是一个一个事因为因为我的密码总会就那几种

561
1:11:09.240 --> 1:11:13.480
当然每一种大概就是呃八九位到十十位的样子

562
1:11:14.200 --> 1:11:21.040
然后呢呃我现在我开始猜表违的密码对不用不用不用猜不用猜谢谢不用猜

563
1:11:21.920 --> 1:11:24.360
我我是我知道这是一个错误的示范吗

564
1:11:24.640 --> 1:11:32.560
我接着示范下去然后呢我一般就是呃常用的就是三种四种我就试一试看看哪种对

565
1:11:33.560 --> 1:11:40.720
然后呢就用用那个比如说免登录以后就不用登录了嗯那就很长一段时间我就不用去记密码了

566
1:11:41.440 --> 1:11:45.040
这是一种还有一种的就是用这种微信啊微博啊

567
1:11:46.000 --> 1:11:47.880
红色哈布呀这种欧奥斯登录

568
1:11:48.640 --> 1:11:55.080
嗯就第三方授权对第三方授权那这样的话呢我记密码的数量就会缩减到比如说红色哈布的

569
1:11:55.920 --> 1:11:58.880
欧奥斯的这种这种账号上来你说是

570
1:11:59.800 --> 1:12:06.800
再接下来呢我还是很喜欢手机手机号登录那只要手机号登录了他永远可以找回密码所以呢忘了就忘了

571
1:12:08.000 --> 1:12:15.240
所以所以其实我的本质就是没有没有特别好的密码管理只不过就是减少自己的记忆的数量

572
1:12:16.080 --> 1:12:18.360
然后然后基本上嗯

573
1:12:19.360 --> 1:12:25.640
有时候还是会忘忘了要重测密码再回到这个再回到一个我常用的密码当中的某一个上述

574
1:12:26.080 --> 1:12:29.920
然后有时候就会告诉我说这个密码就是你上次改的密码我说哦好吧我想起来了

575
1:12:31.400 --> 1:12:40.760
嗯也也有这种情况一样的这真的是很像啊对所以都是些错误的示范不不足以不足以作为不足以作为这个经验

576
1:12:41.760 --> 1:12:44.560
嗯这事儿确实挺难的

577
1:12:45.080 --> 1:12:49.200
就它确实是一个比较复杂的问题但是我觉得现在的趋势啊

578
1:12:50.640 --> 1:12:59.160
可能我们要分分两个大的领域来考虑这个事情一个是个人使用一个是企业或者商商商业使用

579
1:13:00.040 --> 1:13:04.640
就个人使用密码呢其实现在的趋势就是其实就是老庄那个趋势

580
1:13:05.480 --> 1:13:08.600
嗯嗯就是忘掉他就忘掉他了无所谓了

581
1:13:09.600 --> 1:13:14.880
因为很多的厂商花了很多的精力最后发现仍然解决不了这个问题

582
1:13:15.600 --> 1:13:24.520
人的本性就是怕麻烦的所以最终就是绑定到一个呃能够唯一确认你身份的工具上

583
1:13:25.160 --> 1:13:30.400
然后密码忘了或者丢了那就丢了吧重新回到那个工具上去验证

584
1:13:30.920 --> 1:13:35.520
这个工具最早的是电子邮箱现在呢是手机号码

585
1:13:36.960 --> 1:13:40.560
而再到更根本的其实就是你的身份证

586
1:13:41.560 --> 1:13:43.560
因为现在的手机号码是绑定到身份证的

587
1:13:45.000 --> 1:13:52.800
比如你的手机号码被人盗用了你怎么去拿回它来很简单你去你的这个运营商那里出示你的身份证你就能够拿回属于你的手机号码

588
1:13:53.800 --> 1:14:02.200
所以最终他是绑定到你的身份证了那这样的话呢你就可以这么理解就是假设你用手机号码来重置或者取回密码

589
1:14:02.800 --> 1:14:07.800
其实现在没有取回密码因为取回密码是一个不安全的一个设计本质都是重置密码

590
1:14:08.800 --> 1:14:15.200
就是你用你的这个手机号码去重置密码实际上相当于就是你用你的身份证去重置了你的你的密码

591
1:14:15.200 --> 1:14:23.600
所以这个逻辑呢现在变成是主流的了以前其实有很多人花了很多的精力去想各种办法

592
1:14:24.200 --> 1:14:30.600
拿个小本本记呀或者有电子的手段去记呀比如说著名的这个弯帕斯沃尔这个工具

593
1:14:32.200 --> 1:14:39.600
弯帕斯沃尔这个工具就是他他帮你记录所有的密码他甚至可以帮你生成各种各样非常奇怪的根本不可能记得的密码

594
1:14:40.200 --> 1:14:43.600
然后再需要他自动帮你找出来填上去他是做这样的一件事情的

595
1:14:43.600 --> 1:14:49.000
那这个东西的问题就在于如果我弯帕斯沃尔的无法访问了怎么办

596
1:14:50.600 --> 1:15:03.000
可能是我把那个马斯特帕沃尔那个那个那个主密码忘记了也可能是弯帕斯沃我举个极端例子比如说弯帕斯沃尔的说他不为中国用户提供服务了突然有一天你咋办

597
1:15:04.600 --> 1:15:07.000
这个时候你会觉得我还不如把它记在本面上呢

598
1:15:08.000 --> 1:15:18.400
所以所有的这类服务他只是把风险集中起来然后你要去信任这个集中起来的东西那与其这样的话我不如信任我的身份证啊

599
1:15:19.000 --> 1:15:30.400
所以现在的趋势啊就是我看到的趋势就是对个人用户来讲嗯通过身份证的这个分身啊就是你的这个手机号码来绑定你所有的安全服务

600
1:15:31.400 --> 1:15:45.800
然后你就用你的习惯性的密码了你愿意怎么记就怎么记吧丢了或者被盗了你及时的去重置就好了啊所以这个反而变成了一个虽然不完美但是最实用的方案了

601
1:15:46.400 --> 1:15:53.000
所以我觉得没啥现在其实就这么干了我本来我本来还有点羞愧的我现在就反而放心了

602
1:15:53.000 --> 1:16:05.400
对就是索尔街都这样标准化操作你你你指望一个人他就像那些安全专家所提议的说你每周每两周要修改一次你的重要的密码

603
1:16:06.000 --> 1:16:21.000
这个密码必须完全不同而且这个密码必须大小写数字和标点符号都得有然后还不能跟你的名字不能跟你的亲人的名字你你的爱人的名字然后你的出生生日什么不能跟这东西一一致

604
1:16:21.000 --> 1:16:35.000
那其实这个对吧道理我都懂但是为什么要这么好对对这些道理我们从入行第一天开始就知道而且甚至我还给人讲过这种课但是我自己就是不高兴这么干

605
1:16:36.000 --> 1:16:50.000
是吧这就是人啊这就是人这就不是电脑的所所以我觉得现在我们走向这条路我认为是一条正确的路而且从好多年以前大概起码是呃五到十年以前

606
1:16:50.000 --> 1:17:00.000
比较正确的信息系统的设计方法就是你要假定用户会经常的忘记密码然后以此为基础来设计的信息系统

607
1:17:01.000 --> 1:17:11.000
所以像我我们原来设计系统的时候最重要的服务比如设计钱的绝对不能只是账户密码登录就能使用一定不可以

608
1:17:11.000 --> 1:17:23.000
你一定要有另一层的这个机制比如说就是必须发手机印证码你才能动钱啊然后就是要把用户的这个密码的重置要设计得非常方便

609
1:17:23.000 --> 1:17:53.000
如果你做不到这些的话其实你就是一个不称职的信息系统你对人性了解不足啊你过于理想化了就这么回事但是在十几年以前不是这样的十几年以前那丢了密码就你自己负责现在已经不是这样了现在一个称职的产品经理不可以这样想所以我觉得这是时代的进步啊我我认为挺挺好的好那第二个领域关于商用的那就不一样了因为商业性的它意味着什么呢意味着

610
1:17:53.000 --> 1:18:23.000
可能因为小的这个失误会导致大量的无辜的人受到损失那这个是要负法律责任的所以所以这一块呢那就得有很多其他的东西要做了比如我举个例子哈就是现在大家经常会碰到的这个所谓的两部认证就是我先要用户名密码登录然后我还要输一个token一个专门的设备或者一个专门的手机APP发给我的一串验证码我才能登录

611
1:18:23.000 --> 1:18:53.000
这个叫two pass就是两部登录这个两部登录其实就是非常高的安全级别了因为它很难被就是偷密码去去访问了那这个东西其实最早就是游戏行业做的网游行业做的我跟表伟以前待过的那家公司啊曾经是国内最大的网游的公司那那家公司就我们当时上班的时候就会每个人发一个token一个一个小小的令牌

612
1:18:53.000 --> 1:19:23.000
那个令牌就是你按一下按钮会出现一个六位数字你就输入这个六位数字你就可以登录这个当时很多公司还没有采用但是我们已经在用了就是因为网游是最早开始用这套东西来保护那些游戏玩家的资产的因为那网游其实一个账号很值钱啊嗯它可能是一个大老板在里面投了几百万的一个账号那这玩意丢了人不跟你拼命啊

613
1:19:23.000 --> 1:19:53.000
就有这么一个token去保护的那后面这些东西越来越普遍了然后智能手机时代有的时候就不发这个硬件的这个token了直接做一个APP就可以了你像现在给他就可以用那个微软的那个token的那个APP我不知道你们用过没有就就就给他那个两步登录用的是微软的一个通用的一个token生成的东西对我们用过对所以所以这个东西呢我觉得就属于是嗯就企业级的保护需要去考虑的一些问题那越网

614
1:19:53.000 --> 1:20:01.360
上集中话题越高那个保护就得越越强一些啊到后面甚至可能不是一个人了是几个人的token才能开启一个功能

615
1:20:02.640 --> 1:20:21.520
所以我觉得嗯这个问题吧就是普通的民众自己个人的东西啊你你你自己方便就好啊不涉及钱的你就电话号码找回就行了涉及钱的尽量用两步登录啊这个

616
1:20:22.080 --> 1:20:32.760
嗯保护好自己的资产财产就行了但是如果你是企业里面的用户或者是这个企业设计信息系统的那那你就可能要考虑问题会多一些

617
1:20:33.480 --> 1:20:49.880
其实由此可以看出日本那边的这个政府的信息安全可能是非常糟糕的一种状态对对这个案例我觉得嗯虽然我们也可能会有问题哈但是这种级别的还是少

618
1:20:50.480 --> 1:20:56.560
是总觉得漏洞百出的样子这这得多少问题累积在一起才会是这样一个案例出来

619
1:20:57.160 --> 1:21:00.720
对尤其是那个道歉会真是玩笑是

620
1:21:02.320 --> 1:21:09.640
好的呀非常非常有趣的故事啊而且背后的这些技术我觉得还是非常有启发的

621
1:21:11.800 --> 1:21:17.280
好呀那我们今天差不多也聊了一个多小时了大家看还有没有其他话题啊

622
1:21:18.280 --> 1:21:26.680
对今天的几个话题我觉得呃咱们这个呃听众如果有什么进一步的问题

623
1:21:26.720 --> 1:21:32.000
比如尤其是像后面这个关于密码这个事情这我估计所有的人都会有那个

624
1:21:32.520 --> 1:21:41.600
切身的体会的也欢迎跟我们分享呃我们这个节目是每周的周日啊在这个必战首发的

625
1:21:41.960 --> 1:21:50.640
呃然后在其他的这个podcast和音频的节目里面可以访问啊欢迎大家去订阅也欢迎大家给我们留言

626
1:21:53.200 --> 1:21:55.000
好那要不今天我们就到这里

627
1:21:55.800 --> 1:21:58.680
好好看好拜拜拜拜

