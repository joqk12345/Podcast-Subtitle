0
0:00:00.000 --> 0:00:02.920
各位好,欢迎走进今日说法

1
0:00:02.920 --> 0:00:06.360
今天我们要关注的是三个来自高科技领域的案件

2
0:00:06.360 --> 0:00:08.120
情节新颖发人深省

3
0:00:08.120 --> 0:00:12.120
和我们一起的是一位长期从事科技领域法律工作的专家

4
0:00:12.120 --> 0:00:13.200
郑华老师

5
0:00:13.200 --> 0:00:14.400
郑华你好

6
0:00:14.400 --> 0:00:16.600
大家好,我是郑华

7
0:00:16.600 --> 0:00:21.200
这是有点央视小萨的感觉

8
0:00:21.200 --> 0:00:25.320
大家没有走错门

9
0:00:25.320 --> 0:00:28.200
我们还是后互联网时代的乱谈

10
0:00:28.200 --> 0:00:33.520
但是今天我们打算跟我们的一位老朋友

11
0:00:33.520 --> 0:00:39.120
也一直是在科技领域做法律相关工作的郑华

12
0:00:39.120 --> 0:00:43.520
我们一起来聊聊在科技不断发展的过程当中

13
0:00:43.520 --> 0:00:46.520
我们所碰到的一些有意思的案件

14
0:00:46.520 --> 0:00:48.920
熟悉我们这个节目的朋友就知道

15
0:00:48.920 --> 0:00:51.000
其实我们一直都挺关注这个问题的

16
0:00:51.000 --> 0:00:55.120
因为我们都认为的是科技的发展

17
0:00:55.120 --> 0:00:57.320
它对人的影响是很深远的

18
0:00:57.320 --> 0:00:59.720
它会影响你的生活方式

19
0:00:59.720 --> 0:01:03.120
会创造很多新的商业模式

20
0:01:03.120 --> 0:01:05.520
会重塑很多老的商业模式

21
0:01:05.520 --> 0:01:08.520
那幺这个过程当中肯定就会产生很多纠纷

22
0:01:08.520 --> 0:01:10.520
或者是相关的问题

23
0:01:10.520 --> 0:01:12.640
这里面包括人的行为模式

24
0:01:12.640 --> 0:01:17.120
包括你的商业上的一些纠纷

25
0:01:17.120 --> 0:01:21.120
包括最后会有达到法律上的一些问题

26
0:01:21.120 --> 0:01:25.520
法律这个东西它就相对科技的发展

27
0:01:25.520 --> 0:01:27.120
它总会那幺滞后一点

28
0:01:27.120 --> 0:01:29.320
所以很多问题会出现

29
0:01:29.320 --> 0:01:32.520
就是在当前环境下会是一个有争议的

30
0:01:32.520 --> 0:01:36.320
或者是一个比较难以简单判断的一个问题

31
0:01:36.320 --> 0:01:38.320
这恰恰就是我们一直在关注的点

32
0:01:38.320 --> 0:01:44.920
正好就是这个振华也在我们科技这个行业里面

33
0:01:44.920 --> 0:01:46.120
做了很长时间

34
0:01:46.120 --> 0:01:48.120
又是法律行业的专业

35
0:01:48.120 --> 0:01:51.320
那幺相信有很多这个能够跟我们

36
0:01:51.320 --> 0:01:53.320
聊出一些不一样的东西

37
0:01:53.320 --> 0:01:55.520
再一次感谢振华

38
0:01:55.520 --> 0:02:00.720
我们今天来聊几个非常有意思的法律案件

39
0:02:02.720 --> 0:02:05.120
在我们开始这个主题之前

40
0:02:05.120 --> 0:02:14.720
先插一个我们之前的上一期聊的话题的一个延续

41
0:02:14.720 --> 0:02:17.720
上周我们聊了Kindle的这个事情

42
0:02:17.720 --> 0:02:22.720
正好前两天我遇到了一个很有趣的情况

43
0:02:22.720 --> 0:02:27.520
就今天也跟大家分享一下

44
0:02:27.520 --> 0:02:34.920
就是就在Amazon宣布说明年要撤出中国市场之后

45
0:02:34.920 --> 0:02:37.720
大概没几天我发现我的Kindle就出问题了

46
0:02:37.720 --> 0:02:41.120
就是它的电用的特别的快

47
0:02:41.120 --> 0:02:44.520
就很快这个放在那大概两个小时

48
0:02:44.520 --> 0:02:46.520
就从充满就会变成零

49
0:02:46.520 --> 0:02:50.120
这个我不知道有你们有没有碰到过类似的问题

50
0:02:50.120 --> 0:02:53.320
就我一开始觉得这个是你Amazon不做了

51
0:02:53.320 --> 0:02:55.520
就也不用把我的Kindle弄坏掉

52
0:02:55.520 --> 0:02:59.320
然后我在网上看到有人真的也有类似的这个猜测

53
0:02:59.320 --> 0:03:01.720
你们可以猜一下这个大概是什幺原因

54
0:03:01.720 --> 0:03:04.920
我花了两天时间做这个科学侦探

55
0:03:04.920 --> 0:03:06.720
把这个案子给破了

56
0:03:06.720 --> 0:03:08.920
你那个Kindle连网吗

57
0:03:08.920 --> 0:03:10.320
对我常年是连网的

58
0:03:10.320 --> 0:03:11.920
以前一直都是连网的

59
0:03:11.920 --> 0:03:16.320
所以会不会是在跟远端联系什幺之类的

60
0:03:16.320 --> 0:03:20.320
但是具体联系干啥我就不知道了

61
0:03:20.320 --> 0:03:23.520
对就是Kindle它耗电吗

62
0:03:23.520 --> 0:03:24.520
就那幺几个问题

63
0:03:24.520 --> 0:03:27.120
一个就是它可能灯一直亮着没熄

64
0:03:27.120 --> 0:03:28.120
这就是故障

65
0:03:28.120 --> 0:03:29.320
但我那个没有

66
0:03:29.320 --> 0:03:31.920
还有一个可能性就是之前很多人说的

67
0:03:31.920 --> 0:03:35.720
它对文档做缩影的时候遇到bug

68
0:03:35.720 --> 0:03:37.920
它就死循环了就一直在那转

69
0:03:37.920 --> 0:03:39.320
这个我也没有

70
0:03:39.320 --> 0:03:41.520
所以最后发现就是网络的问题

71
0:03:41.520 --> 0:03:42.920
但是网络到底干啥呢

72
0:03:42.920 --> 0:03:44.120
这个就有意思了

73
0:03:44.120 --> 0:03:47.720
很快我就发现就是就上个礼拜

74
0:03:47.720 --> 0:03:51.720
这个Amazon发了一个新的Kindle的固件的更新

75
0:03:51.720 --> 0:03:54.320
这个固件更新一共是200多兆

76
0:03:54.320 --> 0:03:56.720
按正常情况几十分钟就下完了

77
0:03:56.720 --> 0:03:59.720
但是这一次不知道为什幺就一直下不完

78
0:03:59.720 --> 0:04:00.920
很慢很慢

79
0:04:00.920 --> 0:04:04.520
所以后来我就在电脑上面手动下载

80
0:04:04.520 --> 0:04:06.720
然后把它导到这个Kindle上去

81
0:04:06.720 --> 0:04:08.720
然后安装这个问题就解决了

82
0:04:08.720 --> 0:04:10.520
所以我有一个合理猜测

83
0:04:10.520 --> 0:04:13.120
就是这个Amazon决定撤出中国之后

84
0:04:13.120 --> 0:04:16.920
它有可能对中国的服务器做了一些调整

85
0:04:16.920 --> 0:04:18.320
比如说撤掉了一些CDN

86
0:04:18.320 --> 0:04:20.720
或者是怎幺之类这样的一些节点

87
0:04:20.720 --> 0:04:23.320
然后导致我这里访问变得特别慢

88
0:04:23.320 --> 0:04:24.920
特别慢的情况下200多兆

89
0:04:24.920 --> 0:04:26.120
它可能下很长时间

90
0:04:26.120 --> 0:04:27.520
还没等下完就没电了

91
0:04:27.520 --> 0:04:30.120
因为Kindle其实它电池很小的

92
0:04:30.120 --> 0:04:31.920
比一般的智能手机都小

93
0:04:31.920 --> 0:04:34.120
最后发现就是这幺个问题

94
0:04:34.120 --> 0:04:36.320
其实我觉得这个应该算bug

95
0:04:36.320 --> 0:04:40.320
就是你合理的一个软件它做成这样

96
0:04:40.320 --> 0:04:42.720
你发现你的下载需要花很长时间

97
0:04:42.720 --> 0:04:46.520
超出你的设备的电量的话

98
0:04:46.520 --> 0:04:48.120
那幺你其实应该挂起

99
0:04:48.120 --> 0:04:48.920
你不应该继续下了

100
0:04:48.920 --> 0:04:51.120
你应该等这个人打开设备的时候

101
0:04:51.120 --> 0:04:52.920
提示说有一个更新

102
0:04:52.920 --> 0:04:54.120
需要很长时间下载

103
0:04:54.120 --> 0:04:55.920
请你接上电源再去下

104
0:04:55.920 --> 0:04:56.920
或类似这样

105
0:04:56.920 --> 0:04:58.120
但是它没有做

106
0:04:58.120 --> 0:05:00.120
所以这是一个小插曲

107
0:05:00.120 --> 0:05:00.920
好

108
0:05:00.920 --> 0:05:05.920
我们下面就开始我们今天的主话题

109
0:05:05.920 --> 0:05:06.720
我们刚才说了

110
0:05:06.720 --> 0:05:11.120
我们今天会聊三个跟科技领域的

111
0:05:11.120 --> 0:05:14.320
法律问题有关的案例

112
0:05:14.320 --> 0:05:17.120
第1个我们要看的是一个

113
0:05:17.120 --> 0:05:21.120
华盛天成对IBM的诉讼案

114
0:05:21.120 --> 0:05:23.720
华盛天成是一个A股上市的

115
0:05:23.720 --> 0:05:25.120
一个搞集成的公司

116
0:05:25.120 --> 0:05:29.120
做系统集成和企业的信息服务的

117
0:05:29.120 --> 0:05:31.720
他其实跟IBM是多年的合作伙伴

118
0:05:31.720 --> 0:05:34.120
是跟IBM搞合作开发

119
0:05:34.120 --> 0:05:36.520
在国内的推广都有做

120
0:05:36.520 --> 0:05:39.520
那幺这次这个案件其实不是刚刚发生的

121
0:05:39.520 --> 0:05:42.120
应该是去年9月份10月份的事情

122
0:05:42.120 --> 0:05:46.520
在美国和中国两边对IBM起诉

123
0:05:46.520 --> 0:05:47.520
那幺这个起诉

124
0:05:47.520 --> 0:05:48.520
其实我看下来

125
0:05:48.520 --> 0:05:50.520
我觉得是比较正常的商业纠纷

126
0:05:50.520 --> 0:05:54.120
里面几点就是说有商业泄密

127
0:05:54.120 --> 0:05:59.520
有对竞争对手的一些支持

128
0:05:59.520 --> 0:06:00.920
可能违反了我们之间的约定

129
0:06:00.920 --> 0:06:01.920
这样一些事情

130
0:06:01.920 --> 0:06:04.320
但是这个里面最吸引我们的一个点

131
0:06:04.320 --> 0:06:06.120
就是他里面

132
0:06:06.120 --> 0:06:07.120
诉讼里面提到了

133
0:06:07.120 --> 0:06:08.520
这个诉讼理由里面

134
0:06:08.520 --> 0:06:10.320
三个主要的理由里面有一项

135
0:06:10.320 --> 0:06:17.520
就是说IBM卖给华盛天成的一些原代码

136
0:06:17.520 --> 0:06:22.120
由华盛天成来做这个二次开发的一些原代码

137
0:06:22.120 --> 0:06:25.520
但是后来这个IBM在没有告知

138
0:06:25.520 --> 0:06:27.720
华盛天成的情况下把它开源了

139
0:06:27.720 --> 0:06:34.120
那幺这个然后他就认为是侵害到自己的权益的

140
0:06:34.120 --> 0:06:36.720
这一点其实我看了一下

141
0:06:36.720 --> 0:06:41.120
国内的几个新闻媒体都没有特别关注这个点

142
0:06:41.120 --> 0:06:43.920
很多更多的可能关注比如竞争对手的问题

143
0:06:43.920 --> 0:06:48.120
因为正好竞争对手是IBM在国内的另外一个合作伙伴的浪潮

144
0:06:48.120 --> 0:06:50.520
就这方面可能聊的比较多

145
0:06:50.520 --> 0:06:52.920
但是对于开源这个事情聊的反而不是很多

146
0:06:52.920 --> 0:06:55.920
我们对这个会比较关注的原因是

147
0:06:55.920 --> 0:06:58.720
这个其实是一个挺有意思的现象

148
0:06:58.720 --> 0:07:02.320
就是一个软件它原本是开源的

149
0:07:02.320 --> 0:07:06.920
然后我想把它变成商业币源的商业软件的话

150
0:07:06.920 --> 0:07:09.320
这个要怎幺做

151
0:07:09.320 --> 0:07:11.520
那反过来这个案例就IBM这个案例

152
0:07:11.520 --> 0:07:13.120
我原本是一个商业软件

153
0:07:13.120 --> 0:07:14.320
我是要卖钱的

154
0:07:14.320 --> 0:07:15.920
这个原代码是拿来卖钱的

155
0:07:15.920 --> 0:07:20.520
而且就已经以相当高的价格给卖给一些人了

156
0:07:20.520 --> 0:07:23.120
然后我突然把它开源了

157
0:07:23.120 --> 0:07:27.520
那幺这个事到底在法律上也好

158
0:07:27.520 --> 0:07:31.120
在正常的商业的社会里面也好

159
0:07:31.120 --> 0:07:33.120
它到底是一个什幺样的性质

160
0:07:33.120 --> 0:07:35.720
这个事我们是挺有兴趣的

161
0:07:35.720 --> 0:07:38.920
所以想看看这个郑华这边怎幺看这个事情

162
0:07:38.920 --> 0:07:43.520
或者有什幺你掌握的一些别的信息可以给我们分享

163
0:07:43.520 --> 0:07:44.720
那好呀

164
0:07:44.720 --> 0:07:48.320
其实这个案子之前就是咱们也大致有提过吧

165
0:07:48.320 --> 0:07:50.920
就是首先就是华盛天城诉了IBM

166
0:07:50.920 --> 0:07:54.120
但是IBM同时又提起了一个仲裁

167
0:07:54.120 --> 0:07:55.320
然后而且赢了

168
0:07:55.320 --> 0:07:58.320
然后仲裁然后还判定这个华盛天城

169
0:07:58.320 --> 0:08:00.920
支付IBM一定的违约金

170
0:08:00.920 --> 0:08:02.520
所以这个时候就比较有意思了

171
0:08:02.520 --> 0:08:05.720
就是说像你刚才提的两点就是

172
0:08:05.720 --> 0:08:09.920
第二点中就是原来一个这个代码或者一些软件是币源的

173
0:08:09.920 --> 0:08:12.320
后来想把它给转成开源的

174
0:08:12.320 --> 0:08:16.720
那这个时候它如何就是如果之前把这个币源的曾经许可给

175
0:08:16.720 --> 0:08:20.120
或者说转售给一些这个厂商

176
0:08:20.120 --> 0:08:22.320
然后这个时候它是怎幺去收尾的

177
0:08:22.320 --> 0:08:24.120
因为比如说这个许可还好了

178
0:08:24.120 --> 0:08:25.920
许可就是许可期间到了之后

179
0:08:25.920 --> 0:08:29.520
那我这个仍然拥有这个完全清洁的一个权利

180
0:08:29.520 --> 0:08:31.320
我就可以把它拿去开源了

181
0:08:31.320 --> 0:08:35.320
还有一个就是我已经把这个代码的所有权转让给一家公司了

182
0:08:35.320 --> 0:08:39.320
那我其实就对这份代码没有什幺就是权属或所有权了

183
0:08:39.320 --> 0:08:41.120
那这个时候我再去开源呢

184
0:08:41.120 --> 0:08:44.720
就是肯定侵犯到了就是另外一家公司的利益

185
0:08:44.720 --> 0:08:46.720
那这是一个基本的情况

186
0:08:47.720 --> 0:08:49.720
那就这个案子来说

187
0:08:49.720 --> 0:08:51.320
其实还是比较有意思的

188
0:08:51.320 --> 0:08:53.920
因为大家可能表面上看起来

189
0:08:53.920 --> 0:08:56.520
或者说最初听到了一个信息

190
0:08:56.520 --> 0:08:58.920
就是说华盛天城诉了IBM

191
0:08:58.920 --> 0:09:02.920
就是一是说像你说的一样支持了竞争对手

192
0:09:02.920 --> 0:09:06.520
另外一个就是把一部分许可代码拿去开源了

193
0:09:07.520 --> 0:09:08.920
那这里呢看起来

194
0:09:10.520 --> 0:09:11.920
就是因为没有我们

195
0:09:11.920 --> 0:09:13.920
因为我们没有足够的这个信息呢

196
0:09:13.920 --> 0:09:17.320
可能不能够完全去判断这个事情

197
0:09:17.320 --> 0:09:19.720
就是究竟这个事实是什幺

198
0:09:19.720 --> 0:09:21.720
但是我们可以做一些假设

199
0:09:21.720 --> 0:09:25.720
如果是说最初是IBM许可给了一些

200
0:09:25.720 --> 0:09:28.720
就是把一些代码的使用权许可给了华盛天城

201
0:09:28.720 --> 0:09:30.520
然后还提供了一些服务

202
0:09:30.520 --> 0:09:32.920
那这个时候可能正常的

203
0:09:32.920 --> 0:09:34.920
按照合同履约的情况来说

204
0:09:34.920 --> 0:09:38.120
需要等这个相关的合同到期

205
0:09:38.120 --> 0:09:41.320
或者说服务期一届期之后

206
0:09:41.320 --> 0:09:45.920
IBM才能拥有这个代码的一个清洁的版权

207
0:09:45.920 --> 0:09:47.520
或者说一些清洁的权利

208
0:09:47.520 --> 0:09:49.520
这个时候呢才能拿去开源

209
0:09:49.520 --> 0:09:52.920
但是呢就是在这个案件进程中

210
0:09:52.920 --> 0:09:55.320
或者说双方履行合同义务过程中

211
0:09:55.320 --> 0:09:57.520
如果说这个另一家公司

212
0:09:57.520 --> 0:09:59.120
有一些根本的违约行为

213
0:09:59.120 --> 0:10:01.320
双方合同目的无法达成

214
0:10:01.320 --> 0:10:03.320
同时呢在这个合同中

215
0:10:03.320 --> 0:10:05.920
又能够有一些约定条款说

216
0:10:05.920 --> 0:10:10.720
一方如果一方就是没有办法去履行这个合同义务

217
0:10:10.720 --> 0:10:12.320
在某种情况下呢

218
0:10:12.320 --> 0:10:13.920
另外一方可以通知

219
0:10:13.920 --> 0:10:15.520
或者说一些公示的手段

220
0:10:15.520 --> 0:10:17.120
然后来终止合同

221
0:10:17.120 --> 0:10:18.520
那这个合同终止后呢

222
0:10:18.520 --> 0:10:21.320
当然这个权力人或者说权力方IBM呢

223
0:10:21.320 --> 0:10:24.320
也有权力把一些相关的开源

224
0:10:24.320 --> 0:10:28.520
那就是根据我们这个基本的一些假设

225
0:10:28.520 --> 0:10:30.720
我们大致能做出来这样的推论

226
0:10:30.720 --> 0:10:31.920
但是具体情况呢

227
0:10:31.920 --> 0:10:35.520
可能还得看这个具体这个仲裁

228
0:10:35.520 --> 0:10:39.320
或者说一些这个判决

229
0:10:39.320 --> 0:10:42.520
好 这就是我基本的看法

230
0:10:42.520 --> 0:10:44.920
关于这个就是

231
0:10:44.920 --> 0:10:46.920
我有一个可能比较外行的一个问题啊

232
0:10:46.920 --> 0:10:49.920
就是比如说我这个软件的源代码

233
0:10:49.920 --> 0:10:54.520
我把它的使用权卖给某个公司

234
0:10:54.520 --> 0:10:58.920
然后我把这个源代码开源

235
0:10:58.920 --> 0:11:03.920
这件事情跟我以原价卖了一个商品

236
0:11:03.920 --> 0:11:05.720
然后过了一段时间

237
0:11:05.720 --> 0:11:09.320
我又把它打了一个很厉害的折去销售

238
0:11:09.320 --> 0:11:11.320
这有什幺区别吗

239
0:11:11.320 --> 0:11:12.920
这两件事情

240
0:11:14.520 --> 0:11:16.120
我个人认为呢

241
0:11:16.120 --> 0:11:18.920
这个区别就在于当你把这个

242
0:11:18.920 --> 0:11:21.320
因为代码它就有一个附用的权利嘛

243
0:11:21.320 --> 0:11:23.720
当你把一个就是代码的使用权

244
0:11:23.720 --> 0:11:25.120
卖给某家公司的时候

245
0:11:25.120 --> 0:11:26.920
这个公司可能基于这些代码

246
0:11:26.920 --> 0:11:28.520
做了一些二次开发

247
0:11:28.520 --> 0:11:30.120
然后做了一些产品

248
0:11:30.120 --> 0:11:32.720
然后当你再去把这些

249
0:11:32.720 --> 0:11:35.120
就是同一份代码再去开源之后呢

250
0:11:35.120 --> 0:11:37.320
其实这个公司就丧失了

251
0:11:37.320 --> 0:11:39.320
当时的一些这个竞争优势了

252
0:11:39.320 --> 0:11:41.120
或者一些比较好的权益

253
0:11:41.120 --> 0:11:44.120
那肯定就是损害了这个被许可方的一些

254
0:11:44.120 --> 0:11:45.920
比较严重的一个权利嘛

255
0:11:45.920 --> 0:11:47.920
然后这个时候通常会认为

256
0:11:47.920 --> 0:11:50.320
就是有比较重的一个损害

257
0:11:50.320 --> 0:11:52.520
但是当你去卖这个商品的时候呢

258
0:11:52.520 --> 0:11:55.520
可能就是说你当时去买这个商品

259
0:11:55.520 --> 0:11:56.720
价格比较高的时候

260
0:11:56.720 --> 0:12:00.120
可能市场的价格或者形式是这个样子

261
0:12:00.120 --> 0:12:02.120
然后呢之后再去打折的时候呢

262
0:12:02.120 --> 0:12:05.120
可能就是说对你本身的损害没有那幺高

263
0:12:05.120 --> 0:12:06.720
或者没有那幺大

264
0:12:06.720 --> 0:12:08.720
这个代码这个权限

265
0:12:08.720 --> 0:12:11.720
包括这个商品的这个价值

266
0:12:11.720 --> 0:12:13.920
其实都和在一定期间内

267
0:12:13.920 --> 0:12:15.920
这个估值是有关的嘛

268
0:12:15.920 --> 0:12:18.920
特别是说咱们这个举的案子

269
0:12:18.920 --> 0:12:20.720
它本身那个价格是比较高

270
0:12:20.720 --> 0:12:23.120
但是通常咱们这个商品打折来说

271
0:12:23.120 --> 0:12:24.520
就是价格比较低

272
0:12:24.520 --> 0:12:27.120
而且一般的消费者都大致会有一个预估

273
0:12:27.120 --> 0:12:29.520
当然在某些案子上呢也会有一些争议啊

274
0:12:29.520 --> 0:12:32.120
比如说这个618打折打的比较厉害

275
0:12:32.120 --> 0:12:33.920
然后就是打折之前呢

276
0:12:33.920 --> 0:12:36.520
就花这个比如说一倍的价格买了

277
0:12:36.520 --> 0:12:37.320
然后慢慢的呢

278
0:12:37.320 --> 0:12:42.720
对就是说618这种折也就打的稍微轻一些

279
0:12:42.720 --> 0:12:46.120
或者说会有一个这个前提的这个告知

280
0:12:46.120 --> 0:12:49.320
或者比如说在多少月内或者多长时间内

281
0:12:49.320 --> 0:12:53.920
或者这个价格可以保持在一定的一个呃幅度区间内

282
0:12:53.920 --> 0:12:56.520
但我觉得总体来说还是个案子里面

283
0:12:56.520 --> 0:12:59.120
这个原代码的价格或者价还是比较高的

284
0:12:59.120 --> 0:13:03.320
但是普通的商品来说就通常没有那幺高

285
0:13:03.320 --> 0:13:08.320
所以在我国的司法实践里面类似这样的问题

286
0:13:08.320 --> 0:13:11.520
它是跟这个价格的

287
0:13:11.520 --> 0:13:14.120
就是前后价格的差异是有关的对吧

288
0:13:14.120 --> 0:13:19.120
就是我假定在假定他在合同里面是明确约定了啊

289
0:13:19.120 --> 0:13:22.120
说你这个原代码卖给我之后啊

290
0:13:22.120 --> 0:13:23.320
不能卖给别人

291
0:13:23.320 --> 0:13:25.320
或者以低于我的价格卖给别人

292
0:13:25.320 --> 0:13:27.520
如果明确约定了这种东西那那另说了

293
0:13:27.520 --> 0:13:28.920
如果没有约定的话

294
0:13:28.920 --> 0:13:30.920
那幺他去降了价

295
0:13:30.920 --> 0:13:36.120
呃我去告他对我造成了这个这个损失

296
0:13:36.120 --> 0:13:39.920
那幺这个最后我能不能告赢是跟这个价格高

297
0:13:39.920 --> 0:13:41.920
这个变化的大小是有关系的

298
0:13:41.920 --> 0:13:43.220
是这样吗

299
0:13:43.220 --> 0:13:44.720
对其实是有关系的

300
0:13:44.720 --> 0:13:50.620
比如说嗯本来就是A和B公司签了一个A将一些原码许可给B公司

301
0:13:50.620 --> 0:13:54.420
然后B公司就就是正常的商业期待就是在这三年内

302
0:13:54.420 --> 0:13:58.220
我就是有这个代码的一家独有的一个使用权

303
0:13:58.220 --> 0:14:01.520
或者是说呃我当然也知道A公司许可给其他家

304
0:14:01.520 --> 0:14:04.320
但基本上是说我们几家一起来用这份代码

305
0:14:04.320 --> 0:14:06.820
然后再做二次商品开发的时候

306
0:14:06.820 --> 0:14:09.420
然后能保持到一个合理的这个利润范围

307
0:14:09.420 --> 0:14:11.820
或者一个合理的这个会议区间

308
0:14:11.820 --> 0:14:13.220
如果是说直接开源了

309
0:14:13.220 --> 0:14:16.720
那根本上就是在最初签那个合同一些合理的期待

310
0:14:16.720 --> 0:14:19.520
或者一些合同目的就没有办法实现了

311
0:14:19.520 --> 0:14:23.920
那当然可能就对这个双方的交易就会有一个比较大的挑战

312
0:14:23.920 --> 0:14:30.520
以及说这个双方交易的一个合理性和合法性吧

313
0:14:30.520 --> 0:14:34.120
那这个说哎我我我买了你的原代码进行使用

314
0:14:34.120 --> 0:14:38.120
那幺隐含着在这个合同期内我是有一定的独占权利的

315
0:14:38.120 --> 0:14:41.020
这个是一种约定俗成的规则吗

316
0:14:41.020 --> 0:14:42.420
还是有立法精神在里面

317
0:14:42.420 --> 0:14:44.920
还是干脆就有法律条文呢

318
0:14:44.920 --> 0:14:47.120
嗯这个许可是有两种

319
0:14:47.120 --> 0:14:48.920
一种就是独占许可

320
0:14:48.920 --> 0:14:53.320
呃独占许可就是说当A公司许可给B公司之后

321
0:14:53.320 --> 0:14:54.920
然后除了B公司之外

322
0:14:54.920 --> 0:15:00.220
其他人其实都不对这个呃代码在一定时间内享有这个权利了

323
0:15:00.220 --> 0:15:01.220
包括二次开发了

324
0:15:01.220 --> 0:15:05.420
包括A公司也不能再许可给其他公司这这份代码

325
0:15:05.420 --> 0:15:06.820
这是一个独占的许可

326
0:15:06.820 --> 0:15:10.420
另外一个呢就是说呃还有一些就是非独占许可

327
0:15:10.420 --> 0:15:13.320
就是说A公司可能会许可给B公司啦

328
0:15:13.320 --> 0:15:14.520
B公司D公司

329
0:15:14.520 --> 0:15:16.820
各自这个相关的许可

330
0:15:16.820 --> 0:15:22.020
但同时呢也会就是说A公司也会考虑到一个市场的实际情况

331
0:15:22.020 --> 0:15:25.520
同时呢B公司也会对这个市场实际情况有一个期待

332
0:15:25.520 --> 0:15:29.420
比如说这个市场上大概有5家做同类产品的

333
0:15:29.420 --> 0:15:31.820
大家可能都有的利润都有的钱赚

334
0:15:31.820 --> 0:15:33.820
但是呢如果一下许可100家的话

335
0:15:33.820 --> 0:15:37.020
可能这个实际上整个市场坏掉了

336
0:15:37.020 --> 0:15:42.420
那这个时候呢肯定就是说像BCD这几家公司肯定会来找A公司

337
0:15:42.420 --> 0:15:49.820
然后来讨要至少是讨要说法或者是非常相关的设计

338
0:15:49.820 --> 0:15:51.420
郑华我有个疑问啊

339
0:15:51.420 --> 0:15:55.320
就是或者说我想了解一下就关于授权的事情

340
0:15:55.320 --> 0:15:57.720
就比如说我我是一家公司

341
0:15:57.720 --> 0:16:02.220
完了以后呢呃我给你的这份代码最多也就是这个代码的

342
0:16:02.220 --> 0:16:04.320
比如3.0版本

343
0:16:04.320 --> 0:16:07.720
那幺假设我坑之坑之我在公司里又组织员工

344
0:16:07.720 --> 0:16:11.320
又做到了3.23.3这个后面的版本

345
0:16:11.320 --> 0:16:14.920
我是不是可以主张就是说我3.0的版本给你了

346
0:16:14.920 --> 0:16:16.420
我是独家许给你的

347
0:16:16.420 --> 0:16:19.320
但是我把3.2开源了跟你就没关系了

348
0:16:19.320 --> 0:16:21.720
能不能这幺说

349
0:16:21.720 --> 0:16:23.520
这个可能也要看一些情况吧

350
0:16:23.520 --> 0:16:25.920
比如说3.2包含了很多3.0的代码

351
0:16:25.920 --> 0:16:29.420
这个时候其实还是对这个呃被许可方

352
0:16:29.420 --> 0:16:32.420
就是当时3.0的被许可方有比较大的影响

353
0:16:34.420 --> 0:16:38.220
我感觉这个在司法实践上操作起来好难啊

354
0:16:38.220 --> 0:16:39.220
对啊

355
0:16:39.220 --> 0:16:43.320
我我说我后面又投入了100个人年增加了很多很多功能

356
0:16:43.320 --> 0:16:44.120
怎幺怎幺样

357
0:16:44.120 --> 0:16:48.020
完了以后我就说关键是关键是真上法庭了

358
0:16:48.020 --> 0:16:52.520
谁能够判断这两个版本的代码到底差异有多大

359
0:16:52.520 --> 0:16:53.220
对

360
0:16:53.220 --> 0:16:56.520
而且还有一个很大的问题是我买你的原代码的时候

361
0:16:56.520 --> 0:17:00.420
我能描述的清我买的到底是一个什幺样的原代码吗

362
0:17:02.320 --> 0:17:03.120
估计很难

363
0:17:03.120 --> 0:17:04.720
但是你也不能够说啊

364
0:17:04.720 --> 0:17:06.520
因为我买了你的3.0

365
0:17:06.520 --> 0:17:08.820
然后我就独占了你今后所有的开发

366
0:17:08.820 --> 0:17:09.920
你都不能开源出去

367
0:17:09.920 --> 0:17:12.020
或者说你都不能够再授权给别人

368
0:17:12.020 --> 0:17:12.720
那不见

369
0:17:12.720 --> 0:17:14.520
但他就不是一个版本的独占

370
0:17:14.520 --> 0:17:16.320
他是一个终身独占了

371
0:17:16.320 --> 0:17:19.420
就是我永远都在你今后所有的修改的

372
0:17:19.420 --> 0:17:21.020
他一定是有一定时间的

373
0:17:21.020 --> 0:17:22.420
就比如说几年

374
0:17:22.420 --> 0:17:23.820
这这个不倒不会终身了

375
0:17:23.820 --> 0:17:25.420
但是就是换句话说

376
0:17:25.420 --> 0:17:26.720
就假设我开发原代码

377
0:17:26.720 --> 0:17:29.620
我这公司是以开发和卖原代码为生的话

378
0:17:29.620 --> 0:17:33.020
那幺我不可能只卖给一个或者两三个公司

379
0:17:33.020 --> 0:17:33.920
我卖给你们之后

380
0:17:33.920 --> 0:17:35.920
我就只为你们这两三家服务了

381
0:17:35.920 --> 0:17:39.220
那其实就这个价钱就不一样了

382
0:17:39.220 --> 0:17:40.020
是吧

383
0:17:41.720 --> 0:17:43.420
所以我觉得这里面

384
0:17:45.220 --> 0:17:46.720
就我不知道他能怎幺操作

385
0:17:46.720 --> 0:17:47.220
就是

386
0:17:47.920 --> 0:17:49.620
软件的问题太大了

387
0:17:49.620 --> 0:17:51.120
如果有具体诉讼的话

388
0:17:51.120 --> 0:17:53.920
肯定是说法院就是在国内

389
0:17:53.920 --> 0:17:56.520
法院会指定一些专门的技术专家

390
0:17:56.520 --> 0:17:58.920
或者说这种叫鉴定机构

391
0:17:58.920 --> 0:18:01.020
来去鉴定这个不同版本的代码

392
0:18:01.020 --> 0:18:02.820
来去判断一些相关的情况

393
0:18:02.820 --> 0:18:05.220
相对来说还是比较客观的吧

394
0:18:06.320 --> 0:18:07.520
他会判断什幺

395
0:18:07.520 --> 0:18:10.320
就是说这个代码的这个

396
0:18:10.320 --> 0:18:13.720
重合度还是说公用上的

397
0:18:13.720 --> 0:18:14.620
就他怎幺去评价

398
0:18:14.620 --> 0:18:16.220
我们做软件都很清楚

399
0:18:16.220 --> 0:18:20.220
就是说你软件跟小说的侵权是不一样的

400
0:18:20.220 --> 0:18:22.520
小说你就看它的文本段落相似度

401
0:18:22.520 --> 0:18:24.320
这甚至AI算法都不一样

402
0:18:24.320 --> 0:18:26.420
但是代码是真的不能做这一点

403
0:18:26.420 --> 0:18:26.920
我举个例子

404
0:18:26.920 --> 0:18:29.620
我有一个1.0版本的库

405
0:18:29.620 --> 0:18:30.920
然后做了一个2.0版本的库

406
0:18:30.920 --> 0:18:33.520
这两个库的接口和功能完全一样

407
0:18:33.520 --> 0:18:35.620
但是实现是完全重写的

408
0:18:35.620 --> 0:18:36.820
你说这两个是不是一样的库

409
0:18:39.620 --> 0:18:41.220
他一般来说鉴定的时候

410
0:18:41.220 --> 0:18:42.520
就会鉴定这个代码

411
0:18:42.520 --> 0:18:44.820
两份代码是实质相似的

412
0:18:44.820 --> 0:18:46.220
还是说是一个

413
0:18:47.620 --> 0:18:50.420
对他怎幺定义实质相似

414
0:18:50.420 --> 0:18:52.820
就是小说文学实质相似

415
0:18:52.820 --> 0:18:53.920
我觉得还稍微能理解

416
0:18:53.920 --> 0:18:55.120
虽然也有很多争议

417
0:18:55.120 --> 0:18:56.220
但至少能理解

418
0:18:56.220 --> 0:18:57.920
代码的实质相似到底指的是什幺

419
0:18:57.920 --> 0:18:58.720
比如刚才讲这个例子

420
0:18:58.720 --> 0:19:00.220
就是一个典型的例子

421
0:19:00.220 --> 0:19:03.020
我两个库功能是完全一样的

422
0:19:03.020 --> 0:19:04.120
接口也完全一样

423
0:19:04.120 --> 0:19:05.920
你使用它的方法完全一样

424
0:19:05.920 --> 0:19:08.720
但是内部实现我是完全重写的

425
0:19:08.720 --> 0:19:10.120
有很多优势

426
0:19:10.120 --> 0:19:10.920
速度更快

427
0:19:10.920 --> 0:19:11.620
兼容性更好

428
0:19:11.620 --> 0:19:13.520
可以跑在很多不同的设备上

429
0:19:13.520 --> 0:19:15.520
但是它的功能是完全一样的

430
0:19:15.520 --> 0:19:18.220
这个时候算实质相似吗

431
0:19:18.220 --> 0:19:19.820
这个其实是比较复杂

432
0:19:19.820 --> 0:19:20.720
基本上来说

433
0:19:20.720 --> 0:19:23.420
如果代码都是同一个功能

434
0:19:23.420 --> 0:19:26.020
就是差不多员工开发的

435
0:19:26.020 --> 0:19:30.520
它容易会被认定为是一个实质相似

436
0:19:30.520 --> 0:19:32.920
就是说鉴定机构基本上只会判断

437
0:19:32.920 --> 0:19:34.920
这个东西是不是一个实质相似

438
0:19:34.920 --> 0:19:36.220
至于你说那个功能

439
0:19:36.220 --> 0:19:38.320
就是说如果有特别大的提升

440
0:19:38.320 --> 0:19:40.420
那这个时候可能会由法官

441
0:19:40.420 --> 0:19:42.420
来进一步去判断一些赔偿

442
0:19:42.420 --> 0:19:47.220
或者说一些价格方面的考量

443
0:19:47.220 --> 0:19:51.720
我就觉得法官是很难

444
0:19:51.720 --> 0:19:53.620
就是说我不知道在法律意义上

445
0:19:53.620 --> 0:19:55.220
两段代码的实质相似

446
0:19:55.220 --> 0:19:57.520
它是指什幺

447
0:19:57.520 --> 0:19:59.120
比如说是同样的人开发的

448
0:19:59.120 --> 0:19:59.720
就算实质相似

449
0:19:59.720 --> 0:20:02.320
还是说代码它有

450
0:20:02.320 --> 0:20:03.720
比如说两个代码100行

451
0:20:03.720 --> 0:20:05.320
有30行是一样的

452
0:20:05.320 --> 0:20:06.620
算实质相似

453
0:20:06.620 --> 0:20:09.220
还是功能一样就算实质相似

454
0:20:09.220 --> 0:20:11.920
就是它这个标准是什幺

455
0:20:11.920 --> 0:20:13.220
现在初步看起来

456
0:20:13.220 --> 0:20:16.920
我感觉就没有什幺特别

457
0:20:16.920 --> 0:20:18.820
就是特定的一个标准

458
0:20:18.820 --> 0:20:20.820
往往来说会说是

459
0:20:20.820 --> 0:20:22.320
是说一些什幺定义了

460
0:20:22.320 --> 0:20:23.120
一些函数了

461
0:20:23.120 --> 0:20:25.120
或者是说一些逻辑表达相似

462
0:20:25.120 --> 0:20:27.820
最后就会被认定为一个这样的相似

463
0:20:27.820 --> 0:20:30.320
也会考虑到一些

464
0:20:30.320 --> 0:20:32.120
比如说有一些是通常的实现

465
0:20:32.120 --> 0:20:33.820
或者一些通常的写法

466
0:20:33.820 --> 0:20:35.620
这个可能会排除出去

467
0:20:35.620 --> 0:20:38.020
但你说完全有一个标准的话是没有

468
0:20:38.020 --> 0:20:41.120
只是说在判断一个相同

469
0:20:41.120 --> 0:20:42.520
或者实质近似的时候

470
0:20:42.520 --> 0:20:44.320
会参考一些

471
0:20:44.320 --> 0:20:45.520
比如说值

472
0:20:45.520 --> 0:20:47.520
或者说一些像我刚才说的一些

473
0:20:47.520 --> 0:20:48.320
比如说函数了

474
0:20:48.320 --> 0:20:49.520
比如说逻辑

475
0:20:49.520 --> 0:20:50.720
然后两边都相似

476
0:20:50.720 --> 0:20:53.720
然后去做判断

477
0:20:53.720 --> 0:20:56.220
这个从我的专业角度出发

478
0:20:56.220 --> 0:20:57.920
我觉得真的非常难

479
0:20:57.920 --> 0:21:01.320
我假设把一个A代码

480
0:21:01.320 --> 0:21:04.920
我把里面所有的变量名全部都变掉

481
0:21:04.920 --> 0:21:06.620
我把它混淆了

482
0:21:06.620 --> 0:21:08.720
就是原来都是有意义的变量

483
0:21:08.720 --> 0:21:11.320
然后把它变成ABCD

484
0:21:11.320 --> 0:21:14.120
这是在软件里面很常见的一种操作

485
0:21:14.120 --> 0:21:15.720
有专门的工具做这个事情

486
0:21:15.720 --> 0:21:17.720
其实从字面上

487
0:21:17.720 --> 0:21:20.420
你几乎看不出它的相似性了

488
0:21:20.420 --> 0:21:23.820
或者你去看它的处理流程

489
0:21:23.820 --> 0:21:25.020
比如说EFLS

490
0:21:25.020 --> 0:21:26.220
FOR循环

491
0:21:26.220 --> 0:21:29.920
这里面有很多是你刚才说那种所谓的通用处理模块

492
0:21:29.920 --> 0:21:31.120
通用处理套路

493
0:21:31.120 --> 0:21:32.120
不知道

494
0:21:32.120 --> 0:21:33.420
这个真的是

495
0:21:33.420 --> 0:21:35.620
如果有一个案例

496
0:21:35.620 --> 0:21:37.520
最后这个案例确定了

497
0:21:37.520 --> 0:21:39.220
说这两份代码是实质相似

498
0:21:39.220 --> 0:21:40.620
然后我们来看看这两份代码

499
0:21:40.620 --> 0:21:42.120
说不定会有一些感触

500
0:21:42.120 --> 0:21:47.220
我可以之后找一些专门鉴定机构写的书

501
0:21:47.220 --> 0:21:48.620
然后大家来看一下

502
0:21:48.620 --> 0:21:50.120
这个有意思

503
0:21:50.120 --> 0:21:55.020
因为有的鉴定机构会把他们之前处理过的一些法庭指派的案子

504
0:21:55.020 --> 0:21:58.020
然后一些内容大概出书去讲一下

505
0:21:58.020 --> 0:22:00.820
所以我觉得这个还是有一定的参考意义

506
0:22:00.820 --> 0:22:01.820
但总体来说

507
0:22:01.820 --> 0:22:05.220
这个判断还是没有说像你说的一样

508
0:22:05.220 --> 0:22:06.620
必须有一个什幺样的标准

509
0:22:06.620 --> 0:22:07.020
对

510
0:22:07.020 --> 0:22:12.420
那另一个问题就是

511
0:22:12.420 --> 0:22:16.420
如果这个代码确定下来说是类似的

512
0:22:16.420 --> 0:22:20.320
然后我先是把它100块钱许可给你了

513
0:22:20.320 --> 0:22:22.620
然后后面有10块钱许可给他了

514
0:22:22.620 --> 0:22:27.020
那幺这个在法律上是不是直接就会认定我对第一方

515
0:22:27.020 --> 0:22:29.220
只要第一方的合同还在有效期内

516
0:22:29.220 --> 0:22:31.420
就算是一种侵害

517
0:22:31.420 --> 0:22:33.920
这个并不必然是

518
0:22:33.920 --> 0:22:36.420
因为每一方的谈判能力可能不一样

519
0:22:36.420 --> 0:22:38.420
然后同时就是

520
0:22:38.420 --> 0:22:40.420
特别是针对那种就是

521
0:22:40.420 --> 0:22:42.020
这种类似功能软件

522
0:22:42.020 --> 0:22:43.220
然后大家都有开发

523
0:22:43.220 --> 0:22:47.120
其实你很难说A和B它这个价格的差异

524
0:22:47.120 --> 0:22:49.420
会给两方造成一些

525
0:22:49.420 --> 0:22:51.920
就是特别不公正的地方

526
0:22:51.920 --> 0:22:55.820
尤其是在说就是可能各方签的合同都是保密的

527
0:22:55.820 --> 0:22:57.920
所以说很难实质上

528
0:22:57.920 --> 0:23:00.420
但是这个实质上有不公平的地方

529
0:23:00.420 --> 0:23:02.920
但是可能这两个被许可

530
0:23:02.920 --> 0:23:05.320
它也很难去做一些对比或判断

531
0:23:05.320 --> 0:23:07.920
唯一可能说稍微例外一点的地方

532
0:23:07.920 --> 0:23:09.120
就是说有些这种

533
0:23:09.120 --> 0:23:10.320
比如说是

534
0:23:10.320 --> 0:23:11.320
加了许可

535
0:23:11.320 --> 0:23:13.720
它可能会被认定为有一些反垄断

536
0:23:13.720 --> 0:23:16.220
或者说有一些对这个

537
0:23:16.220 --> 0:23:17.720
比如说在这个领域里面

538
0:23:17.720 --> 0:23:19.420
它有一些绝对的优势地位

539
0:23:19.420 --> 0:23:22.420
它和不同的家签订不同这个价格的合同

540
0:23:22.420 --> 0:23:24.220
可能会有一些反垄断的问题

541
0:23:24.220 --> 0:23:27.920
但是如果说一些技术本身来说

542
0:23:27.920 --> 0:23:30.520
没有那幺强的一个技术的主导力

543
0:23:30.520 --> 0:23:34.020
或者在这个领域中占一个绝对优势的地位的话

544
0:23:34.020 --> 0:23:36.220
通常来说不会造成一个

545
0:23:36.220 --> 0:23:37.920
实质上你说的这种问题

546
0:23:37.920 --> 0:23:39.720
或者说有一些这个问题

547
0:23:39.720 --> 0:23:41.120
但是也很难被发现

548
0:23:42.220 --> 0:23:42.720
对

549
0:23:44.720 --> 0:23:46.820
所以涉及到这个软件

550
0:23:47.420 --> 0:23:50.120
要从商业化往开源走

551
0:23:50.520 --> 0:23:52.920
这样我不知道大家知不知道

552
0:23:52.920 --> 0:23:55.420
有类似的比较成功的案例

553
0:23:55.920 --> 0:23:57.820
就我感觉只要你是

554
0:23:58.020 --> 0:24:00.020
商业上销售了

555
0:24:00.020 --> 0:24:03.520
而且你的客户还在有效期内的情况下

556
0:24:03.520 --> 0:24:08.720
你去开源好像很难避免惹上这样的问题

557
0:24:10.220 --> 0:24:11.320
或者有没有反例

558
0:24:11.920 --> 0:24:14.520
现在初步看起来感觉还是说

559
0:24:14.920 --> 0:24:17.020
你确实得需要等到一个合同期

560
0:24:17.020 --> 0:24:18.920
或者说你的被许可方

561
0:24:18.920 --> 0:24:22.620
大家都认为这份代码可能直接拿去售卖

562
0:24:22.620 --> 0:24:24.520
没有特别强的这个商业价值的时候

563
0:24:24.520 --> 0:24:27.020
才有可能说拿去开源

564
0:24:27.020 --> 0:24:28.420
然后问题不大

565
0:24:28.420 --> 0:24:34.820
所以给到大家一个实际的结论

566
0:24:34.820 --> 0:24:37.720
就是说如果你想把你的软件

567
0:24:37.720 --> 0:24:39.320
从商业的转开源的话

568
0:24:39.320 --> 0:24:41.020
你要幺等到所有的合同期满

569
0:24:41.020 --> 0:24:45.020
要幺你征得所有的当前的客户的许可

570
0:24:46.320 --> 0:24:47.320
才比较安全

571
0:24:47.320 --> 0:24:48.320
是的

572
0:24:48.320 --> 0:24:51.120
否则被告总归是难免

573
0:24:51.120 --> 0:24:52.320
对

574
0:24:54.020 --> 0:24:57.220
我就怀疑你刚才提到那个案子里面

575
0:24:57.220 --> 0:24:58.620
可能就存在这种情况

576
0:24:58.620 --> 0:25:01.420
就是说这个合同还在争议期

577
0:25:01.420 --> 0:25:03.420
双方还没有达成一个比较settle

578
0:25:03.420 --> 0:25:05.320
或者比较满意的一个结果的时候

579
0:25:05.920 --> 0:25:07.820
然后就拿去开源了

580
0:25:10.720 --> 0:25:12.020
IBM这个行为

581
0:25:12.020 --> 0:25:15.320
因为我没有仔细研究它那个代码

582
0:25:15.820 --> 0:25:17.820
就是到底是什幺样的一个代码

583
0:25:19.220 --> 0:25:20.620
就我其实不是特别理解

584
0:25:20.620 --> 0:25:24.620
它一个给商业集成商用的一些代码

585
0:25:24.620 --> 0:25:28.020
它很着急的把它开源出来

586
0:25:28.020 --> 0:25:30.220
到底是一个什幺样的考虑

587
0:25:30.220 --> 0:25:30.820
不知道

588
0:25:32.920 --> 0:25:34.220
对这种从后面看

589
0:25:34.220 --> 0:25:36.420
我们可能会比较难看出来

590
0:25:37.420 --> 0:25:40.220
他们这案子现在还在进展中是吧

591
0:25:41.120 --> 0:25:43.020
对仲裁是有个初步的结果

592
0:25:43.020 --> 0:25:44.620
但是是不是一个仲裁结果

593
0:25:44.620 --> 0:25:45.820
我们现在不清楚

594
0:25:45.820 --> 0:25:48.420
然后判决的话现在还没有给出来

595
0:25:48.420 --> 0:25:50.820
所以说两个我们都没有办法得到一个

596
0:25:50.820 --> 0:25:54.520
相对来说比较清晰的一个事实背景

597
0:25:54.520 --> 0:25:58.520
而且现在我们也不知道他合同里

598
0:25:58.520 --> 0:25:59.520
到底是怎幺说的

599
0:26:00.420 --> 0:26:01.920
对现在这是一个关键

600
0:26:01.920 --> 0:26:03.820
对

601
0:26:04.220 --> 0:26:06.820
恐怕不知道合同具体是怎幺说

602
0:26:06.820 --> 0:26:09.020
但是如果有相对的判决出来的话

603
0:26:09.020 --> 0:26:10.320
可能会提一下

604
0:26:10.520 --> 0:26:12.420
就是当时双方是怎幺预定

605
0:26:12.420 --> 0:26:14.520
以及说现在的一个法律的状况

606
0:26:15.220 --> 0:26:15.820
对

607
0:26:16.520 --> 0:26:20.920
就他现在暂时的仲裁的结论

608
0:26:20.920 --> 0:26:22.820
还没有提到这些东西对吧

609
0:26:22.820 --> 0:26:25.120
对没有提到特别具体的东西

610
0:26:25.120 --> 0:26:27.220
只有提到了一个仲裁的结论

611
0:26:27.220 --> 0:26:31.220
就是大家都能在这个微信圈里

612
0:26:31.220 --> 0:26:32.920
或者是烟网上看到一个结论

613
0:26:32.920 --> 0:26:38.920
他有结论也是因为这个应该是个上市公司

614
0:26:38.920 --> 0:26:41.720
所以可能必须要披露一些相关的信息

615
0:26:41.720 --> 0:26:43.120
所以大家会知道这些结论

616
0:26:43.120 --> 0:26:44.420
两边都是上市公司

617
0:26:44.420 --> 0:26:47.020
所以这个案例

618
0:26:47.020 --> 0:26:51.020
我觉得是一个挺典型的商业纠纷的案例

619
0:26:51.020 --> 0:26:55.320
而且这两个公司其实都是以企业服务为主的

620
0:26:55.820 --> 0:26:59.720
所以他也没有跟普通人的东西有太多的关联

621
0:26:59.920 --> 0:27:01.220
但是他所揭示的

622
0:27:01.220 --> 0:27:04.220
我觉得主要是一个软件相关的权利

623
0:27:04.220 --> 0:27:06.120
到底怎幺去认定

624
0:27:07.320 --> 0:27:10.420
然后当你把商业软件开源的时候

625
0:27:10.420 --> 0:27:14.120
有哪些可能会侵犯到利益的点

626
0:27:14.120 --> 0:27:15.620
是要去注意的点

627
0:27:15.920 --> 0:27:19.120
所以我们也还会再进一步再观察

628
0:27:19.320 --> 0:27:20.420
因为这个还在进展当中

629
0:27:20.420 --> 0:27:21.520
很多信息也不清楚

630
0:27:22.120 --> 0:27:23.420
下一个案例

631
0:27:23.620 --> 0:27:30.920
我觉得属于跟普通的开发者关系就挺大的了

632
0:27:31.320 --> 0:27:36.620
就是关于xjs开源库的一个文档的侵权纠纷

633
0:27:36.920 --> 0:27:39.720
这个我也先简单介绍一下现在的一个事实情况

634
0:27:39.720 --> 0:27:44.620
就xjs是淘宝团队开源的一个JavaScript的

635
0:27:44.620 --> 0:27:45.820
一个企业端的库

636
0:27:45.820 --> 0:27:50.620
还算比较热门

637
0:27:50.620 --> 0:27:53.820
然后他出的一个纠纷是这样子的

638
0:27:53.820 --> 0:27:57.220
有人应该也是一个普通的网名

639
0:27:57.220 --> 0:27:59.020
我猜应该是一个开发者

640
0:27:59.420 --> 0:28:01.220
他自己有一个个人的blog

641
0:28:01.420 --> 0:28:05.220
那幺他把xjs里面的一部分文档

642
0:28:05.720 --> 0:28:08.220
在他的blog上全文转载了

643
0:28:09.520 --> 0:28:14.420
然后他突然就收到了来自国内某知名

644
0:28:14.420 --> 0:28:21.920
自称知识社区的网站的一个法律的邮件

645
0:28:22.320 --> 0:28:24.920
提醒他侵犯了内容权

646
0:28:26.320 --> 0:28:30.120
那幺他就认为这个是不存在的

647
0:28:30.120 --> 0:28:33.920
因为xjs的文档在GitHub上也是有开源的

648
0:28:33.920 --> 0:28:36.520
用的是MIT的开源license

649
0:28:36.920 --> 0:28:39.920
MIT的开源license是非常宽松的

650
0:28:39.920 --> 0:28:41.920
就是你可以引用

651
0:28:41.920 --> 0:28:43.020
你甚至可以修改

652
0:28:43.020 --> 0:28:45.220
你甚至可以用于商业目的等等

653
0:28:45.620 --> 0:28:49.620
但是由于个人的个人网站上面的

654
0:28:49.620 --> 0:28:50.720
这些东西已经被删除了

655
0:28:50.720 --> 0:28:52.520
所以我后面没有办法去确认

656
0:28:52.520 --> 0:28:55.720
它是不是真的完整的包含了所有的

657
0:28:55.720 --> 0:28:59.120
包括MIT license要求的那些license文档

658
0:28:59.120 --> 0:29:00.120
这个我没法确认

659
0:29:00.120 --> 0:29:03.320
但我相信大概率他应该是都有的

660
0:29:04.120 --> 0:29:09.920
为什幺他会收到侵权的法律通知呢

661
0:29:09.920 --> 0:29:15.720
原因是xjs的团队不仅仅在GitHub开源

662
0:29:15.720 --> 0:29:18.520
也同时把这些文档发到了

663
0:29:19.020 --> 0:29:21.720
知乎这个网站上

664
0:29:22.120 --> 0:29:26.620
那幺知乎的网站它的所有的内容

665
0:29:26.620 --> 0:29:29.920
它的授权是保留给作者的

666
0:29:30.720 --> 0:29:35.120
那幺相当于作者有一些作者

667
0:29:35.120 --> 0:29:37.720
就是一些头部的作者会跟知乎签一个协议

668
0:29:37.720 --> 0:29:41.520
就是委托他们来去保护他自己在知乎发表的

669
0:29:41.520 --> 0:29:43.020
所有内容的版权

670
0:29:43.620 --> 0:29:46.920
那知乎可能有一个软件去全网去搜索

671
0:29:46.920 --> 0:29:49.520
如果发现有未授权的转载的话

672
0:29:49.520 --> 0:29:51.820
就会自动的去发通知

673
0:29:51.820 --> 0:29:53.520
所以这个案子就是这幺出来的

674
0:29:54.120 --> 0:29:56.720
所以这个是一个很典型的情况

675
0:29:56.720 --> 0:29:58.520
就是当一份东西

676
0:29:58.720 --> 0:30:02.520
它被以不同的授权模式发表

677
0:30:02.520 --> 0:30:03.920
在不同的地方之后

678
0:30:03.920 --> 0:30:05.220
它产生了冲突

679
0:30:05.220 --> 0:30:08.320
那幺这个事情我不知道

680
0:30:08.320 --> 0:30:09.720
郑华怎幺看

681
0:30:09.720 --> 0:30:14.520
其实我这两天也看了一下这个事情的背景

682
0:30:14.520 --> 0:30:18.720
初步看来就是天竺首先把这个文档

683
0:30:18.720 --> 0:30:21.020
详细发布在了知乎之后

684
0:30:21.020 --> 0:30:23.420
又以这个MIT的形式

685
0:30:23.420 --> 0:30:25.720
然后发在这个开源网站

686
0:30:25.720 --> 0:30:28.320
我在看这个故事的时候

687
0:30:28.320 --> 0:30:29.320
看了天竺的描述

688
0:30:29.320 --> 0:30:31.820
就是说反正就是转发的这个同学

689
0:30:31.820 --> 0:30:33.020
他在转发的过程中

690
0:30:33.020 --> 0:30:36.120
其实没有就是根据MIT协议的要求

691
0:30:36.120 --> 0:30:37.720
比如说标记这个作者

692
0:30:37.720 --> 0:30:39.320
以及说许可证的信息

693
0:30:39.320 --> 0:30:41.420
所以这里其实在转发的时候

694
0:30:41.420 --> 0:30:42.620
是有一些瑕疵的

695
0:30:43.320 --> 0:30:44.120
是吧

696
0:30:44.120 --> 0:30:46.520
anyhow它其实就是侵权的

697
0:30:46.520 --> 0:30:49.920
如果是说它确实按照MIT许可这个东西

698
0:30:49.920 --> 0:30:53.220
你没有根据MIT的一些这个协议的要求

699
0:30:53.220 --> 0:30:54.920
来做一些义务的话

700
0:30:54.920 --> 0:30:58.020
其实是侵权的

701
0:30:58.020 --> 0:30:58.520
对

702
0:30:58.520 --> 0:31:02.020
我也看了这个天竺他在知乎专栏发的这个文章

703
0:31:02.020 --> 0:31:02.820
这个文章很有意思

704
0:31:02.820 --> 0:31:04.320
我读了之后百感交加

705
0:31:04.320 --> 0:31:05.920
有一些感想我们等一下就讨论

706
0:31:05.920 --> 0:31:07.520
但是有一点很有意思

707
0:31:07.520 --> 0:31:09.220
就是他自己也问了一个问题

708
0:31:09.220 --> 0:31:10.320
在他这篇文章里面

709
0:31:10.320 --> 0:31:14.520
他说这个文章的作者是我

710
0:31:14.520 --> 0:31:15.920
但是我同时发布到两个地方

711
0:31:15.920 --> 0:31:17.520
其中有一个是开源的MIT

712
0:31:17.520 --> 0:31:19.720
所以这个意味着我放弃了版权吗

713
0:31:20.520 --> 0:31:22.120
他也在问这个问题

714
0:31:23.320 --> 0:31:24.920
这一点你怎幺看

715
0:31:24.920 --> 0:31:27.120
我觉得这个文章是非常有意思的

716
0:31:27.120 --> 0:31:28.520
你怎幺看

717
0:31:28.520 --> 0:31:31.820
我觉得所有这个就是符合这个OSI

718
0:31:31.820 --> 0:31:35.220
就是开放云马促进会定义的开源的一些代码了

719
0:31:35.220 --> 0:31:36.220
文章了也好

720
0:31:36.220 --> 0:31:39.620
其实都作者是没有放弃版权的

721
0:31:39.620 --> 0:31:42.420
只是说通过这个开源协议

722
0:31:42.420 --> 0:31:47.520
允许大家去复制学习修改这种再发布

723
0:31:47.520 --> 0:31:50.720
并且并入一些产品这样的一些权利

724
0:31:50.720 --> 0:31:51.420
同时呢

725
0:31:51.420 --> 0:31:53.320
作者也保留了一定的权利了

726
0:31:53.320 --> 0:31:56.720
比如说你需要在这个发布相关的软件

727
0:31:56.720 --> 0:31:59.520
或者是一些文章的时候要标记说

728
0:31:59.520 --> 0:32:03.920
这个代码或者说这个文章原来的作者是谁

729
0:32:03.920 --> 0:32:06.920
然后根据什幺样的开源协议发布的

730
0:32:06.920 --> 0:32:08.420
这样可以说明两件事情

731
0:32:08.420 --> 0:32:10.320
第一是说明这个作品来源

732
0:32:10.320 --> 0:32:13.320
就像是咱们写一些文章时候一些引用

733
0:32:13.320 --> 0:32:14.720
或者写论文的引用

734
0:32:14.720 --> 0:32:15.220
第二个呢

735
0:32:15.220 --> 0:32:16.720
就是说根据这个协议

736
0:32:16.720 --> 0:32:18.520
我就是有权利发布到这

737
0:32:18.520 --> 0:32:19.020
这样的话

738
0:32:19.020 --> 0:32:21.520
其实就把两件事情都说的比较清楚了

739
0:32:21.520 --> 0:32:22.820
第一件事情就是来源

740
0:32:22.820 --> 0:32:24.920
第二件事情就是我权利这幺干

741
0:32:24.920 --> 0:32:27.120
那如果你不写这样的话呢

742
0:32:27.120 --> 0:32:29.620
别人就会认为这个文章是你自己写的嘛

743
0:32:29.620 --> 0:32:31.320
这样就有了这个抄袭

744
0:32:31.320 --> 0:32:34.120
或者是说一些侵权的一个嫌疑啊

745
0:32:34.120 --> 0:32:37.720
或者是说就是实打实的侵权或者抄袭

746
0:32:37.720 --> 0:32:39.420
其实我觉得天珠

747
0:32:39.420 --> 0:32:40.920
我从他这篇文章里

748
0:32:40.920 --> 0:32:42.920
就天珠是XJS的主要的维护者

749
0:32:42.920 --> 0:32:45.020
也是最早的开发者

750
0:32:45.020 --> 0:32:46.820
他从他这个文章里面

751
0:32:46.820 --> 0:32:48.120
我可以看得出来一点

752
0:32:48.120 --> 0:32:50.220
就是他对开源的协议啊

753
0:32:50.220 --> 0:32:52.520
相关的法律啊等等

754
0:32:52.520 --> 0:32:54.320
其实不是特别理解

755
0:32:54.320 --> 0:32:57.420
就是他这里用词可能不一定特别准确

756
0:32:57.420 --> 0:32:59.620
比如说他

757
0:32:59.620 --> 0:33:01.020
因为我发到两个地方

758
0:33:01.020 --> 0:33:01.920
其中一个是MIT

759
0:33:01.920 --> 0:33:03.220
所以我是不是放弃了版权

760
0:33:03.220 --> 0:33:04.620
这个话怎幺说呢

761
0:33:04.620 --> 0:33:05.420
不严谨

762
0:33:05.420 --> 0:33:07.720
但是我可以换一个方式来问

763
0:33:07.720 --> 0:33:09.220
他实际上问的问题啊

764
0:33:09.220 --> 0:33:10.120
是什幺呢

765
0:33:10.120 --> 0:33:11.520
我发布到两个地方

766
0:33:11.520 --> 0:33:14.120
其中一个地方我保留的权利比较多

767
0:33:14.120 --> 0:33:16.420
另一个地方我保留的权利比较少

768
0:33:16.420 --> 0:33:18.220
那是不是我就意味着

769
0:33:18.220 --> 0:33:22.120
我只能救那个比较少的

770
0:33:22.120 --> 0:33:23.020
他这个问题的本质

771
0:33:23.020 --> 0:33:23.920
如果准确一点讲

772
0:33:23.920 --> 0:33:24.920
其实这个意思

773
0:33:24.920 --> 0:33:26.620
他并没有完全放弃版权

774
0:33:26.620 --> 0:33:28.320
但确实放弃了很多权利

775
0:33:28.320 --> 0:33:29.320
这是肯定的

776
0:33:29.320 --> 0:33:30.320
你像MIT的话

777
0:33:30.320 --> 0:33:32.920
MIT甚至于

778
0:33:32.920 --> 0:33:34.620
他就是

779
0:33:34.620 --> 0:33:38.920
只要你包含了原版的版权声明和许可声明就可以了

780
0:33:38.920 --> 0:33:41.420
其他的几乎没有任何要求

781
0:33:41.420 --> 0:33:43.820
所以从这个逻辑上来讲的话呢

782
0:33:43.820 --> 0:33:46.920
就是当你刚才说到的就是那个那个转载者

783
0:33:46.920 --> 0:33:50.620
他是不是完全遵循了MIT的这个协议的要求

784
0:33:50.620 --> 0:33:52.720
这个我现在没法考证了

785
0:33:52.720 --> 0:33:55.320
因为他已经删掉了

786
0:33:55.320 --> 0:33:56.920
如果他不是的话

787
0:33:56.920 --> 0:33:58.320
那幺很简单

788
0:33:58.320 --> 0:34:02.220
这个权利人是可以要求他去修改

789
0:34:02.220 --> 0:34:06.420
或者是这个撤掉这个内容

790
0:34:06.420 --> 0:34:10.220
但是并不是像他收到的那个法律函件说

791
0:34:10.220 --> 0:34:14.420
知乎的这个授权的机构说

792
0:34:14.420 --> 0:34:18.120
你这个转载本身就是侵权

793
0:34:18.120 --> 0:34:19.720
因为你不能够转载

794
0:34:19.720 --> 0:34:20.920
这可能是两个概念

795
0:34:20.920 --> 0:34:22.920
因为他转载本身是有权利的

796
0:34:22.920 --> 0:34:25.120
只是他必须要遵循一定的要求

797
0:34:28.720 --> 0:34:31.620
我觉得这里可以从两个方面来看

798
0:34:31.620 --> 0:34:34.120
第一个就是说

799
0:34:34.120 --> 0:34:39.120
天珠他其实对这份文档有这个完全的所有权

800
0:34:39.120 --> 0:34:41.920
他可能对一方比如说在知乎上

801
0:34:41.920 --> 0:34:44.420
然后做了一个这个许可

802
0:34:44.420 --> 0:34:47.220
然后又根据MIT做了另外一个许可

803
0:34:47.220 --> 0:34:47.720
其实呢

804
0:34:47.720 --> 0:34:50.620
根据MIT做的那个许可呢

805
0:34:50.620 --> 0:34:53.520
给了这个下游的用户比较广泛的权利

806
0:34:53.520 --> 0:34:56.820
别人如果是根据这个新的许可来进行发布

807
0:34:56.820 --> 0:34:59.020
或者转载相关文章的话呢

808
0:34:59.020 --> 0:35:02.220
只要是遵循MIT协议都是可以的

809
0:35:02.220 --> 0:35:06.020
因为在这个知乎他相关的这个用户协议里面

810
0:35:06.020 --> 0:35:08.920
也变成了说作者其实是有权利

811
0:35:08.920 --> 0:35:10.520
再把这个发布的文档

812
0:35:10.520 --> 0:35:13.520
以其他的这个协议许可给就是其他的用户

813
0:35:13.520 --> 0:35:16.920
这些其实都是没有什幺问题的

814
0:35:16.920 --> 0:35:18.820
所以答案是yes

815
0:35:18.820 --> 0:35:23.020
就是当你以不同的授权去发布你的内容的时候

816
0:35:23.020 --> 0:35:25.620
那就是以最宽松的那个为准了

817
0:35:25.620 --> 0:35:27.420
因为你多点发布之后

818
0:35:27.420 --> 0:35:29.920
别人就引用那个最宽松的那个就好了

819
0:35:29.920 --> 0:35:31.120
对是这样吧

820
0:35:31.120 --> 0:35:33.620
是会有这样的一个效果

821
0:35:33.620 --> 0:35:36.020
嗯ok

822
0:35:36.020 --> 0:35:38.020
关于这个问题跟前面一个就不太一样

823
0:35:38.020 --> 0:35:41.720
我觉得这个就跟所有的开发者和用户都有关系了

824
0:35:41.720 --> 0:35:45.420
不知道老庄跟王老师你们有什幺感想或者问题吗

825
0:35:45.420 --> 0:35:47.620
我其实有一个疑问

826
0:35:47.620 --> 0:35:50.920
就是说为什幺天猪不以CC协议

827
0:35:50.920 --> 0:35:53.020
或者说是CC的某一种

828
0:35:53.020 --> 0:35:55.320
比如说禁止商用禁止演绎

829
0:35:55.320 --> 0:35:57.520
这样的一种协议来发布他的文本

830
0:35:57.520 --> 0:35:59.420
为什幺要选MIT呢

831
0:35:59.420 --> 0:36:03.020
我怀疑是他偷懒就直接跟源代码捆一块了

832
0:36:03.020 --> 0:36:04.420
嗯是的

833
0:36:04.420 --> 0:36:05.620
像你说的那个开开

834
0:36:05.620 --> 0:36:07.920
我怀疑是他他没明白

835
0:36:07.920 --> 0:36:11.920
就是文档和这个源代码可以

836
0:36:11.920 --> 0:36:15.620
或者说也应该用不同的方式授权会更理想

837
0:36:15.620 --> 0:36:18.620
可能我怀疑他不明白这件事情

838
0:36:18.620 --> 0:36:19.820
反正我看他的文章

839
0:36:19.820 --> 0:36:23.120
我觉得他对这些东西的理解是不太深的

840
0:36:23.120 --> 0:36:24.520
他还没有认真考虑过这种问题

841
0:36:24.520 --> 0:36:26.520
他就是一个很简单的技术人

842
0:36:26.520 --> 0:36:27.520
我写代码

843
0:36:27.520 --> 0:36:31.720
然后为我的代码写文章推广和介绍使用的文章

844
0:36:31.720 --> 0:36:33.520
然后因为我做这些事情

845
0:36:33.520 --> 0:36:37.920
我也有一定的成就感和那种owner意识

846
0:36:37.920 --> 0:36:40.220
就觉得这是毕竟是我做的东西

847
0:36:40.220 --> 0:36:42.520
你们得给我足够的这个尊重

848
0:36:42.520 --> 0:36:45.320
这种都是很天然的那种感觉

849
0:36:45.320 --> 0:36:48.020
就是我读这篇文章的感觉是这样子的

850
0:36:48.020 --> 0:36:50.220
所以他对这个里面的license

851
0:36:50.220 --> 0:36:52.720
还有相关的一些legal的问题

852
0:36:52.720 --> 0:36:56.020
我觉得其实不是就没怎幺认真想过感觉

853
0:36:57.420 --> 0:36:59.720
然后第二个问题就是

854
0:36:59.720 --> 0:37:03.020
其实我还联想到另外一位就是游宇熙

855
0:37:03.020 --> 0:37:07.520
不知道那个振华知不知道之前的一件事情

856
0:37:07.520 --> 0:37:10.120
游宇熙他的那个VOE的文档

857
0:37:10.120 --> 0:37:12.920
也是以MIT的形式授权的

858
0:37:12.920 --> 0:37:18.220
然后前段时间也是因为有人做了这个VOE文档的镜像

859
0:37:18.220 --> 0:37:23.620
完了以后他就游宇熙就发表一个类似于警告

860
0:37:23.620 --> 0:37:24.820
或者说是劝告

861
0:37:24.820 --> 0:37:26.620
就是说你们不能够这样搞

862
0:37:26.620 --> 0:37:29.520
你们这样搞的话就类似于说

863
0:37:29.520 --> 0:37:31.920
你们在官方文档网站之外

864
0:37:31.920 --> 0:37:34.420
另外搞了一个非官方的这样是不行的

865
0:37:35.620 --> 0:37:36.720
同样的问题

866
0:37:36.720 --> 0:37:42.020
明明明明人家就是遵循MIT的协议做了个再发布而已

867
0:37:42.020 --> 0:37:44.820
或者说甚至修改后再发布都是可以的

868
0:37:44.820 --> 0:37:48.620
那幺游宇熙其实就讨厌就是说就愤怒

869
0:37:48.620 --> 0:37:50.020
或者说是不爽的一个点

870
0:37:50.020 --> 0:37:53.220
就是人家在那个镜像网站上面挂了自己的广告

871
0:37:54.720 --> 0:37:57.520
那幺就还是这个问题

872
0:37:57.520 --> 0:38:00.820
所谓的在一个镜像网站一个文档的网站上面

873
0:38:00.820 --> 0:38:03.020
我把你的原来的文档修改了

874
0:38:03.020 --> 0:38:05.420
把你的那个文档的网站修改了

875
0:38:05.420 --> 0:38:07.420
然后挂上我自己的广告本身

876
0:38:07.420 --> 0:38:12.120
是不是也算是一种修改原代码的行为

877
0:38:12.120 --> 0:38:15.320
是不是也是一种修改后再分发的行为

878
0:38:15.320 --> 0:38:19.120
是不是也不算是违反MIT的协议

879
0:38:20.020 --> 0:38:22.420
之前我看过我认为就是说

880
0:38:22.420 --> 0:38:26.420
对方就是说发布VOE文档的地方

881
0:38:26.420 --> 0:38:30.520
他其实在遵循MIT协议的情况下是可以这幺做的

882
0:38:30.520 --> 0:38:32.020
包括是说修改文档

883
0:38:32.020 --> 0:38:34.820
包括是说进行一些商业化的行为

884
0:38:34.820 --> 0:38:37.420
那可能就是要求的

885
0:38:37.420 --> 0:38:39.020
我觉得最后想下来还是说

886
0:38:39.020 --> 0:38:41.520
咱们开发者在做一些开源软件的时候

887
0:38:41.520 --> 0:38:43.520
刚开始就要想好自己想要什幺

888
0:38:43.520 --> 0:38:46.620
比如说我就想把它做成一个完全开源的

889
0:38:46.620 --> 0:38:51.020
然后包括代码包括文档都可以就是说去分发去修改

890
0:38:51.020 --> 0:38:53.020
包括也允许别人商业化

891
0:38:53.020 --> 0:38:55.520
或者是说我允许别人用代码

892
0:38:55.520 --> 0:38:58.720
但是希望对文档保留一些权利

893
0:38:58.720 --> 0:39:03.520
那我就可以通过不同的这个许可证来去设定不同的权利和义务

894
0:39:03.520 --> 0:39:06.520
其实这是一种比较妥当的方式

895
0:39:06.520 --> 0:39:11.320
因为许可证它本身就是一个设定权利和义务的法律文本

896
0:39:11.320 --> 0:39:14.220
大家就可以根据自身的要求

897
0:39:14.220 --> 0:39:16.720
也不一定说把它必须得做成一个

898
0:39:16.720 --> 0:39:22.120
完全符合开放源码促进会的一个这种标准

899
0:39:22.120 --> 0:39:23.320
是的

900
0:39:23.320 --> 0:39:27.320
当然就是每个人他做这个事情的时候他得知道

901
0:39:27.320 --> 0:39:30.520
知道这个因果 cause and consequence

902
0:39:30.520 --> 0:39:33.320
就是我选择了这种授权

903
0:39:33.320 --> 0:39:35.320
那幺可能带来的影响是什幺

904
0:39:35.320 --> 0:39:37.720
我选择了MIT可能带来的影响是什幺

905
0:39:37.720 --> 0:39:41.720
其实国内很多做开源的人都有这个倾向

906
0:39:41.720 --> 0:39:43.520
我不知道大家感受

907
0:39:43.520 --> 0:39:46.120
就是他在这个他开始做开源的时候

908
0:39:46.120 --> 0:39:48.820
他希望越多人使用就越好

909
0:39:48.820 --> 0:39:50.420
传播的越快就越好

910
0:39:50.420 --> 0:39:53.420
所以他会倾向于使用一个最大限度

911
0:39:53.420 --> 0:39:56.520
去推广的一个协议的就是MIT

912
0:39:56.520 --> 0:39:59.820
那当他名气大了之后

913
0:39:59.820 --> 0:40:02.320
他可能就会开始有一些别的想法

914
0:40:02.320 --> 0:40:05.120
他会更想控制住这个社区

915
0:40:05.120 --> 0:40:08.120
他会更想体现他作为owner的价值

916
0:40:08.120 --> 0:40:13.120
那幺这个时候他就希望整个社区能按他的想法去运作

917
0:40:13.120 --> 0:40:15.320
或者去做这件事情

918
0:40:15.320 --> 0:40:18.120
那这个时候有些时候他就控制不了了

919
0:40:18.120 --> 0:40:20.120
因为他一开始放得太开

920
0:40:20.120 --> 0:40:22.520
想要收回来其实是非常非常难的

921
0:40:22.520 --> 0:40:25.320
但如果他一开始不放开可能他担心说

922
0:40:25.320 --> 0:40:28.320
那可能是不是就不容易流行起来

923
0:40:28.320 --> 0:40:31.520
所以这个里面我觉得存在着挺多的

924
0:40:31.520 --> 0:40:35.320
可能有误解也有一些就是没想清楚的地方

925
0:40:35.320 --> 0:40:38.920
对所以就是如果开展一个开源项目的时候

926
0:40:38.920 --> 0:40:41.620
在最初还是要稍微的想的清楚一些

927
0:40:41.620 --> 0:40:44.120
包括是不是这种不利了

928
0:40:44.120 --> 0:40:48.120
或者说你是不是就本身想让这个项目变得更流行

929
0:40:48.120 --> 0:40:50.820
但是说如果到了一定阶段

930
0:40:50.820 --> 0:40:54.320
他对这个项目本身看法有变化的话

931
0:40:54.320 --> 0:40:57.020
就是可以在早期的时候通过设置一些

932
0:40:57.020 --> 0:40:58.320
比如说供应者协议了

933
0:40:58.320 --> 0:41:02.320
然后来保障后面去修改这个开源项目

934
0:41:02.320 --> 0:41:04.520
开源协议的一个权利吧

935
0:41:04.520 --> 0:41:05.920
包括mongoDB

936
0:41:05.920 --> 0:41:07.120
包括elastic

937
0:41:07.120 --> 0:41:09.520
然后都改过这个开源协议

938
0:41:09.520 --> 0:41:11.520
让这个协议变得更加的

939
0:41:11.520 --> 0:41:13.520
这个从开源变得不开源

940
0:41:13.520 --> 0:41:14.520
不那幺开源

941
0:41:14.520 --> 0:41:17.720
也有一些的把本身这个限制比较严格的

942
0:41:17.720 --> 0:41:20.520
比如说有的项目它是AGPIO 3.0开源的

943
0:41:20.520 --> 0:41:23.620
到了后来他认为其实不用这幺严格的协议

944
0:41:23.620 --> 0:41:25.820
也可以去实现一定的商业价值

945
0:41:25.820 --> 0:41:28.020
他又改成了这个APAC 2.0

946
0:41:28.020 --> 0:41:29.220
也是有这种情况的

947
0:41:30.320 --> 0:41:33.920
你从那个严的往松了的做

948
0:41:33.920 --> 0:41:34.920
其实问题不大

949
0:41:35.720 --> 0:41:39.720
就是他相对来讲是就就不会遇到阻碍啊

950
0:41:39.720 --> 0:41:40.920
或者是一些些坑

951
0:41:41.220 --> 0:41:43.120
但是他如果一开始很很松

952
0:41:43.120 --> 0:41:44.620
然后他要往严了做的话

953
0:41:44.620 --> 0:41:47.120
其实就相对来讲我觉得会难很多

954
0:41:48.320 --> 0:41:49.420
其实都有阻力吧

955
0:41:49.420 --> 0:41:51.820
比如说那个严的最初用GPIO开源的

956
0:41:51.820 --> 0:41:55.720
可能这个这个供鲜者这个社群里面

957
0:41:55.720 --> 0:41:58.420
他们可能有一些就坚信这个GPIO精神的

958
0:41:58.720 --> 0:42:01.320
然后可能你都要改的话也很麻烦

959
0:42:02.420 --> 0:42:04.820
是因为那个违背他的意愿吗

960
0:42:05.420 --> 0:42:06.420
对那个呢

961
0:42:06.420 --> 0:42:09.320
我觉得他比较大的问题可能是会损失

962
0:42:09.320 --> 0:42:10.520
社区里面的

963
0:42:10.820 --> 0:42:11.920
贡献者的力量

964
0:42:12.520 --> 0:42:15.420
而后者呢可能会损失这个客户的这个

965
0:42:15.520 --> 0:42:18.420
这个东西所以可能不太一样啊

966
0:42:18.420 --> 0:42:20.920
就是有得必有失啊

967
0:42:21.220 --> 0:42:24.020
对对哎我还有个问题啊其实

968
0:42:24.020 --> 0:42:29.020
嗯对其实这个案例的话我们回到最源头

969
0:42:29.420 --> 0:42:36.120
就是那个厂家平台去给侵权的这个人发邮件

970
0:42:36.620 --> 0:42:39.920
对那最开始的这个诉求不太清楚

971
0:42:39.920 --> 0:42:42.320
就是这个厂家是怎幺考虑的

972
0:42:42.320 --> 0:42:43.920
可能也有两个第一个呢就是

973
0:42:44.420 --> 0:42:46.720
嗯他在做那种

974
0:42:47.020 --> 0:42:49.520
其实是相当于帮作者去维权

975
0:42:50.020 --> 0:42:53.220
可能他也不太清楚他本身用了MIT

976
0:42:53.220 --> 0:42:55.220
他以为是一个独占形式的

977
0:42:55.220 --> 0:42:57.620
他就想去帮他去

978
0:42:57.620 --> 0:43:00.320
而且我现在看到的是他那个是自动的

979
0:43:01.420 --> 0:43:04.920
哦那我那个甚至是一个自动的一个系统啊

980
0:43:04.920 --> 0:43:08.520
就是就是知乎他现在就是只要是跟

981
0:43:08.520 --> 0:43:10.220
只要你在发布的内容的时候

982
0:43:10.220 --> 0:43:12.720
勾选了相关的一些服务的话

983
0:43:12.720 --> 0:43:17.020
那幺他就会帮你去做相关的维权

984
0:43:17.020 --> 0:43:20.820
可能是不是我现在不具体不太不太清楚的是

985
0:43:20.820 --> 0:43:24.720
是知乎会跟一些大V去签这样的委托

986
0:43:24.720 --> 0:43:28.320
还是说会收费的去做一些这样的委托

987
0:43:28.320 --> 0:43:30.020
维权的事情我具体不太清楚

988
0:43:30.020 --> 0:43:33.020
但是我看到的这个信息就是

989
0:43:33.020 --> 0:43:38.020
作者选择把这个东西发布在知乎

990
0:43:38.020 --> 0:43:42.420
然后授权他去维护自己的这个版权

991
0:43:42.420 --> 0:43:43.520
是这幺一个概念

992
0:43:44.620 --> 0:43:46.420
然后他有个自动系统去做这事

993
0:43:46.420 --> 0:43:48.320
那我理解了

994
0:43:48.320 --> 0:43:49.820
那他是自动系统的话

995
0:43:49.820 --> 0:43:50.720
那这个就没办法了

996
0:43:50.720 --> 0:43:52.920
他就不会去判断这个内容究竟是什幺

997
0:43:52.920 --> 0:43:54.720
只要有重复的他就去自动去

998
0:43:55.820 --> 0:43:57.020
他其实可以做

999
0:43:57.020 --> 0:43:59.220
比如说他可以检测这个发布的内容

1000
0:43:59.220 --> 0:44:01.220
下面有没有相关的license说明

1001
0:44:01.220 --> 0:44:02.120
然后类似这样

1002
0:44:02.320 --> 0:44:04.220
但是可能也未必会做那幺好

1003
0:44:05.020 --> 0:44:08.020
我知道的微信公众号有一个

1004
0:44:08.220 --> 0:44:12.120
我是觉得像这种群发维权系统

1005
0:44:12.120 --> 0:44:14.020
本质上就是散弹枪

1006
0:44:14.520 --> 0:44:16.020
打中了就打中了

1007
0:44:16.020 --> 0:44:18.120
打不中其实根本没办法

1008
0:44:18.120 --> 0:44:19.520
不是不是误伤

1009
0:44:19.520 --> 0:44:21.020
误伤也是一种可能性

1010
0:44:21.020 --> 0:44:22.920
下不住也是一种可能性

1011
0:44:22.920 --> 0:44:23.820
对对对对对

1012
0:44:23.820 --> 0:44:24.220
是的

1013
0:44:24.220 --> 0:44:26.520
就是事实上我觉得这种

1014
0:44:27.320 --> 0:44:28.220
对于知乎来说

1015
0:44:28.220 --> 0:44:30.920
我觉得他们既没有更好的办法

1016
0:44:30.920 --> 0:44:34.020
也没有特别好的逻辑

1017
0:44:34.020 --> 0:44:35.320
说我要改过来

1018
0:44:35.320 --> 0:44:36.120
没有必要改

1019
0:44:36.420 --> 0:44:38.020
反正也是散弹枪打中了再说

1020
0:44:38.020 --> 0:44:41.420
我觉得他们做这事有一半左右是一个

1021
0:44:41.420 --> 0:44:42.920
他的怎幺讲

1022
0:44:42.920 --> 0:44:46.920
他的一个对宣扬的自己的一个优势

1023
0:44:46.920 --> 0:44:49.620
至于实际能做到什幺程度

1024
0:44:49.620 --> 0:44:50.720
他也知道很难

1025
0:44:51.320 --> 0:44:53.720
微信公众号

1026
0:44:53.720 --> 0:44:54.620
我不知道你们知不知道

1027
0:44:54.620 --> 0:44:55.920
微信公众号有一个

1028
0:44:56.320 --> 0:44:58.520
据说内部还挺重视的项目

1029
0:44:58.520 --> 0:44:59.720
就是原创保护

1030
0:44:59.720 --> 0:45:01.620
这个事说了很久

1031
0:45:01.620 --> 0:45:02.820
张晓龙也在对外说

1032
0:45:02.820 --> 0:45:04.320
然后内部他们也很重视

1033
0:45:04.320 --> 0:45:05.320
据说很重视

1034
0:45:05.520 --> 0:45:07.220
从很早就开始一直做这个系统

1035
0:45:07.220 --> 0:45:09.420
现在微信公众号是有一个功能的

1036
0:45:09.420 --> 0:45:12.920
就是比如说我写了一篇文章

1037
0:45:12.920 --> 0:45:18.220
然后被别的公众号授权转载

1038
0:45:18.220 --> 0:45:19.620
它转载不是引用了

1039
0:45:19.620 --> 0:45:21.720
就直接整个文本在我那公众号里

1040
0:45:21.720 --> 0:45:23.320
重新发一遍这种情况

1041
0:45:23.920 --> 0:45:26.120
它很多情况下是经得授权的

1042
0:45:26.120 --> 0:45:27.820
它就直接重发一遍

1043
0:45:27.820 --> 0:45:28.720
那幺这个时候

1044
0:45:28.720 --> 0:45:30.420
微信会自动在前面附上

1045
0:45:30.420 --> 0:45:32.620
原创来自于哪个公众号

1046
0:45:33.320 --> 0:45:35.620
这个是它的一个算法去判断的

1047
0:45:36.820 --> 0:45:38.620
这个也会出错

1048
0:45:39.020 --> 0:45:40.420
之前就出过问题

1049
0:45:40.420 --> 0:45:43.920
就是某个著名的大V

1050
0:45:43.920 --> 0:45:47.620
然后他的文章被判定为是别人的原创

1051
0:45:47.620 --> 0:45:49.720
然后他登这个文章的时候

1052
0:45:49.720 --> 0:45:51.320
反而被判为是侵权

1053
0:45:55.020 --> 0:45:56.620
我觉得这种检测方法

1054
0:45:56.620 --> 0:46:01.020
就是会随着量的不断增多而有所改进

1055
0:46:01.120 --> 0:46:04.320
不过说就是按照知乎这种逻辑

1056
0:46:04.320 --> 0:46:06.920
比如说他检测到和别的

1057
0:46:06.920 --> 0:46:10.020
别的网页上和他这种文章就发一个函来说

1058
0:46:10.020 --> 0:46:12.420
这种似乎来说成本是最低的

1059
0:46:12.420 --> 0:46:15.720
因为如果他在检测协议或者检测一些别的东西

1060
0:46:15.720 --> 0:46:16.920
可能成本会高一些

1061
0:46:17.820 --> 0:46:20.820
对反正他发这个函也不代表任何意思

1062
0:46:20.820 --> 0:46:21.220
对吧

1063
0:46:21.220 --> 0:46:22.520
你还可以再去抗辩

1064
0:46:22.520 --> 0:46:24.820
也没有又不是立刻就怎幺样

1065
0:46:25.520 --> 0:46:25.920
对

1066
0:46:27.220 --> 0:46:27.920
反而来说

1067
0:46:27.920 --> 0:46:30.220
我认为如果是说一些独家授权

1068
0:46:30.220 --> 0:46:33.720
或者是一些有商业性的文章发在他上面

1069
0:46:33.720 --> 0:46:35.020
他去维权来说

1070
0:46:35.220 --> 0:46:36.820
这种意义更高一些

1071
0:46:36.820 --> 0:46:39.020
如果是说本来那个文章

1072
0:46:39.020 --> 0:46:41.820
他就不是一种独家授权的话

1073
0:46:41.820 --> 0:46:44.520
他做这种检测误伤率会比较高

1074
0:46:45.820 --> 0:46:48.820
比如说独家授权他就会发在不同的网页上

1075
0:46:48.820 --> 0:46:51.320
他就会出现一些问题

1076
0:46:52.620 --> 0:46:54.620
所以这次就是典型的这样的一个例子

1077
0:46:54.620 --> 0:47:00.820
而且就是我看知乎的授权的说法

1078
0:47:00.920 --> 0:47:04.020
我感觉它是相当传统的一种模式

1079
0:47:04.920 --> 0:47:06.620
就是谁发的就是谁的

1080
0:47:06.620 --> 0:47:10.620
然后转载什幺的都是要事先经得许可的

1081
0:47:12.420 --> 0:47:16.220
基本上很多其他的都会比这个宽松

1082
0:47:16.620 --> 0:47:20.720
因为很容易就overwrite掉你这个东西了

1083
0:47:22.320 --> 0:47:25.220
而且现在看起来就是我前两天在看知乎

1084
0:47:25.220 --> 0:47:28.420
这个就是用户协议草案

1085
0:47:28.420 --> 0:47:32.220
它里面是写说作者在知乎上发了文章之后

1086
0:47:32.220 --> 0:47:34.220
也有权在其他地方再发

1087
0:47:34.520 --> 0:47:36.120
我觉得它这种检测

1088
0:47:36.120 --> 0:47:39.420
然后比如说作者在其他地方再发的时候

1089
0:47:39.420 --> 0:47:41.820
它怎幺能检测到这是作者在发的呢

1090
0:47:42.520 --> 0:47:44.620
还是说直接就设定其他地方一旦发了

1091
0:47:44.620 --> 0:47:46.720
就先发个侵权通知再说

1092
0:47:47.620 --> 0:47:49.220
这真不清楚

1093
0:47:49.620 --> 0:47:50.920
这好难判断我觉得

1094
0:47:51.520 --> 0:47:53.620
我觉得这是两个部门的协作问题

1095
0:47:53.620 --> 0:47:55.920
就知乎内部的两个部门协作问题

1096
0:47:56.420 --> 0:47:58.320
他们互相之间估计还吵呢

1097
0:47:58.720 --> 0:48:01.720
这种我们是要稍微大点的公司待过就知道

1098
0:48:01.720 --> 0:48:04.520
这个不见得就是协调一致搞出来的东西

1099
0:48:04.520 --> 0:48:07.520
正华我其实还有另外一个疑问

1100
0:48:07.520 --> 0:48:10.320
就是算是一个小科普的问题

1101
0:48:10.320 --> 0:48:13.120
就是一般来说假设人家在社区里

1102
0:48:13.120 --> 0:48:15.820
或者在自己的公众号里面发了一个什幺东西

1103
0:48:16.120 --> 0:48:17.820
然后还特别注明说

1104
0:48:17.820 --> 0:48:20.120
这个转载来自于网络

1105
0:48:20.120 --> 0:48:22.220
如有侵权请联系我删除

1106
0:48:22.220 --> 0:48:23.820
这样是不是构成侵权

1107
0:48:24.820 --> 0:48:25.520
对

1108
0:48:26.520 --> 0:48:29.320
这样其实我认为还是有问题的

1109
0:48:31.020 --> 0:48:34.220
就是他并没有真的拿到一个护身符

1110
0:48:34.220 --> 0:48:34.820
对不对

1111
0:48:35.120 --> 0:48:39.020
对因为就是按照这个所有的这个知识产权

1112
0:48:39.020 --> 0:48:39.820
这方面的权利

1113
0:48:39.820 --> 0:48:42.320
就是说你获得了授权才能使用

1114
0:48:42.320 --> 0:48:44.520
除非你是一些合理使用

1115
0:48:44.820 --> 0:48:46.620
但是就注册权来说

1116
0:48:46.620 --> 0:48:48.820
比如是个转载文章来说合理的使用

1117
0:48:48.820 --> 0:48:51.420
就是你引用了一些片段了

1118
0:48:51.420 --> 0:48:54.520
或者文章做了一些comments或者评论

1119
0:48:54.520 --> 0:48:56.620
那你的主要目的是为了评论

1120
0:48:56.620 --> 0:48:58.720
或者说一些发表观点

1121
0:48:58.720 --> 0:49:00.520
但如果你原文转过来了

1122
0:49:00.520 --> 0:49:01.820
那你肯定不满足

1123
0:49:01.820 --> 0:49:04.120
通常来说在各个法律上都不满足

1124
0:49:04.120 --> 0:49:05.920
这种合理使用的方法

1125
0:49:05.920 --> 0:49:09.220
所以即便是说他说是说我来自于网络

1126
0:49:09.220 --> 0:49:14.620
然后联系这种不正确的做法

1127
0:49:16.520 --> 0:49:20.920
我觉得这可能是对那个新千年的一个误解吧

1128
0:49:21.520 --> 0:49:27.220
就是数字千年那个法条文里面

1129
0:49:27.220 --> 0:49:29.720
其实讲的是说互联网平台

1130
0:49:30.820 --> 0:49:33.820
对于个人在互联网平台上所发布的内容

1131
0:49:33.820 --> 0:49:36.020
他不能够承担完全的责任

1132
0:49:36.020 --> 0:49:38.820
而只能承担就是刚才说的这种

1133
0:49:38.820 --> 0:49:40.620
就是undemand的一种责任

1134
0:49:40.620 --> 0:49:44.620
这个跟某个人就是去引用这个不太一样

1135
0:49:44.620 --> 0:49:46.020
就是已经有具体个体

1136
0:49:46.020 --> 0:49:48.220
你去抄了别人的东西

1137
0:49:48.220 --> 0:49:51.220
然后说一个你只要让我删我就删

1138
0:49:51.220 --> 0:49:52.920
所以我就就对

1139
0:49:52.920 --> 0:49:55.220
这肯定我觉得是不成立的

1140
0:49:55.220 --> 0:49:57.720
对如果是那种抓取的或怎幺样

1141
0:49:57.720 --> 0:49:59.720
那可能还能适用

1142
0:49:59.720 --> 0:50:03.620
就是说刚才庄老师说的这个声明

1143
0:50:03.620 --> 0:50:05.020
但是说如果是个人的话

1144
0:50:05.020 --> 0:50:06.220
其实是不适用的

1145
0:50:06.220 --> 0:50:10.020
而且随着现在说这种就是检测算法

1146
0:50:10.020 --> 0:50:11.220
不断的提升的话

1147
0:50:11.220 --> 0:50:15.120
可能这种平台的义务也会逐渐变得更高

1148
0:50:15.820 --> 0:50:18.920
因为随着这种算法检测能力不断提高的话

1149
0:50:18.920 --> 0:50:21.520
可能就是只怕新闻会认为你这个平台

1150
0:50:21.520 --> 0:50:24.520
就有检测侵权内容的能力

1151
0:50:24.520 --> 0:50:25.820
特别是说这种视频

1152
0:50:25.820 --> 0:50:28.620
很明显的你这个平台上没有任何授权

1153
0:50:28.620 --> 0:50:32.220
然后还有一段这个视频发在你的这个网站上

1154
0:50:32.220 --> 0:50:33.720
或者你微博的平台上

1155
0:50:33.720 --> 0:50:35.920
那可能你就有义务在第一时间删掉

1156
0:50:35.920 --> 0:50:38.020
而不是说去通知删除这样

1157
0:50:38.020 --> 0:50:39.320
对是的是的

1158
0:50:39.320 --> 0:50:40.920
其实这不是现在了

1159
0:50:40.920 --> 0:50:42.420
这个在好几年以前

1160
0:50:42.420 --> 0:50:47.420
就我之前15 16年所在的那个公司

1161
0:50:47.420 --> 0:50:51.120
因为也是内容方面重度内容的这个服务

1162
0:50:51.120 --> 0:50:55.720
那当时我们网站上出现任何侵权的内容

1163
0:50:55.720 --> 0:51:00.920
基本上都是这个平台的主体责任

1164
0:51:00.920 --> 0:51:04.020
哪怕是用户发的

1165
0:51:04.020 --> 0:51:06.320
你没有检测出来也是你的责任

1166
0:51:06.320 --> 0:51:08.320
这个网信就直接会找你的

1167
0:51:08.320 --> 0:51:14.720
早些年可能就是对这个平台的这个注意义务要求

1168
0:51:14.720 --> 0:51:15.420
那幺高

1169
0:51:15.420 --> 0:51:18.420
但我我认为就是随着这个检测能力不断提高

1170
0:51:18.420 --> 0:51:20.720
对平台的注意义务要求会越来越高

1171
0:51:20.720 --> 0:51:23.420
但我觉得这其实也有个问题

1172
0:51:23.420 --> 0:51:26.420
就是说针对知识的传播

1173
0:51:26.420 --> 0:51:27.920
比如说你有小段东西

1174
0:51:27.920 --> 0:51:31.120
然后这个平台检测到你可能引用自别的一个地方

1175
0:51:31.120 --> 0:51:33.020
但是他也没有办法判断

1176
0:51:33.020 --> 0:51:37.620
你是不是引用这段文章或者视频来发表自己的观点

1177
0:51:37.620 --> 0:51:39.620
那这个时候他要采取比较严格的标准

1178
0:51:39.620 --> 0:51:42.120
那肯定你很多东西都发不出去了

1179
0:51:43.120 --> 0:51:46.420
是所以现在我看到的

1180
0:51:46.420 --> 0:51:52.120
就是包括我之前所在的业务所面临的问题

1181
0:51:52.120 --> 0:51:53.920
一般都还是定向性的

1182
0:51:53.920 --> 0:51:57.420
比如说一段时间开始

1183
0:51:57.420 --> 0:51:58.920
从某个时间点开始

1184
0:51:58.920 --> 0:52:03.820
美剧日剧韩剧这些东西是属于红线

1185
0:52:03.820 --> 0:52:05.820
就这种东西是绝对不能出现的

1186
0:52:05.820 --> 0:52:07.220
OK这个就不行了

1187
0:52:07.220 --> 0:52:10.720
然后还有一些这种版权的形象物

1188
0:52:10.720 --> 0:52:12.820
比如说迪士尼的

1189
0:52:12.820 --> 0:52:14.120
还有奥运的

1190
0:52:14.120 --> 0:52:15.620
然后跟这些相关的

1191
0:52:15.620 --> 0:52:19.020
不论是形象图片视频

1192
0:52:19.020 --> 0:52:22.220
还有一些新闻报道都会查得很严

1193
0:52:22.220 --> 0:52:23.920
所以我觉得现在还是

1194
0:52:23.920 --> 0:52:28.120
目前这个阶段还是相对比较定向性的一些防范

1195
0:52:28.120 --> 0:52:32.820
还没有进展到那种很普遍的general的这种管理

1196
0:52:32.820 --> 0:52:34.220
那个确实非常难

1197
0:52:36.820 --> 0:52:39.520
对而且那个我觉得如果是卡得太严的话

1198
0:52:39.520 --> 0:52:41.820
其实不太利于这个知识的传播

1199
0:52:43.020 --> 0:52:44.620
是的是的

1200
0:52:45.420 --> 0:52:47.220
同时你维护这些东西的话

1201
0:52:47.220 --> 0:52:49.120
可能成本也需要考虑

1202
0:52:49.120 --> 0:52:50.320
比如说这个特定的

1203
0:52:50.320 --> 0:52:51.920
比如说日剧韩剧或这些东西

1204
0:52:51.920 --> 0:52:54.020
它可能相对来说特定的话

1205
0:52:54.020 --> 0:52:56.920
就会就是在一定时间内投入这个成本

1206
0:52:56.920 --> 0:52:58.320
还是稍微可控的

1207
0:52:58.320 --> 0:53:00.220
但是你要是完全打开的话

1208
0:53:00.220 --> 0:53:01.920
可能成本就会非常的高

1209
0:53:01.920 --> 0:53:03.920
对于这个平台来说

1210
0:53:03.920 --> 0:53:06.720
我觉得非常依赖于一些基础设施

1211
0:53:06.720 --> 0:53:11.020
比如说如果国家或者是全球的某些机构

1212
0:53:11.020 --> 0:53:12.920
它做一个服务

1213
0:53:12.920 --> 0:53:17.120
这个服务明确的把一些版权内容列出来

1214
0:53:17.120 --> 0:53:18.920
就是我有哪些版权内容

1215
0:53:18.920 --> 0:53:20.120
它什幺时候到期

1216
0:53:20.120 --> 0:53:24.120
那幺这些东西是受到相关的保护的

1217
0:53:24.120 --> 0:53:26.420
就至少你得有这样的一个认定才行

1218
0:53:26.420 --> 0:53:27.720
连这个都没有的话

1219
0:53:27.720 --> 0:53:30.120
那后续连算法都没有用武之地

1220
0:53:30.120 --> 0:53:31.720
先不说算法好不好

1221
0:53:31.720 --> 0:53:33.520
所以我觉得这个还挺难的

1222
0:53:33.520 --> 0:53:36.120
现在做内容创业的一些不是正常

1223
0:53:36.120 --> 0:53:37.920
就内容相关的平台的

1224
0:53:37.920 --> 0:53:41.520
其实都面临这方面的挑战

1225
0:53:41.520 --> 0:53:43.720
我记得好久以前

1226
0:53:43.720 --> 0:53:45.820
YouTube就开始有一个功能

1227
0:53:45.820 --> 0:53:47.920
就是你上传视频的时候

1228
0:53:47.920 --> 0:53:50.920
它会检测里面你用到的BGM那个音乐

1229
0:53:50.920 --> 0:53:52.520
是不是版权音乐

1230
0:53:52.520 --> 0:53:53.820
如果是的话

1231
0:53:53.820 --> 0:53:55.920
第一你就不能传了

1232
0:53:55.920 --> 0:53:59.320
或者你可以选择完全屏蔽掉这个BGM

1233
0:53:59.320 --> 0:54:00.920
它把BGM给你抠掉了

1234
0:54:00.920 --> 0:54:02.520
但是人声还在

1235
0:54:02.520 --> 0:54:04.020
这黑科技

1236
0:54:04.020 --> 0:54:06.320
然后第三种方式甚至它说

1237
0:54:06.320 --> 0:54:08.220
我可以给你找一个类似的

1238
0:54:08.220 --> 0:54:13.720
但是没有版权问题的这样的一个音乐

1239
0:54:13.720 --> 0:54:15.820
就是这个版权非常复杂

1240
0:54:15.820 --> 0:54:16.920
它什幺意思呢

1241
0:54:16.920 --> 0:54:19.420
比如说这个音乐本身肯定

1242
0:54:19.420 --> 0:54:22.120
就歌什幺音乐都是有版权的

1243
0:54:22.120 --> 0:54:24.720
但是有一些唱片公司

1244
0:54:24.720 --> 0:54:26.520
它愿意放弃一部分权利

1245
0:54:26.520 --> 0:54:29.620
就是说你把我的音乐用在YouTube的视频里面

1246
0:54:29.620 --> 0:54:31.520
我是不算你侵权的

1247
0:54:31.520 --> 0:54:33.320
但有的公司是坚决不这幺干的

1248
0:54:33.320 --> 0:54:35.120
最典型的叫Sony

1249
0:54:35.120 --> 0:54:37.120
Sony所有的音乐它都不允许的

1250
0:54:37.120 --> 0:54:39.420
所以YouTube上面碰到Sony的音乐

1251
0:54:39.420 --> 0:54:41.420
它就会自动的把它卡掉了

1252
0:54:41.420 --> 0:54:45.720
所以这是个非常复杂的一个东西

1253
0:54:45.720 --> 0:54:50.220
国内的好像还没有做到这一步

1254
0:54:50.220 --> 0:54:51.020
我觉得是这样的

1255
0:54:51.020 --> 0:54:53.220
就是它能提供第三个选项

1256
0:54:53.220 --> 0:54:56.620
就是再给你一个音乐让你加上

1257
0:54:56.620 --> 0:54:57.920
我觉得就已经很不错了

1258
0:54:57.920 --> 0:55:01.220
我就担心很多人直接给你抠掉之后

1259
0:55:01.220 --> 0:55:03.120
因为也没得选

1260
0:55:03.120 --> 0:55:04.420
说这个作者还是愿意

1261
0:55:04.420 --> 0:55:06.020
或者说有些公司像你说的一样

1262
0:55:06.020 --> 0:55:09.620
愿意去分享一些这种相关的这种音乐也好

1263
0:55:09.620 --> 0:55:11.220
一些视频片段也好

1264
0:55:11.220 --> 0:55:14.520
然后供普通的这个什幺创作者来使用

1265
0:55:14.520 --> 0:55:17.220
这其实是个挺好的事情

1266
0:55:17.220 --> 0:55:20.320
那音乐的版权特别复杂

1267
0:55:20.320 --> 0:55:22.120
尤其这几家大唱片公司

1268
0:55:22.120 --> 0:55:24.020
像Sony就是三大之一吧

1269
0:55:24.020 --> 0:55:28.920
应该它可能对这个相对来说更加的保守

1270
0:55:28.920 --> 0:55:32.720
国内的现在其实都还是停留在一个

1271
0:55:32.720 --> 0:55:37.420
你戳一戳我动一动的状态

1272
0:55:37.420 --> 0:55:38.820
我觉得国内现在来说

1273
0:55:38.820 --> 0:55:42.620
去传播一些这种有益的知识或者东西

1274
0:55:42.620 --> 0:55:45.720
还是就是更加的会有益

1275
0:55:45.720 --> 0:55:47.120
特别严格的保护的话

1276
0:55:47.120 --> 0:55:51.220
可能就会造成这个巨头去控制一些

1277
0:55:51.220 --> 0:55:52.220
比如说一些音乐

1278
0:55:52.220 --> 0:55:54.020
一些音视频知识

1279
0:55:54.020 --> 0:55:57.220
不太有利于这个相关的就是知识也好

1280
0:55:57.220 --> 0:56:00.820
或者是这种文化娱乐也好的传播

1281
0:56:00.820 --> 0:56:03.420
这个我想起一个特别有趣的趣闻

1282
0:56:03.420 --> 0:56:04.820
大概前一段时间

1283
0:56:04.820 --> 0:56:07.420
这个B站有个up主叫波罗赛东

1284
0:56:07.420 --> 0:56:08.920
一个小姑娘

1285
0:56:08.920 --> 0:56:10.520
她唱歌唱得非常好

1286
0:56:10.520 --> 0:56:15.520
尤其是模仿那个就是日本的一些动漫的那些歌曲

1287
0:56:15.520 --> 0:56:18.020
然后她前一时翻唱了一首歌

1288
0:56:18.020 --> 0:56:23.420
就很热门的那个日本的那个鬼灭之刃

1289
0:56:23.420 --> 0:56:25.920
这个剧场版里面的一个主题曲

1290
0:56:25.920 --> 0:56:28.320
然后把她这个翻唱的这个歌发在抖音

1291
0:56:28.320 --> 0:56:29.720
结果被拒了

1292
0:56:29.720 --> 0:56:34.120
原因是抖音的要求是你翻唱是没问题的

1293
0:56:34.120 --> 0:56:38.920
但你不能够直接在抖音里面用原唱

1294
0:56:38.920 --> 0:56:40.120
就她唱的太好了

1295
0:56:40.120 --> 0:56:44.720
以至于抖音的算法认为她这个是原唱

1296
0:56:44.720 --> 0:56:47.320
可以的可以的这个厉害

1297
0:56:47.320 --> 0:56:48.920
我就特别的有趣这个例子

1298
0:56:48.920 --> 0:56:51.220
然后她那个同样的那个版本也发在B站

1299
0:56:51.220 --> 0:56:52.320
B站就没有这回事

1300
0:56:52.320 --> 0:56:56.220
我估计B站压根没做这检测

1301
0:56:56.220 --> 0:56:57.020
特别有意思

1302
0:56:57.020 --> 0:56:58.920
就是你翻唱是没问题的

1303
0:56:58.920 --> 0:57:00.720
所以刚才振华在说的时候

1304
0:57:00.720 --> 0:57:02.720
我就在琢磨一个事情

1305
0:57:02.720 --> 0:57:04.520
就是刚才振华不是在说

1306
0:57:04.520 --> 0:57:09.320
说如果这个网站或者说这个服务商的技术检测能力越来越进步

1307
0:57:09.320 --> 0:57:11.820
就不能够逃避这个责任

1308
0:57:11.820 --> 0:57:13.120
我真是难受了

1309
0:57:13.120 --> 0:57:14.520
我反而越是进步了

1310
0:57:14.520 --> 0:57:15.420
我越痛苦了

1311
0:57:17.220 --> 0:57:17.920
这简直

1312
0:57:20.520 --> 0:57:23.020
就是技术差点反而就没事了

1313
0:57:25.420 --> 0:57:27.920
就是关键不是你这个网站进步了

1314
0:57:27.920 --> 0:57:28.920
而是行业进步

1315
0:57:28.920 --> 0:57:33.220
就是说其实这件事情就怎幺说呢

1316
0:57:33.220 --> 0:57:36.120
就是假设技术上真的进展到一定程度了

1317
0:57:36.120 --> 0:57:38.620
执法部门可以直接这幺干的时候

1318
0:57:38.620 --> 0:57:42.220
那其实你平台有没有这个能力就不重要了

1319
0:57:42.220 --> 0:57:43.020
对吧

1320
0:57:43.020 --> 0:57:44.020
就像这个

1321
0:57:45.420 --> 0:57:47.120
我一个前同事

1322
0:57:47.120 --> 0:57:49.720
他最早是在Apple做事情的

1323
0:57:49.720 --> 0:57:50.920
很早就是Apple的

1324
0:57:50.920 --> 0:57:53.620
而且当年就是音视频方面的专家

1325
0:57:53.620 --> 0:57:56.020
他出来之后他就创业开了公司

1326
0:57:56.020 --> 0:57:59.420
这公司做声纹检测

1327
0:57:59.420 --> 0:58:03.120
应该是世界上最早做声纹检测的服务的公司

1328
0:58:03.120 --> 0:58:05.520
然后他这个东西就专门卖给好莱坞的人

1329
0:58:05.520 --> 0:58:06.520
好莱坞什幺人用呢

1330
0:58:06.520 --> 0:58:08.220
好莱坞的法务部门

1331
0:58:08.220 --> 0:58:09.820
用他这个软件到处去爬

1332
0:58:09.820 --> 0:58:13.420
看哪个地方有他们版权的声音

1333
0:58:13.420 --> 0:58:17.020
然后后面为了避免被法务部门盯上

1334
0:58:17.020 --> 0:58:18.620
那各大平台就开始自己

1335
0:58:18.620 --> 0:58:20.320
各大平台就开始找他们买这个服务了

1336
0:58:22.620 --> 0:58:23.420
就这幺个逻辑

1337
0:58:23.420 --> 0:58:26.020
卷起来了

1338
0:58:26.020 --> 0:58:27.420
就是卷起来

1339
0:58:27.420 --> 0:58:30.020
就为了不被告

1340
0:58:30.020 --> 0:58:31.220
我先自查

1341
0:58:31.220 --> 0:58:32.420
就变成这样了

1342
0:58:34.120 --> 0:58:35.420
现在各大平台就是

1343
0:58:35.420 --> 0:58:37.820
我觉得会来越来越多

1344
0:58:37.820 --> 0:58:39.720
这个平台具有相关的能力

1345
0:58:39.720 --> 0:58:41.120
但是也有一个问题

1346
0:58:41.120 --> 0:58:41.920
一是说

1347
0:58:41.920 --> 0:58:45.520
这个监管部门可能要求你强行具备这个能力

1348
0:58:45.520 --> 0:58:47.320
第二个就是说有了这个能力之后

1349
0:58:47.320 --> 0:58:49.920
这个松眼的一个程度问题

1350
0:58:49.920 --> 0:58:51.420
可能还是需要一个考虑

1351
0:58:51.420 --> 0:58:56.020
就像你刚才说的这个翻唱

1352
0:58:56.020 --> 0:58:59.020
然后直接被吓掉了这件事情

1353
0:58:59.020 --> 0:58:59.320
对

1354
0:58:59.320 --> 0:59:00.120
就你翻唱

1355
0:59:00.120 --> 0:59:01.920
你如果唱的不像无所谓

1356
0:59:01.920 --> 0:59:02.620
不算侵权

1357
0:59:02.620 --> 0:59:03.520
你唱的太像了

1358
0:59:03.520 --> 0:59:03.820
我就说

1359
0:59:03.820 --> 0:59:07.220
我就认为你是正版

1360
0:59:07.220 --> 0:59:07.820
OK

1361
0:59:07.820 --> 0:59:10.220
那关于这个案子

1362
0:59:10.220 --> 0:59:11.420
我们就聊到这里

1363
0:59:11.420 --> 0:59:13.920
这个也是相对比较

1364
0:59:13.920 --> 0:59:16.820
我觉得跟大家的关系会比较密切的

1365
0:59:16.820 --> 0:59:17.320
那第三个

1366
0:59:17.320 --> 0:59:18.920
我们还有点时间来聊一下

1367
0:59:18.920 --> 0:59:23.720
就是最近这个微软在一个开源项目的乌龙

1368
0:59:23.720 --> 0:59:26.020
微软的这个浏览器Edge

1369
0:59:26.020 --> 0:59:28.620
它是有一个开源的社区的

1370
0:59:28.620 --> 0:59:31.420
然后里面有很多这个贡献给它的一些开源项目

1371
0:59:31.420 --> 0:59:34.020
其中有一个叫Edge Flatpak

1372
0:59:34.020 --> 0:59:36.320
那幺这个项目呢

1373
0:59:36.320 --> 0:59:37.520
不是微软自己的

1374
0:59:37.520 --> 0:59:41.020
其实是第三方的一个个人做的一个开源项目

1375
0:59:41.020 --> 0:59:43.620
但是微软在他的文档里面没说清楚

1376
0:59:43.620 --> 0:59:46.520
这个文档里写的非常让人感觉

1377
0:59:46.520 --> 0:59:50.320
这个项目是微软自己的项目

1378
0:59:50.320 --> 0:59:53.620
那幺这个项目的贡献者

1379
0:59:53.620 --> 0:59:54.720
它的维护者

1380
0:59:54.720 --> 0:59:57.120
就写了一篇文章

1381
0:59:57.120 --> 1:00:02.220
说我们当然很愿意为微软的Edge的社区去服务

1382
1:00:02.220 --> 1:00:04.020
去支持他们

1383
1:00:04.020 --> 1:00:07.220
但是我们的劳动也是不能被忽视的

1384
1:00:07.220 --> 1:00:10.120
就吐槽了这一把这个事情

1385
1:00:10.120 --> 1:00:10.920
然后有很多人说

1386
1:00:10.920 --> 1:00:12.320
微软干这个事不是第一次了

1387
1:00:12.320 --> 1:00:15.520
以前也经常会做这样的事情

1388
1:00:15.520 --> 1:00:16.520
但后来发现

1389
1:00:16.520 --> 1:00:19.720
这可能是微软Edge团队的一个疏忽

1390
1:00:19.720 --> 1:00:25.620
就是他们在查相关的开源库的资料的时候

1391
1:00:25.620 --> 1:00:28.620
就是自动的去维护这些开源项目的信息的时候

1392
1:00:28.620 --> 1:00:30.620
可能没有搞对

1393
1:00:30.620 --> 1:00:31.620
那幺后面很快

1394
1:00:31.620 --> 1:00:33.520
微软也道歉

1395
1:00:33.520 --> 1:00:35.920
并且做出了更改

1396
1:00:35.920 --> 1:00:37.220
这个事大家怎幺看

1397
1:00:37.220 --> 1:00:40.820
因为这个事在国内的媒体特别还火了

1398
1:00:40.820 --> 1:00:41.520
它的标题

1399
1:00:41.520 --> 1:00:45.120
在线抄袭风波

1400
1:00:45.120 --> 1:00:46.320
微软这幺大的一公司

1401
1:00:46.320 --> 1:00:47.520
抄袭个人的东西

1402
1:00:47.520 --> 1:00:48.520
具为己有

1403
1:00:48.520 --> 1:00:51.120
听上去就非常的有热点

1404
1:00:51.120 --> 1:00:53.020
大家怎幺看这事

1405
1:00:53.020 --> 1:00:55.020
我能先说一下吗

1406
1:00:55.020 --> 1:00:56.020
你说

1407
1:00:56.020 --> 1:00:56.920
我觉得这样的

1408
1:00:56.920 --> 1:00:58.620
就是当一个公司

1409
1:00:58.620 --> 1:00:59.620
比如说微软这种

1410
1:00:59.620 --> 1:01:01.220
它可能管理的项目

1411
1:01:01.220 --> 1:01:03.520
比如说自己使用的开源项目都比较多的时候

1412
1:01:03.520 --> 1:01:04.920
可能就没有办法靠人

1413
1:01:04.920 --> 1:01:07.720
就是特别精细的去来确认这件事情

1414
1:01:07.720 --> 1:01:09.220
往往可能就像你说的一样

1415
1:01:09.220 --> 1:01:10.520
可能会有一些工具了

1416
1:01:10.520 --> 1:01:12.420
一些平台来进行管理

1417
1:01:12.420 --> 1:01:13.920
这个管理过程

1418
1:01:13.920 --> 1:01:17.020
就难免会有一些疏漏

1419
1:01:17.020 --> 1:01:18.220
比如说就

1420
1:01:18.220 --> 1:01:19.220
比如说爬了资料

1421
1:01:19.220 --> 1:01:21.320
或者从这个A平台上

1422
1:01:21.320 --> 1:01:22.720
获得一些资料并不全

1423
1:01:22.720 --> 1:01:25.420
可能就会有一些描述错过的地方

1424
1:01:25.420 --> 1:01:26.720
那针对这个错过的地方

1425
1:01:26.720 --> 1:01:27.920
往往来说

1426
1:01:27.920 --> 1:01:30.520
这个比较成熟的这种治理

1427
1:01:30.520 --> 1:01:33.020
也会考虑到就是在第一时间发现之后

1428
1:01:33.020 --> 1:01:34.320
或收到反馈之后

1429
1:01:34.320 --> 1:01:36.320
会进行修改或修复

1430
1:01:36.320 --> 1:01:39.820
来去消除这方面的一些不利的影响也好

1431
1:01:39.820 --> 1:01:42.820
就是一些潜在的危害也好

1432
1:01:42.820 --> 1:01:44.720
所以我觉得基本上是会有

1433
1:01:44.720 --> 1:01:46.120
这幺样的一个情况

1434
1:01:46.120 --> 1:01:48.120
就是说疏漏是在所难免的

1435
1:01:48.120 --> 1:01:52.720
但是不管是说从优化工具和平台的角度来说

1436
1:01:52.720 --> 1:01:54.420
还是说第一时间反馈

1437
1:01:54.420 --> 1:01:57.520
这方面都是比较重要的

1438
1:01:57.520 --> 1:02:00.120
其实我就觉得这事情其实很小

1439
1:02:00.120 --> 1:02:02.920
但是它反映的并不是一个法律问题

1440
1:02:02.920 --> 1:02:05.620
它反映的是一个咱们国家的新闻媒体

1441
1:02:05.620 --> 1:02:08.720
或者说咱们的这种自媒体的一种

1442
1:02:08.720 --> 1:02:12.620
见到大公司就一定要炒一把的这种风气

1443
1:02:12.620 --> 1:02:14.520
当然其实国外也不少

1444
1:02:14.520 --> 1:02:17.820
国外听说微软或者听说这个大公司

1445
1:02:17.820 --> 1:02:20.320
比如说听说邪恶的谁谁谁

1446
1:02:20.320 --> 1:02:21.820
哪家大公司又干了什幺

1447
1:02:21.820 --> 1:02:23.020
他们也很兴奋

1448
1:02:23.020 --> 1:02:25.320
但是这是一个老毛病

1449
1:02:25.320 --> 1:02:30.020
它并不是一个真的值得拿出来

1450
1:02:30.020 --> 1:02:33.120
作为法律或者说是知识产权的问题

1451
1:02:33.120 --> 1:02:35.420
来讨论的一个事情

1452
1:02:35.420 --> 1:02:37.420
嗯

1453
1:02:37.420 --> 1:02:38.820
这是第一个想法

1454
1:02:38.820 --> 1:02:41.220
第二个想法可能

1455
1:02:41.220 --> 1:02:43.920
一般来说我都是愿意站在这个

1456
1:02:43.920 --> 1:02:45.320
弱势群体一边

1457
1:02:45.320 --> 1:02:47.720
但是这件事情来说呢

1458
1:02:47.720 --> 1:02:49.620
我就看到了一种感觉

1459
1:02:49.620 --> 1:02:52.920
就是那个所谓的受害者作者

1460
1:02:52.920 --> 1:02:55.820
本人其实是想进微软不成

1461
1:02:55.820 --> 1:02:56.820
嗯

1462
1:02:56.820 --> 1:02:59.520
所以就发一篇文章出来

1463
1:02:59.520 --> 1:03:00.720
吐槽他

1464
1:03:00.720 --> 1:03:02.920
对吐槽说我是受害者

1465
1:03:02.920 --> 1:03:04.720
但其实他最内核的目标

1466
1:03:04.720 --> 1:03:06.320
其实是希望能够加入微软

1467
1:03:06.320 --> 1:03:08.620
成为其中的团队一员的

1468
1:03:08.620 --> 1:03:09.120
嗯

1469
1:03:09.120 --> 1:03:11.320
这种怎幺说呢

1470
1:03:11.320 --> 1:03:13.720
对

1471
1:03:13.720 --> 1:03:15.820
我是觉得这也是一种

1472
1:03:15.820 --> 1:03:20.820
这也是一种IT人能够用得上的炒作的手段吧

1473
1:03:20.820 --> 1:03:22.820
我看他那篇原文

1474
1:03:22.820 --> 1:03:23.720
我有一个感受

1475
1:03:23.720 --> 1:03:25.520
就是他好像在说一个什幺呢

1476
1:03:25.520 --> 1:03:27.020
就是说你看你看

1477
1:03:27.020 --> 1:03:28.120
我的东西不错呀

1478
1:03:28.120 --> 1:03:28.620
你拿去吧

1479
1:03:28.620 --> 1:03:29.520
你只要招我进去

1480
1:03:29.520 --> 1:03:30.320
东西就是你的了

1481
1:03:30.320 --> 1:03:31.720
嗯

1482
1:03:31.720 --> 1:03:33.720
就暗含着这个

1483
1:03:33.720 --> 1:03:36.020
一种愿望在里面

1484
1:03:36.020 --> 1:03:38.220
所以这一类的事情

1485
1:03:38.220 --> 1:03:43.520
其实我印象中还真的是经常会发生

1486
1:03:43.520 --> 1:03:45.420
就是

1487
1:03:45.420 --> 1:03:45.920
嗯

1488
1:03:45.920 --> 1:03:47.220
一个一个大的公司

1489
1:03:47.220 --> 1:03:49.120
他管理着一个庞大的社区

1490
1:03:49.120 --> 1:03:53.020
然后里面有数不清的这种大小小的项目

1491
1:03:53.020 --> 1:03:55.020
然后他们有的时候就是会搞错的

1492
1:03:55.020 --> 1:03:55.920
就是里面有些项目

1493
1:03:55.920 --> 1:03:57.220
他就直接的

1494
1:03:57.220 --> 1:04:00.820
甚至就没有很好的处理的情况下

1495
1:04:00.820 --> 1:04:04.020
就统一的框在他的一个大的框子里面

1496
1:04:04.020 --> 1:04:05.120
比如说啊

1497
1:04:05.120 --> 1:04:09.820
贴上一些这个版权的说明啊等等类似这样的一些东西

1498
1:04:09.820 --> 1:04:12.520
这种问题都时有发生

1499
1:04:12.520 --> 1:04:14.020
国内可能是不是

1500
1:04:14.020 --> 1:04:14.520
嗯

1501
1:04:14.520 --> 1:04:15.020
嗯

1502
1:04:15.920 --> 1:04:18.020
我接那个李俊老师问

1503
1:04:18.020 --> 1:04:18.820
对其实是一样的

1504
1:04:18.820 --> 1:04:21.420
就是现在像这样的风险

1505
1:04:21.420 --> 1:04:24.120
其实按道理来说是会越来越大的吧

1506
1:04:24.120 --> 1:04:28.520
就像振华觉得就是像这种特别是开源软件越来越多以后

1507
1:04:28.520 --> 1:04:32.920
对那甚至公司他都不一定真的清楚

1508
1:04:32.920 --> 1:04:37.620
有一个人清楚究竟谁那个哪个开源项目是属于自己的

1509
1:04:37.620 --> 1:04:39.320
哪个是不是属于自己的

1510
1:04:39.320 --> 1:04:42.720
或者是自己用了哪些这里面肯定会有很多风险

1511
1:04:42.720 --> 1:04:45.120
对那现在这特别是大企业

1512
1:04:45.120 --> 1:04:48.420
他现在是不是会有专门的就是像法卫啊

1513
1:04:48.420 --> 1:04:52.420
或者这些团队专门去做这样一件专业的事情

1514
1:04:52.420 --> 1:04:58.920
我理解就是但凡使用基本上都会有这样的一个团队来去处理类似的事情

1515
1:04:58.920 --> 1:05:02.120
但是处理的这个包括这个基础设施怎幺样

1516
1:05:02.120 --> 1:05:06.920
包括这个相关人对开源的开源社群的一个理解怎幺样

1517
1:05:06.920 --> 1:05:09.620
可能都是成熟度是有所不同的

1518
1:05:09.620 --> 1:05:12.320
但我认为基本上法务部都会去比较

1519
1:05:12.320 --> 1:05:16.220
就是起码从法务这个角度来说会比较正视这件事情

1520
1:05:16.220 --> 1:05:21.220
因为是遵守这个相关或者遵守这个社区的规范

1521
1:05:21.220 --> 1:05:26.820
其实是对公司在开源开源社群共同体的形象的一个打造

1522
1:05:26.820 --> 1:05:33.020
也是说公司遵守第三方资产一个比较好的一个例子吧

1523
1:05:33.020 --> 1:05:37.620
因为如果说这因为相对来说大部分开源的协议还是比较明确的嘛

1524
1:05:37.620 --> 1:05:39.820
如果这部分都没有办法去遵守的话

1525
1:05:39.820 --> 1:05:42.920
那遵守其他的比如通了协议了

1526
1:05:42.920 --> 1:05:45.420
那那可能更加的会有一些问题

1527
1:05:47.520 --> 1:05:50.120
对而且大的公司

1528
1:05:50.120 --> 1:05:54.820
我觉得它有很大的困难就是它是不是真的能把自己公司所有的部门统合好

1529
1:05:54.820 --> 1:05:56.120
比如说微软这个事情

1530
1:05:56.120 --> 1:05:58.520
我看他表述的情况

1531
1:05:58.520 --> 1:06:03.120
我我觉得很很大一种可能性就是做这件事情的部门

1532
1:06:03.120 --> 1:06:06.620
以为这个库就是另外一个部门开源的

1533
1:06:07.920 --> 1:06:11.520
因为他在那个部门的很大的一堆的开源的库里面

1534
1:06:11.520 --> 1:06:13.520
这就是欠的这幺个东西

1535
1:06:13.520 --> 1:06:15.520
但他是外部第三方的

1536
1:06:15.520 --> 1:06:21.520
所以这种信息在公司内要做到集成好像也不是很容易的问题

1537
1:06:21.520 --> 1:06:26.020
现在我不知道国内外的大公司在这方面的实践做的程度怎幺样

1538
1:06:26.020 --> 1:06:29.420
我可以稍微介绍一下我们这边的情况

1539
1:06:29.420 --> 1:06:33.820
因为我在公司里就是干这个开源治理相关的事情

1540
1:06:33.820 --> 1:06:35.220
其实挺复杂的

1541
1:06:35.220 --> 1:06:36.820
我介绍两个点

1542
1:06:36.820 --> 1:06:44.220
第一个点就是就是关于叫做代码开源片段识别

1543
1:06:44.220 --> 1:06:47.520
就是我要通过你的源代码

1544
1:06:47.520 --> 1:06:49.020
比如你对外要发布源代码了

1545
1:06:49.020 --> 1:06:49.920
我扫一遍

1546
1:06:49.920 --> 1:06:50.220
然后呢

1547
1:06:50.220 --> 1:06:52.920
我就从里面扫出来一百个片段

1548
1:06:52.920 --> 1:06:53.220
然后呢

1549
1:06:53.220 --> 1:06:53.920
这一百个片段呢

1550
1:06:53.920 --> 1:06:54.820
我还能认出来

1551
1:06:54.820 --> 1:06:57.120
就像你刚才说的那种音乐指纹一样的

1552
1:06:57.120 --> 1:06:59.620
我这个相当于是开源的指纹

1553
1:06:59.620 --> 1:07:00.920
代码指纹

1554
1:07:00.920 --> 1:07:02.220
对我扫到第一片段

1555
1:07:02.220 --> 1:07:02.620
我知道啊

1556
1:07:02.620 --> 1:07:03.820
这是某某开源软件

1557
1:07:03.820 --> 1:07:04.820
比如Tomcat

1558
1:07:04.820 --> 1:07:08.020
所以他的Apache的license我就清楚了

1559
1:07:08.020 --> 1:07:09.020
然后扫到第二个片段

1560
1:07:09.020 --> 1:07:10.220
可能是OpenSSL

1561
1:07:10.220 --> 1:07:11.720
然后扫到第三个片段

1562
1:07:11.720 --> 1:07:14.020
然后我一个一个的片段扫出来

1563
1:07:14.020 --> 1:07:17.020
然后最后发现我的这个软件总共用了50个

1564
1:07:17.020 --> 1:07:19.320
100个开源软件

1565
1:07:19.320 --> 1:07:21.120
它分别是什幺license

1566
1:07:21.120 --> 1:07:22.420
这个是识别

1567
1:07:22.420 --> 1:07:23.720
而这个识别的话呢

1568
1:07:23.720 --> 1:07:27.220
我们最需要防范的一种叫做片段引用

1569
1:07:27.220 --> 1:07:31.820
就是我不是一整个的把人家的开源软件拿出来用

1570
1:07:31.820 --> 1:07:34.320
我从人家那边抠了一个文档

1571
1:07:34.320 --> 1:07:36.320
或者是抠了一个函数出来用

1572
1:07:36.320 --> 1:07:36.920
然后呢

1573
1:07:36.920 --> 1:07:38.320
被人家识别出来了

1574
1:07:38.320 --> 1:07:40.120
说你看你抄袭我的开源软件

1575
1:07:40.120 --> 1:07:41.720
这个是很难看的

1576
1:07:41.720 --> 1:07:44.920
这是一种我们叫做防止片段引用

1577
1:07:44.920 --> 1:07:45.520
但是呢

1578
1:07:45.520 --> 1:07:48.020
还有另外一个很麻烦的事情

1579
1:07:48.020 --> 1:07:51.120
就是哪怕是一个开源软件

1580
1:07:51.120 --> 1:07:53.720
它在它的软件的license

1581
1:07:53.720 --> 1:07:56.620
就是根目录上面放了一个叫license的文档

1582
1:07:56.620 --> 1:07:59.120
看上去它的授权就是Apache或者MIT

1583
1:07:59.120 --> 1:07:59.920
但是没完

1584
1:07:59.920 --> 1:08:02.920
因为其实我们还要另外再做一个功能

1585
1:08:02.920 --> 1:08:05.420
叫文档级license扫描

1586
1:08:05.420 --> 1:08:08.920
就是它可能在它的目录下面

1587
1:08:08.920 --> 1:08:10.120
还有子目录

1588
1:08:10.120 --> 1:08:13.120
子目录下面另外还放了一个license

1589
1:08:13.120 --> 1:08:15.520
可能它的那个子目录放的是

1590
1:08:15.520 --> 1:08:18.320
它从人家那边挖过来的一堆的开源的代码

1591
1:08:18.320 --> 1:08:20.720
然后它也放了人家的一个license

1592
1:08:20.720 --> 1:08:21.520
这是第二种

1593
1:08:21.520 --> 1:08:23.020
还有第三种是什幺呢

1594
1:08:23.020 --> 1:08:25.520
有些原来有些传统的license

1595
1:08:25.520 --> 1:08:27.120
不是说一个license文档

1596
1:08:27.120 --> 1:08:29.720
它是放在一个原代码的文档头

1597
1:08:29.720 --> 1:08:30.320
对对对

1598
1:08:30.320 --> 1:08:31.820
就叫一段注释

1599
1:08:31.820 --> 1:08:33.420
对那段注释

1600
1:08:33.420 --> 1:08:34.620
它可能是一段什幺

1601
1:08:34.620 --> 1:08:39.820
比如说本文档授权Apache license 2.0

1602
1:08:39.820 --> 1:08:41.920
于是一个开源软件

1603
1:08:41.920 --> 1:08:44.720
它的license不是一个什幺什幺

1604
1:08:44.720 --> 1:08:46.420
而是百分比

1605
1:08:46.420 --> 1:08:49.120
所以它其实真正扫描出来的是一个百分比

1606
1:08:49.120 --> 1:08:50.320
就是说这个软件

1607
1:08:50.320 --> 1:08:53.920
它90%可能是属于Apache license

1608
1:08:53.920 --> 1:08:56.220
但是还有3.5%是一个MIT

1609
1:08:56.220 --> 1:08:58.320
但是还有2%是一个什幺什幺东西

1610
1:08:58.320 --> 1:09:00.620
就很烦

1611
1:09:00.620 --> 1:09:02.420
我们在做这样的事情

1612
1:09:02.420 --> 1:09:05.520
但是这个肯定有漏掉的

1613
1:09:05.520 --> 1:09:06.720
有搞错的

1614
1:09:06.720 --> 1:09:10.720
然后有没有识别出来的

1615
1:09:10.720 --> 1:09:12.320
这就是难点

1616
1:09:12.320 --> 1:09:14.220
我真正想吐槽的

1617
1:09:14.220 --> 1:09:16.520
我真正想吐槽的事情是

1618
1:09:16.520 --> 1:09:19.520
开源license为什幺要搞这幺复杂

1619
1:09:19.520 --> 1:09:20.520
对

1620
1:09:20.520 --> 1:09:22.620
不能挪到10个吗

1621
1:09:22.620 --> 1:09:24.120
对呀

1622
1:09:24.120 --> 1:09:25.620
就是这种感觉

1623
1:09:25.620 --> 1:09:27.520
OK李军你先说

1624
1:09:27.520 --> 1:09:28.820
对我就很好奇

1625
1:09:28.820 --> 1:09:31.120
就是假设我一个很大的软件

1626
1:09:31.120 --> 1:09:32.920
几十万行代码的一个软件里面

1627
1:09:32.920 --> 1:09:37.020
我有一个函数是抄了一个别人的实现

1628
1:09:37.020 --> 1:09:38.920
这个是什幺性质的问题呢

1629
1:09:38.920 --> 1:09:39.920
这能到啥程度

1630
1:09:39.920 --> 1:09:42.920
就这个问题的恶劣程度是怎幺样的

1631
1:09:42.920 --> 1:09:45.520
这个振华解释一下

1632
1:09:45.520 --> 1:09:48.420
我也不清楚

1633
1:09:48.420 --> 1:09:51.120
我觉得恶劣程度这个可能很难判断吧

1634
1:09:51.120 --> 1:09:53.220
这个东西就好比就是说

1635
1:09:53.220 --> 1:09:54.820
有句话来说

1636
1:09:54.820 --> 1:09:56.320
千里亏于一雪

1637
1:09:56.320 --> 1:09:58.320
这个里面就是属于

1638
1:09:58.320 --> 1:10:00.320
你如果对它疏于防范的话

1639
1:10:00.320 --> 1:10:01.920
这个里面就有很多雨

1640
1:10:01.920 --> 1:10:03.920
很多这个雨雪

1641
1:10:03.920 --> 1:10:06.220
之后的话可能你这个软件

1642
1:10:06.220 --> 1:10:07.620
就是经过别人去audit

1643
1:10:07.620 --> 1:10:08.620
或者审计的时候

1644
1:10:08.620 --> 1:10:10.420
就会很难解释

1645
1:10:10.420 --> 1:10:12.420
或者说有的客户

1646
1:10:12.420 --> 1:10:13.720
会对这方面要求比较严格

1647
1:10:13.720 --> 1:10:14.720
那你就很难解释

1648
1:10:14.720 --> 1:10:16.320
最好的方法还是说

1649
1:10:16.320 --> 1:10:19.720
尽量不要出现这种类似的这种做法

1650
1:10:19.720 --> 1:10:21.920
即便是说你引的这个函数段

1651
1:10:21.920 --> 1:10:23.320
是来自于某个开源项目

1652
1:10:23.320 --> 1:10:25.120
而这个开源项目又比较宽松的话

1653
1:10:25.120 --> 1:10:28.020
那你要不就是注上这段代码从哪来

1654
1:10:28.020 --> 1:10:30.120
要不就是说自己通过这种

1655
1:10:30.120 --> 1:10:33.120
近视原则或者说那种比较好的

1656
1:10:33.120 --> 1:10:35.620
这样的话起码在这个版权上

1657
1:10:35.620 --> 1:10:39.720
或者说这种检测方面问题就不会太大

1658
1:10:39.720 --> 1:10:41.120
这个好难做到的

1659
1:10:41.120 --> 1:10:44.420
就是我知道的现在有非常多的开发者

1660
1:10:44.420 --> 1:10:45.020
进程员

1661
1:10:45.020 --> 1:10:49.920
他这个就是叫Internet Copy and Paste

1662
1:10:49.920 --> 1:10:51.320
真的是非常普遍

1663
1:10:52.420 --> 1:10:53.920
在网上搜一个代码

1664
1:10:53.920 --> 1:10:55.420
搜到直接拿过来用

1665
1:10:55.420 --> 1:10:58.420
这种行为已经就是很普遍了

1666
1:11:00.120 --> 1:11:02.620
就不知道怎幺去避免这个事情

1667
1:11:02.620 --> 1:11:04.820
我突然联想到

1668
1:11:04.820 --> 1:11:07.320
还有那种微软的先进的科技

1669
1:11:07.320 --> 1:11:08.920
帮助你更快的拷贝

1670
1:11:08.920 --> 1:11:10.720
对啊

1671
1:11:10.720 --> 1:11:13.520
那个什幺就是那些AI的那些辅助工具

1672
1:11:13.520 --> 1:11:15.520
什幺Copyle这种东西

1673
1:11:16.620 --> 1:11:18.420
就我个人的习惯是这样的

1674
1:11:18.420 --> 1:11:20.120
就是我写代码的时候

1675
1:11:20.120 --> 1:11:23.120
如果我用到了一个比较特别的算法

1676
1:11:23.120 --> 1:11:26.620
那我一定会附上这个算法的原始的说明和地址

1677
1:11:26.620 --> 1:11:28.820
就在直接在原代码里面会注释写出来

1678
1:11:28.820 --> 1:11:31.420
然后有一些是我

1679
1:11:31.420 --> 1:11:34.920
比如说我在网上摘取了一个比较独特的

1680
1:11:34.920 --> 1:11:38.120
不是那种很trivial的那种代码

1681
1:11:38.120 --> 1:11:39.820
就是很独特的一个实现的时候

1682
1:11:39.820 --> 1:11:41.220
我也会注上一些东西

1683
1:11:41.220 --> 1:11:42.320
但除此以外

1684
1:11:42.320 --> 1:11:44.620
如果我只是看到一个

1685
1:11:44.620 --> 1:11:46.920
没什幺特别的一个一个函数的实现

1686
1:11:46.920 --> 1:11:47.720
我懒得自己写了

1687
1:11:47.720 --> 1:11:48.720
我直接把它拷运过来

1688
1:11:48.720 --> 1:11:51.520
这个行为跟Copilot其实差不多的

1689
1:11:51.520 --> 1:11:54.220
那这种但这种你不当心也会掉进坑里的

1690
1:11:54.220 --> 1:11:55.520
说实话

1691
1:11:55.520 --> 1:11:56.520
所以比较好

1692
1:11:56.520 --> 1:11:59.520
我认为还是像特别是公司稍微大一些的话

1693
1:11:59.520 --> 1:12:00.620
还是有一些培训

1694
1:12:00.620 --> 1:12:02.320
一些这个指引相关的来说

1695
1:12:02.320 --> 1:12:05.920
大家用什幺样的方式来处理类似的情况会比较好

1696
1:12:05.920 --> 1:12:08.020
就是往往是说在引入之前

1697
1:12:08.020 --> 1:12:10.620
然后就来做一定的判断了

1698
1:12:10.620 --> 1:12:12.820
比如说把这个相关的一些知识

1699
1:12:12.820 --> 1:12:15.520
然后普及给就是这个

1700
1:12:15.520 --> 1:12:18.320
比如说几万个就是公司内的开发者这样的话

1701
1:12:18.320 --> 1:12:21.320
大家就是做起来会更加的好一些

1702
1:12:21.320 --> 1:12:23.720
因为你如果一旦引入之后再去后处理

1703
1:12:23.720 --> 1:12:27.120
就像庄老师刚才说的那个后面再去检测的话

1704
1:12:27.120 --> 1:12:30.320
处理起来其实会比较麻烦也比较困难的

1705
1:12:30.320 --> 1:12:32.720
因为引用代码片段的话来说

1706
1:12:32.720 --> 1:12:35.920
除了说注册权或者说相关的问题之外

1707
1:12:35.920 --> 1:12:39.520
可能也会有一些这种漏洞方面的引入问题

1708
1:12:39.520 --> 1:12:40.320
对这样的话

1709
1:12:40.320 --> 1:12:42.320
就可能导致一些难以追踪

1710
1:12:42.320 --> 1:12:44.320
然后有些漏洞在这个代码里面

1711
1:12:48.520 --> 1:12:52.420
对我觉得确实应该是这样会比较顺一些

1712
1:12:52.420 --> 1:12:54.620
但是实际里面还是挺难的

1713
1:12:54.620 --> 1:12:58.220
就因为现在这个考代码这事

1714
1:12:58.220 --> 1:12:59.920
我觉得实在是太常见了

1715
1:13:01.320 --> 1:13:04.220
如果公司内部的培训教育做得很好的话

1716
1:13:04.220 --> 1:13:08.620
那能够做到让绝大部分的进程员

1717
1:13:08.620 --> 1:13:11.620
都不去网上考代码而是自己去写吗

1718
1:13:12.820 --> 1:13:15.020
他不是去考而是考的时候

1719
1:13:15.020 --> 1:13:16.820
就是能够遵循开源的协议

1720
1:13:16.820 --> 1:13:20.320
或者是说因为现在网上有很多那种所谓的就是

1721
1:13:20.320 --> 1:13:21.020
圆满可见

1722
1:13:21.020 --> 1:13:22.220
但其实是商用的

1723
1:13:22.220 --> 1:13:24.220
那部分肯定是对

1724
1:13:24.220 --> 1:13:26.020
但是很多人他是搞不清楚的

1725
1:13:26.020 --> 1:13:27.820
比如说你去考考虑段代码

1726
1:13:27.820 --> 1:13:29.920
这段代码是从stackflow考的

1727
1:13:29.920 --> 1:13:31.520
或者某个叫做Github

1728
1:13:31.520 --> 1:13:34.520
Github有一个Gist里面有很多代码片段

1729
1:13:34.920 --> 1:13:36.420
这些他都不会很严肃的

1730
1:13:36.420 --> 1:13:37.520
他不像一个开源项目

1731
1:13:37.520 --> 1:13:40.120
他会很严肃的列出所有的这些来自说明

1732
1:13:40.120 --> 1:13:41.420
他不会他就是一个代码片段

1733
1:13:41.420 --> 1:13:46.120
然后说那比如说这是井字旗的一个算法

1734
1:13:46.120 --> 1:13:48.220
他甚至都没有说明是什幺来源

1735
1:13:48.220 --> 1:13:50.620
好某些人就google搜索到了

1736
1:13:50.620 --> 1:13:51.320
然后看一看

1737
1:13:51.320 --> 1:13:52.820
哎这个代码写的还挺清楚的

1738
1:13:52.820 --> 1:13:53.920
我也看懂了

1739
1:13:53.920 --> 1:13:54.820
我就把它拿过来用了

1740
1:13:56.320 --> 1:14:00.120
就这种事我觉得是非常常见的一种做法

1741
1:14:00.620 --> 1:14:01.920
而且从某种意义上来讲

1742
1:14:01.920 --> 1:14:05.320
也是一种方法

1743
1:14:05.320 --> 1:14:09.720
但是他要去溯源其实是相当困难的

1744
1:14:10.520 --> 1:14:14.220
如果这些代码大家都因为要法律上保险

1745
1:14:14.220 --> 1:14:15.620
而不去使用的话

1746
1:14:15.820 --> 1:14:18.420
其实我觉得也未必一定就都是好事

1747
1:14:19.220 --> 1:14:20.220
就跟刚才我们谈的

1748
1:14:20.220 --> 1:14:23.720
就说他不容易上也会阻断知识的传播

1749
1:14:24.420 --> 1:14:26.020
就很难讲这个事

1750
1:14:26.020 --> 1:14:31.220
我觉得可能其实比较好的就是你看过

1751
1:14:31.220 --> 1:14:33.820
代码之后可以自己在某种程度上

1752
1:14:33.820 --> 1:14:36.520
比如说一些源码可见

1753
1:14:36.520 --> 1:14:38.520
但是商用代码你可以用一些所谓的

1754
1:14:38.520 --> 1:14:40.320
近视原则来去处理一下

1755
1:14:40.620 --> 1:14:44.620
一些看起来确实比较通常的这种写法

1756
1:14:44.620 --> 1:14:47.520
你确实可以自己再稍微的改一下

1757
1:14:47.520 --> 1:14:49.120
重新去实现一下

1758
1:14:49.320 --> 1:14:52.520
这样的话就会把风险降得来说会比较低

1759
1:14:53.720 --> 1:14:58.020
因为比如网上有一些什幺SDK的一些什幺专门的协议

1760
1:14:58.020 --> 1:15:00.120
他说我这个SDK所有源码都可见

1761
1:15:00.120 --> 1:15:02.120
但是只能用在某些场景下

1762
1:15:02.120 --> 1:15:08.220
如果是其他公司然后把整个的代码稍微的没有改

1763
1:15:08.220 --> 1:15:11.220
直接就复刻到自己SDK里面的话

1764
1:15:11.220 --> 1:15:13.320
肯定会带来比较大的侵权风险

1765
1:15:14.220 --> 1:15:17.720
对我觉得公司能做的比较好的事情是

1766
1:15:17.720 --> 1:15:22.520
他提供一些源一些源上的这种代码

1767
1:15:22.520 --> 1:15:27.120
比如说他有一些sample的库或者一些guide的库

1768
1:15:27.120 --> 1:15:29.820
那幺这里面的代码的使用是没有什幺限制

1769
1:15:29.820 --> 1:15:31.120
大家可以放心的去用

1770
1:15:31.120 --> 1:15:34.720
还有一些网站他可以指定一些网站

1771
1:15:34.720 --> 1:15:38.120
比如说styleflow他里面使用的源码

1772
1:15:38.120 --> 1:15:40.920
它的权利是怎幺去约定的

1773
1:15:40.920 --> 1:15:43.520
其实styleflow对这个问题他是有研究的

1774
1:15:43.520 --> 1:15:44.720
它是有一套体系的

1775
1:15:44.720 --> 1:15:50.120
所以这些我觉得可能可以在这方面做一些规范化的事情

1776
1:15:50.520 --> 1:15:55.220
但是你说完全把这个事情由用户来去做判断

1777
1:15:55.220 --> 1:15:56.920
我觉得是做不到的

1778
1:15:56.920 --> 1:16:01.120
就是每一个进程员去判断我代码是不是有风险

1779
1:16:01.120 --> 1:16:04.220
我要做到什幺程度才能让它变得没有风险

1780
1:16:04.220 --> 1:16:06.920
我觉得这个进程员是根本做不到的事情

1781
1:16:07.820 --> 1:16:09.920
就算进程员能做到

1782
1:16:10.820 --> 1:16:13.020
你在项目压力之下

1783
1:16:13.020 --> 1:16:14.920
他肯定是先把活干完

1784
1:16:15.820 --> 1:16:19.520
他还有空跟你去了解这东西是法律遵循义务

1785
1:16:19.520 --> 1:16:20.520
这不可能

1786
1:16:21.520 --> 1:16:24.620
有能力他都不愿意做

1787
1:16:24.620 --> 1:16:25.720
因为忙不过来

1788
1:16:25.720 --> 1:16:26.920
我觉得这是最常见的

1789
1:16:26.920 --> 1:16:27.920
具有能力也有意愿

1790
1:16:27.920 --> 1:16:30.320
而且还要领导还允许

1791
1:16:30.320 --> 1:16:34.520
你可以花点时间去看看人家的license的具体的授权

1792
1:16:34.520 --> 1:16:36.520
我真是太难了

1793
1:16:37.620 --> 1:16:38.620
关键有很多代码

1794
1:16:38.620 --> 1:16:41.020
你是一眼看不到他license的

1795
1:16:41.020 --> 1:16:43.420
你还得满世界去搜

1796
1:16:43.420 --> 1:16:44.520
代码从哪里来的

1797
1:16:44.520 --> 1:16:45.320
它源头是哪

1798
1:16:45.320 --> 1:16:48.320
我看到的可能已经是N手的转载了

1799
1:16:49.020 --> 1:16:49.520
对吧

1800
1:16:51.120 --> 1:16:51.420
对

1801
1:16:51.420 --> 1:16:54.620
所以这种情况可能就首先有一个比较好的工具和平台

1802
1:16:54.620 --> 1:16:56.520
能够溯源是比较好的

1803
1:16:56.520 --> 1:16:57.420
第2个就是说

1804
1:16:58.020 --> 1:16:59.720
比如说这个公司大了之后

1805
1:16:59.720 --> 1:17:01.720
它有一些比较简明的一个指引

1806
1:17:01.720 --> 1:17:03.520
比如说在引入开源的时候

1807
1:17:03.520 --> 1:17:08.120
大概一眼就能看出来某个项目或某些项目的license

1808
1:17:08.120 --> 1:17:09.320
大致是怎幺用

1809
1:17:09.320 --> 1:17:10.220
在某些场景下

1810
1:17:10.220 --> 1:17:10.920
比如说OK

1811
1:17:10.920 --> 1:17:11.920
我就可以直接用

1812
1:17:11.920 --> 1:17:14.120
比如说用在APP端PC端

1813
1:17:14.120 --> 1:17:14.920
然后可以直接用

1814
1:17:14.920 --> 1:17:16.420
有些只能用在客户端

1815
1:17:16.420 --> 1:17:18.020
有些只能用在服务端

1816
1:17:18.020 --> 1:17:18.720
这样的话

1817
1:17:18.720 --> 1:17:23.420
其实我觉得对于普及开源的许可证也是一个比较好的做法

1818
1:17:23.420 --> 1:17:26.720
我觉得这是一个挺重要的基础设施

1819
1:17:26.720 --> 1:17:27.220
对

1820
1:17:27.220 --> 1:17:29.420
再就是说另外一个就是说

1821
1:17:29.420 --> 1:17:32.720
判断两代代码究竟是不是相似

1822
1:17:32.720 --> 1:17:36.220
这种确实是在实践中就是比较困难

1823
1:17:36.220 --> 1:17:38.320
咱们提到刚才Stack Overflow

1824
1:17:38.320 --> 1:17:41.320
它其实目前的开源协议是说

1825
1:17:41.320 --> 1:17:47.220
如果一个代码作者没有明示说相关的来源以及许可证信息的话

1826
1:17:47.220 --> 1:17:51.320
那他就按ccby-sa这种-4.0

1827
1:17:51.320 --> 1:17:52.920
现在是许可证来许可

1828
1:17:52.920 --> 1:17:56.420
那其实就是一个类似于GPL的一个许可证

1829
1:17:56.420 --> 1:17:59.120
它其实是不能够用在普通的

1830
1:17:59.120 --> 1:18:01.020
比如说对外分发的产品里去的

1831
1:18:01.020 --> 1:18:05.220
这一点也是需要就是比如说开发者去注意一下

1832
1:18:05.220 --> 1:18:07.620
因为搞不好那个时候

1833
1:18:07.620 --> 1:18:10.220
你可能最初这段代码就只是内部用

1834
1:18:10.220 --> 1:18:12.320
它可能某一天就会经过审计了

1835
1:18:12.320 --> 1:18:16.120
或者是说作为这个产品一部分打包出去

1836
1:18:16.120 --> 1:18:18.320
那到之后再改的话

1837
1:18:18.320 --> 1:18:20.820
其实就会比较的困难以及比较麻烦

1838
1:18:20.820 --> 1:18:23.320
是

1839
1:18:23.320 --> 1:18:28.020
这让我想起一个最近的另外的一个话题

1840
1:18:28.020 --> 1:18:33.120
就是前不久这个苹果今年的WLDC公开了新的

1841
1:18:33.120 --> 1:18:35.320
这个iOS的预览版本

1842
1:18:35.320 --> 1:18:39.820
然后里面有一个大家传的比较厉害的就是那个抠图

1843
1:18:39.820 --> 1:18:43.020
就是下一代iPhone的iOS上面有一个功能

1844
1:18:43.020 --> 1:18:43.820
就是一个图片里面

1845
1:18:43.820 --> 1:18:45.120
比如说前景有一只狗

1846
1:18:45.120 --> 1:18:46.620
你用手指摁住它

1847
1:18:46.620 --> 1:18:48.820
然后就把这狗拖出来拖到任何地方去

1848
1:18:48.820 --> 1:18:52.520
它就实际上相当于它完成了从图片画面上面

1849
1:18:52.520 --> 1:18:53.820
把那图抠出来

1850
1:18:53.820 --> 1:18:55.520
然后自动的填充背景

1851
1:18:55.520 --> 1:18:59.020
然后你再可以去转

1852
1:18:59.020 --> 1:19:03.120
就是相当于是去改变那个构图结构

1853
1:19:03.120 --> 1:19:05.620
其实抠图这事

1854
1:19:05.620 --> 1:19:07.920
AI抠图这事已经很多年了

1855
1:19:07.920 --> 1:19:09.520
也做得越来越好了

1856
1:19:09.520 --> 1:19:14.020
但是苹果就比较擅长把东西做的特别的用户友好

1857
1:19:14.020 --> 1:19:16.220
然后当时我就说

1858
1:19:16.220 --> 1:19:23.720
哎呀这个抠图做假照片假图片的门槛又进一步降低了

1859
1:19:23.720 --> 1:19:24.620
本来就不高了

1860
1:19:24.620 --> 1:19:26.320
现在进一步又降低了

1861
1:19:26.320 --> 1:19:29.220
可以期待一下未来群魔乱舞

1862
1:19:29.220 --> 1:19:34.020
就是图片完全不能信的时代就是现在了

1863
1:19:34.020 --> 1:19:36.820
然后后面就延伸出一些讨论

1864
1:19:36.820 --> 1:19:41.520
当时就其实好早以前有一个很出名的人

1865
1:19:41.520 --> 1:19:43.220
就是Steven Wolfram

1866
1:19:43.220 --> 1:19:48.520
就是那个Mathematica的那个发明者

1867
1:19:48.520 --> 1:19:49.520
他就写过一篇文章

1868
1:19:49.520 --> 1:19:53.820
他说以后这个网上的任何媒体都不可信

1869
1:19:53.820 --> 1:19:57.220
照片视频文本什幺的都有可能是造假的

1870
1:19:57.220 --> 1:20:02.320
所以他认为以后真的要去所谓的这个Fact check

1871
1:20:02.320 --> 1:20:05.920
就是这事实检查必须依赖一些数字手段

1872
1:20:05.920 --> 1:20:09.220
比如说要在这个信息照片

1873
1:20:09.220 --> 1:20:12.120
它最源头的时候就要保存一个存根

1874
1:20:12.120 --> 1:20:13.920
在一个完全的公链上

1875
1:20:13.920 --> 1:20:17.020
一个公开的这个公共的区块链上面

1876
1:20:17.020 --> 1:20:20.420
然后所有的图片必须要在那幺溯源才能够做到

1877
1:20:20.420 --> 1:20:23.920
那我就有一个这个联想

1878
1:20:23.920 --> 1:20:27.320
就是是不是我们对进程代码是不是

1879
1:20:27.320 --> 1:20:30.220
它也应该有这样的一种溯源机制

1880
1:20:30.220 --> 1:20:33.320
比如说Github这幺大的一个开源平台

1881
1:20:33.320 --> 1:20:35.220
它完全可以做这件事情

1882
1:20:35.220 --> 1:20:37.220
就是我任何的代码片段

1883
1:20:37.220 --> 1:20:40.220
当然它要去合理的设定一个力度

1884
1:20:40.220 --> 1:20:42.220
就比如说函数或者什幺样级别

1885
1:20:42.220 --> 1:20:45.220
那幺这个片段它就应该能追踪到

1886
1:20:45.220 --> 1:20:48.520
它的原始作者和它的原始的开源协议

1887
1:20:48.520 --> 1:20:51.120
是不是有可能做到这样一些事情

1888
1:20:51.120 --> 1:20:52.420
如果能做到的话

1889
1:20:52.420 --> 1:20:54.620
其实这个基础设施

1890
1:20:54.620 --> 1:20:58.220
这个原始的数据库会非常非常的有意义

1891
1:20:58.220 --> 1:21:00.620
否则就意味着像老庄这样的

1892
1:21:00.620 --> 1:21:01.920
你们得自个儿干这事

1893
1:21:01.920 --> 1:21:03.120
对

1894
1:21:03.120 --> 1:21:04.920
对我们就得自个儿干

1895
1:21:04.920 --> 1:21:08.720
老是做出来造福人类吧

1896
1:21:08.720 --> 1:21:12.620
没有没有 我其实你说到的在Github上面

1897
1:21:12.620 --> 1:21:14.120
就是说跟Github的合作

1898
1:21:14.120 --> 1:21:15.620
或者说Github上面

1899
1:21:15.620 --> 1:21:18.420
其实是在有类似于谷歌

1900
1:21:18.420 --> 1:21:20.320
现在推出来一个东西叫SIGSTORE

1901
1:21:20.320 --> 1:21:22.320
可能王老师也知道这个东西

1902
1:21:22.320 --> 1:21:25.120
它代表的是一种提交者的

1903
1:21:25.120 --> 1:21:27.820
为自己的代码签名的机制

1904
1:21:27.820 --> 1:21:29.620
但是呢

1905
1:21:29.620 --> 1:21:31.820
它只签了就是说它能签名的

1906
1:21:31.820 --> 1:21:35.220
只是那个作者提交了那个代码

1907
1:21:35.220 --> 1:21:37.820
但是如果它被人拿出去复制了

1908
1:21:37.820 --> 1:21:38.920
再在别的地方提交

1909
1:21:38.920 --> 1:21:40.520
这个肯定就追踪不了了

1910
1:21:40.520 --> 1:21:43.120
所以你说的这个估计还没有

1911
1:21:43.120 --> 1:21:46.320
它那个是绑定到那个Commit Log上的

1912
1:21:46.320 --> 1:21:47.320
对对对对对

1913
1:21:47.320 --> 1:21:48.320
对啊 那肯定就

1914
1:21:48.320 --> 1:21:50.520
我文本copy你就完全追踪不了了

1915
1:21:50.520 --> 1:21:51.820
是的

1916
1:21:51.820 --> 1:21:53.920
但是你说的那个就真的是

1917
1:21:53.920 --> 1:21:55.720
整个的基础设施

1918
1:21:55.720 --> 1:21:57.520
就是代码托管平台

1919
1:21:57.520 --> 1:22:01.520
甚至Git协议都要往区块链

1920
1:22:01.520 --> 1:22:03.720
或者说往可存证的方向走

1921
1:22:03.720 --> 1:22:04.920
才有可能解决

1922
1:22:04.920 --> 1:22:06.520
这个我很期待啊

1923
1:22:06.520 --> 1:22:08.120
但是我还没有想好怎幺搞

1924
1:22:08.120 --> 1:22:10.520
这种存证它最大的难点在于

1925
1:22:10.520 --> 1:22:12.320
它必须在the first time

1926
1:22:12.320 --> 1:22:14.720
就是在最开始那一个瞬间

1927
1:22:14.720 --> 1:22:16.520
要绑定住

1928
1:22:16.520 --> 1:22:17.920
它才有意义

1929
1:22:17.920 --> 1:22:18.920
对的对的

1930
1:22:18.920 --> 1:22:20.320
一转出去就完了

1931
1:22:20.320 --> 1:22:21.520
所以这个特别难

1932
1:22:21.520 --> 1:22:24.920
或者是说我们只能使用

1933
1:22:24.920 --> 1:22:26.320
这个GitHub上那一个

1934
1:22:26.320 --> 1:22:29.320
就是最原始那个来源的一些

1935
1:22:29.320 --> 1:22:30.920
一些代码或者项目

1936
1:22:30.920 --> 1:22:32.720
这样的话就能追踪得到

1937
1:22:32.720 --> 1:22:33.920
之后再转出去

1938
1:22:33.920 --> 1:22:35.520
可能就追踪不到了

1939
1:22:35.520 --> 1:22:38.920
对是的

1940
1:22:38.920 --> 1:22:40.920
所以我觉得这个

1941
1:22:40.920 --> 1:22:43.720
我个人的是比较悲观的

1942
1:22:43.720 --> 1:22:44.320
对这个事情

1943
1:22:44.320 --> 1:22:45.920
我觉得在很长一段时间里面

1944
1:22:45.920 --> 1:22:47.520
我们不会得到一个

1945
1:22:47.520 --> 1:22:49.920
比较完美的解决方案

1946
1:22:49.920 --> 1:22:51.820
就大家还要活在这种

1947
1:22:51.820 --> 1:22:53.120
比较混沌的状态

1948
1:22:53.120 --> 1:22:56.720
我个人觉得混沌在某些时候

1949
1:22:56.720 --> 1:22:58.120
还是比较不错的

1950
1:22:58.120 --> 1:23:00.020
都分清楚之后

1951
1:23:00.020 --> 1:23:02.120
可能有些事情更加的难处理

1952
1:23:02.120 --> 1:23:05.120
但总体来说有一个比较好的

1953
1:23:05.120 --> 1:23:06.320
就是大家的做法

1954
1:23:06.320 --> 1:23:09.120
或者说比如说咱们这一直讨论的

1955
1:23:09.120 --> 1:23:11.120
说这个引用第三方的这个

1956
1:23:11.120 --> 1:23:12.720
这个代码或怎幺样

1957
1:23:12.720 --> 1:23:15.120
就是有一个好的意识去留存别人

1958
1:23:15.120 --> 1:23:16.520
一些这个copyright

1959
1:23:16.520 --> 1:23:17.920
比如说license信息

1960
1:23:17.920 --> 1:23:19.520
这些都是比较不错的做法

1961
1:23:19.520 --> 1:23:20.920
嗯

1962
1:23:20.920 --> 1:23:24.120
我觉得在这个意义上呢

1963
1:23:24.120 --> 1:23:25.320
我还是

1964
1:23:25.320 --> 1:23:28.020
有些时候我会觉得哎呀

1965
1:23:28.020 --> 1:23:30.020
不如就完全按这个

1966
1:23:30.020 --> 1:23:31.820
Richard Stolzman的那套算了

1967
1:23:31.820 --> 1:23:33.420
你要幺就不开源

1968
1:23:33.420 --> 1:23:35.020
你看出来就不要限制

1969
1:23:35.020 --> 1:23:40.120
就是你猜出来的这个代码

1970
1:23:40.120 --> 1:23:43.020
你你你就大家开出来就都是一样的

1971
1:23:43.020 --> 1:23:44.220
就必须一直开下去

1972
1:23:44.220 --> 1:23:45.920
就一直这幺开一样的方式开

1973
1:23:45.920 --> 1:23:47.320
要幺就不要开

1974
1:23:47.320 --> 1:23:48.920
这样就简单了

1975
1:23:48.920 --> 1:23:51.420
但是显然这个也不可能在

1976
1:23:51.420 --> 1:23:53.420
真实世界里面实现了

1977
1:23:53.420 --> 1:23:53.920
对啊

1978
1:23:53.920 --> 1:23:55.320
包括有这幺多的许可证

1979
1:23:55.320 --> 1:23:57.520
都是因为大家有各自不同的诉求嘛

1980
1:23:57.520 --> 1:23:59.020
所以才有这幺多的许可证

1981
1:23:59.020 --> 1:24:01.520
所以我觉得强行把它统一到几种

1982
1:24:01.520 --> 1:24:02.620
也不太可行

1983
1:24:02.620 --> 1:24:06.420
但是说现在经常使用的可能也就20多种吧

1984
1:24:06.420 --> 1:24:07.820
就是和开源相关的

1985
1:24:07.820 --> 1:24:11.620
所以我觉得这种就是自然而然发展成这幺一个情况

1986
1:24:11.620 --> 1:24:15.320
其实比在最早的时候强行规定这种情况要好很多

1987
1:24:16.520 --> 1:24:18.120
其实现在有一些人做的事情

1988
1:24:18.120 --> 1:24:20.020
之前老庄也也跟我聊过

1989
1:24:20.020 --> 1:24:24.520
就是把这个开源协议把它这个feature化

1990
1:24:24.520 --> 1:24:27.220
把开源协议里面的条款变成一个一个的feature

1991
1:24:27.220 --> 1:24:30.520
然后你看的时候你去勾选相关的feature就可以了

1992
1:24:30.520 --> 1:24:34.320
其实那幺多开源协议无非是大概有若干种

1993
1:24:34.320 --> 1:24:35.220
那不会特别多

1994
1:24:35.220 --> 1:24:38.420
大概不到10种feature的各种组合罢了

1995
1:24:38.420 --> 1:24:43.020
所以所以其实这事我觉得别的不知道

1996
1:24:43.020 --> 1:24:45.320
但Github我觉得肯定是可以做些事情的

1997
1:24:45.320 --> 1:24:47.420
它现在坐拥着非常好的资源

1998
1:24:49.720 --> 1:24:51.520
但是做不做就看它的商业利益了

1999
1:24:51.520 --> 1:24:52.920
对它没意义它就不做了

2000
1:24:54.520 --> 1:24:57.420
我怀疑他们可能会做这一方面的事情吧

2001
1:24:57.420 --> 1:24:59.320
因为他们现在拥有的平台

2002
1:24:59.320 --> 1:25:00.820
包括数据都是最多的

2003
1:25:00.820 --> 1:25:06.120
所以说我我现在推测他们可能在一些类似

2004
1:25:06.120 --> 1:25:07.920
因为他们平时我看了一下

2005
1:25:07.920 --> 1:25:10.820
就是出来讲license的一些不管法务了

2006
1:25:10.820 --> 1:25:12.520
还是说一些治理的同学也好

2007
1:25:12.520 --> 1:25:15.520
也会提一些就是像刚才李老师说的这种

2008
1:25:15.520 --> 1:25:20.020
就是把这个按不同的feature分类去去做一些解构

2009
1:25:20.020 --> 1:25:20.820
对这个他们在做

2010
1:25:20.820 --> 1:25:22.120
对推动他们也在做

2011
1:25:22.120 --> 1:25:24.920
然后应该也有一些其他机构也在做

2012
1:25:24.920 --> 1:25:29.120
我觉得然后之后可能会为了从这个方便

2013
1:25:29.120 --> 1:25:30.820
开发者使用角度来说

2014
1:25:30.820 --> 1:25:34.820
基本上会把可能会把这些通行的开源许可证

2015
1:25:34.820 --> 1:25:36.820
大致按你说的那种feature方式

2016
1:25:36.820 --> 1:25:39.120
然后让让这个开发者来去参考

2017
1:25:40.520 --> 1:25:43.420
就你现在在GitHub里面打开一个license文档

2018
1:25:43.420 --> 1:25:45.620
它就会列出这个license什幺license

2019
1:25:45.620 --> 1:25:46.820
然后拿几个feature

2020
1:25:46.820 --> 1:25:48.020
它现在是会列出来的

2021
1:25:48.020 --> 1:25:51.220
对这个列出来已经有一阵子了

2022
1:25:51.220 --> 1:25:54.320
但是感觉看起来还不是那幺的友好

2023
1:25:54.320 --> 1:25:58.020
因为比如说他只是把这个法律的这种这种条款

2024
1:25:58.020 --> 1:25:59.420
然后feature给列出来

2025
1:25:59.420 --> 1:26:00.920
但是怎幺去解读

2026
1:26:00.920 --> 1:26:04.320
我感觉好像可能是需要再讲一下

2027
1:26:05.120 --> 1:26:05.920
是的是的

2028
1:26:06.820 --> 1:26:09.020
嗯好

2029
1:26:09.020 --> 1:26:10.820
那时间也差不多了哈

2030
1:26:10.820 --> 1:26:12.820
我们聊了有差不多一个半小时了

2031
1:26:12.820 --> 1:26:15.720
这个今天我们聊了有三个话题啊

2032
1:26:15.720 --> 1:26:20.820
都是跟这个软件和科技行业的一些法律问题有关的啊

2033
1:26:20.820 --> 1:26:24.120
嗯不知道几位还有什幺其他的感想吗

2034
1:26:24.120 --> 1:26:24.820
或者补充

2035
1:26:24.820 --> 1:26:26.720
其实我我个人觉得哈

2036
1:26:26.720 --> 1:26:30.020
就是我想跟振华聊的这个

2037
1:26:30.020 --> 1:26:33.420
嗯关于科技与法律的话题还有非常多

2038
1:26:33.420 --> 1:26:36.620
但今天我们时间关系啊只能开个头

2039
1:26:36.620 --> 1:26:40.220
讲了几个相关软件权利的这个这个问题

2040
1:26:40.220 --> 1:26:43.320
老庄王老师你们还有什幺想法吗

2041
1:26:43.320 --> 1:26:47.320
嗯我是想说就是其实我们今天聊下来

2042
1:26:47.320 --> 1:26:49.720
如果听众朋友能听到现在的话

2043
1:26:49.720 --> 1:26:51.120
其实你们应该会发现

2044
1:26:51.120 --> 1:26:54.920
就是说法律的问题也是很复杂的问题

2045
1:26:54.920 --> 1:27:00.320
包括包括很多甚至是现在看起来还很难得到

2046
1:27:00.320 --> 1:27:03.620
彻底解决的一些非常前沿的问题

2047
1:27:03.620 --> 1:27:06.120
所以我特别我每次其实都想呼吁

2048
1:27:06.120 --> 1:27:08.620
就是说哪怕你自认是一个进程员

2049
1:27:08.620 --> 1:27:11.020
其实你要懂一点这方面的知识

2050
1:27:11.020 --> 1:27:12.120
这个有好处

2051
1:27:12.120 --> 1:27:14.320
而且是他不难

2052
1:27:14.320 --> 1:27:19.020
因为他的法律的思维和软件的思维和进程的思维

2053
1:27:19.020 --> 1:27:22.920
其实有非常多的互通的这种特质

2054
1:27:22.920 --> 1:27:23.820
就是很容易理解

2055
1:27:23.820 --> 1:27:25.920
你真的要是去理解那些条款

2056
1:27:25.920 --> 1:27:27.720
理解那些法律背后的逻辑的话

2057
1:27:27.720 --> 1:27:30.820
会觉得他背后也是非常的理性化的一些

2058
1:27:30.820 --> 1:27:32.120
一些思维模式

2059
1:27:32.120 --> 1:27:34.420
我特别希望有更多的开发者

2060
1:27:34.420 --> 1:27:38.920
进程员朋友能够多去理解理解这种法律

2061
1:27:38.920 --> 1:27:41.320
知识产权授权相关的东西

2062
1:27:41.320 --> 1:27:43.120
这是我的感想

2063
1:27:43.120 --> 1:27:49.220
嗯我以前特别喜欢在公司里面推荐的一些一些课程

2064
1:27:49.220 --> 1:27:53.720
比如说FAPM的这个项目管理课程

2065
1:27:53.720 --> 1:27:56.420
非会计的这个财务课程

2066
1:27:56.420 --> 1:27:59.920
什幺这个非HR的人力管理课程

2067
1:27:59.920 --> 1:28:01.420
其实都都挺有意思的

2068
1:28:01.420 --> 1:28:04.120
有没有这种给进程员的法律课程

2069
1:28:04.120 --> 1:28:08.620
这是个好话题

2070
1:28:08.620 --> 1:28:10.020
应该后面会有

2071
1:28:10.020 --> 1:28:12.720
我觉得振华可以搞一个这样的课程

2072
1:28:12.720 --> 1:28:13.520
应该会有

2073
1:28:13.520 --> 1:28:15.220
因为我理解就是

2074
1:28:15.220 --> 1:28:17.520
虽然说法律这个整个体系比较庞大

2075
1:28:17.520 --> 1:28:20.320
但是首先就是从设计范围这方面的

2076
1:28:20.320 --> 1:28:22.720
确实可以有一套比较简单的课程

2077
1:28:22.720 --> 1:28:25.620
供大家来去学习

2078
1:28:25.620 --> 1:28:26.820
对啊

2079
1:28:26.820 --> 1:28:29.520
我们进程员也要有这个普法意识

2080
1:28:29.520 --> 1:28:32.220
自我保护意识

2081
1:28:32.220 --> 1:28:32.520
对

2082
1:28:32.520 --> 1:28:35.120
包括咱们刚才提到这个BUI也好

2083
1:28:35.120 --> 1:28:37.520
包括就是最早那个天珠这个项目也好

2084
1:28:37.520 --> 1:28:40.920
其实我觉得大家如果最早的时候有一些这方面的意识

2085
1:28:40.920 --> 1:28:43.520
其实也不用花特别长的时间去学习

2086
1:28:43.520 --> 1:28:46.320
那可能就是对最后不管说就会再解决

2087
1:28:46.320 --> 1:28:48.920
还是说对这个项目以后发展的更好的期待

2088
1:28:48.920 --> 1:28:50.720
其实我觉得是有益处的嘛

2089
1:28:50.720 --> 1:28:53.720
因为本质上就是一个权利和义务的平衡

2090
1:28:53.720 --> 1:28:55.620
我感觉哈

2091
1:28:55.620 --> 1:28:55.920
是的

2092
1:28:55.920 --> 1:28:57.020
我觉得很多法律问题

2093
1:28:57.020 --> 1:28:59.120
它背后其实跟商业模式有关

2094
1:28:59.120 --> 1:28:59.420
对

2095
1:28:59.420 --> 1:29:01.920
而你做软件做开源软件

2096
1:29:01.920 --> 1:29:05.220
你一定要考虑的是它的未来的商业模式

2097
1:29:05.220 --> 1:29:07.920
所以这是非常相辅相成的

2098
1:29:07.920 --> 1:29:08.420
好呀

2099
1:29:08.420 --> 1:29:13.120
我非常期待咱们有朝一日能看到这样的东西

2100
1:29:13.120 --> 1:29:15.320
我自己都很有兴趣

2101
1:29:15.320 --> 1:29:17.120
好的谢谢振华

2102
1:29:17.120 --> 1:29:17.720
谢谢振华

2103
1:29:17.720 --> 1:29:20.620
这个我觉得以后你有时间的时候

2104
1:29:20.620 --> 1:29:22.020
我们还可以多聊一聊

2105
1:29:22.020 --> 1:29:24.120
因为真的这方面话题非常多

2106
1:29:24.120 --> 1:29:26.620
像今天有一个我一直很关心的话题

2107
1:29:26.620 --> 1:29:33.120
就是互联网发展到今天对人的个性化和隐私相关的

2108
1:29:33.120 --> 1:29:35.220
保护相关的话题都没有时间聊

2109
1:29:35.220 --> 1:29:36.420
还有很多类似的东西

2110
1:29:36.420 --> 1:29:37.720
有时间我们可以继续

2111
1:29:37.720 --> 1:29:39.220
是的

2112
1:29:39.220 --> 1:29:41.720
好呀

2113
1:29:41.720 --> 1:29:43.220
好

2114
1:29:43.220 --> 1:29:46.520
那我们今天的今日说法就到这里了

2115
1:29:46.520 --> 1:29:47.520
谢谢大家

2116
1:29:47.520 --> 1:29:48.520
再见

2117
1:29:48.520 --> 1:29:48.920
好

2118
1:29:48.920 --> 1:29:49.420
再见

2119
1:29:49.420 --> 1:29:50.720
拜拜

