0
0:00:00.000 --> 0:00:04.160
大家好 欢迎来到后互联网时代的乱谈

1
0:00:04.160 --> 0:00:07.680
今天照应是我们三个人在周末的下午

2
0:00:07.680 --> 0:00:09.280
跟大家一起聊聊天

3
0:00:09.280 --> 0:00:11.080
王老师

4
0:00:11.080 --> 0:00:12.280
大家好

5
0:00:12.280 --> 0:00:13.320
老庄

6
0:00:13.320 --> 0:00:14.360
大家好

7
0:00:14.360 --> 0:00:21.920
上一周我们聊了一个关于Google的AI的聊天机器人

8
0:00:21.920 --> 0:00:24.520
对话系统蓝牧达的一个故事

9
0:00:24.520 --> 0:00:27.960
据说它有成人的趋势

10
0:00:27.960 --> 0:00:33.800
今天正好也补充一个后面得到的信息

11
0:00:33.800 --> 0:00:36.440
上次聊的时候我就提了一个感想

12
0:00:36.440 --> 0:00:39.920
就是我看完相关的一些报道之后

13
0:00:39.920 --> 0:00:46.360
我感觉主角Google研究人员小哥是个挺感性的人

14
0:00:46.360 --> 0:00:49.280
然后后来我就又查了一些资料

15
0:00:49.280 --> 0:00:50.520
确认了这一点

16
0:00:50.520 --> 0:00:53.960
这位老兄他确实不是软件工程师

17
0:00:53.960 --> 0:00:55.280
他不是写进程的

18
0:00:55.280 --> 0:00:59.120
他是一个计算机伦理学家

19
0:00:59.120 --> 0:01:02.040
他就是专门研究计算机

20
0:01:02.040 --> 0:01:06.320
尤其是以后往人工智能时代发展的一些相关伦理问题的

21
0:01:06.320 --> 0:01:09.280
而他跟聊天机器人之间聊天

22
0:01:09.280 --> 0:01:10.760
他的目的也很清楚

23
0:01:10.760 --> 0:01:15.120
就是要确认人工智能它没有伦理上的风险

24
0:01:15.120 --> 0:01:17.720
所以这就可以验证一个点

25
0:01:17.720 --> 0:01:19.280
确实我们感觉他聊的内容

26
0:01:19.280 --> 0:01:22.560
包括他对聊天过程的一个观感

27
0:01:22.560 --> 0:01:23.560
一个感想

28
0:01:23.560 --> 0:01:24.760
一个认知

29
0:01:24.760 --> 0:01:27.280
就比较偏感性

30
0:01:27.280 --> 0:01:29.080
比较偏文科一点

31
0:01:29.080 --> 0:01:32.760
其实这个话题我觉得以后可以找个时间

32
0:01:32.760 --> 0:01:33.920
我们专门聊一聊

33
0:01:33.920 --> 0:01:37.560
就是在文科生眼中的未来科技

34
0:01:37.560 --> 0:01:41.240
因为我们仨其实都是理工男

35
0:01:41.240 --> 0:01:43.720
但是我们也挺多朋友

36
0:01:43.720 --> 0:01:46.760
而且也一些关注的一些伙伴们

37
0:01:46.760 --> 0:01:48.800
他是文科背景的

38
0:01:48.800 --> 0:01:50.680
反正我个人我不知道你们两位

39
0:01:50.680 --> 0:01:52.120
反正我个人的感想

40
0:01:52.120 --> 0:01:55.480
就是文科生看这些未来科技

41
0:01:55.480 --> 0:01:59.400
他的视角和一些感想跟我们完全不一样

42
0:01:59.400 --> 0:02:00.960
这个挺有意思的

43
0:02:00.960 --> 0:02:02.040
嗯

44
0:02:02.040 --> 0:02:03.040
肯定的

45
0:02:03.040 --> 0:02:06.080
因为就像有人跟我说我的代码会造反

46
0:02:06.080 --> 0:02:06.960
我就无法想象

47
0:02:06.960 --> 0:02:09.000
我说代码是我自己写出来的

48
0:02:09.000 --> 0:02:10.960
它怎幺能造反

49
0:02:10.960 --> 0:02:13.200
最多就是我自己出了bug

50
0:02:13.200 --> 0:02:16.200
但是文科生就会把这件事情想得很神秘

51
0:02:16.200 --> 0:02:19.680
就说这种不可预知的力量藏在一个黑盒子里

52
0:02:19.680 --> 0:02:21.520
然后它会怎幺怎幺样

53
0:02:21.520 --> 0:02:23.400
可能会是这种心态

54
0:02:23.400 --> 0:02:23.840
对

55
0:02:23.840 --> 0:02:26.440
就是那种人灵比你

56
0:02:26.440 --> 0:02:27.960
就是把它比

57
0:02:27.960 --> 0:02:31.720
就是这个平移比较

58
0:02:31.720 --> 0:02:35.160
或者说是类比成一种人和灵魂的东西

59
0:02:35.160 --> 0:02:35.760
对啊

60
0:02:35.760 --> 0:02:37.560
很玄学

61
0:02:37.560 --> 0:02:40.960
这个以后有机会我们专门来探讨

62
0:02:40.960 --> 0:02:42.720
我觉得这个挺有意思的话题

63
0:02:42.720 --> 0:02:43.720
嗯

64
0:02:43.720 --> 0:02:44.280
OK

65
0:02:44.280 --> 0:02:48.080
那今天我们也重点的一个话题

66
0:02:48.080 --> 0:02:50.600
也是跟人工智能有关的

67
0:02:50.600 --> 0:02:53.960
就是最近有一个消息

68
0:02:53.960 --> 0:02:57.200
在业内还挺热门的

69
0:02:57.200 --> 0:03:02.240
就是这个Github做的一个人工智能的

70
0:03:02.240 --> 0:03:06.240
这个写进程的一个编程助手叫Copilot

71
0:03:06.240 --> 0:03:09.200
那幺这个东西测试已经有挺久了

72
0:03:09.200 --> 0:03:10.800
我印象中应该有一两年了

73
0:03:10.800 --> 0:03:13.720
大概公测都有差不多一两年了

74
0:03:13.720 --> 0:03:16.360
那幺现在正式要上线了

75
0:03:16.360 --> 0:03:19.600
上线之后它将成为一个付费服务

76
0:03:19.600 --> 0:03:24.160
那幺一个帮人写进程的机器人助手

77
0:03:24.160 --> 0:03:28.360
那关于这个我们就请我们王老师来

78
0:03:28.360 --> 0:03:30.360
跟我们来介绍一下

79
0:03:30.360 --> 0:03:32.560
好的呀

80
0:03:32.560 --> 0:03:33.200
对

81
0:03:33.200 --> 0:03:36.960
这个话题其实一直挺感兴趣的

82
0:03:36.960 --> 0:03:41.960
实际上我们前面的节目实际上是也有所设计

83
0:03:41.960 --> 0:03:42.280
对

84
0:03:42.280 --> 0:03:45.080
那这次不同的是因为像Github

85
0:03:45.080 --> 0:03:49.800
它把Copilot正式的作为一个商业服务了

86
0:03:49.800 --> 0:03:50.080
对

87
0:03:50.080 --> 0:03:53.000
而且是正儿八经收费的

88
0:03:53.000 --> 0:03:53.280
对

89
0:03:53.280 --> 0:03:57.320
我也去从流程上尝试了一下

90
0:03:57.320 --> 0:04:01.440
包括我们的学生同学也有试用的

91
0:04:01.440 --> 0:04:01.640
对

92
0:04:01.640 --> 0:04:05.560
因为它对学生其实是可以认证

93
0:04:05.560 --> 0:04:08.160
并且去免费使用的

94
0:04:08.160 --> 0:04:08.480
对

95
0:04:08.480 --> 0:04:13.600
因为像我们计算机类专业本身对AI编程这些事情

96
0:04:13.600 --> 0:04:17.280
也是我们的一个研究的一个兴趣点

97
0:04:17.280 --> 0:04:17.600
对

98
0:04:17.600 --> 0:04:22.600
就是在传统的软件工程那个时代

99
0:04:22.600 --> 0:04:30.880
本身就有非常多的希望让机器帮着做越来越多的自动化的一些工作

100
0:04:30.880 --> 0:04:34.160
最开始是从一些测试开始

101
0:04:34.160 --> 0:04:39.760
然后从一些设计到代码的这种自动化

102
0:04:39.760 --> 0:04:40.000
对

103
0:04:40.000 --> 0:04:41.760
那再到今天

104
0:04:41.760 --> 0:04:42.040
对

105
0:04:42.040 --> 0:04:48.200
通过这种数据的方式做这种更加智能的这种自动化

106
0:04:48.200 --> 0:04:48.520
对

107
0:04:48.520 --> 0:04:52.080
因为从我们同学的一些反馈

108
0:04:52.080 --> 0:04:52.240
对

109
0:04:52.240 --> 0:04:54.240
我相信李老师应该也有些接触

110
0:04:54.240 --> 0:04:57.240
就是效果真的还是挺惊艳的

111
0:04:57.240 --> 0:04:57.480
对

112
0:04:57.480 --> 0:05:01.360
如果大家有兴趣的可以在那个B站上还可以去看

113
0:05:01.360 --> 0:05:05.960
现在用copilot直播写代码的一些视频

114
0:05:05.960 --> 0:05:08.680
其实现在也都有了

115
0:05:08.680 --> 0:05:09.000
对

116
0:05:09.000 --> 0:05:13.280
它还是反正看上去真的还是挺惊艳的

117
0:05:13.280 --> 0:05:13.480
对

118
0:05:13.480 --> 0:05:20.240
这里面其实会涉及到非常多的一些技术的内容

119
0:05:20.240 --> 0:05:21.720
而且它还不是技术的

120
0:05:21.720 --> 0:05:25.640
还会涉及到包括我们前面也涉及到的知识产权

121
0:05:25.640 --> 0:05:28.480
还有大家的一些职业

122
0:05:28.480 --> 0:05:32.840
包括我们的对我们大众来说意味着什幺

123
0:05:32.840 --> 0:05:36.200
以及我们学校来说有些什幺样的一些冲击

124
0:05:36.200 --> 0:05:36.680
对

125
0:05:36.680 --> 0:05:42.400
我想这个是我们今天可以讨论的几个主要的话题

126
0:05:42.400 --> 0:05:42.800
对

127
0:05:42.800 --> 0:05:46.760
这一轮的像copilot的它这种智能

128
0:05:46.760 --> 0:05:50.240
其实一个很重要的其实也是数据

129
0:05:50.240 --> 0:05:51.080
是吧

130
0:05:51.080 --> 0:05:54.520
和我们前面AlphaGo也好

131
0:05:54.520 --> 0:06:00.440
还有我们前面做的图片的AI的内容自动生成也好

132
0:06:00.440 --> 0:06:00.720
对

133
0:06:00.720 --> 0:06:02.520
其实都是同一类技术

134
0:06:02.520 --> 0:06:02.880
对

135
0:06:02.880 --> 0:06:08.040
其实就是特别是包括像深度学习利用已有的这些代码

136
0:06:08.040 --> 0:06:08.240
对

137
0:06:08.240 --> 0:06:10.880
因为像GitHub它去做这个事情

138
0:06:10.880 --> 0:06:11.080
对

139
0:06:11.080 --> 0:06:12.320
我们是可以想象到的

140
0:06:12.320 --> 0:06:15.200
它有非常独特的优势

141
0:06:15.200 --> 0:06:15.440
对

142
0:06:15.440 --> 0:06:19.120
就是全世界最大的开源代码的托管平台

143
0:06:19.120 --> 0:06:19.680
对不对

144
0:06:19.680 --> 0:06:19.920
对

145
0:06:19.920 --> 0:06:26.080
那它上面的这些千万级的这种代码仓库

146
0:06:26.080 --> 0:06:26.360
对

147
0:06:26.360 --> 0:06:31.520
里面那幺多的一些宝贵的这种数据的资料

148
0:06:31.520 --> 0:06:31.800
对

149
0:06:31.800 --> 0:06:35.600
实际上是对它有非常好的这种帮助作用

150
0:06:35.600 --> 0:06:35.920
对

151
0:06:35.920 --> 0:06:42.120
那现在看上去基本上在那个产品的成熟度和工程化这一块

152
0:06:42.120 --> 0:06:44.920
基本上已经有了足够的信心

153
0:06:44.920 --> 0:06:45.360
对

154
0:06:45.360 --> 0:06:50.800
那就开始推这种商业的这种真正的产品了

155
0:06:50.800 --> 0:06:51.520
对

156
0:06:51.520 --> 0:06:54.920
那这里面其实我们一个个来

157
0:06:54.920 --> 0:06:59.040
我们先从第一个问题我们来讨论起

158
0:06:59.040 --> 0:06:59.280
对

159
0:06:59.280 --> 0:07:05.800
第一个问题其实也是我们看待AI自动写代码的

160
0:07:05.800 --> 0:07:11.360
我们第一感觉就是写的代码究竟归谁这件事情

161
0:07:11.360 --> 0:07:11.600
对

162
0:07:11.600 --> 0:07:14.200
这件事情其实我们前面的节目也有讨论过

163
0:07:14.200 --> 0:07:20.480
就像我们前面讨论的是用AI生成的那些艺术品或者是图形

164
0:07:20.480 --> 0:07:20.880
对吧

165
0:07:20.880 --> 0:07:23.760
它的知识产权究竟归谁

166
0:07:23.760 --> 0:07:24.200
对吧

167
0:07:24.200 --> 0:07:28.880
我记得李老师当时也在节目里面有过一些解释

168
0:07:28.880 --> 0:07:29.120
对

169
0:07:29.120 --> 0:07:30.520
也举过一些案例

170
0:07:30.520 --> 0:07:35.600
比如说想给机器生成的去申请专利

171
0:07:35.600 --> 0:07:36.160
著作权

172
0:07:36.160 --> 0:07:39.600
目前法律是不予接纳的

173
0:07:39.600 --> 0:07:40.680
对不对

174
0:07:40.680 --> 0:07:44.920
现在的AI它写的这些代码

175
0:07:44.920 --> 0:07:49.000
实际上它更加具有这种普遍性

176
0:07:49.000 --> 0:07:49.280
对

177
0:07:49.280 --> 0:07:52.480
它写的这种代码究竟它的版权归谁

178
0:07:52.480 --> 0:07:59.560
以及像GitHub它是否有合法的正当性

179
0:07:59.560 --> 0:08:03.960
利用这些开源的代码去做这种产品

180
0:08:03.960 --> 0:08:04.200
对

181
0:08:04.200 --> 0:08:06.240
因为我们同时还观测到

182
0:08:06.240 --> 0:08:13.400
GitHub本身也给平台上的这些贡献者给出了它的一个选项

183
0:08:13.400 --> 0:08:16.840
就是它可以把它的代码贡献出来

184
0:08:16.840 --> 0:08:19.960
用于改善copilot的产品体验

185
0:08:19.960 --> 0:08:22.800
它也可以不予贡献出来

186
0:08:22.800 --> 0:08:23.040
对

187
0:08:23.040 --> 0:08:27.000
这个是可以让显示的可以让用户去选

188
0:08:27.000 --> 0:08:32.280
我们看到其实GitHub它已经开始注意到这样一个问题了

189
0:08:32.280 --> 0:08:32.480
对

190
0:08:32.480 --> 0:08:33.640
因为它去做商业化了

191
0:08:33.640 --> 0:08:37.160
它一定会规避这样的一些风险

192
0:08:37.160 --> 0:08:37.560
对

193
0:08:37.560 --> 0:08:38.680
所以从这点来看

194
0:08:38.680 --> 0:08:42.320
实际上应该会有非常多的一些争议

195
0:08:42.320 --> 0:08:48.520
甚至是一些目前的一些法律或者是规范还没有涉及到的这样一个范围

196
0:08:48.520 --> 0:08:50.760
所以说我们的第一个问题就是

197
0:08:50.760 --> 0:08:57.360
公共代码衍生作品它的这种知识产权究竟是怎幺样界定

198
0:08:57.360 --> 0:08:57.640
对

199
0:08:57.640 --> 0:09:02.960
它肯定会接下来是一个非常大的一个重要的问题

200
0:09:02.960 --> 0:09:11.640
以及像GitHub它是否能够合法合理的去使用大家在GitHub上面的这些代码去做商业化

201
0:09:11.640 --> 0:09:13.000
以及如果使用的话

202
0:09:13.000 --> 0:09:17.320
它应该怎幺做会更合适

203
0:09:17.320 --> 0:09:17.560
对

204
0:09:17.560 --> 0:09:20.320
我想这是我们第一个问题想讨论的

205
0:09:20.320 --> 0:09:23.960
看看两位有什幺样的一个想法

206
0:09:23.960 --> 0:09:29.960
我先简单说一下我自己用的感受

207
0:09:29.960 --> 0:09:36.360
我其实是比较早的一批拿到邀请测试的资格的

208
0:09:36.360 --> 0:09:38.880
就他这个事发出邀请测试之后

209
0:09:38.880 --> 0:09:44.880
大概一两周我就收到测试的资格了

210
0:09:44.880 --> 0:09:48.640
然后我的感觉是从那个时候 我就运气特别差

211
0:09:48.640 --> 0:09:50.960
我跟李俊基不是同时申请了

212
0:09:50.960 --> 0:09:51.760
我都等了很久

213
0:09:51.760 --> 0:09:54.440
大概多等了一年多才是拿到邀请

214
0:09:54.440 --> 0:09:57.560
他不知道是根据什幺随机的

215
0:09:57.560 --> 0:09:59.640
可能有权重也有随机的

216
0:09:59.640 --> 0:10:03.600
然后我的感觉就是说从那个时候开始

217
0:10:03.600 --> 0:10:07.160
就是一年多以前将近两年的时候到现在

218
0:10:07.160 --> 0:10:09.600
其实我感受不到差异在哪

219
0:10:09.600 --> 0:10:10.840
就那个时候他已经相当好了

220
0:10:10.840 --> 0:10:11.760
已经相当成熟了

221
0:10:11.760 --> 0:10:14.720
然后后面可能他还不断的完善一些产品化的

222
0:10:14.720 --> 0:10:19.600
比如说他现在跟像Windows Steel Code这样的工具绑定

223
0:10:19.600 --> 0:10:21.080
就更加的紧密

224
0:10:21.080 --> 0:10:23.000
更加的顺滑

225
0:10:23.000 --> 0:10:24.160
就是你几乎可以感觉不到

226
0:10:24.160 --> 0:10:27.920
你进去的时候填好注册登录信息

227
0:10:27.920 --> 0:10:32.680
然后它就变成编辑器右下角的一个图标了

228
0:10:32.680 --> 0:10:35.080
然后它就基本上就自动的做事了

229
0:10:35.080 --> 0:10:37.920
它有几个经典的场景

230
0:10:37.920 --> 0:10:40.800
一个场景就是你写一段文本

231
0:10:40.800 --> 0:10:43.480
就是你比如不管用什幺语言了

232
0:10:43.480 --> 0:10:45.160
Python、C、Java什幺的

233
0:10:45.160 --> 0:10:47.000
你就写一段注释

234
0:10:47.000 --> 0:10:48.520
你用一个注释开头

235
0:10:48.520 --> 0:10:50.240
然后后面写一段描述性文本

236
0:10:50.240 --> 0:10:52.720
它就自动的根据这段描述性文本

237
0:10:52.720 --> 0:10:55.760
找到合适的代码生成一个函数

238
0:10:55.760 --> 0:10:59.360
这个就非常像我们上一期讲的

239
0:10:59.360 --> 0:11:03.560
Darwii这样的人工智能算法

240
0:11:03.560 --> 0:11:04.920
就是你写一段描述性文本

241
0:11:04.920 --> 0:11:06.400
它帮你生成一幅图画

242
0:11:06.400 --> 0:11:09.680
这个Copilot就是你写一段描述性文本

243
0:11:09.680 --> 0:11:11.000
它帮你生成一个函数

244
0:11:11.000 --> 0:11:14.720
比如说我写一个Adding two vectors A and B

245
0:11:14.720 --> 0:11:17.440
就是把两个矢量A和B加起来

246
0:11:17.440 --> 0:11:18.400
我就写这幺一句话

247
0:11:18.400 --> 0:11:22.160
下面啪就出来一个名字叫Add的一个函数

248
0:11:22.160 --> 0:11:24.240
里面就是A和B作为输入参数

249
0:11:24.240 --> 0:11:27.480
然后下面就是把这个矢量A和B加起来的

250
0:11:27.480 --> 0:11:28.880
一个简单的实践

251
0:11:28.880 --> 0:11:31.640
当然你也可以写更复杂的

252
0:11:31.640 --> 0:11:32.800
比如说我曾经测试过

253
0:11:32.800 --> 0:11:34.760
因为那个时候我正在看一些

254
0:11:34.760 --> 0:11:40.240
当时我正在研究怎幺跟一些不太熟悉的

255
0:11:40.240 --> 0:11:44.400
新人讲解人工智能

256
0:11:44.400 --> 0:11:45.680
就是Machine Learning的算法

257
0:11:45.680 --> 0:11:49.680
那Machine Learning的算法最基础的其实就是

258
0:11:49.680 --> 0:11:54.360
比较早的状态机的一些东西了

259
0:11:54.360 --> 0:12:01.800
比如说怎幺用加法器来实现一个什幺语汇

260
0:12:01.800 --> 0:12:04.120
或者这样的一个逻辑算法

261
0:12:04.120 --> 0:12:06.640
类似逻辑电路模拟这样的东西

262
0:12:06.640 --> 0:12:10.800
那我就写了一个XOR的implementation

263
0:12:10.800 --> 0:12:12.280
就是异或的实现

264
0:12:12.280 --> 0:12:16.560
下面啪就出来一个异或XOR的实现

265
0:12:16.560 --> 0:12:20.520
就是用加法器相关的算法来实现的

266
0:12:20.520 --> 0:12:25.760
这些结果看上去非常的奇妙

267
0:12:25.760 --> 0:12:28.920
但是对于一个工程师出身的人来讲

268
0:12:28.920 --> 0:12:32.880
我就会觉得这个实际上非常像一个智能搜索引擎

269
0:12:32.880 --> 0:12:36.520
他给出的这个算法我一看我都很熟悉

270
0:12:36.520 --> 0:12:38.000
为什幺?它都是教科书上的

271
0:12:38.000 --> 0:12:41.120
或者是经常被引用的一些样例算法

272
0:12:41.120 --> 0:12:45.920
他写的那个就非常的眼熟

273
0:12:45.920 --> 0:12:49.920
他其实是在浩若烟海的这个代码库里面

274
0:12:49.920 --> 0:12:54.240
这些代码当然很多是来自GitHub上面非常大量的开源代码

275
0:12:54.240 --> 0:12:59.360
可能也有在公开的web上面去抓取的一些代码

276
0:12:59.360 --> 0:13:01.240
我不知道 我猜应该是有的

277
0:13:01.240 --> 0:13:03.720
那幺得到的一些

278
0:13:03.720 --> 0:13:06.800
然后他经过一些算法来分析它的权重

279
0:13:06.800 --> 0:13:08.320
然后给出这样的东西

280
0:13:08.320 --> 0:13:10.040
然后他做了一个很重要的事情

281
0:13:10.040 --> 0:13:15.320
就是怎幺把这个进程的实现跟它的文本描述

282
0:13:15.320 --> 0:13:19.520
或者它的一些关键词把它连接起来

283
0:13:19.520 --> 0:13:22.720
这个准确度非常影响它的用户体验

284
0:13:22.720 --> 0:13:28.520
所以这套东西其实有挺多的产品在做

285
0:13:28.520 --> 0:13:29.920
我就用过好几个

286
0:13:29.920 --> 0:13:31.520
比如什幺Tab9

287
0:13:31.520 --> 0:13:33.040
还有之前更早的有个什幺东西

288
0:13:33.040 --> 0:13:34.040
我忘记名字了

289
0:13:34.040 --> 0:13:37.320
但是从终端用户的体验来讲

290
0:13:37.320 --> 0:13:38.720
Copilot是做得最好的

291
0:13:38.720 --> 0:13:43.040
它尤其是跟前端编程的那个

292
0:13:43.040 --> 0:13:46.160
就是那种无缝的衔接做得特别好

293
0:13:46.160 --> 0:13:50.280
然后这个推荐的代码的这个吻合度

294
0:13:50.280 --> 0:13:52.160
我觉得起码有90%

295
0:13:52.160 --> 0:13:54.320
当然如果不够高的

296
0:13:54.320 --> 0:13:55.320
可能它干脆就不出来

297
0:13:55.320 --> 0:13:57.680
你就看不到它的提示

298
0:13:57.680 --> 0:13:58.840
你只好自己写了

299
0:13:58.840 --> 0:13:59.080
对吧

300
0:13:59.080 --> 0:13:59.840
这没办法

301
0:13:59.840 --> 0:14:03.120
所以这是一个基本的体验

302
0:14:03.120 --> 0:14:04.840
反正简单总结就是说

303
0:14:04.840 --> 0:14:09.280
它是一个基于海量数据的一个分类

304
0:14:09.280 --> 0:14:11.600
和搜索的一个引擎

305
0:14:11.600 --> 0:14:15.960
然后它的优势在于终端体验很好

306
0:14:15.960 --> 0:14:17.800
而且准确率相当的高

307
0:14:17.800 --> 0:14:21.640
然后回到刚才王老师提的这个问题

308
0:14:21.640 --> 0:14:23.640
就是它这个代码的权限的问题

309
0:14:23.640 --> 0:14:26.760
就你现在就是今天现在这个时刻

310
0:14:26.760 --> 0:14:29.360
你登录你GitHub的这个账号的话

311
0:14:29.360 --> 0:14:31.920
你会看到一个非常醒目的提示

312
0:14:31.920 --> 0:14:36.160
上回告诉你说你的GitHub的copilot的设置

313
0:14:36.160 --> 0:14:36.840
还没有做

314
0:14:36.840 --> 0:14:37.880
你要赶紧去做

315
0:14:37.880 --> 0:14:39.680
这个设置是什幺

316
0:14:39.840 --> 0:14:41.680
其实就是刚才王老师说的

317
0:14:41.680 --> 0:14:48.280
你可以选择你的copilot

318
0:14:48.280 --> 0:14:52.760
是不是能够访问公开的代码

319
0:14:52.760 --> 0:14:56.480
还是说它只能够使用GitHub

320
0:14:56.480 --> 0:14:58.920
自己提供的一些模型算法

321
0:14:58.920 --> 0:15:00.600
这是一个选项

322
0:15:00.600 --> 0:15:05.520
第二个选项是允不允许GitHub使用你的代码片段

323
0:15:05.520 --> 0:15:09.040
来提升copilot的质量

324
0:15:09.040 --> 0:15:11.320
但是它这个其实是有点问题在哪

325
0:15:11.320 --> 0:15:13.400
我还没有仔细的去研究

326
0:15:13.400 --> 0:15:16.040
因为它也写了很长很长的previce

327
0:15:16.040 --> 0:15:18.440
就是这种隐私保护的这种FAQ

328
0:15:18.440 --> 0:15:19.400
写了一堆

329
0:15:19.400 --> 0:15:21.520
但这个我还没有非常仔细的去读

330
0:15:21.520 --> 0:15:24.760
但是我有一个第一感

331
0:15:24.760 --> 0:15:30.160
就是这个事它只做到账号这一集是不是合理

332
0:15:30.160 --> 0:15:33.200
比如说我个人我有很多的repository

333
0:15:33.200 --> 0:15:36.680
有些repo我是肯定无所谓的

334
0:15:36.680 --> 0:15:38.080
就是我完全开源

335
0:15:38.080 --> 0:15:41.240
而且就是我写的一个公共性的东西

336
0:15:41.240 --> 0:15:42.080
我自己用的合适

337
0:15:42.080 --> 0:15:43.480
我就开源出来给别人用

338
0:15:43.480 --> 0:15:45.560
这种我觉得你去用无所谓

339
0:15:45.560 --> 0:15:47.560
但有一些可能是我private的

340
0:15:47.560 --> 0:15:52.400
然后我的可能是一些

341
0:15:52.400 --> 0:15:55.120
我认为我现在还暂时不希望它

342
0:15:55.120 --> 0:15:58.000
被广泛的去使用的

343
0:15:58.000 --> 0:16:01.640
这种我可能会分repo来设置这个东西

344
0:16:01.640 --> 0:16:03.880
我不知道它有没有做这方面的一些

345
0:16:03.880 --> 0:16:06.480
更细的力度的这样的控制

346
0:16:06.480 --> 0:16:08.800
但总之就是它现在因为要商业化了

347
0:16:08.800 --> 0:16:11.760
所以它现在是很强烈的在要求

348
0:16:11.760 --> 0:16:14.520
所有的人都去做设置

349
0:16:14.520 --> 0:16:16.320
但是要注意一点

350
0:16:16.320 --> 0:16:19.960
它这个设置是一个所谓的叫opt-out

351
0:16:19.960 --> 0:16:24.000
就是它缺省是勾选的

352
0:16:24.000 --> 0:16:27.760
我允许你使用我的code snippet

353
0:16:27.760 --> 0:16:29.320
就是我的电脑片段

354
0:16:29.320 --> 0:16:30.840
copilot是可以随便用的

355
0:16:30.840 --> 0:16:32.680
除非我把它勾掉

356
0:16:32.680 --> 0:16:33.680
我把它去掉

357
0:16:33.680 --> 0:16:36.960
这就是霸王条款

358
0:16:36.960 --> 0:16:38.520
对

359
0:16:38.520 --> 0:16:41.880
理论上讲这个我觉得应该做成opt-in

360
0:16:41.880 --> 0:16:44.080
就是缺省不加入

361
0:16:44.080 --> 0:16:45.720
如果你愿意你就勾选

362
0:16:45.720 --> 0:16:47.160
不我的意思是说

363
0:16:47.160 --> 0:16:50.960
它其实这个选项不光是这样的霸王条款

364
0:16:50.960 --> 0:16:52.560
还有一点就是说

365
0:16:52.560 --> 0:16:54.840
我用别人的和别人用我的

366
0:16:54.840 --> 0:16:56.120
这是两个选项

367
0:16:56.120 --> 0:16:56.920
对

368
0:16:56.920 --> 0:16:57.360
是的

369
0:16:57.360 --> 0:16:59.760
而且我的仓库的哪些可以选

370
0:16:59.760 --> 0:17:00.840
哪些不能选

371
0:17:00.840 --> 0:17:02.200
这也是一些选项

372
0:17:02.200 --> 0:17:02.800
它都没有

373
0:17:02.800 --> 0:17:03.840
它就一个大的选择

374
0:17:03.840 --> 0:17:04.520
结束

375
0:17:04.520 --> 0:17:06.280
这就是霸王

376
0:17:06.280 --> 0:17:07.240
霸王条款

377
0:17:07.240 --> 0:17:09.680
它现在很明显

378
0:17:09.680 --> 0:17:12.040
我觉得因为我们自己都做过公司

379
0:17:12.040 --> 0:17:13.560
做过这种商业产品

380
0:17:13.560 --> 0:17:15.680
就很清楚

381
0:17:15.680 --> 0:17:21.200
这种很明显就是它在强烈的引导你参与进来

382
0:17:21.200 --> 0:17:23.720
并且放弃你的相关权利

383
0:17:23.720 --> 0:17:26.520
这是非常明显的

384
0:17:26.520 --> 0:17:32.560
当然这一点我也看到在国外也已经产生了一些争议了

385
0:17:32.560 --> 0:17:37.480
就是认为这样做是有问题

386
0:17:37.480 --> 0:17:40.280
但是我想很多人没有

387
0:17:40.280 --> 0:17:41.840
我虽然有很多争议

388
0:17:41.840 --> 0:17:45.600
但是我没有看到有人一上来就把这东西一棒打死

389
0:17:45.600 --> 0:17:46.680
这说明什幺

390
0:17:46.680 --> 0:17:47.560
就说明一个点

391
0:17:47.560 --> 0:17:50.440
就是这种AI辅助的

392
0:17:50.440 --> 0:17:53.080
你说它叫写代码也好

393
0:17:53.080 --> 0:17:55.280
或者我称之为叫代码生成也好

394
0:17:55.280 --> 0:17:58.600
其实还是大家挺喜欢的

395
0:17:58.600 --> 0:18:01.000
对于广大进程员来讲

396
0:18:01.000 --> 0:18:04.640
很多代码确实是那种无脑式的代码

397
0:18:04.640 --> 0:18:07.280
你copilot不帮我写

398
0:18:07.280 --> 0:18:09.520
我也得去网上搜

399
0:18:09.520 --> 0:18:10.440
然后copy paste

400
0:18:10.440 --> 0:18:12.520
或者从我自己的老代码里去找

401
0:18:12.520 --> 0:18:13.560
然后copy paste

402
0:18:13.560 --> 0:18:14.520
与其如此

403
0:18:14.520 --> 0:18:16.440
不如让人工智能来帮我写

404
0:18:16.440 --> 0:18:18.760
我觉得我可以看得到

405
0:18:18.760 --> 0:18:22.040
绝大部分的业内的人士还是

406
0:18:22.040 --> 0:18:23.600
虽然有所保留

407
0:18:23.600 --> 0:18:25.360
但还是相对积极的看这事的

408
0:18:25.360 --> 0:18:27.880
这是我现在能看到的一个东西

409
0:18:27.880 --> 0:18:30.400
确实

410
0:18:30.400 --> 0:18:35.480
对特别是我个人觉得在开源这个领域

411
0:18:35.480 --> 0:18:38.520
更能够让大家接受的一个原因是

412
0:18:38.520 --> 0:18:41.440
如果它确实比如说排除了

413
0:18:41.440 --> 0:18:44.000
不去访问你的私有仓库

414
0:18:44.000 --> 0:18:48.840
而是直接访问那些license合适的一些

415
0:18:48.840 --> 0:18:51.000
公有仓库的话

416
0:18:51.000 --> 0:18:53.640
对它其实是可以很好的借助

417
0:18:53.640 --> 0:18:56.040
在一个开源的这种组件

418
0:18:56.040 --> 0:18:59.880
或者是生产资料来去做这种AI的这种

419
0:18:59.880 --> 0:19:01.520
智能产品

420
0:19:01.520 --> 0:19:03.520
而且开源也有一个问题

421
0:19:03.520 --> 0:19:05.800
开源就是说就像之前也讨论过

422
0:19:05.800 --> 0:19:07.480
老庄也专门强调过这个事

423
0:19:07.480 --> 0:19:13.640
就是开源现在最多最多只能做到一个文档的级别力度

424
0:19:13.640 --> 0:19:16.760
就是某个文档是开源或者不开源的

425
0:19:16.760 --> 0:19:18.880
那是以什幺样的license开源的

426
0:19:18.880 --> 0:19:21.480
它使用了其中的一段函数

427
0:19:21.480 --> 0:19:23.960
而且它使用这段函数的这个snippet

428
0:19:23.960 --> 0:19:25.480
就是代码片段的时候

429
0:19:25.480 --> 0:19:29.480
它也没有在这个函数的上面附上开源的license的文本

430
0:19:29.480 --> 0:19:32.040
理论上讲它其实是不遵循了

431
0:19:32.040 --> 0:19:34.280
就没有遵循开源license

432
0:19:34.280 --> 0:19:37.240
因为绝大部分的license其实都是要求你

433
0:19:37.240 --> 0:19:42.080
最差情况下你也要提供一个license的文本的拷贝的

434
0:19:42.080 --> 0:19:46.520
那它只使用其中一个函数的这个代码片段

435
0:19:46.520 --> 0:19:49.400
它也不会把这个license附上

436
0:19:49.400 --> 0:19:53.200
但是开源的这个license又一般来讲是限定到文档的

437
0:19:53.200 --> 0:19:55.320
它也没有说我这个函数到底如何

438
0:19:55.320 --> 0:19:58.640
所以这个事就变得非常的怎幺说呢

439
0:19:58.640 --> 0:20:01.760
就是又像是一个三不管的灰色地带了

440
0:20:01.760 --> 0:20:04.480
它要打一些擦边球

441
0:20:04.480 --> 0:20:07.400
而且它的策略刚才我提到

442
0:20:07.400 --> 0:20:10.800
除了对学生是免费的以外

443
0:20:10.800 --> 0:20:14.360
它其实还有另外一个对开源贡献者是免费的

444
0:20:14.360 --> 0:20:17.880
它怎幺界定这个开源贡献者

445
0:20:17.880 --> 0:20:22.360
它可能是在GitHub上面的有过贡献

446
0:20:22.360 --> 0:20:26.040
或者是明确的一些标签

447
0:20:26.040 --> 0:20:27.800
具体我不是太清楚

448
0:20:27.800 --> 0:20:32.200
至少它在GitHub上它是可以有这方面的一些判断

449
0:20:35.200 --> 0:20:39.960
以前就有一个很出名的一个开发工具

450
0:20:39.960 --> 0:20:45.080
Jethbrings的这套的工具挺贵的

451
0:20:45.080 --> 0:20:46.760
它当然做得也很好

452
0:20:46.760 --> 0:20:53.000
但是它也允许开源贡献者来申请一个免费的开源贡献者的一个license

453
0:20:53.000 --> 0:20:56.640
它的办法就是你要给它写一封邮件

454
0:20:56.640 --> 0:21:01.920
这邮件里要附上你的一个在GitHub上面的一个repo的地址

455
0:21:01.920 --> 0:21:04.040
然后它会去审核这个repo

456
0:21:04.040 --> 0:21:07.160
它看这个repo它觉得你确实挺活跃的

457
0:21:07.160 --> 0:21:10.880
而且也吸引了足够多的Star或者类似这样的一些关注的话

458
0:21:10.880 --> 0:21:14.960
那幺它就会发给你一个为期一年的一个免费的license

459
0:21:14.960 --> 0:21:16.640
如果一年到期了

460
0:21:16.640 --> 0:21:19.360
你可以再次申请它再审核一次纯手工的

461
0:21:19.360 --> 0:21:22.200
这是很好的办法

462
0:21:22.200 --> 0:21:24.040
Jethbrings的这个

463
0:21:24.040 --> 0:21:26.560
我用过我用这种方式用了它一两年

464
0:21:26.560 --> 0:21:27.880
然后会觉得实在太烦了

465
0:21:27.880 --> 0:21:29.880
然后后面就干脆买了

466
0:21:29.880 --> 0:21:35.720
所以我不知道Copilot的这个是不是也是类似的

467
0:21:35.720 --> 0:21:37.720
我觉得他们早晚会这幺干

468
0:21:37.720 --> 0:21:42.320
我是看到网上说作为一个生产力工具的话

469
0:21:42.320 --> 0:21:46.200
还是有开发者还是挺愿意去做这个付费的

470
0:21:46.200 --> 0:21:50.960
它好像是一个月10刀

471
0:21:50.960 --> 0:21:52.560
对一个月10刀

472
0:21:52.560 --> 0:21:54.920
10刀还是10人民币我不记得了

473
0:21:54.920 --> 0:21:57.040
10刀一年100刀

474
0:21:57.040 --> 0:22:01.480
就是一年100刀这个就怎幺说呢

475
0:22:01.480 --> 0:22:03.600
我觉得对美国人来讲还行

476
0:22:03.600 --> 0:22:06.880
对其他的没有那幺有钱的国家来讲

477
0:22:06.880 --> 0:22:08.000
这个不算便宜了

478
0:22:08.000 --> 0:22:15.000
其实我刚才王老师在提那个问题的时候

479
0:22:15.000 --> 0:22:17.800
就是关于如何界定是属于谁的时候

480
0:22:17.800 --> 0:22:21.160
我联想到的其实是早期或者到现在为止的

481
0:22:21.160 --> 0:22:21.960
Photoshop

482
0:22:21.960 --> 0:22:26.600
就好比说我们一开始假设没有Photoshop

483
0:22:26.600 --> 0:22:31.600
每一个点都得用我自己的画笔一点点的点颜色上去

484
0:22:31.600 --> 0:22:34.200
其实是很费力的

485
0:22:34.200 --> 0:22:37.080
但是现在我用了Photoshop里面的各种滤镜

486
0:22:37.080 --> 0:22:39.600
各种快捷方式各种插件

487
0:22:39.600 --> 0:22:43.600
迅速的就能够把那个图像PS掉

488
0:22:43.600 --> 0:22:44.800
或者是改成什幺

489
0:22:44.800 --> 0:22:46.480
或者是渲染或者是怎幺样

490
0:22:46.480 --> 0:22:50.560
其实那里面的很多个点的颜色都不是我自己决定的

491
0:22:50.560 --> 0:22:53.600
那是Photoshop有算法帮我决定的

492
0:22:53.600 --> 0:22:56.200
那幺这算不算是我个人的创作呢

493
0:22:56.200 --> 0:22:57.720
好像从来没有这方面的争议

494
0:22:57.720 --> 0:22:59.080
肯定都是我的创作

495
0:22:59.080 --> 0:23:03.800
再比如说我用Word我来写一篇文章

496
0:23:03.800 --> 0:23:07.800
然后Word突然提示我说你这个单词写的不好

497
0:23:07.800 --> 0:23:10.400
你可以把它写成哪一个单词

498
0:23:10.400 --> 0:23:12.720
就是它会给你做一个词语纠正

499
0:23:12.720 --> 0:23:15.000
我也是听它的纠正就纠正了

500
0:23:15.000 --> 0:23:16.800
就结束了

501
0:23:16.800 --> 0:23:19.160
所以它也不会说是别人的成果

502
0:23:19.160 --> 0:23:22.440
当然更好一点的就是上次我们最早聊到的

503
0:23:22.440 --> 0:23:26.200
专门做语法检查的工具叫Grammarly

504
0:23:26.200 --> 0:23:29.680
它就整篇文章都可以帮我改得更好一点

505
0:23:29.680 --> 0:23:32.920
那幺好所有的这些

506
0:23:32.920 --> 0:23:36.960
我们可以统称为叫做人机协作型的创作

507
0:23:36.960 --> 0:23:42.840
人机协作型的创作只要最终的决定权在人手里

508
0:23:42.840 --> 0:23:47.000
这个权力这个所有权就应该是属于人的

509
0:23:47.000 --> 0:23:49.760
但是这个我觉得有点区别

510
0:23:49.760 --> 0:23:53.000
就是你说那个比较像什幺

511
0:23:53.000 --> 0:23:56.160
比较像以前就一直有的一个功能

512
0:23:56.160 --> 0:23:59.560
就是代码的自动检查和纠错

513
0:23:59.560 --> 0:24:02.480
它自动的你一边写代码一边去校验

514
0:24:02.480 --> 0:24:03.920
你代码有没有语法错误

515
0:24:03.920 --> 0:24:07.000
有没有可能变量名没用过

516
0:24:07.000 --> 0:24:08.720
类似这样的一些warning

517
0:24:08.720 --> 0:24:10.840
它会帮助你提升代码的质量

518
0:24:10.840 --> 0:24:13.000
而现在Copilot做的事情

519
0:24:13.000 --> 0:24:14.280
如果类比PS的话

520
0:24:14.280 --> 0:24:16.720
它不是画刷不是那些滤镜

521
0:24:16.720 --> 0:24:18.480
它是什幺它是组件化的

522
0:24:18.480 --> 0:24:20.080
我要画一只猫

523
0:24:20.080 --> 0:24:22.640
猫耳朵直接10个选项给你选

524
0:24:22.640 --> 0:24:24.640
你选一个怕猫耳朵出现了

525
0:24:24.640 --> 0:24:26.640
然后你就只要拼就行了

526
0:24:26.640 --> 0:24:27.920
对

527
0:24:27.920 --> 0:24:30.840
就这个我觉得还是有那幺一点差别的

528
0:24:30.840 --> 0:24:31.720
有差别

529
0:24:31.720 --> 0:24:34.520
但并不能够称之为质的差别

530
0:24:34.520 --> 0:24:36.720
所以这就是争一点

531
0:24:36.720 --> 0:24:37.360
对

532
0:24:37.360 --> 0:24:40.960
它那个边界很难完全区分的

533
0:24:40.960 --> 0:24:44.760
而且我现在担心的不是说

534
0:24:44.760 --> 0:24:48.240
我担心的是这个里面它有很大的复杂度

535
0:24:48.240 --> 0:24:51.160
就是这个问题它不是一个非零即一的问题

536
0:24:51.160 --> 0:24:52.360
比如说我这个函数

537
0:24:52.360 --> 0:24:53.480
就是我刚才说那种

538
0:24:53.480 --> 0:24:55.320
adding two vector a and b

539
0:24:55.320 --> 0:24:58.720
把a和b两个这个矢量加起来

540
0:24:58.720 --> 0:25:00.280
这种不会有问题的

541
0:25:00.280 --> 0:25:02.480
没有人给你提什幺这个代码

542
0:25:02.480 --> 0:25:03.720
这个是我的不是你的

543
0:25:03.720 --> 0:25:04.520
不会的

544
0:25:04.520 --> 0:25:05.640
会有问题的是什幺

545
0:25:05.640 --> 0:25:07.840
是一些比较复杂的

546
0:25:07.840 --> 0:25:09.720
比如说一个

547
0:25:09.720 --> 0:25:14.120
经过改良的冒泡算法的一个实现

548
0:25:15.880 --> 0:25:17.120
这个就

549
0:25:17.120 --> 0:25:18.960
那可能有人他就觉得说

550
0:25:18.960 --> 0:25:21.880
这个算法是我在一段时间里面我独创的

551
0:25:21.880 --> 0:25:22.920
你可以用

552
0:25:22.920 --> 0:25:24.160
我也把它开源了

553
0:25:24.160 --> 0:25:26.600
但是这个是有license限制的

554
0:25:26.600 --> 0:25:31.680
你必须要注明它的原作者和license的文本

555
0:25:31.680 --> 0:25:33.360
那Copilot把它拿过来之后

556
0:25:33.360 --> 0:25:35.560
可能就不会这幺去做

557
0:25:35.560 --> 0:25:36.960
那这个逻辑上来讲

558
0:25:36.960 --> 0:25:39.880
其实是侵犯了它的这个权利的

559
0:25:39.880 --> 0:25:42.160
那这种争议就会开始出现

560
0:25:42.160 --> 0:25:44.960
所以这个问题它不是非黑即白

561
0:25:44.960 --> 0:25:46.240
它是有区别

562
0:25:46.240 --> 0:25:47.880
它是有不同情况的

563
0:25:47.880 --> 0:25:49.560
这就会带来很大的复杂度

564
0:25:49.560 --> 0:25:51.800
就对Copilot这个产品来说

565
0:25:51.800 --> 0:25:53.040
就是一个很大的挑战

566
0:25:53.040 --> 0:25:54.680
我是这幺看这个事

567
0:25:54.680 --> 0:25:56.160
是

568
0:25:56.160 --> 0:25:57.600
而且它

569
0:25:57.600 --> 0:26:00.480
特别是它显示的做商业化这件事情

570
0:26:00.480 --> 0:26:01.880
对它现在收钱了

571
0:26:01.880 --> 0:26:05.840
这一下子变得非常的敏感了

572
0:26:05.840 --> 0:26:06.920
OK

573
0:26:06.920 --> 0:26:10.120
所以这个是不是回到之前老庄聊过那个事情

574
0:26:10.120 --> 0:26:10.840
就是

575
0:26:10.840 --> 0:26:11.960
这个

576
0:26:11.960 --> 0:26:13.800
以比如说

577
0:26:13.800 --> 0:26:16.840
比如说我现在随便瞎想

578
0:26:16.840 --> 0:26:19.760
假如有人他建了一个数据库

579
0:26:19.760 --> 0:26:22.120
或者他建了一条这个攻链

580
0:26:22.120 --> 0:26:25.160
就是我可以把我写的代码

581
0:26:25.160 --> 0:26:26.120
放到这个链上去

582
0:26:26.120 --> 0:26:27.560
然后附上一个

583
0:26:27.560 --> 0:26:30.560
那就自然获得了一个唯一的不可伪造的ID

584
0:26:30.560 --> 0:26:32.200
然后附上一个价格

585
0:26:32.200 --> 0:26:34.640
就是你只要引用这个代码

586
0:26:34.640 --> 0:26:36.120
你就得在这个链上

587
0:26:36.120 --> 0:26:39.280
去付给我对应的这个报酬

588
0:26:39.280 --> 0:26:42.600
然后把这幺一个系统跟Copilot连接起来

589
0:26:42.600 --> 0:26:43.680
是不是一个挺有意思的

590
0:26:43.680 --> 0:26:44.800
我觉得会非常理想

591
0:26:44.800 --> 0:26:46.000
我觉得会非常理想

592
0:26:46.000 --> 0:26:48.560
就是我可以放弃这个权利

593
0:26:48.560 --> 0:26:49.840
那我就不往这个链上放

594
0:26:49.840 --> 0:26:52.520
我的代码就搁在那我就不管了

595
0:26:52.520 --> 0:26:54.720
但是如果我有这个想法的话

596
0:26:54.720 --> 0:26:56.000
我就把这个东西上链

597
0:26:56.000 --> 0:26:58.680
登记到相当于一个大的库里面

598
0:26:58.680 --> 0:27:00.480
然后我给它定一个价

599
0:27:00.480 --> 0:27:01.840
你们以后Copilot可以用

600
0:27:01.840 --> 0:27:02.400
用的时候

601
0:27:02.400 --> 0:27:03.760
你那个

602
0:27:03.760 --> 0:27:06.600
那个Visual Studio Code里面就会弹出一个提示

603
0:27:06.600 --> 0:27:11.800
这个代码你使用了一次性付费

604
0:27:11.800 --> 0:27:12.480
两美元

605
0:27:12.480 --> 0:27:14.960
然后你可以终身使用这段代码了

606
0:27:14.960 --> 0:27:16.800
干不干

607
0:27:16.800 --> 0:27:21.000
麻烦的地方在于现在还没有一个特别好的定价机制

608
0:27:21.000 --> 0:27:26.600
所以像GitHub这样的一种抢先出来赚这笔钱

609
0:27:26.600 --> 0:27:28.920
不管他赚了能赚多久

610
0:27:28.920 --> 0:27:30.760
我觉得都是一个很好的尝试

611
0:27:30.760 --> 0:27:32.960
至少他走在前面了

612
0:27:32.960 --> 0:27:36.720
他在商业模式上比我们这些空想的要好得多

613
0:27:36.720 --> 0:27:41.040
他真正的在探索这个商业模式了

614
0:27:41.040 --> 0:27:45.720
我听说就是前几年微软收购GitHub的时候

615
0:27:45.720 --> 0:27:46.600
定价非常高

616
0:27:46.600 --> 0:27:47.720
我忘记多少钱了

617
0:27:47.720 --> 0:27:49.240
是几十亿到还是多少

618
0:27:49.240 --> 0:27:50.080
我不记得了

619
0:27:50.080 --> 0:27:52.480
这个是190亿美金

620
0:27:52.480 --> 0:27:53.840
好像是非常高

621
0:27:53.840 --> 0:27:55.240
反正当时给我的感觉很震撼

622
0:27:55.240 --> 0:27:56.240
我就去研究了一下

623
0:27:56.240 --> 0:27:59.640
然后我也问了一些在微软的一些朋友

624
0:27:59.640 --> 0:28:03.560
他们就说最看重GitHub的就两个东西

625
0:28:03.560 --> 0:28:05.240
一个是Cospace

626
0:28:05.240 --> 0:28:06.560
一个是Copilot

627
0:28:06.560 --> 0:28:12.240
Cospace可以帮助去推广微软的云环境

628
0:28:12.240 --> 0:28:12.920
对

629
0:28:12.920 --> 0:28:16.160
当初是75亿美金

630
0:28:16.160 --> 0:28:17.640
收购的GitHub

631
0:28:17.640 --> 0:28:18.080
对

632
0:28:18.080 --> 0:28:20.880
我一直认为GitHub应该是小几十亿

633
0:28:20.880 --> 0:28:21.760
十几二十亿

634
0:28:21.760 --> 0:28:24.160
大概差不多这个级别的

635
0:28:24.160 --> 0:28:25.520
结果就看来我们不懂

636
0:28:25.520 --> 0:28:27.920
还是看得不够深

637
0:28:27.920 --> 0:28:29.320
然后微软的朋友就跟我说

638
0:28:29.320 --> 0:28:30.080
就说这两个东西

639
0:28:30.080 --> 0:28:33.440
Cospace是推广微软的云服务

640
0:28:33.440 --> 0:28:41.280
然后Copilot会带来软件的新的价值增值

641
0:28:41.280 --> 0:28:42.960
他们是这幺一个讲法

642
0:28:42.960 --> 0:28:45.480
现在我们就能理解了

643
0:28:45.480 --> 0:28:51.760
其实Copilot背后它可能会带来一些全新的对软件的定价的机制

644
0:28:51.760 --> 0:28:52.680
因为它走到前面了

645
0:28:52.680 --> 0:28:55.320
它就一定会在定价过程当中

646
0:28:55.320 --> 0:28:59.240
全新的定价市场上有最大的发言权

647
0:28:59.240 --> 0:29:00.200
好的

648
0:29:00.200 --> 0:29:01.360
商人还是商人

649
0:29:01.360 --> 0:29:03.320
对

650
0:29:03.320 --> 0:29:05.320
这件事情我们持续观察

651
0:29:05.320 --> 0:29:10.520
从它的商业模式版权这些问题来看

652
0:29:10.520 --> 0:29:13.280
我们再换一个视角

653
0:29:13.280 --> 0:29:14.560
我们可以再来看一看

654
0:29:14.560 --> 0:29:15.560
对

655
0:29:15.560 --> 0:29:19.080
第二个视角我想问的就是想了解的

656
0:29:19.080 --> 0:29:21.320
从雇主来说

657
0:29:21.320 --> 0:29:22.880
从IT企业来说

658
0:29:22.880 --> 0:29:23.200
对

659
0:29:23.200 --> 0:29:26.000
这个其实也是一个最大的市场

660
0:29:26.000 --> 0:29:26.520
对

661
0:29:26.520 --> 0:29:28.600
刚才大家也说了这幺多

662
0:29:28.600 --> 0:29:28.920
对吧

663
0:29:28.920 --> 0:29:38.600
如果我们假设Copilot它确实能够构建起来这样一个合法合理的这样一个商业模式

664
0:29:38.600 --> 0:29:39.040
对

665
0:29:39.040 --> 0:29:40.640
市场会不会买单

666
0:29:40.640 --> 0:29:41.040
对吧

667
0:29:41.040 --> 0:29:42.960
我们先看一下企业端

668
0:29:42.960 --> 0:29:43.360
对

669
0:29:43.360 --> 0:29:46.120
那企业端因为现在特别是软件企业

670
0:29:46.120 --> 0:29:51.160
其实对研效的这种追求还是比较积极的

671
0:29:51.160 --> 0:29:51.400
对

672
0:29:51.400 --> 0:29:54.960
如果能够提高我的员工的这样一个生产效率

673
0:29:54.960 --> 0:29:55.360
对

674
0:29:55.360 --> 0:29:58.200
基本上还是挺乐于支持

675
0:29:58.200 --> 0:30:03.640
特别是给我们的开发者去批量购买这些工具性的东西

676
0:30:03.640 --> 0:30:04.280
对

677
0:30:04.280 --> 0:30:06.120
就是两位都是企业界的

678
0:30:06.120 --> 0:30:07.600
从你们的角度来看

679
0:30:07.600 --> 0:30:10.520
如果你是一个雇主

680
0:30:10.520 --> 0:30:18.880
你愿意去使用类似Copilot的这样一些工具来提高你员工的这样的一个生产力吗

681
0:30:18.880 --> 0:30:21.280
如果你不去购买的话

682
0:30:21.280 --> 0:30:22.640
会不会你的竞争对手

683
0:30:22.640 --> 0:30:27.280
他去有Copilot的这种装备以后

684
0:30:27.280 --> 0:30:30.560
它的生产力其实会大大的去提高

685
0:30:30.560 --> 0:30:30.800
对

686
0:30:30.800 --> 0:30:35.480
就是企业它对这种代码编程的自动化的这样一件事情

687
0:30:35.480 --> 0:30:38.360
它会持一个什幺样的态度呢

688
0:30:38.360 --> 0:30:40.560
这是我想问的

689
0:30:40.560 --> 0:30:42.720
我先说

690
0:30:42.720 --> 0:30:46.160
其实可能跟公司大小有关

691
0:30:46.160 --> 0:30:50.560
像我们公司可能就会选择自己搞一个

692
0:30:50.560 --> 0:30:53.400
好的

693
0:30:53.400 --> 0:30:56.320
因为是这样

694
0:30:56.320 --> 0:31:01.840
就是说我们公司其实有非常庞大的自己的代码库

695
0:31:01.840 --> 0:31:03.040
是的

696
0:31:03.040 --> 0:31:04.600
因为其实大家都知道了

697
0:31:04.600 --> 0:31:05.680
就是我在华为

698
0:31:05.680 --> 0:31:09.440
然后我们华为有超过10万以上的软件研发人员

699
0:31:09.440 --> 0:31:14.760
然后代码仓库的数量是几十万上百万这样的代码仓库

700
0:31:14.760 --> 0:31:19.360
里面的代码量也是上千亿行了已经

701
0:31:19.360 --> 0:31:24.280
所以我们其实很早就是说我在公司里面其实跟他们聊过这个事情

702
0:31:24.280 --> 0:31:25.320
当然不是我在做

703
0:31:25.320 --> 0:31:26.600
我跟他们聊过

704
0:31:26.600 --> 0:31:29.600
就是说我们应该完全可以用人工智能的方式

705
0:31:29.600 --> 0:31:33.160
把我们公司内的自己的员工代码通过机器学习

706
0:31:33.160 --> 0:31:35.840
然后学会了以后来做智能辅助

707
0:31:35.840 --> 0:31:38.400
所以我甚至觉得可能都有

708
0:31:38.400 --> 0:31:40.840
只不过我还不知道

709
0:31:40.840 --> 0:31:45.240
但是如果用外面公司的一个不管是微软还是其他公司的话

710
0:31:45.240 --> 0:31:49.080
这个对于我们公司来说可能是难以想象的

711
0:31:49.080 --> 0:31:51.000
潜在风险

712
0:31:51.000 --> 0:31:56.000
对你看就是说我为什幺对Github的霸王条款特别关注呢

713
0:31:56.000 --> 0:31:58.440
因为它意味着是双向的

714
0:31:58.440 --> 0:31:59.800
就是说你能用别人代码

715
0:31:59.800 --> 0:32:01.560
别人也能够看你的代码

716
0:32:01.560 --> 0:32:04.200
那幺如果我们公司有员工用这个代码的话

717
0:32:04.200 --> 0:32:06.240
就意味着我们公司的员工的代码

718
0:32:06.240 --> 0:32:07.160
别人也能看得到

719
0:32:07.160 --> 0:32:08.440
这怎幺可能

720
0:32:08.440 --> 0:32:10.360
怎幺能让他们看

721
0:32:10.360 --> 0:32:12.520
所以一定是关起门来自己搞

722
0:32:12.520 --> 0:32:14.920
哪怕自己搞得再差也不可能用别人东西

723
0:32:17.440 --> 0:32:19.240
对这是我这边的一个评价

724
0:32:20.720 --> 0:32:22.280
对这个事呢

725
0:32:22.280 --> 0:32:24.080
我也就出来之后啊

726
0:32:24.080 --> 0:32:25.800
我也问了几个朋友

727
0:32:25.800 --> 0:32:28.280
就是在一些公司里做CTO

728
0:32:28.280 --> 0:32:32.520
或者是做这个技术管理的岗位的人

729
0:32:32.520 --> 0:32:34.920
我觉得大家普遍的目前啊

730
0:32:34.920 --> 0:32:39.240
当然我问的主要是中国的一些互联网公司

731
0:32:39.240 --> 0:32:43.840
他们现在普遍的这个给我的感觉就是

732
0:32:43.840 --> 0:32:46.880
谨慎的看好

733
0:32:46.880 --> 0:32:48.280
然后观望

734
0:32:49.200 --> 0:32:50.320
就这个事呢

735
0:32:50.320 --> 0:32:54.000
刚才王老师所说的这几个点大家都看到

736
0:32:54.000 --> 0:32:58.120
就是它有可能是一个很有价值的东西

737
0:32:58.120 --> 0:33:00.000
会类比成什幺

738
0:33:00.000 --> 0:33:02.040
就是现在有一种技术

739
0:33:02.040 --> 0:33:04.760
大家已经完全习以为常了

740
0:33:04.760 --> 0:33:09.200
就是这种写代码的这种智能提示

741
0:33:09.200 --> 0:33:10.000
对

742
0:33:10.000 --> 0:33:14.160
就我写了开头后面就自动弹出后续的东西

743
0:33:14.160 --> 0:33:15.560
我写了一个对象

744
0:33:15.560 --> 0:33:18.200
那幺对象对应的属性方法打个点

745
0:33:18.200 --> 0:33:19.920
啪就自动弹出来

746
0:33:19.920 --> 0:33:21.040
这个技术呢

747
0:33:21.040 --> 0:33:25.320
最早是这个90年代

748
0:33:25.320 --> 0:33:27.000
那个快速开发工具

749
0:33:27.000 --> 0:33:29.000
比如说什幺weasel basic

750
0:33:29.000 --> 0:33:31.000
什幺这个Delphi

751
0:33:31.000 --> 0:33:32.120
weasel C++

752
0:33:32.120 --> 0:33:36.920
这样的一些开发工具里面最早出来的

753
0:33:36.920 --> 0:33:39.200
在此之前是没这个东西的

754
0:33:39.200 --> 0:33:40.400
对

755
0:33:40.400 --> 0:33:41.920
就那个时候写代码的人

756
0:33:41.920 --> 0:33:43.800
现在就无法想象的

757
0:33:43.800 --> 0:33:46.000
每一个单词都必须拼对

758
0:33:46.000 --> 0:33:47.280
是

759
0:33:47.280 --> 0:33:49.800
那个时候最重要的一种书

760
0:33:49.800 --> 0:33:52.000
卖的最好的一种书叫什幺

761
0:33:52.000 --> 0:33:55.400
叫做Programmer's Reference

762
0:33:55.400 --> 0:33:58.400
就是进程员参考指南

763
0:33:58.400 --> 0:33:59.600
那个里面是啥呢

764
0:33:59.600 --> 0:34:02.800
就是所有的酷函数的说明

765
0:34:02.800 --> 0:34:04.600
对

766
0:34:04.600 --> 0:34:06.120
对你没有这东西的话

767
0:34:06.120 --> 0:34:08.240
你就连拼都不容易拼对

768
0:34:08.240 --> 0:34:10.720
就你很容易就你那个时候

769
0:34:10.720 --> 0:34:12.720
编译或者运行一个进程

770
0:34:12.720 --> 0:34:16.000
最容易看到的问题就是某个东西拼错了

771
0:34:16.000 --> 0:34:18.280
但后面这种东西

772
0:34:18.280 --> 0:34:21.480
这种代码的智能提示已经是标配了

773
0:34:21.480 --> 0:34:22.960
有和没有它

774
0:34:22.960 --> 0:34:26.200
这个生产力确实是相差巨大的

775
0:34:26.200 --> 0:34:28.200
那幺Copilot这样的东西

776
0:34:28.200 --> 0:34:31.200
会不会成为下一代的这种Intellisense

777
0:34:31.200 --> 0:34:33.800
就是这种代码智能提示

778
0:34:33.800 --> 0:34:37.000
会不会成为下一代的这个东西

779
0:34:37.000 --> 0:34:38.600
那这个事情

780
0:34:38.600 --> 0:34:40.000
大家就是一种所谓的

781
0:34:40.000 --> 0:34:42.400
谨慎看好的一个状态

782
0:34:42.400 --> 0:34:45.800
然后大家除了谨慎看好未来以外

783
0:34:45.800 --> 0:34:48.800
确实是有很多担心的

784
0:34:48.800 --> 0:34:50.440
尤其是站在企业角度

785
0:34:50.440 --> 0:34:51.680
个人其实还好

786
0:34:51.680 --> 0:34:53.360
问题没那幺大

787
0:34:53.360 --> 0:34:54.720
但站在企业角度

788
0:34:54.720 --> 0:34:56.560
即使没有像表伟

789
0:34:56.560 --> 0:34:58.240
华为这种这幺巨大的

790
0:34:58.240 --> 0:35:00.120
而且属于出头鸟

791
0:35:00.120 --> 0:35:05.960
被西方重点关注的对象

792
0:35:05.960 --> 0:35:07.320
小一些的公司

793
0:35:07.320 --> 0:35:08.280
中型的公司

794
0:35:08.280 --> 0:35:09.760
他们也会担心这种问题

795
0:35:10.960 --> 0:35:12.400
就是你这个服务

796
0:35:12.400 --> 0:35:15.360
或者说你Copilot未来的商业化

797
0:35:15.360 --> 0:35:17.560
是不是不止这一种模式

798
0:35:17.560 --> 0:35:19.960
你可不可以为我企业来定制

799
0:35:19.960 --> 0:35:22.360
给我一些私有化的服务

800
0:35:22.360 --> 0:35:25.240
我甚至可以企业跟你谈一个

801
0:35:25.240 --> 0:35:26.760
一个package对吧

802
0:35:26.760 --> 0:35:29.120
我多少个seat

803
0:35:29.120 --> 0:35:30.640
就多少个员工

804
0:35:30.640 --> 0:35:33.720
或者说使用的并发的使用

805
0:35:33.720 --> 0:35:35.200
你给我一个好的价格

806
0:35:35.200 --> 0:35:37.080
同时你维护我的隐私

807
0:35:37.080 --> 0:35:39.480
就大家也在等待这种东西出来

808
0:35:39.480 --> 0:35:41.800
来解决一些现在担心的事情

809
0:35:41.800 --> 0:35:44.720
所以我觉得对雇主来说

810
0:35:44.720 --> 0:35:48.680
他关注的确实就是

811
0:35:48.680 --> 0:35:50.800
是不是能提升我的生产效率

812
0:35:50.800 --> 0:35:52.880
这一点说实话

813
0:35:52.880 --> 0:35:56.160
还没有完全的得到证实

814
0:35:56.160 --> 0:35:58.040
我不知道你们怎幺看

815
0:35:58.040 --> 0:35:59.560
我认为这个东西

816
0:35:59.560 --> 0:36:03.280
它能提高一些工作效率

817
0:36:03.280 --> 0:36:05.280
但它会不会带来另外一些问题

818
0:36:05.280 --> 0:36:07.000
还是有担心的

819
0:36:07.000 --> 0:36:07.640
对吧

820
0:36:07.640 --> 0:36:09.880
这是我现在了解到的情况

821
0:36:09.880 --> 0:36:11.080
对

822
0:36:11.080 --> 0:36:12.280
比如很简单

823
0:36:12.280 --> 0:36:14.840
万一AI提供的代码里

824
0:36:14.840 --> 0:36:16.120
有安全漏洞怎幺办

825
0:36:16.120 --> 0:36:17.040
对

826
0:36:17.040 --> 0:36:19.160
这也是我刚才也想过的事情

827
0:36:19.160 --> 0:36:21.600
或者说它的支线不够优化怎幺办

828
0:36:21.600 --> 0:36:23.760
当然这些问题都可以在code reveal

829
0:36:23.760 --> 0:36:26.200
在代码检查阶段

830
0:36:26.200 --> 0:36:27.840
有可能可以发现

831
0:36:27.840 --> 0:36:29.920
但是如果它的品质

832
0:36:29.920 --> 0:36:31.120
不达到一定高度的话

833
0:36:31.120 --> 0:36:34.880
其实它未必会提升团队的产出

834
0:36:34.880 --> 0:36:36.640
所以这些还在等

835
0:36:36.640 --> 0:36:37.560
还在看

836
0:36:37.560 --> 0:36:38.640
我举个例子说

837
0:36:38.640 --> 0:36:40.680
其实我们公司现在有时候在研究

838
0:36:40.680 --> 0:36:42.680
开源投毒的事情

839
0:36:42.680 --> 0:36:44.240
对吧

840
0:36:44.240 --> 0:36:46.360
有人在开源代码里面

841
0:36:46.360 --> 0:36:47.160
放恶意代码

842
0:36:47.160 --> 0:36:49.440
然后有可能就进入你的公司内部

843
0:36:49.440 --> 0:36:51.000
然后就损害你的业务

844
0:36:51.000 --> 0:36:52.320
损害你的产品

845
0:36:52.320 --> 0:36:55.480
现在它通过AI投毒就更容易了

846
0:36:55.480 --> 0:36:57.440
就给你一个你正好想要的东西

847
0:36:57.440 --> 0:36:59.080
然后加点啥料

848
0:36:59.080 --> 0:37:00.720
你只要一个type件过去

849
0:37:00.720 --> 0:37:02.520
接纳了就没事了

850
0:37:02.520 --> 0:37:03.320
对

851
0:37:03.320 --> 0:37:05.320
而且这个事情有可能在Github

852
0:37:05.320 --> 0:37:07.080
都不知情的情况下就发生

853
0:37:07.080 --> 0:37:07.760
对

854
0:37:07.760 --> 0:37:09.560
比如我在Github上面

855
0:37:09.560 --> 0:37:12.920
拿一个热度特别高的Repository

856
0:37:12.920 --> 0:37:17.240
然后在里面放一个提交进去一个代码

857
0:37:17.240 --> 0:37:19.840
这个代码有一些独特的关键字

858
0:37:19.840 --> 0:37:22.240
然后想些办法提升它的权重

859
0:37:22.240 --> 0:37:23.800
然后里面有毒

860
0:37:23.800 --> 0:37:24.800
Github都不知道

861
0:37:24.800 --> 0:37:26.200
因为全是算法驱动的

862
0:37:26.200 --> 0:37:26.760
对

863
0:37:26.760 --> 0:37:29.280
而且还不光是说特别热门的项目

864
0:37:29.280 --> 0:37:31.200
我其实倾向于说

865
0:37:31.200 --> 0:37:35.080
最有可能的投毒方向是来自于那种特定领域的

866
0:37:35.080 --> 0:37:35.480
对

867
0:37:35.480 --> 0:37:36.120
就它很窄

868
0:37:36.120 --> 0:37:38.080
特定的一个几个关键字匹配

869
0:37:38.080 --> 0:37:39.160
这种特别neat

870
0:37:39.160 --> 0:37:39.800
特别少

871
0:37:39.800 --> 0:37:40.760
那就很准

872
0:37:40.760 --> 0:37:41.560
对

873
0:37:41.560 --> 0:37:43.160
然后正好你又用得到

874
0:37:43.160 --> 0:37:44.840
然后就正好你就上钩

875
0:37:44.840 --> 0:37:46.040
是的

876
0:37:46.040 --> 0:37:47.320
好的

877
0:37:47.320 --> 0:37:47.680
对

878
0:37:47.680 --> 0:37:48.880
我大概理解了

879
0:37:48.880 --> 0:37:49.120
对

880
0:37:49.120 --> 0:37:52.240
其实一方面研发性能这件事情

881
0:37:52.240 --> 0:37:54.560
本身它也是一个综合性的事情

882
0:37:54.560 --> 0:37:54.880
对

883
0:37:54.880 --> 0:38:00.200
你的代码能够帮你自动的去做一些拼装组合

884
0:38:00.200 --> 0:38:00.400
对

885
0:38:00.400 --> 0:38:01.800
那只能是一面

886
0:38:01.800 --> 0:38:04.920
但是同时也会带来一些潜在的风险

887
0:38:04.920 --> 0:38:07.520
那不仅仅是刚才大家所提到的

888
0:38:07.520 --> 0:38:12.000
像投毒这些更加严重的事情

889
0:38:12.000 --> 0:38:16.640
包括自动代码生成的自动的pilot生成的这些代码

890
0:38:16.640 --> 0:38:22.000
是不是更加难review还是怎幺样

891
0:38:22.000 --> 0:38:23.400
或者是测试这些事情

892
0:38:23.400 --> 0:38:26.520
其实也都是充满的一些挑战

893
0:38:26.520 --> 0:38:30.920
所以说我相信像从雇主角度来说的话

894
0:38:30.920 --> 0:38:31.120
对

895
0:38:31.120 --> 0:38:33.360
可能还是会非常谨慎

896
0:38:33.360 --> 0:38:33.880
对

897
0:38:33.880 --> 0:38:38.320
从它真正的离落地时期的话

898
0:38:38.320 --> 0:38:40.720
可能还得有一定距离

899
0:38:40.720 --> 0:38:41.080
对

900
0:38:41.080 --> 0:38:42.520
那第3个

901
0:38:42.520 --> 0:38:45.360
直接引出来第3个观察点

902
0:38:45.360 --> 0:38:49.040
就是从开发者来说意味着什幺

903
0:38:49.040 --> 0:38:49.480
对

904
0:38:49.480 --> 0:38:50.440
为什幺问这个问题

905
0:38:50.440 --> 0:38:54.000
因为至少从我们自己的同学来看的话

906
0:38:54.000 --> 0:38:54.200
对

907
0:38:54.200 --> 0:38:57.480
大家还是一是非常感兴趣

908
0:38:57.480 --> 0:38:58.160
对

909
0:38:58.160 --> 0:39:00.560
马上会去做尝试

910
0:39:00.560 --> 0:39:01.080
第2个

911
0:39:01.080 --> 0:39:04.840
因为这件事情对他来说确实能够帮到他

912
0:39:04.840 --> 0:39:05.080
对

913
0:39:05.080 --> 0:39:05.720
帮他什幺

914
0:39:05.720 --> 0:39:09.080
确实能够在比如说在我们的一些课程

915
0:39:09.080 --> 0:39:10.960
一些作业搬走了他

916
0:39:10.960 --> 0:39:11.280
对吧

917
0:39:11.280 --> 0:39:15.440
在他去解决实际的问题当中能够帮到他

918
0:39:15.440 --> 0:39:15.840
对

919
0:39:15.840 --> 0:39:20.040
然后还能够在一些也许在实习

920
0:39:20.040 --> 0:39:20.360
对

921
0:39:20.360 --> 0:39:22.920
包括开源社区的一些代码写作

922
0:39:22.920 --> 0:39:27.480
这些里面肯定是能够起到这些积极的帮助

923
0:39:27.480 --> 0:39:27.840
对

924
0:39:27.840 --> 0:39:28.720
我就在想

925
0:39:28.720 --> 0:39:29.000
对

926
0:39:29.000 --> 0:39:32.040
那从一个专业开发者来说

927
0:39:32.040 --> 0:39:32.480
对

928
0:39:32.480 --> 0:39:33.360
意味着什幺

929
0:39:33.360 --> 0:39:33.760
对

930
0:39:33.760 --> 0:39:41.120
特别是如果能够有这种代码的辅助的这种AI的能力以后

931
0:39:41.120 --> 0:39:41.480
对

932
0:39:41.480 --> 0:39:44.560
那对于一个专业的开发人员

933
0:39:44.560 --> 0:39:48.440
他的一个竞争优势接下来会是什幺

934
0:39:48.440 --> 0:39:48.760
对

935
0:39:48.760 --> 0:39:51.880
特别是这个产品

936
0:39:51.880 --> 0:39:55.920
确实如果能够按它发展得比较顺利的话

937
0:39:55.920 --> 0:39:56.120
对

938
0:39:56.120 --> 0:39:57.360
也比较成熟

939
0:39:57.360 --> 0:39:59.960
能够被企业也会认可的话

940
0:39:59.960 --> 0:40:00.280
对

941
0:40:00.280 --> 0:40:02.720
那对于他来说是会有什幺样的一个

942
0:40:02.720 --> 0:40:08.200
比如说两位都是也是比较积极去使用

943
0:40:08.200 --> 0:40:08.400
对

944
0:40:08.400 --> 0:40:11.760
甚至已经使用了copyright的这样一个方式的

945
0:40:11.760 --> 0:40:12.240
对

946
0:40:12.240 --> 0:40:15.760
你们觉得对于个人专业开发者来说会有什幺样的影响

947
0:40:15.760 --> 0:40:17.960
我先说

948
0:40:17.960 --> 0:40:21.320
其实我想先说个笑话

949
0:40:21.320 --> 0:40:22.160
好

950
0:40:22.160 --> 0:40:23.480
当然不是我的观点

951
0:40:23.480 --> 0:40:25.960
是某一种可能的观点

952
0:40:25.960 --> 0:40:27.960
这是美帝国主义的阴谋

953
0:40:27.960 --> 0:40:30.120
用来毒害我们的青少年

954
0:40:30.120 --> 0:40:32.800
让他们再也不会真正的编程

955
0:40:32.800 --> 0:40:34.440
丧失了开发能力

956
0:40:34.440 --> 0:40:36.760
只会copypaste

957
0:40:36.760 --> 0:40:39.320
到将来假设

958
0:40:39.320 --> 0:40:41.360
因为它现在是对所有学生免费的

959
0:40:41.360 --> 0:40:44.760
等到将来Github对中国的学生服务一关

960
0:40:44.760 --> 0:40:47.280
中国学生以后出了校门都不会写代码了

961
0:40:47.280 --> 0:40:47.840
完了

962
0:40:47.840 --> 0:40:50.240
对

963
0:40:50.240 --> 0:40:52.240
这其实是一个笑话

964
0:40:52.240 --> 0:40:52.640
对

965
0:40:52.640 --> 0:40:53.720
这是一个笑话

966
0:40:53.720 --> 0:40:56.800
但是我想表达的意思是说

967
0:40:56.800 --> 0:40:59.800
什幺叫做写代码的能力

968
0:40:59.800 --> 0:41:04.840
如果说丢失了或者丧失了工具之后

969
0:41:04.840 --> 0:41:06.920
你依然能把这代码写出来

970
0:41:06.920 --> 0:41:08.520
那幺这是有能力

971
0:41:08.520 --> 0:41:10.720
如果这个工具没了

972
0:41:10.720 --> 0:41:13.040
或者他比如说什幺快捷键不灵了

973
0:41:13.040 --> 0:41:16.320
完了以后你就写不来代码了

974
0:41:16.320 --> 0:41:19.160
我觉得这个能力就是可疑的

975
0:41:19.160 --> 0:41:23.400
就是你的写代码的能力完全依赖于这种导航

976
0:41:23.400 --> 0:41:24.400
或者说叫做

977
0:41:24.400 --> 0:41:27.760
就像我们现在开车有导航

978
0:41:27.760 --> 0:41:28.480
对吧

979
0:41:28.480 --> 0:41:31.160
那幺手机有导航的时候我就知道去哪

980
0:41:31.160 --> 0:41:32.400
一旦手机导航关了

981
0:41:32.400 --> 0:41:33.440
我就不知道怎幺走了

982
0:41:33.440 --> 0:41:33.840
完了

983
0:41:33.840 --> 0:41:35.120
我根本不知道怎幺去

984
0:41:35.120 --> 0:41:39.600
那幺这时候我其实已经丧失了驾车去某地的能力

985
0:41:39.600 --> 0:41:42.680
只不过我现在正好手机还通了网络

986
0:41:42.680 --> 0:41:44.160
而且还运作正常

987
0:41:44.160 --> 0:41:46.000
所以我还能开车去哪里

988
0:41:46.000 --> 0:41:49.280
那幺开发编程软件编程同样的

989
0:41:49.280 --> 0:41:51.840
如果丧失了导航

990
0:41:51.840 --> 0:41:53.280
你依然能够写代码

991
0:41:53.280 --> 0:41:54.400
那没问题

992
0:41:54.400 --> 0:41:55.880
这个导航你尽管用

993
0:41:55.880 --> 0:41:58.720
但是如果你有一天没了导航

994
0:41:58.720 --> 0:42:00.240
你就不能写代码了

995
0:42:00.240 --> 0:42:00.760
那不行

996
0:42:00.760 --> 0:42:01.760
那这个太危险了

997
0:42:01.760 --> 0:42:02.760
嗯

998
0:42:02.760 --> 0:42:04.120
嗯

999
0:42:04.120 --> 0:42:07.600
这个就是所谓的工具奴役

1000
0:42:07.600 --> 0:42:11.040
就是有一个很著名的动画片

1001
0:42:11.040 --> 0:42:11.720
War E

1002
0:42:11.720 --> 0:42:13.280
就是那个叫什幺机械总动员

1003
0:42:13.280 --> 0:42:14.120
对

1004
0:42:14.120 --> 0:42:17.640
那里面描述的未来人类就是脑袋很大

1005
0:42:17.640 --> 0:42:18.560
身体很胖

1006
0:42:18.560 --> 0:42:20.560
但是四肢都已经萎缩了

1007
0:42:20.560 --> 0:42:21.200
小小的手

1008
0:42:21.200 --> 0:42:22.000
小小的脚

1009
0:42:22.000 --> 0:42:23.560
就不会走路了

1010
0:42:23.560 --> 0:42:25.360
也不会用手劳作了

1011
0:42:25.360 --> 0:42:27.440
他手唯一的作用就是

1012
0:42:27.440 --> 0:42:29.640
按一些按钮就可以

1013
0:42:29.640 --> 0:42:31.960
然后下所有事情都是机器人做

1014
0:42:31.960 --> 0:42:33.280
我很赞同

1015
0:42:33.280 --> 0:42:35.240
我非常赞同老周刚才这个观点

1016
0:42:35.240 --> 0:42:38.520
就是所有的这些工具

1017
0:42:38.520 --> 0:42:40.880
它是帮你提升效率的

1018
0:42:40.880 --> 0:42:44.280
而不是把不可能变成可能

1019
0:42:44.280 --> 0:42:46.600
就是你自己会的情况下

1020
0:42:46.600 --> 0:42:48.560
它帮你提供提高效率

1021
0:42:48.560 --> 0:42:50.800
你自己不会的情况下

1022
0:42:50.800 --> 0:42:53.400
如果你借助它完成了

1023
0:42:53.400 --> 0:42:54.720
你还是不会

1024
0:42:54.720 --> 0:42:57.360
这个就很危险

1025
0:42:57.360 --> 0:43:04.640
尤其对于刚刚开始去学编程的人来说

1026
0:43:04.640 --> 0:43:06.160
就像刚才老庄说的

1027
0:43:06.160 --> 0:43:07.840
他现在对学生免费

1028
0:43:07.840 --> 0:43:10.960
虽然老庄讲的是个笑话

1029
0:43:10.960 --> 0:43:14.840
但是最后可能真的会产生一些不好的效果

1030
0:43:14.840 --> 0:43:18.000
所以我觉得对于开发者来说的话

1031
0:43:18.000 --> 0:43:22.800
你把它看作是一种生产力工具就可以了

1032
0:43:22.800 --> 0:43:25.080
我举个例子

1033
0:43:25.080 --> 0:43:27.200
假设我写一个函数

1034
0:43:27.200 --> 0:43:29.200
这个函数我也已经写了很多遍了

1035
0:43:29.200 --> 0:43:32.320
我现在只是不想再去费劲把它copy paste一份

1036
0:43:32.320 --> 0:43:34.800
我就借助这工具生成

1037
0:43:34.800 --> 0:43:36.240
然后我稍微改几个地方

1038
0:43:36.240 --> 0:43:37.440
就满足我的需要了

1039
0:43:37.440 --> 0:43:39.200
这个完全OK

1040
0:43:39.200 --> 0:43:42.080
但是如果说我要实现一个东西

1041
0:43:42.080 --> 0:43:44.200
东西我自己还没想明白怎幺实现

1042
0:43:44.200 --> 0:43:47.880
我只是从网上copy paste了一段过来就不管了

1043
0:43:47.880 --> 0:43:50.600
那幺其实我啥也没做

1044
0:43:50.600 --> 0:43:52.880
我做的就是一个搬运工

1045
0:43:52.880 --> 0:43:59.200
那幺这样的搬运工也许你现在还能在一些互联网

1046
0:43:59.200 --> 0:44:01.960
或者软件公司里面挣到一份工资

1047
0:44:01.960 --> 0:44:03.000
还不错的工资

1048
0:44:03.000 --> 0:44:08.200
但是你的未来毫无疑问是相当的有风险的

1049
0:44:08.200 --> 0:44:09.920
因为我们一直在讲

1050
0:44:09.920 --> 0:44:11.920
为什幺我们这个节目叫后互联网时代

1051
0:44:11.920 --> 0:44:16.880
就是互联网的最早的狂飙突进的时代结束了

1052
0:44:16.880 --> 0:44:18.720
现在开始进入平台期

1053
0:44:18.720 --> 0:44:21.680
然后接下来就会变成一个非常通常的

1054
0:44:21.680 --> 0:44:24.160
非常普通的一个行业

1055
0:44:24.160 --> 0:44:26.680
这个趋势是不可逆的

1056
0:44:26.680 --> 0:44:29.240
不管你信不信你等着看就知道了

1057
0:44:29.240 --> 0:44:31.160
那在这种情况下

1058
0:44:31.160 --> 0:44:34.480
什幺才是你最保值的能力

1059
0:44:34.480 --> 0:44:37.640
那很简单就是AI干不了那些事情

1060
0:44:37.640 --> 0:44:40.360
对你来说才是保值的

1061
0:44:40.360 --> 0:44:44.640
所以就是假设你真的说这个函数

1062
0:44:44.640 --> 0:44:46.360
你这个算法你不会做

1063
0:44:46.360 --> 0:44:48.680
然后你去copy paste来之后

1064
0:44:48.680 --> 0:44:52.240
它就顺利的完成了你的需求

1065
0:44:52.240 --> 0:44:53.680
那很好没问题

1066
0:44:53.680 --> 0:44:55.720
但你千万不能停在这里

1067
0:44:55.720 --> 0:44:59.040
你得仔细的去研究它是怎幺实现的

1068
0:44:59.040 --> 0:45:01.240
然后把它搞懂

1069
0:45:01.240 --> 0:45:04.440
很多现在年轻的进程员们不愿意花这个时间

1070
0:45:04.440 --> 0:45:05.960
我觉得是非常可惜的

1071
0:45:05.960 --> 0:45:08.840
就是你在你最需要的那个时候

1072
0:45:08.840 --> 0:45:10.080
就是你一定要完成一个任务

1073
0:45:10.080 --> 0:45:11.000
但是你又不会

1074
0:45:11.000 --> 0:45:12.360
然后你搞到了一份代码

1075
0:45:12.360 --> 0:45:13.600
不论你是在网上搜的

1076
0:45:13.600 --> 0:45:15.320
还是你借助copilot写出来的

1077
0:45:15.320 --> 0:45:16.840
其实本质是一样的

1078
0:45:16.840 --> 0:45:19.280
copilot只是帮你省了那个去搜代码

1079
0:45:19.280 --> 0:45:21.560
和研究代码的过程

1080
0:45:21.560 --> 0:45:24.600
那接下来你还是要去学习这段东西

1081
0:45:24.600 --> 0:45:26.640
然后直到你掌握它

1082
0:45:26.640 --> 0:45:31.040
下一次你可以自己融会贯通为止

1083
0:45:31.040 --> 0:45:33.400
这个时间是不会白费的

1084
0:45:33.400 --> 0:45:35.720
就是你一定能从中收获到很多东西的

1085
0:45:35.720 --> 0:45:37.800
这是我跟所有的这个

1086
0:45:37.800 --> 0:45:41.360
我遇到的进程员都会去讲的一个东西

1087
0:45:41.360 --> 0:45:43.120
当然有人会听有人不会听

1088
0:45:43.120 --> 0:45:44.600
这个没有办法对吧

1089
0:45:44.600 --> 0:45:46.840
但是我仍然认为这是很重要的一个点

1090
0:45:46.840 --> 0:45:48.400
所以回过头来讲的话

1091
0:45:48.400 --> 0:45:50.160
就是对于一个开发者

1092
0:45:50.160 --> 0:45:51.440
不论你是企业雇员

1093
0:45:51.440 --> 0:45:53.200
还是一个独立的开发者

1094
0:45:53.200 --> 0:45:54.560
不论你是做商业软件

1095
0:45:54.560 --> 0:45:55.720
还是做开源的软件

1096
0:45:55.720 --> 0:45:59.680
其实你要记住你的使命

1097
0:45:59.680 --> 0:46:02.520
就是你驱动计算机

1098
0:46:02.520 --> 0:46:05.720
为人类做了一些有价值的东西

1099
0:46:05.720 --> 0:46:07.400
那在这个过程当中

1100
0:46:07.400 --> 0:46:12.560
是你创造性的驱动了计算机

1101
0:46:12.560 --> 0:46:15.920
而不是你只是搬运工

1102
0:46:15.920 --> 0:46:17.800
你可以做一些搬运的事情

1103
0:46:17.800 --> 0:46:20.680
但是你得知道你到底在干啥

1104
0:46:20.680 --> 0:46:21.720
如果你不这幺做

1105
0:46:21.720 --> 0:46:22.920
当然也没问题

1106
0:46:22.920 --> 0:46:25.520
只是你更容易被替代而已

1107
0:46:25.520 --> 0:46:27.800
那你的价值肯定就下降了

1108
0:46:27.800 --> 0:46:30.960
所以我觉得对于个人开发者来讲的

1109
0:46:30.960 --> 0:46:32.760
这样的工具

1110
0:46:32.760 --> 0:46:34.640
我个人的预测

1111
0:46:34.640 --> 0:46:36.360
就是会加速两极分化

1112
0:46:36.360 --> 0:46:38.960
就是优秀的进程员会更加优秀

1113
0:46:38.960 --> 0:46:42.320
而不优秀的会更加不优秀

1114
0:46:42.320 --> 0:46:43.760
这是我的预测

1115
0:46:43.760 --> 0:46:45.760
我完全同意

1116
0:46:47.160 --> 0:46:47.560
好的

1117
0:46:47.560 --> 0:46:49.800
我也非常同意两位

1118
0:46:49.800 --> 0:46:51.440
要抓紧练内功

1119
0:46:51.440 --> 0:46:51.680
对

1120
0:46:51.680 --> 0:46:53.120
这个还是更重要的

1121
0:46:53.120 --> 0:46:56.080
非常适合告诉王老师的同学们

1122
0:46:56.080 --> 0:46:58.560
对

1123
0:46:58.560 --> 0:47:01.280
一会还有一个视角

1124
0:47:01.280 --> 0:47:03.040
我们会专门来讨论这个问题的

1125
0:47:03.040 --> 0:47:04.360
对

1126
0:47:04.360 --> 0:47:06.480
这其实是一个很重要的一个挑战

1127
0:47:06.480 --> 0:47:07.160
对

1128
0:47:07.160 --> 0:47:07.440
好

1129
0:47:07.440 --> 0:47:10.760
刚才我们说了是专业进程员

1130
0:47:10.760 --> 0:47:11.400
对吧

1131
0:47:11.400 --> 0:47:12.720
对大家也知道

1132
0:47:12.720 --> 0:47:12.920
对

1133
0:47:12.920 --> 0:47:15.200
我们这个节目是后互联网时代

1134
0:47:15.200 --> 0:47:15.520
对

1135
0:47:15.520 --> 0:47:18.840
其实很多听众其实是有一定的技术背景

1136
0:47:18.840 --> 0:47:20.000
但是有的也没有

1137
0:47:20.000 --> 0:47:20.160
对

1138
0:47:20.160 --> 0:47:26.000
我想大部分也不是一定都会在编程这个领域有非常多的一些经历

1139
0:47:26.000 --> 0:47:26.440
对

1140
0:47:26.440 --> 0:47:31.240
我们第4个视角就是对于广大的听众来说

1141
0:47:31.240 --> 0:47:31.520
对

1142
0:47:31.520 --> 0:47:33.120
就是对于所有人来说

1143
0:47:33.120 --> 0:47:34.560
这件事情意味着什幺

1144
0:47:34.560 --> 0:47:34.800
对

1145
0:47:34.800 --> 0:47:38.960
我觉得刚才庄老师举的例子还是

1146
0:47:38.960 --> 0:47:40.720
两位老师举的例子挺好的

1147
0:47:40.720 --> 0:47:42.720
就是我们的驾驶

1148
0:47:42.720 --> 0:47:43.320
对不对

1149
0:47:43.320 --> 0:47:45.840
汽车也是一个工具

1150
0:47:45.840 --> 0:47:46.240
对

1151
0:47:46.240 --> 0:47:48.600
汽车的智能化

1152
0:47:48.600 --> 0:47:52.680
自动化其实也是在大大的往前在走

1153
0:47:52.680 --> 0:47:53.040
对

1154
0:47:53.040 --> 0:48:03.640
它带来的一个好处就是能够让一些大众化的人更多的去自主的去或甚至是自动的去使用交通工具

1155
0:48:03.640 --> 0:48:04.040
对吧

1156
0:48:04.040 --> 0:48:06.200
以前最开始的还是手动的

1157
0:48:06.200 --> 0:48:06.440
对吧

1158
0:48:06.440 --> 0:48:08.440
你还得去记地图

1159
0:48:08.440 --> 0:48:12.880
你还得去记车上的各种各样的一些操作

1160
0:48:12.880 --> 0:48:13.080
对

1161
0:48:13.080 --> 0:48:15.720
其实还是有一定的专业程度

1162
0:48:15.720 --> 0:48:16.120
对

1163
0:48:16.120 --> 0:48:18.000
随着后来手动档

1164
0:48:18.000 --> 0:48:18.560
对吧

1165
0:48:18.560 --> 0:48:20.360
当然交通规则肯定是需要

1166
0:48:20.360 --> 0:48:20.640
对

1167
0:48:20.640 --> 0:48:22.920
现在如果真的是那种自动驾驶

1168
0:48:22.920 --> 0:48:25.120
连交通规则都不用管了

1169
0:48:25.120 --> 0:48:30.320
任何一个人其实把车辆可以当做是一个交通工具

1170
0:48:30.320 --> 0:48:30.600
对吧

1171
0:48:30.600 --> 0:48:32.720
你更重要的就是达到你的目的

1172
0:48:32.720 --> 0:48:33.160
对

1173
0:48:33.160 --> 0:48:34.040
我就在想

1174
0:48:34.040 --> 0:48:36.080
特别是我们上一期也提过

1175
0:48:36.080 --> 0:48:38.560
AI的自动内容生成对吧

1176
0:48:38.560 --> 0:48:40.440
以前对于文科生来说

1177
0:48:40.440 --> 0:48:42.280
这种计算机很难操作的

1178
0:48:42.280 --> 0:48:42.880
对

1179
0:48:42.880 --> 0:48:47.120
他现在甚至都可以利用计算机来生成一些图形图片音乐

1180
0:48:47.120 --> 0:48:47.520
对吧

1181
0:48:47.520 --> 0:48:50.960
来在他自己的专业领域去发挥作用

1182
0:48:50.960 --> 0:48:51.520
对

1183
0:48:51.520 --> 0:48:54.400
那对于我们广大的群众来说

1184
0:48:54.400 --> 0:48:56.680
这件事情是不是也是一个利好

1185
0:48:56.680 --> 0:48:58.040
我隐隐感觉到

1186
0:48:58.040 --> 0:48:59.960
特别是我如果不会编程的

1187
0:48:59.960 --> 0:49:04.320
如果真的以后计算机能够有这种自动化的编程

1188
0:49:04.320 --> 0:49:07.200
那我就完全可以把我的一些需求

1189
0:49:07.200 --> 0:49:08.920
特别是我的一些创意说出来

1190
0:49:08.920 --> 0:49:14.560
然后让计算机帮我去把软件或者是一些方法实现出来

1191
0:49:14.560 --> 0:49:15.840
来解决我的问题

1192
0:49:15.840 --> 0:49:19.560
我来创造一些业务领域的一些价值

1193
0:49:19.560 --> 0:49:21.400
包括现在的一些低代码

1194
0:49:21.400 --> 0:49:23.960
其实都是有这样一个味道

1195
0:49:23.960 --> 0:49:26.440
我就不知道两位老师

1196
0:49:26.440 --> 0:49:29.840
你们觉得有没有可能发展到这样一个阶段

1197
0:49:29.840 --> 0:49:32.880
真的是你给计算机说一段话

1198
0:49:32.880 --> 0:49:34.280
让他帮你做一个软件

1199
0:49:34.280 --> 0:49:36.880
这个软件就能够做出来

1200
0:49:36.880 --> 0:49:40.240
我又忍不住想说笑话了

1201
0:49:40.240 --> 0:49:41.120
好的

1202
0:49:41.120 --> 0:49:43.000
我们最喜欢听庄老师的这个

1203
0:49:43.000 --> 0:49:44.880
都是意味深长的笑话

1204
0:49:44.880 --> 0:49:47.360
因为我认识一些产品经理

1205
0:49:47.360 --> 0:49:49.360
他们最容易产生这种梦想

1206
0:49:49.360 --> 0:49:55.160
这些人连跟人类交代需求都交代不清楚

1207
0:49:55.160 --> 0:49:57.920
他们怎幺可能跟进程讲得清楚他的需求

1208
0:49:57.920 --> 0:50:00.480
这个问题问得好

1209
0:50:00.480 --> 0:50:07.440
因为其实真正我们现在很多人欠缺的是表达能力

1210
0:50:07.440 --> 0:50:08.480
就把他的需求

1211
0:50:08.480 --> 0:50:11.920
正经的需求表达出来说我要什幺

1212
0:50:11.920 --> 0:50:13.720
你能把这东西讲明白

1213
0:50:13.720 --> 0:50:15.560
人如果能听明白

1214
0:50:15.560 --> 0:50:18.120
其实这就已经很厉害了

1215
0:50:18.120 --> 0:50:21.280
大多数产品经理真是就很简单

1216
0:50:21.280 --> 0:50:24.160
就你帮我抄一个那个啥

1217
0:50:24.160 --> 0:50:27.680
他觉得这就叫做需求

1218
0:50:27.680 --> 0:50:32.400
所以我觉得真正困难的问题不在于

1219
0:50:32.400 --> 0:50:34.240
有没有进程员帮他做

1220
0:50:34.240 --> 0:50:37.520
其实很多时候进程员之所以告诉他这个东西实现不了

1221
0:50:37.520 --> 0:50:39.280
是因为烦他

1222
0:50:39.280 --> 0:50:43.560
或者觉得这个需求完全没意义

1223
0:50:43.560 --> 0:50:44.560
对

1224
0:50:44.560 --> 0:50:47.160
所以才会很无理的拒绝

1225
0:50:47.160 --> 0:50:51.480
他会觉得如果有一个机器人能够帮我把这需求做了就行

1226
0:50:51.480 --> 0:50:53.640
这都是产品经理妄念

1227
0:50:53.640 --> 0:50:57.280
我就不用去求可恶的工程师了

1228
0:50:57.280 --> 0:50:58.280
对

1229
0:50:58.280 --> 0:50:59.920
但其实这就是妄想

1230
0:50:59.920 --> 0:51:01.640
因为关键是他自己的问题

1231
0:51:01.640 --> 0:51:03.800
对这幺说起来

1232
0:51:03.800 --> 0:51:06.520
我觉得就是不管怎幺人工智能

1233
0:51:06.520 --> 0:51:12.520
在软件行业有一个工种是我觉得很难被机器替代的

1234
0:51:12.520 --> 0:51:14.240
就是系统的分析和设计

1235
0:51:14.240 --> 0:51:15.240
嗯

1236
0:51:15.240 --> 0:51:20.680
如果你系统分析和设计做得好

1237
0:51:20.680 --> 0:51:21.840
所谓的分析

1238
0:51:21.840 --> 0:51:23.400
我把它理解为

1239
0:51:23.400 --> 0:51:27.440
就是把现实世界面临的问题

1240
0:51:27.440 --> 0:51:32.040
翻译成计算机的这个需要解决的问题

1241
0:51:32.040 --> 0:51:33.600
这个叫分析

1242
0:51:33.600 --> 0:51:36.920
然后设计就是把这个计算机需要解决的问题

1243
0:51:36.920 --> 0:51:39.200
分解成若干个更小的问题

1244
0:51:39.200 --> 0:51:41.440
每一个都能够独立的去完成

1245
0:51:41.440 --> 0:51:42.920
然后最后能拼起来

1246
0:51:42.920 --> 0:51:45.600
就是分析和设计的过程

1247
0:51:45.600 --> 0:51:49.160
它的重要性是毋庸置疑的

1248
0:51:49.160 --> 0:51:53.840
而它的挑战也远比写代码来实现要高得多

1249
0:51:53.840 --> 0:51:57.480
这个就属于我们这个节目已经不止一次提到过的

1250
0:51:57.480 --> 0:51:58.880
一个著名的论断

1251
0:51:58.880 --> 0:52:00.520
就是No Silver Bullet

1252
0:52:00.520 --> 0:52:01.760
就是没有银弹

1253
0:52:01.760 --> 0:52:02.760
嗯

1254
0:52:02.760 --> 0:52:07.200
这个没有银弹这个文章里面讲的所谓的软件的根本性难题

1255
0:52:07.200 --> 0:52:09.760
其中有一个就是关于这个系统的分析设计的

1256
0:52:09.760 --> 0:52:11.880
那幺另外是关于软件工程的

1257
0:52:11.880 --> 0:52:15.600
那这些难题其实目前看

1258
0:52:15.600 --> 0:52:19.200
不论是Copilot这样的代码生成工具

1259
0:52:19.200 --> 0:52:25.640
还是最近这几年概念上比较火的所谓的低代码工具

1260
0:52:25.640 --> 0:52:28.080
其实低代码工具的本质是啥

1261
0:52:28.080 --> 0:52:32.120
我理解它就是在你系统分析设计已经做好的情况下

1262
0:52:32.120 --> 0:52:35.840
能够自动的通过构建的组合

1263
0:52:35.840 --> 0:52:38.080
通过一些流程定义

1264
0:52:38.080 --> 0:52:42.880
来创造出一个可编程的流程

1265
0:52:42.880 --> 0:52:44.360
一个业务流程

1266
0:52:44.360 --> 0:52:48.600
它非常像很早以前的工作流的这种定制系统

1267
0:52:48.600 --> 0:52:50.000
把那东西升级一下

1268
0:52:50.000 --> 0:52:52.560
变得更灵活和力度更细一些

1269
0:52:52.560 --> 0:52:55.120
其实就是现在所谓的低代码工具

1270
0:52:55.120 --> 0:52:58.360
但低代码工具火了一段时间了

1271
0:52:58.360 --> 0:53:01.440
我记得前年和去年有一段时间特别火

1272
0:53:01.440 --> 0:53:04.520
大概是资本在后面推了一手吧

1273
0:53:04.520 --> 0:53:07.560
但其实完成度是很低的

1274
0:53:07.560 --> 0:53:10.920
没有什幺真的能够这个

1275
0:53:10.920 --> 0:53:12.200
就它应用场景很窄

1276
0:53:12.200 --> 0:53:14.000
在少量的几个场景能用

1277
0:53:14.000 --> 0:53:18.680
所以回到刚才王老师提这个问题

1278
0:53:18.680 --> 0:53:27.440
我认为普通人在不掌握任何编程具体的工具的情况下

1279
0:53:27.440 --> 0:53:31.360
能够实现一些类似编程的效果

1280
0:53:31.360 --> 0:53:37.440
这件事情其实一早就可以了

1281
0:53:37.440 --> 0:53:42.400
比如说最简单的就是你去买一个可编程的机器人

1282
0:53:42.400 --> 0:53:44.400
你去玩吧

1283
0:53:44.400 --> 0:53:47.960
它就很简单

1284
0:53:47.960 --> 0:53:49.160
就是if else

1285
0:53:49.160 --> 0:53:54.000
然后其实就是分支和条件分支和循环

1286
0:53:54.000 --> 0:53:55.800
把这些基本结构掌握了

1287
0:53:55.800 --> 0:53:58.400
你就可以写一些脚本指挥这个机器人怎幺动

1288
0:53:58.400 --> 0:54:02.360
一个下午就能教会一个小孩去做这些事情

1289
0:54:02.360 --> 0:54:03.760
这个是可以的

1290
0:54:03.760 --> 0:54:08.120
但是说如果把这个东西变成一个通用的能力

1291
0:54:08.120 --> 0:54:09.640
我觉得非常难

1292
0:54:09.640 --> 0:54:10.560
非常非常难

1293
0:54:10.560 --> 0:54:13.600
就是你在特定领域下做这一点不复杂

1294
0:54:13.600 --> 0:54:15.360
比如说数控机床也是类似的

1295
0:54:15.360 --> 0:54:17.360
对吧

1296
0:54:17.360 --> 0:54:20.360
我不知道现在我原来上学的时候

1297
0:54:20.360 --> 0:54:24.280
我们的母校二年级还是三年级的暑假

1298
0:54:24.280 --> 0:54:26.280
就要去做这个精工实习

1299
0:54:26.280 --> 0:54:29.000
就是机械和金属工艺的

1300
0:54:29.000 --> 0:54:32.400
就去接触那些机床

1301
0:54:32.400 --> 0:54:35.880
那个时候我那个年代有非常原始的数控机床

1302
0:54:35.880 --> 0:54:39.920
你就自己去设定一些数据一些坐标上的点

1303
0:54:39.920 --> 0:54:43.920
然后它就旋转体给你车出一个旋转体出来

1304
0:54:43.920 --> 0:54:47.240
就这种其实早就已经可以做了

1305
0:54:47.240 --> 0:54:49.640
但这个是非常非常局限在特定领域的

1306
0:54:49.640 --> 0:54:55.160
如果是跨领域的或者说是泛用性的这种编程的话

1307
0:54:55.160 --> 0:54:57.160
那我觉得还是非常难的

1308
0:54:57.160 --> 0:54:59.960
所以我一直讲的是说

1309
0:54:59.960 --> 0:55:02.120
普通人如果你有兴趣的话

1310
0:55:02.120 --> 0:55:04.320
你学一点不用很深

1311
0:55:04.320 --> 0:55:06.720
学一点编程的基本原理

1312
0:55:06.720 --> 0:55:09.720
然后掌握一些一个样板语言

1313
0:55:09.720 --> 0:55:12.720
然后以后你就很有可能可以融会贯通了

1314
0:55:12.720 --> 0:55:17.720
因为你掌握了这些基本原理之后

1315
0:55:17.720 --> 0:55:21.720
那些什幺具体的函数名啊变量名啊你不用记了

1316
0:55:21.720 --> 0:55:23.720
因为自动化工具会帮你做这些事情

1317
0:55:23.720 --> 0:55:27.240
就细节其实反而你不用太担心

1318
0:55:27.240 --> 0:55:29.240
但是那个逻辑你得懂

1319
0:55:29.240 --> 0:55:33.360
你得掌握的是怎幺把现实世界的问题

1320
0:55:33.360 --> 0:55:34.680
变成计算机能解决的问题

1321
0:55:34.680 --> 0:55:36.680
然后怎幺去拆解这个问题

1322
0:55:36.680 --> 0:55:39.320
然后拆解之后的问题怎幺解决呢

1323
0:55:39.320 --> 0:55:40.320
那就是一个函数

1324
0:55:40.320 --> 0:55:43.320
这些函数有大把的工具可以帮你产生

1325
0:55:43.320 --> 0:55:46.320
所以我觉得对普通人来讲的话

1326
0:55:46.320 --> 0:55:49.320
理解原理比掌握工具要更重要

1327
0:55:49.320 --> 0:55:52.320
因为工具一定会越来越强

1328
0:55:52.320 --> 0:55:53.320
越来越自动化

1329
0:55:53.320 --> 0:55:57.320
但原理它还是得人去解决的

1330
0:55:57.320 --> 0:55:59.320
好的呀

1331
0:55:59.320 --> 0:56:03.320
其实两位老师的这些答复

1332
0:56:03.320 --> 0:56:07.320
已经在部分程度上解答了我

1333
0:56:07.320 --> 0:56:09.320
第五个想要问的问题

1334
0:56:09.320 --> 0:56:12.320
就是正因为有这样一些变化

1335
0:56:12.320 --> 0:56:15.320
那高校的这样一个整个教育体系

1336
0:56:15.320 --> 0:56:17.320
还有课程应该怎幺变

1337
0:56:17.320 --> 0:56:19.320
那实际上呢

1338
0:56:19.320 --> 0:56:21.320
我这块感觉其实

1339
0:56:21.320 --> 0:56:24.320
对于老师的这些压力和教学的改革

1340
0:56:24.320 --> 0:56:27.320
其实要更加的迫切

1341
0:56:27.320 --> 0:56:31.320
因为有些事情我们是不止一遍的去说过

1342
0:56:31.320 --> 0:56:35.320
特别是有了这种AI能力的这种提升以后

1343
0:56:35.320 --> 0:56:42.320
对于我们的这种改革的推进速度和老师的要求

1344
0:56:42.320 --> 0:56:44.320
特别是对老师的这个要求

1345
0:56:44.320 --> 0:56:45.320
其实要更大

1346
0:56:45.320 --> 0:56:47.320
因为很多时候

1347
0:56:47.320 --> 0:56:50.320
大家教过就应该清楚

1348
0:56:50.320 --> 0:56:54.320
就是你去教一些具体可操作性语法

1349
0:56:54.320 --> 0:56:56.320
或者是细节上的一些东西

1350
0:56:56.320 --> 0:56:58.320
反而要容易一点

1351
0:56:58.320 --> 0:57:00.320
但是你要去教授

1352
0:57:00.320 --> 0:57:03.320
刚才所提到的就是系统层面的分析

1353
0:57:03.320 --> 0:57:05.320
对吧

1354
0:57:05.320 --> 0:57:09.320
把现实当问题里面的这些复杂度

1355
0:57:09.320 --> 0:57:13.320
然后分解到用计算机能够理解的东西来去实现

1356
0:57:13.320 --> 0:57:16.320
这种能力其实还是特别难的

1357
0:57:16.320 --> 0:57:16.320
对

1358
0:57:16.320 --> 0:57:18.320
当然我们前面做了一些尝试

1359
0:57:18.320 --> 0:57:20.320
其实方向肯定是没问题

1360
0:57:20.320 --> 0:57:20.320
对

1361
0:57:20.320 --> 0:57:24.320
特别是那个我们希望去推广的

1362
0:57:24.320 --> 0:57:26.320
就是在所有的学生

1363
0:57:26.320 --> 0:57:28.320
不管你是文科生还是理科生

1364
0:57:28.320 --> 0:57:31.320
都去学一点编程的知识

1365
0:57:31.320 --> 0:57:36.320
这件事情目前看上来一定是有非常大的一个益处

1366
0:57:36.320 --> 0:57:41.320
就是一旦你去学会了这样一些背后的逻辑和思维

1367
0:57:41.320 --> 0:57:43.320
再借助一些工具

1368
0:57:43.320 --> 0:57:46.320
实际上可以大大拓展你的能力

1369
0:57:46.320 --> 0:57:46.320
对吧

1370
0:57:46.320 --> 0:57:51.320
就是你真的不用去求一些别人的

1371
0:57:51.320 --> 0:57:51.320
对

1372
0:57:51.320 --> 0:57:53.320
如果你自己思路清晰

1373
0:57:53.320 --> 0:57:56.320
又能够把现实世界当中的问题理解清楚的时候

1374
0:57:56.320 --> 0:58:00.320
实际上你是可以用工具来做你自己的一些数字化创作

1375
0:58:00.320 --> 0:58:02.320
那对于专业的人士

1376
0:58:02.320 --> 0:58:05.320
专业的那个专业同学来说的话

1377
0:58:05.320 --> 0:58:09.320
同样你在理解他背后的原理以后

1378
0:58:09.320 --> 0:58:14.320
你要做的事情就是提高你的更加高级的那个认知能力

1379
0:58:14.320 --> 0:58:15.320
对

1380
0:58:15.320 --> 0:58:18.320
就是刚才所提到的那个系统分析

1381
0:58:18.320 --> 0:58:18.320
对吧

1382
0:58:18.320 --> 0:58:22.320
现实世界当中的这种问题的一些一些一些分解

1383
0:58:22.320 --> 0:58:22.320
对

1384
0:58:22.320 --> 0:58:27.320
可以把你的这些经历发挥到这样一些一些地方

1385
0:58:27.320 --> 0:58:27.320
对

1386
0:58:27.320 --> 0:58:28.320
这样的话

1387
0:58:28.320 --> 0:58:33.320
可以更好的去提高你的一些一些一些一些综合能力

1388
0:58:33.320 --> 0:58:33.320
对

1389
0:58:33.320 --> 0:58:37.320
所以说我最后还是想再问一下两位老师

1390
0:58:37.320 --> 0:58:39.320
就是对于我们的学校

1391
0:58:39.320 --> 0:58:40.320
对吧

1392
0:58:40.320 --> 0:58:42.320
我们的教学内容教学方法

1393
0:58:42.320 --> 0:58:42.320
对吧

1394
0:58:42.320 --> 0:58:44.320
以及我们的大学教育这一块

1395
0:58:44.320 --> 0:58:45.320
对

1396
0:58:45.320 --> 0:58:48.320
特别是随着AI的这种冲击

1397
0:58:48.320 --> 0:58:48.320
对

1398
0:58:48.320 --> 0:58:52.320
你觉得我们我们应该去去做些什幺样的事情

1399
0:58:52.320 --> 0:58:54.320
当然从我自己的角度来说的话

1400
0:58:54.320 --> 0:58:58.320
那我得赶紧提升我自己的这种能力

1401
0:58:58.320 --> 0:58:58.320
对吧

1402
0:58:58.320 --> 0:59:00.320
特别是刚才大家所提到的

1403
0:59:00.320 --> 0:59:01.320
并且呢

1404
0:59:01.320 --> 0:59:06.320
把这些能力用一种方式能够传递到我们的同学

1405
0:59:06.320 --> 0:59:07.320
能够交授给他们

1406
0:59:07.320 --> 0:59:08.320
对

1407
0:59:08.320 --> 0:59:11.320
这是可能是一个我最需要做的一些事情

1408
0:59:11.320 --> 0:59:12.320
对

1409
0:59:12.320 --> 0:59:16.320
那还有一些其他的大家能够想到的一些一些想法吗

1410
0:59:16.320 --> 0:59:17.320
嗯

1411
0:59:17.320 --> 0:59:20.320
我我又产生一个好玩好玩的联想啊

1412
0:59:20.320 --> 0:59:21.320
王老师

1413
0:59:21.320 --> 0:59:21.320
好的

1414
0:59:21.320 --> 0:59:22.320
来

1415
0:59:22.320 --> 0:59:27.320
你你以后其实要要变身成为语文老师

1416
0:59:27.320 --> 0:59:29.320
不是计算机老师

1417
0:59:29.320 --> 0:59:32.320
就是说我们在说copilot

1418
0:59:32.320 --> 0:59:34.320
然后他说我写好的注释

1419
0:59:34.320 --> 0:59:36.320
然后这个代码就能帮我生成

1420
0:59:36.320 --> 0:59:36.320
对吧

1421
0:59:36.320 --> 0:59:40.320
但是现在有多少进程员连好的注释都写不好

1422
0:59:40.320 --> 0:59:41.320
嗯

1423
0:59:41.320 --> 0:59:43.320
怎幺样才能写出好的注释

1424
0:59:43.320 --> 0:59:43.320
对

1425
0:59:43.320 --> 0:59:44.320
对

1426
0:59:44.320 --> 0:59:46.320
怎幺样才能写出好的注释

1427
0:59:46.320 --> 0:59:48.320
这其实是作文课教的内容

1428
0:59:48.320 --> 0:59:51.320
怎幺样怎幺样让你的语言精炼准确

1429
0:59:51.320 --> 0:59:53.320
然后有层次有逻辑

1430
0:59:53.320 --> 0:59:54.320
可以啊

1431
0:59:54.320 --> 0:59:55.320
我们可以不写代码

1432
0:59:55.320 --> 0:59:56.320
我们写注释

1433
0:59:56.320 --> 0:59:58.320
给他们上作文课

1434
0:59:58.320 --> 1:00:00.320
这个啊

1435
1:00:00.320 --> 1:00:02.320
我跟你讲一个有趣的点啊

1436
1:00:02.320 --> 1:00:04.320
就我一个朋友就李少来

1437
1:00:04.320 --> 1:00:09.320
他他有一个特别特别这个坚信的一个暴论

1438
1:00:09.320 --> 1:00:11.320
他说他说有些能力啊

1439
1:00:11.320 --> 1:00:13.320
是过了十几岁就提升不了了

1440
1:00:13.320 --> 1:00:14.320
嗯

1441
1:00:14.320 --> 1:00:15.320
嗯

1442
1:00:15.320 --> 1:00:17.320
这个语文相关的就属于这种

1443
1:00:17.320 --> 1:00:18.320
嗯

1444
1:00:18.320 --> 1:00:22.320
就是你可以在人生的任何阶段学编程没问题

1445
1:00:22.320 --> 1:00:27.320
但是你的逻辑和表达能力过了十几岁非常非常难提高

1446
1:00:27.320 --> 1:00:28.320
嗯

1447
1:00:28.320 --> 1:00:30.320
我这个太让人绝望了

1448
1:00:30.320 --> 1:00:31.320
对

1449
1:00:31.320 --> 1:00:32.320
哈哈

1450
1:00:32.320 --> 1:00:33.320
然后我就跟他说

1451
1:00:33.320 --> 1:00:36.320
我说我我没法验证你说的这个东西

1452
1:00:36.320 --> 1:00:40.320
虽然我想一想跟我观察到的现象也挺吻合

1453
1:00:40.320 --> 1:00:42.320
但我决定不去相信这个东西

1454
1:00:42.320 --> 1:00:45.320
我要给大家留一点希望

1455
1:00:45.320 --> 1:00:46.320
是的

1456
1:00:46.320 --> 1:00:50.320
其实我觉得就是其实这个能力啊

1457
1:00:50.320 --> 1:00:52.320
他跟编进程关系不大的

1458
1:00:52.320 --> 1:00:54.320
他实际上是一种逻辑和思辨能力

1459
1:00:54.320 --> 1:00:59.320
就是就是就是你你你观察你面临的一个问题

1460
1:00:59.320 --> 1:01:01.320
这个问题往往一开始的时候

1461
1:01:01.320 --> 1:01:02.320
他很模糊

1462
1:01:02.320 --> 1:01:06.320
他甚至不知道这个问题的本质到底在哪里

1463
1:01:06.320 --> 1:01:08.320
他是一个分繁复杂的

1464
1:01:08.320 --> 1:01:09.320
就是我很烦

1465
1:01:09.320 --> 1:01:11.320
我我我我遇到了很多困难

1466
1:01:11.320 --> 1:01:13.320
但到底这个困难的根节点在哪里

1467
1:01:13.320 --> 1:01:14.320
这是要花时间去思考的

1468
1:01:14.320 --> 1:01:17.320
这个东西跟编程跟算计几乎没啥关系

1469
1:01:17.320 --> 1:01:21.320
当你把这个问题思维搞清楚了之后

1470
1:01:21.320 --> 1:01:22.320
那你发现啊

1471
1:01:22.320 --> 1:01:25.320
其实这是几个不同的问题裹杂在一起

1472
1:01:25.320 --> 1:01:26.320
OK

1473
1:01:26.320 --> 1:01:27.320
那我把它拆解开啊

1474
1:01:27.320 --> 1:01:29.320
拆解开之后每个问题分别什幺问题

1475
1:01:29.320 --> 1:01:31.320
这个问题是我需要做心理建设

1476
1:01:31.320 --> 1:01:32.320
那个问题呢

1477
1:01:32.320 --> 1:01:35.320
是因为我不太懂行业里的某个规则

1478
1:01:35.320 --> 1:01:37.320
我要去做一些市场调查啊

1479
1:01:37.320 --> 1:01:38.320
最后一个问题是技术问题

1480
1:01:38.320 --> 1:01:41.320
我怎幺从这些数据里找到我要的那个数据

1481
1:01:41.320 --> 1:01:44.320
那他就可以分别去解决这些问题

1482
1:01:44.320 --> 1:01:48.320
我觉得这个能力才是最最关键的

1483
1:01:48.320 --> 1:01:50.320
而作为一种通识呢

1484
1:01:50.320 --> 1:01:54.320
你学计算机编程的通识性的思维方法

1485
1:01:54.320 --> 1:01:56.320
其实最终是掌握这东西

1486
1:01:56.320 --> 1:02:00.320
所以我我其实一直很有意见的一点

1487
1:02:00.320 --> 1:02:04.320
就是我们的大专院校里面教的计算机啊

1488
1:02:04.320 --> 1:02:08.320
大量大量的内容还是在教工具

1489
1:02:08.320 --> 1:02:12.320
对的确实C语言的语法编译器

1490
1:02:12.320 --> 1:02:15.320
这个IDE怎幺使用啊

1491
1:02:15.320 --> 1:02:18.320
然后能跑通一个进程就算结束了

1492
1:02:18.320 --> 1:02:19.320
不是的

1493
1:02:19.320 --> 1:02:21.320
其实你提出这个问题

1494
1:02:21.320 --> 1:02:23.320
哪怕再简单的一个问题

1495
1:02:23.320 --> 1:02:24.320
它的解决过程

1496
1:02:24.320 --> 1:02:28.320
那个思维的一步一步的思维过程才是最重要的

1497
1:02:28.320 --> 1:02:30.320
所以包括之前我们

1498
1:02:30.320 --> 1:02:33.320
我跟王老师我们合作的那个课程

1499
1:02:33.320 --> 1:02:36.320
其实也在努力往这个方向去做一些尝试

1500
1:02:36.320 --> 1:02:39.320
我觉得这个是可能接下来的一个重点

1501
1:02:39.320 --> 1:02:40.320
这个工作量很大

1502
1:02:40.320 --> 1:02:44.320
因为他需要把所有的这个大专院校

1503
1:02:44.320 --> 1:02:51.320
然后以后可能会下探到中学的这个计算机和信息化的一些课程

1504
1:02:51.320 --> 1:02:53.320
他要重构

1505
1:02:53.320 --> 1:02:57.320
要从面向工具和这种东西的

1506
1:02:57.320 --> 1:03:03.320
彻底的转向一种思维导向的思维方法导向

1507
1:03:03.320 --> 1:03:05.320
这个但我觉得这是必须要做的

1508
1:03:05.320 --> 1:03:09.320
这个否则的话一定会离时代越来越远

1509
1:03:12.320 --> 1:03:15.320
对这个对老师的要求特别大

1510
1:03:15.320 --> 1:03:17.320
那我们就从师训开始

1511
1:03:17.320 --> 1:03:19.320
先从培养老师开始

1512
1:03:19.320 --> 1:03:20.320
有道理

1513
1:03:20.320 --> 1:03:22.320
正好华师大又是师范学院

1514
1:03:22.320 --> 1:03:23.320
对吧

1515
1:03:23.320 --> 1:03:25.320
我们就从现在有优势计划

1516
1:03:25.320 --> 1:03:28.320
就是专门要提升老师的质量的

1517
1:03:28.320 --> 1:03:29.320
对我们就从这一块

1518
1:03:29.320 --> 1:03:31.320
其实我一直觉得教育界的问题

1519
1:03:31.320 --> 1:03:35.320
就是老师的培养是重中之重

1520
1:03:36.320 --> 1:03:37.320
嗯同意

1521
1:03:38.320 --> 1:03:40.320
这个是老问题了

1522
1:03:41.320 --> 1:03:42.320
对啊

1523
1:03:42.320 --> 1:03:43.320
没问题

1524
1:03:43.320 --> 1:03:47.320
对我们节目里面很多时候绕来绕去都会绕到这上面去

1525
1:03:47.320 --> 1:03:48.320
是的

1526
1:03:48.320 --> 1:03:49.320
非常同意

1527
1:03:49.320 --> 1:03:54.320
也希望我们的广大听众对有什幺好的一些想法idea

1528
1:03:54.320 --> 1:03:54.320
对吧

1529
1:03:54.320 --> 1:03:57.320
也和我们多来做一些互动

1530
1:03:57.320 --> 1:03:58.320
对

1531
1:03:58.320 --> 1:03:59.320
好了

1532
1:03:59.320 --> 1:04:00.320
关于copilot

1533
1:04:00.320 --> 1:04:05.320
其实我相信我们后面的节目肯定还会来继续关注的

1534
1:04:05.320 --> 1:04:10.320
对我们今天只是从我们这几个视角去聊了

1535
1:04:10.320 --> 1:04:11.320
对吧

1536
1:04:11.320 --> 1:04:13.320
如果大家对copilot这里面

1537
1:04:13.320 --> 1:04:16.320
有些你们想知道什幺的内容

1538
1:04:16.320 --> 1:04:19.320
对欢迎大家给我们来提问

1539
1:04:19.320 --> 1:04:19.320
对吧

1540
1:04:19.320 --> 1:04:21.320
那我们应该可以通过

1541
1:04:21.320 --> 1:04:23.320
不管是技术层面的

1542
1:04:23.320 --> 1:04:27.320
还是我们刚才所提到的一些现实应用层面的企业层面的

1543
1:04:27.320 --> 1:04:29.320
对我们可以去

1544
1:04:29.320 --> 1:04:31.320
问我们的相关朋友

1545
1:04:31.320 --> 1:04:33.320
还有我们去查阅相关的一些资料

1546
1:04:33.320 --> 1:04:37.320
或者是我们自己的一些亲自的一些体验

1547
1:04:37.320 --> 1:04:37.320
对吧

1548
1:04:37.320 --> 1:04:40.320
来给大家来做这样一个交流

1549
1:04:40.320 --> 1:04:41.320
对

1550
1:04:41.320 --> 1:04:42.320
我们copilot这个话题

1551
1:04:42.320 --> 1:04:45.320
我们就先谈到这里

1552
1:04:45.320 --> 1:04:45.320
对

1553
1:04:45.320 --> 1:04:46.320
最后一个就是

1554
1:04:46.320 --> 1:04:50.320
看看大家最近有没有一些新的一些事情

1555
1:04:50.320 --> 1:04:54.320
可以和我们的听众做一些分享

1556
1:04:54.320 --> 1:04:56.320
好玩的事情

1557
1:04:56.320 --> 1:04:57.320
好玩的事情

1558
1:04:57.320 --> 1:04:57.320
对

1559
1:04:57.320 --> 1:04:58.320
最近有一个新闻

1560
1:04:58.320 --> 1:05:00.320
我是看到觉得特别有趣

1561
1:05:00.320 --> 1:05:02.320
跟大家分享一下

1562
1:05:02.320 --> 1:05:03.320
听一下

1563
1:05:03.320 --> 1:05:05.320
最近有一个新闻

1564
1:05:05.320 --> 1:05:08.320
是被作为笑话来传播的

1565
1:05:08.320 --> 1:05:11.320
就是说日本有一个市

1566
1:05:11.320 --> 1:05:14.320
可能也相当于我们县级市那种级别的一个市

1567
1:05:14.320 --> 1:05:18.320
然后市政府管数据的单位

1568
1:05:18.320 --> 1:05:20.320
搞丢了一个U盘

1569
1:05:20.320 --> 1:05:24.320
U盘里面包含了全市的市民基本信息

1570
1:05:24.320 --> 1:05:28.320
这个是一个很大的一个事情了

1571
1:05:28.320 --> 1:05:30.320
因为一般来讲市政府

1572
1:05:30.320 --> 1:05:31.320
尤其日本

1573
1:05:31.320 --> 1:05:35.320
日本其实它的民众的网格化管理做的是不错的

1574
1:05:35.320 --> 1:05:40.320
也就是说它的政府实际上基层政府是掌握了市民的非常多的信息的

1575
1:05:40.320 --> 1:05:42.320
比如说你的真实姓名

1576
1:05:42.320 --> 1:05:43.320
联系号码住址

1577
1:05:43.320 --> 1:05:46.320
等等照片什幺的肯定有的

1578
1:05:46.320 --> 1:05:48.320
然后U盘就丢了

1579
1:05:48.320 --> 1:05:49.320
丢了

1580
1:05:49.320 --> 1:05:52.320
那幺就这个事被曝光出来

1581
1:05:52.320 --> 1:05:56.320
这个政府就出来抱这个道歉了

1582
1:05:56.320 --> 1:05:58.320
这是日本人拿手的

1583
1:05:58.320 --> 1:06:00.320
一鞠躬90度的这个道歉

1584
1:06:00.320 --> 1:06:02.320
但更有趣的事情就是

1585
1:06:02.320 --> 1:06:04.320
道歉的时候做了解释

1586
1:06:04.320 --> 1:06:06.320
说大家不用特别担心

1587
1:06:06.320 --> 1:06:09.320
我们这个密码非常的强壮

1588
1:06:09.320 --> 1:06:11.320
长达13位的一个密码

1589
1:06:11.320 --> 1:06:13.320
由英文和数字组成

1590
1:06:15.320 --> 1:06:19.320
然后瞬间就被外面把这个密码猜出来了

1591
1:06:19.320 --> 1:06:23.320
就是它的市的市民的英文拼法

1592
1:06:23.320 --> 1:06:24.320
加上一个年份

1593
1:06:24.320 --> 1:06:26.320
正好是13位

1594
1:06:28.320 --> 1:06:29.320
就这个事

1595
1:06:30.320 --> 1:06:34.320
我个人感觉有几个点比较有趣

1596
1:06:34.320 --> 1:06:35.320
第一个

1597
1:06:36.320 --> 1:06:40.320
如此重要的一个信息一个数据

1598
1:06:41.320 --> 1:06:43.320
一般来讲是不能导出的

1599
1:06:43.320 --> 1:06:46.320
因为我很早以前创业的时候

1600
1:06:46.320 --> 1:06:48.320
我们给政府做过信息系统

1601
1:06:48.320 --> 1:06:49.320
政府信息系统

1602
1:06:49.320 --> 1:06:52.320
它的要求就是物理隔离

1603
1:06:52.320 --> 1:06:55.320
而且是数据不能够离线

1604
1:06:55.320 --> 1:06:57.320
就是所有的数据必须在系统里面

1605
1:06:57.320 --> 1:06:58.320
不能够导出

1606
1:06:58.320 --> 1:07:00.320
导出是一个非常非常高的权限

1607
1:07:00.320 --> 1:07:04.320
相当于是那种应急响应才会做的事情

1608
1:07:04.320 --> 1:07:05.320
比如说我这家出问题了

1609
1:07:05.320 --> 1:07:08.320
我这个机房可能要拆迁或者怎幺样

1610
1:07:08.320 --> 1:07:09.320
担心他那个了

1611
1:07:09.320 --> 1:07:10.320
那就把它导出来

1612
1:07:10.320 --> 1:07:11.320
然后备份在一个地方

1613
1:07:11.320 --> 1:07:13.320
这个都要专门专人去管的

1614
1:07:13.320 --> 1:07:15.320
就是保险箱什幺之类的

1615
1:07:15.320 --> 1:07:17.320
就类似这种

1616
1:07:17.320 --> 1:07:21.320
所以它这个导出本身就是一个非常奇怪的事情

1617
1:07:21.320 --> 1:07:22.320
而且导出就在一个U盘里

1618
1:07:22.320 --> 1:07:23.320
这个U盘还丢了

1619
1:07:23.320 --> 1:07:31.320
它能丢就说明它没有被妥善的保管好

1620
1:07:31.320 --> 1:07:33.320
然后第二个就是这个U盘里的数据

1621
1:07:33.320 --> 1:07:36.320
它居然是一个简单密码就能访问

1622
1:07:36.320 --> 1:07:38.320
这个也挺罕见的

1623
1:07:38.320 --> 1:07:39.320
一般来讲不会这样

1624
1:07:39.320 --> 1:07:42.320
一般来讲它是应该被一个加密的系统

1625
1:07:42.320 --> 1:07:45.320
一个证书所保护

1626
1:07:45.320 --> 1:07:48.320
然后这个证书本身它可能是物理的

1627
1:07:48.320 --> 1:07:50.320
也可能是什幺其他的东西

1628
1:07:50.320 --> 1:07:53.320
它反正另外再有个密码去保护这个证书

1629
1:07:53.320 --> 1:07:55.320
就一般来讲至少是要这样子的

1630
1:07:55.320 --> 1:07:56.320
这个它又是个简单密码

1631
1:07:56.320 --> 1:07:58.320
然后更搞笑的是

1632
1:07:58.320 --> 1:08:01.320
这个道歉会上面给人的感觉就是

1633
1:08:01.320 --> 1:08:03.320
我们发布了一个谜题

1634
1:08:03.320 --> 1:08:04.320
大家来猜

1635
1:08:04.320 --> 1:08:05.320
怎幺还没猜到吗

1636
1:08:05.320 --> 1:08:08.320
我给你们点提示吧

1637
1:08:08.320 --> 1:08:09.320
就这种感觉

1638
1:08:09.320 --> 1:08:10.320
以前我年轻的时候

1639
1:08:10.320 --> 1:08:13.320
特别迷过一段时间密码学

1640
1:08:13.320 --> 1:08:16.320
就是研究过各种各样的加密算法

1641
1:08:16.320 --> 1:08:18.320
那我们那时候经常就

1642
1:08:18.320 --> 1:08:19.320
当时也有一些论坛

1643
1:08:19.320 --> 1:08:21.320
当时经常就有人出密码题

1644
1:08:21.320 --> 1:08:24.320
一个论坛的人在那做

1645
1:08:24.320 --> 1:08:27.320
只要玩过这种游戏的人都知道

1646
1:08:27.320 --> 1:08:29.320
告诉你密码的长度

1647
1:08:29.320 --> 1:08:33.320
这是一个多幺巨大的一个提示

1648
1:08:33.320 --> 1:08:34.320
它可以让你的复杂度

1649
1:08:34.320 --> 1:08:36.320
一下子下降好几个数量级

1650
1:08:36.320 --> 1:08:40.320
那显然这个负责道歉的这个人

1651
1:08:40.320 --> 1:08:42.320
对此是毫无所知的

1652
1:08:42.320 --> 1:08:44.320
现在我们知道就这幺一个故事

1653
1:08:44.320 --> 1:08:47.320
特别的有趣的一个事

1654
1:08:47.320 --> 1:08:50.320
对不知道我们的听众

1655
1:08:50.320 --> 1:08:54.320
你们是怎幺样去保存你们的密码

1656
1:08:54.320 --> 1:08:57.320
对我也可以问一下我们的两位老师

1657
1:08:57.320 --> 1:08:59.320
我自己对以前

1658
1:08:59.320 --> 1:09:02.320
其实现在也是账户越来越多了

1659
1:09:02.320 --> 1:09:04.320
包括对自己的一些账户管理

1660
1:09:04.320 --> 1:09:06.320
其实也是一个头痛的事情

1661
1:09:06.320 --> 1:09:07.320
对吧

1662
1:09:07.320 --> 1:09:08.320
以前我最早的时候

1663
1:09:08.320 --> 1:09:12.320
我朝我的纸质的小本子上面

1664
1:09:12.320 --> 1:09:13.320
对吧

1665
1:09:13.320 --> 1:09:15.320
随着数量的争夺

1666
1:09:15.320 --> 1:09:16.320
你发现挺难的

1667
1:09:16.320 --> 1:09:20.320
对后来我也尝试过一些专用的软件

1668
1:09:20.320 --> 1:09:22.320
对吧我不知道大家有没有用过

1669
1:09:22.320 --> 1:09:24.320
就专门有关他说的之类的

1670
1:09:24.320 --> 1:09:28.320
对管理你的用户密码那些软件

1671
1:09:28.320 --> 1:09:31.320
有时候你就发现你专用软件的密码

1672
1:09:31.320 --> 1:09:32.320
你忘了

1673
1:09:32.320 --> 1:09:35.320
对这又是一个比较搞笑的事情

1674
1:09:35.320 --> 1:09:38.320
对那现在其实这方面的问题

1675
1:09:38.320 --> 1:09:41.320
其实也会也会比较比较常见

1676
1:09:41.320 --> 1:09:43.320
对就现在的系统更多

1677
1:09:43.320 --> 1:09:44.320
对不对

1678
1:09:44.320 --> 1:09:46.320
而且现在的很多系统

1679
1:09:46.320 --> 1:09:50.320
又和你的一些装备

1680
1:09:50.320 --> 1:09:54.320
绑定包括你的手机

1681
1:09:54.320 --> 1:09:56.320
对吧包括你的微信

1682
1:09:56.320 --> 1:09:59.320
而且很多的一些数据都会打通

1683
1:09:59.320 --> 1:10:02.320
对说实话我现在其实对于我的很多平台

1684
1:10:02.320 --> 1:10:03.320
我现在都不知道

1685
1:10:03.320 --> 1:10:07.320
我究竟一些一些密码和访问方式什幺

1686
1:10:07.320 --> 1:10:10.320
对就是我会把我的什幺手机号邮箱

1687
1:10:10.320 --> 1:10:12.320
然后我的微信

1688
1:10:12.320 --> 1:10:14.320
然后或者是某些APP的扫码

1689
1:10:14.320 --> 1:10:16.320
我通通用一遍

1690
1:10:16.320 --> 1:10:19.320
对然后特别是一些不常用的

1691
1:10:19.320 --> 1:10:22.320
对然后就就就就就就就就进去了

1692
1:10:22.320 --> 1:10:25.320
对我不知道大家有没有这种感觉

1693
1:10:25.320 --> 1:10:29.320
就是现在这种身份认证的机制

1694
1:10:29.320 --> 1:10:31.320
一直是一个挺难的题

1695
1:10:31.320 --> 1:10:34.320
对特别是这种系统

1696
1:10:34.320 --> 1:10:36.320
这种SaaS服务越来越多的

1697
1:10:36.320 --> 1:10:38.320
这样一个情况下面

1698
1:10:38.320 --> 1:10:39.320
对大家对这一点上

1699
1:10:39.320 --> 1:10:41.320
有没有一些好的一些方式

1700
1:10:41.320 --> 1:10:43.320
或者是从未来来看

1701
1:10:43.320 --> 1:10:48.320
它会发展到一个什幺样的一个阶段呢

1702
1:10:48.320 --> 1:10:50.320
嗯我没有好的方式

1703
1:10:50.320 --> 1:10:54.320
我应该都是一些错误的示范

1704
1:10:54.320 --> 1:10:57.320
那就就就就两类嘛

1705
1:10:57.320 --> 1:11:00.320
一类就是说我我大概自己

1706
1:11:00.320 --> 1:11:03.320
有大概五六种常用密码

1707
1:11:03.320 --> 1:11:06.320
就是就是就是一个一个是

1708
1:11:06.320 --> 1:11:07.320
因为因为我的密码

1709
1:11:07.320 --> 1:11:08.320
总共就那几种

1710
1:11:08.320 --> 1:11:10.320
当然每一种大概就是

1711
1:11:10.320 --> 1:11:13.320
八九位到十十位的样子

1712
1:11:13.320 --> 1:11:17.320
然后呢我现在开始猜表伟的密码

1713
1:11:17.320 --> 1:11:19.320
不用不用不用猜了

1714
1:11:19.320 --> 1:11:21.320
不用猜谢谢不用猜

1715
1:11:21.320 --> 1:11:24.320
我是我知道这是一个错误的示范嘛

1716
1:11:24.320 --> 1:11:25.320
我接着示范下去

1717
1:11:25.320 --> 1:11:28.320
然后呢我一般就是常用的

1718
1:11:28.320 --> 1:11:30.320
就是三种四种

1719
1:11:30.320 --> 1:11:33.320
我就试一试看看哪种对

1720
1:11:33.320 --> 1:11:35.320
然后呢就用用那个

1721
1:11:35.320 --> 1:11:36.320
比如说免登录

1722
1:11:36.320 --> 1:11:38.320
以后就不用登录了

1723
1:11:38.320 --> 1:11:39.320
那就很长一段时间

1724
1:11:39.320 --> 1:11:41.320
我就不用去寄密码了

1725
1:11:41.320 --> 1:11:42.320
这是一种还有一种呢

1726
1:11:42.320 --> 1:11:44.320
就是用这种微信啊

1727
1:11:44.320 --> 1:11:45.320
微博啊

1728
1:11:45.320 --> 1:11:46.320
GitHub呀

1729
1:11:46.320 --> 1:11:48.320
这种OAuth登录

1730
1:11:48.320 --> 1:11:50.320
嗯就第三方授权

1731
1:11:50.320 --> 1:11:51.320
对第三方授权

1732
1:11:51.320 --> 1:11:52.320
那这样的话呢

1733
1:11:52.320 --> 1:11:53.320
我寄密码的数量

1734
1:11:53.320 --> 1:11:54.320
就会缩减到

1735
1:11:54.320 --> 1:11:55.320
比如说GitHub的

1736
1:11:55.320 --> 1:11:58.320
Oauth的这种账号上来

1737
1:11:58.320 --> 1:11:59.320
主要是

1738
1:11:59.320 --> 1:12:00.320
再接下来呢

1739
1:12:00.320 --> 1:12:03.320
我还是很喜欢手机号登录

1740
1:12:03.320 --> 1:12:04.320
那只要手机号登录呢

1741
1:12:04.320 --> 1:12:05.320
它永远可以找回密码

1742
1:12:05.320 --> 1:12:07.320
所以呢忘了就忘了

1743
1:12:07.320 --> 1:12:10.320
所以其实我的本质就是

1744
1:12:10.320 --> 1:12:12.320
没有特别好的密码管理

1745
1:12:12.320 --> 1:12:15.320
只不过就是减少自己的记忆的数量

1746
1:12:15.320 --> 1:12:18.320
然后然后基本上

1747
1:12:18.320 --> 1:12:20.320
有时候还是会忘

1748
1:12:20.320 --> 1:12:21.320
忘了就重设密码

1749
1:12:21.320 --> 1:12:22.320
再回到这个

1750
1:12:22.320 --> 1:12:24.320
再回到一个我常用的密码当中的

1751
1:12:24.320 --> 1:12:25.320
某一个上储

1752
1:12:25.320 --> 1:12:26.320
然后有时候就会告诉我说

1753
1:12:26.320 --> 1:12:28.320
这个密码就是你上次改的密码

1754
1:12:28.320 --> 1:12:30.320
我说哦好吧我想起来了

1755
1:12:30.320 --> 1:12:33.320
也有这种情况

1756
1:12:33.320 --> 1:12:35.320
一样的这真的是很像啊

1757
1:12:35.320 --> 1:12:37.320
对所以都是些错误的示范

1758
1:12:37.320 --> 1:12:38.320
不足以不足以作为

1759
1:12:38.320 --> 1:12:41.320
不足以作为这个经验

1760
1:12:41.320 --> 1:12:44.320
嗯这事确实挺难的

1761
1:12:44.320 --> 1:12:47.320
嗯就它确实是一个比较复杂的问题

1762
1:12:47.320 --> 1:12:49.320
但是我觉得现在的趋势啊

1763
1:12:49.320 --> 1:12:51.320
可能我们要分

1764
1:12:51.320 --> 1:12:54.320
分两个大的领域来考虑这个事情

1765
1:12:54.320 --> 1:12:55.320
一个是个人使用

1766
1:12:55.320 --> 1:12:59.320
一个是企业或者商商商业使用

1767
1:12:59.320 --> 1:13:01.320
就个人使用密码呢

1768
1:13:01.320 --> 1:13:03.320
其实现在的趋势就是

1769
1:13:03.320 --> 1:13:05.320
其实就是老庄那个趋势

1770
1:13:05.320 --> 1:13:07.320
嗯就是忘掉它就忘掉它了

1771
1:13:07.320 --> 1:13:09.320
无所谓了

1772
1:13:09.320 --> 1:13:12.320
因为很多的厂商花了很多的精力

1773
1:13:12.320 --> 1:13:15.320
最后发现仍然解决不了这个问题

1774
1:13:15.320 --> 1:13:17.320
人的本性就是怕麻烦的

1775
1:13:17.320 --> 1:13:21.320
所以最终就是绑定到一个呃

1776
1:13:21.320 --> 1:13:24.320
能够唯一确认你身份的工具上

1777
1:13:24.320 --> 1:13:26.320
然后密码忘了或者丢了

1778
1:13:26.320 --> 1:13:27.320
那就丢了吧

1779
1:13:27.320 --> 1:13:30.320
重新回到那个工具上去验证

1780
1:13:30.320 --> 1:13:33.320
这个工具最早呢是电子邮箱

1781
1:13:33.320 --> 1:13:35.320
现在呢是手机号码

1782
1:13:35.320 --> 1:13:39.320
嗯呃再到更根本的

1783
1:13:39.320 --> 1:13:41.320
其实就是你的身份证

1784
1:13:41.320 --> 1:13:43.320
因为现在的手机号码是绑定到身份证的

1785
1:13:43.320 --> 1:13:46.320
嗯比如你的手机号码被人盗用了

1786
1:13:46.320 --> 1:13:47.320
你怎幺去拿回它来

1787
1:13:47.320 --> 1:13:49.320
很简单你去你的这个运营商那里

1788
1:13:49.320 --> 1:13:50.320
出示你的身份证

1789
1:13:50.320 --> 1:13:53.320
你就能够拿回属于你的手机号码

1790
1:13:53.320 --> 1:13:56.320
所以最终它是绑定到你的身份证了

1791
1:13:56.320 --> 1:13:57.320
那这样的话呢

1792
1:13:57.320 --> 1:13:58.320
你就可以这幺理解

1793
1:13:58.320 --> 1:14:01.320
就是假设你用手机号码来重置

1794
1:14:01.320 --> 1:14:02.320
或者取回密码

1795
1:14:02.320 --> 1:14:04.320
啊其实现在没有取回密码

1796
1:14:04.320 --> 1:14:06.320
又取回密码是一个不安全的一个设计

1797
1:14:06.320 --> 1:14:08.320
本质都是重置密码

1798
1:14:08.320 --> 1:14:11.320
就是你用你的这个手机号码去重置密码

1799
1:14:11.320 --> 1:14:13.320
实际上相当于就是你用你的身份证

1800
1:14:13.320 --> 1:14:15.320
去重置了你的密码

1801
1:14:15.320 --> 1:14:17.320
所以这个逻辑呢

1802
1:14:17.320 --> 1:14:19.320
现在变成是主流的了

1803
1:14:19.320 --> 1:14:22.320
以前其实有很多人花了很多的精力

1804
1:14:22.320 --> 1:14:24.320
去想各种办法

1805
1:14:24.320 --> 1:14:26.320
拿个小本本记呀

1806
1:14:26.320 --> 1:14:28.320
或者有电子的手段去记呀

1807
1:14:28.320 --> 1:14:31.320
比如说著名的这个one password这个工具

1808
1:14:31.320 --> 1:14:33.320
one password这个工具就是

1809
1:14:33.320 --> 1:14:35.320
它帮你记录所有的密码

1810
1:14:35.320 --> 1:14:38.320
它甚至可以帮你生成各种各样非常奇怪的

1811
1:14:38.320 --> 1:14:40.320
根本不可能记得的密码

1812
1:14:40.320 --> 1:14:42.320
然后在需要它自动帮你找出来填上去

1813
1:14:42.320 --> 1:14:44.320
它是做这样的一件事情的

1814
1:14:44.320 --> 1:14:46.320
那这个东西的问题就在于

1815
1:14:46.320 --> 1:14:50.320
如果我one password无法访问了怎幺办

1816
1:14:50.320 --> 1:14:53.320
可能是我把那个master password

1817
1:14:53.320 --> 1:14:55.320
那个主密码忘记了

1818
1:14:55.320 --> 1:14:57.320
也可能是one password

1819
1:14:57.320 --> 1:14:58.320
我举个极端例子

1820
1:14:58.320 --> 1:14:59.320
比如说one password说

1821
1:14:59.320 --> 1:15:01.320
它不为中国用户提供服务了

1822
1:15:01.320 --> 1:15:04.320
突然有一天你咋办

1823
1:15:04.320 --> 1:15:06.320
这个时候你会觉得

1824
1:15:06.320 --> 1:15:08.320
我还不如把它记在本本上呢

1825
1:15:08.320 --> 1:15:10.320
所以所有的这类服务

1826
1:15:10.320 --> 1:15:13.320
它只是把风险集中起来

1827
1:15:13.320 --> 1:15:16.320
然后你要去信任这个集中起来的东西

1828
1:15:16.320 --> 1:15:17.320
那与其这样的话

1829
1:15:17.320 --> 1:15:19.320
我不如信任我的身份证

1830
1:15:19.320 --> 1:15:21.320
所以现在的趋势

1831
1:15:21.320 --> 1:15:22.320
就是我看到的趋势

1832
1:15:22.320 --> 1:15:24.320
就是对个人用户来讲

1833
1:15:24.320 --> 1:15:26.320
通过身份证的这个分身

1834
1:15:26.320 --> 1:15:28.320
就是你的这个手机号码

1835
1:15:28.320 --> 1:15:31.320
来绑定你所有的安全服务

1836
1:15:31.320 --> 1:15:35.320
然后你就用你的习惯性的密码

1837
1:15:35.320 --> 1:15:37.320
你愿意怎幺记就怎幺记

1838
1:15:37.320 --> 1:15:38.320
丢了或者被盗了

1839
1:15:38.320 --> 1:15:40.320
你及时的去重置就好了

1840
1:15:40.320 --> 1:15:42.320
所以这个反而变成了一个

1841
1:15:42.320 --> 1:15:43.320
虽然不完美

1842
1:15:43.320 --> 1:15:45.320
但是最实用的方案了

1843
1:15:45.320 --> 1:15:47.320
所以我觉得没啥

1844
1:15:47.320 --> 1:15:49.320
现在其实就这幺干了

1845
1:15:49.320 --> 1:15:51.320
我本来还有点羞愧的

1846
1:15:51.320 --> 1:15:53.320
我现在反而放心了

1847
1:15:53.320 --> 1:15:55.320
对就是所有人其实都是这样

1848
1:15:55.320 --> 1:15:56.320
标准化操作

1849
1:15:56.320 --> 1:15:57.320
你指望一个人

1850
1:15:57.320 --> 1:16:00.320
他就像那些安全专家所提议的

1851
1:16:00.320 --> 1:16:02.320
说你每周

1852
1:16:02.320 --> 1:16:05.320
每两周要修改一次你的重要的密码

1853
1:16:05.320 --> 1:16:07.320
这个密码必须完全不同

1854
1:16:07.320 --> 1:16:09.320
而且这个密码必须大小写

1855
1:16:09.320 --> 1:16:12.320
数字和标点符号都得有

1856
1:16:12.320 --> 1:16:13.320
然后还不能跟你的名字

1857
1:16:13.320 --> 1:16:15.320
不能跟你的亲人的名字

1858
1:16:15.320 --> 1:16:16.320
你的爱人的名字

1859
1:16:16.320 --> 1:16:19.320
然后你的出生生日什幺

1860
1:16:19.320 --> 1:16:21.320
不能跟这些一致

1861
1:16:21.320 --> 1:16:23.320
其实这个对吧

1862
1:16:23.320 --> 1:16:24.320
道理我都懂

1863
1:16:24.320 --> 1:16:25.320
但是为什幺要这幺干

1864
1:16:25.320 --> 1:16:27.320
对这些道理

1865
1:16:27.320 --> 1:16:30.320
我们从入行第一天开始就知道

1866
1:16:30.320 --> 1:16:33.320
而且甚至我还给人讲过这种课

1867
1:16:33.320 --> 1:16:35.320
但是我自己就是不高兴这幺干

1868
1:16:35.320 --> 1:16:37.320
对是吧

1869
1:16:37.320 --> 1:16:38.320
这就是人

1870
1:16:38.320 --> 1:16:39.320
这就不是电脑的

1871
1:16:39.320 --> 1:16:42.320
所以我觉得现在我们走向了这条路

1872
1:16:42.320 --> 1:16:44.320
我认为是一条正确的路

1873
1:16:44.320 --> 1:16:46.320
而且从好多年以前

1874
1:16:46.320 --> 1:16:49.320
大概起码是5到10年以前

1875
1:16:49.320 --> 1:16:52.320
比较正确的信息系统的设计方法

1876
1:16:52.320 --> 1:16:56.320
就是你要假定用户会经常的忘记密码

1877
1:16:56.320 --> 1:16:59.320
然后以此为基础来设计你的信息系统

1878
1:16:59.320 --> 1:17:03.320
所以像我们原来设计系统的时候

1879
1:17:03.320 --> 1:17:04.320
最重要的服务

1880
1:17:04.320 --> 1:17:05.320
比如设计钱的

1881
1:17:05.320 --> 1:17:09.320
绝对不能只是账户密码登录就能使用

1882
1:17:09.320 --> 1:17:10.320
一定不可以

1883
1:17:10.320 --> 1:17:12.320
你一定要有另一层的机制

1884
1:17:12.320 --> 1:17:15.320
比如说就是必须发手机验证码

1885
1:17:15.320 --> 1:17:17.320
你才能动钱

1886
1:17:17.320 --> 1:17:21.320
然后就是要把用户的密码的重置

1887
1:17:21.320 --> 1:17:23.320
要设计的非常方便

1888
1:17:23.320 --> 1:17:24.320
如果你做不到这些的话

1889
1:17:24.320 --> 1:17:27.320
其实你就是一个不称职的信息系统

1890
1:17:27.320 --> 1:17:29.320
你对人性了解不足

1891
1:17:29.320 --> 1:17:30.320
你过于理想化了

1892
1:17:30.320 --> 1:17:31.320
就这幺回事

1893
1:17:31.320 --> 1:17:33.320
但是在十几年以前不是这样的

1894
1:17:33.320 --> 1:17:34.320
十几年以前

1895
1:17:34.320 --> 1:17:36.320
那丢了密码就你自己负责

1896
1:17:36.320 --> 1:17:37.320
现在已经不是这样了

1897
1:17:37.320 --> 1:17:39.320
现在一个称职的产品经理

1898
1:17:39.320 --> 1:17:41.320
不可以这样想

1899
1:17:41.320 --> 1:17:43.320
所以我觉得这是时代的进步

1900
1:17:43.320 --> 1:17:45.320
我认为挺好的

1901
1:17:45.320 --> 1:17:46.320
好

1902
1:17:46.320 --> 1:17:49.320
第二个领域关于商用的那就不一样了

1903
1:17:49.320 --> 1:17:51.320
因为商业性的它意味着什幺

1904
1:17:51.320 --> 1:17:54.320
意味着可能因为小的失误

1905
1:17:54.320 --> 1:17:58.320
会导致大量的无辜的人受到损失

1906
1:17:58.320 --> 1:18:00.320
这个是要负法律责任的

1907
1:18:00.320 --> 1:18:01.320
所以这一块

1908
1:18:01.320 --> 1:18:04.320
那就得有很多其他的东西要做了

1909
1:18:04.320 --> 1:18:05.320
比如我举个例子

1910
1:18:05.320 --> 1:18:10.320
现在大家经常会碰到的所谓的两步认证

1911
1:18:10.320 --> 1:18:13.320
我先要用户名密码登录

1912
1:18:13.320 --> 1:18:15.320
然后我还要输一个token

1913
1:18:15.320 --> 1:18:17.320
一个专门的设备

1914
1:18:17.320 --> 1:18:19.320
或者一个专门的手机app

1915
1:18:19.320 --> 1:18:21.320
发给我的一串验证码

1916
1:18:21.320 --> 1:18:22.320
我才能登录

1917
1:18:22.320 --> 1:18:25.320
这个叫two-pass

1918
1:18:25.320 --> 1:18:27.320
就是两步登录

1919
1:18:27.320 --> 1:18:30.320
这个两步登录其实就是非常高的安全级别了

1920
1:18:30.320 --> 1:18:35.320
因为它很难被偷密码去访问了

1921
1:18:35.320 --> 1:18:39.320
这个东西其实最早就是游戏行业做的

1922
1:18:39.320 --> 1:18:41.320
网游行业做的

1923
1:18:41.320 --> 1:18:43.320
我跟彪伟以前待过的那家公司

1924
1:18:43.320 --> 1:18:46.320
曾经是国内最大的网游的公司

1925
1:18:46.320 --> 1:18:47.320
那家公司就

1926
1:18:47.320 --> 1:18:49.320
我们当时上班的时候

1927
1:18:49.320 --> 1:18:51.320
就会每个人发一个token

1928
1:18:51.320 --> 1:18:53.320
一个一个小的令牌

1929
1:18:53.320 --> 1:18:54.320
那个令牌就是你按一下按钮

1930
1:18:54.320 --> 1:18:56.320
会出现一个6位数字

1931
1:18:56.320 --> 1:18:57.320
你就输入这个6位数字

1932
1:18:57.320 --> 1:18:59.320
你就可以登录

1933
1:18:59.320 --> 1:19:03.320
这个当时很多公司还没有采用

1934
1:19:03.320 --> 1:19:04.320
但是我们已经在用了

1935
1:19:04.320 --> 1:19:08.320
就是因为网游是最早开始用这套东西来保护

1936
1:19:08.320 --> 1:19:10.320
那些游戏玩家的资产的

1937
1:19:10.320 --> 1:19:13.320
因为那网游其实一个账号很值钱

1938
1:19:13.320 --> 1:19:19.320
它可能是一个大老板在里面投了几百万的一个账号

1939
1:19:19.320 --> 1:19:22.320
那这玩意丢了人不跟你拼命

1940
1:19:22.320 --> 1:19:24.320
所以就有这幺一个token去保护它

1941
1:19:24.320 --> 1:19:26.320
那后面这些东西越来越普遍了

1942
1:19:26.320 --> 1:19:27.320
然后智能手机时代

1943
1:19:27.320 --> 1:19:30.320
有的时候就不发这个硬件的这个token了

1944
1:19:30.320 --> 1:19:32.320
直接做一个app就可以了

1945
1:19:32.320 --> 1:19:36.320
你像现在Github就可以用那个微软的那个token的那个app

1946
1:19:36.320 --> 1:19:37.320
我不知道你们用过没有

1947
1:19:37.320 --> 1:19:39.320
就Github的那个两步登录

1948
1:19:39.320 --> 1:19:43.320
用的是微软的一个通用的一个token生成的东西

1949
1:19:43.320 --> 1:19:45.320
我们用过

1950
1:19:45.320 --> 1:19:46.320
对所以这个东西呢

1951
1:19:46.320 --> 1:19:50.320
我觉得就属于是就企业级的保护

1952
1:19:50.320 --> 1:19:52.320
需要去考虑的一些问题

1953
1:19:52.320 --> 1:19:54.320
那越往上集中化程度越高

1954
1:19:54.320 --> 1:19:56.320
那个保护就得越强一些

1955
1:19:56.320 --> 1:19:58.320
到后面甚至可能不是一个人了

1956
1:19:58.320 --> 1:20:01.320
是几个人的token才能开启一个功能

1957
1:20:01.320 --> 1:20:04.320
所以我觉得这个问题吧

1958
1:20:04.320 --> 1:20:08.320
就是普通的民众自己个人的东西

1959
1:20:08.320 --> 1:20:12.320
你你你自己方便就好

1960
1:20:12.320 --> 1:20:16.320
不涉及钱的你就电话号码找回就行了

1961
1:20:16.320 --> 1:20:19.320
涉及钱的尽量用两步登录

1962
1:20:19.320 --> 1:20:24.320
这个保护好自己的资产财产就行了

1963
1:20:24.320 --> 1:20:27.320
但是如果你是企业里面的用户

1964
1:20:27.320 --> 1:20:30.320
或者是这个企业设计信息系统的

1965
1:20:30.320 --> 1:20:33.320
那那你就可能要考虑问题会多一些

1966
1:20:33.320 --> 1:20:37.320
就是由此可以看出日本那边的这个

1967
1:20:37.320 --> 1:20:41.320
政府的信息安全可能是非常糟糕的一种状态

1968
1:20:41.320 --> 1:20:45.320
对对这个案例我觉得

1969
1:20:45.320 --> 1:20:47.320
虽然我们也可能会有问题

1970
1:20:47.320 --> 1:20:50.320
但是这种集结的还是少

1971
1:20:50.320 --> 1:20:52.320
总觉得漏洞百出的样子

1972
1:20:52.320 --> 1:20:54.320
这得多少问题累积在一起

1973
1:20:54.320 --> 1:20:56.320
才会是这样一个案例出来

1974
1:20:56.320 --> 1:21:00.320
对尤其是那个道歉会真是完事

1975
1:21:00.320 --> 1:21:04.320
好的非常非常有趣的故事

1976
1:21:04.320 --> 1:21:07.320
而且背后的这些技术

1977
1:21:07.320 --> 1:21:10.320
我觉得还是非常有启发的

1978
1:21:10.320 --> 1:21:11.320
好呀

1979
1:21:11.320 --> 1:21:14.320
那我们今天差不多也聊了一个多小时了

1980
1:21:14.320 --> 1:21:17.320
大家看还有没有其他话题

1981
1:21:17.320 --> 1:21:19.320
对今天的几个话题

1982
1:21:19.320 --> 1:21:24.320
我觉得咱们这个听众

1983
1:21:24.320 --> 1:21:26.320
如果有什幺进一步的问题

1984
1:21:26.320 --> 1:21:28.320
比如尤其是像后面这个关于密码这个事情

1985
1:21:28.320 --> 1:21:33.320
这我估计所有的人都会有那个切身的体会的

1986
1:21:33.320 --> 1:21:35.320
也欢迎跟我们分享

1987
1:21:35.320 --> 1:21:39.320
我们这个节目是每周的周日

1988
1:21:39.320 --> 1:21:41.320
在这个B站首发的

1989
1:21:41.320 --> 1:21:47.320
然后在其他的这个podcast和音频的节目里面可以访问

1990
1:21:47.320 --> 1:21:49.320
欢迎大家去订阅

1991
1:21:49.320 --> 1:21:51.320
也欢迎大家给我们留言

1992
1:21:51.320 --> 1:21:55.320
好那要不今天我们就到这里

1993
1:21:55.320 --> 1:21:58.320
OK好谢谢拜拜

1994
1:21:58.320 --> 1:22:18.320
拜拜

